(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3143555,      64589]
NotebookOptionsPosition[   3131078,      64374]
NotebookOutlinePosition[   3131471,      64390]
CellTagsIndexPosition[   3131428,      64387]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Covid-19 Exploration", "Title",
 CellChangeTimes->{{3.793106005841469*^9, 3.793106016870804*^9}, {
   3.7941413372547197`*^9, 3.7941413984859543`*^9}, 3.7983907145414677`*^9, {
   3.798561156139247*^9, 
   3.798561165935157*^9}},ExpressionUUID->"e77c1826-4845-4332-9bff-\
c4605939e3cf"],

Cell["\<\
This notebook contains a basic computational exploration of Covid-19. The \
topics covered include some properties of the disease, it\[CloseCurlyQuote]s \
spread and precautionary measures put in place around the world. 
This exploration is mainly based on information and data from Wikipedia, \
Wikidata and the Wolfram Data Framework.\
\>", "Text",
 CellChangeTimes->{{3.79856089815781*^9, 3.798561106316348*^9}, {
  3.7987466685882607`*^9, 
  3.7987466701331863`*^9}},ExpressionUUID->"82919fd9-3291-4fad-bd47-\
cf518a2b23c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Wolfram", " ", "Alpha", " ", "summary", " ", "of", " ", "COVID"}], "-", 
    "19"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"WolframAlpha", "[", "\"\<Covid-19\>\"", "]"}]}]], "Code",
 CellChangeTimes->{{3.798390776268691*^9, 3.798390809601782*^9}, {
  3.7985596845335417`*^9, 3.798559696830037*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"954fa826-3c06-4b80-b9d0-3f31cda83509"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Covid-19", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Entity[\"Disease\", \"NovelCoronavirusDisease\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox["\"COVID-19\"", 
                $CellContext`TagBoxWrapper[
                "Entity" -> {$CellContext`DiseaseData, 
                   "NovelCoronavirusDisease"}]], Identity], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Definition", "scanner" -> "Data", "id" -> 
     "Definition:DiseaseData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"UMLS"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 InterpretationBox[
                  Cell[
                  "a viral respiratory disease caused by a novel coronavirus \
(SARS-CoV-2) first identified in Wuhan, Hubei Province, China"], 
                  TextCell[
                  "a viral respiratory disease caused by a novel coronavirus \
(SARS-CoV-2) first identified in Wuhan, Hubei Province, China"]]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Image", "scanner" -> "Data", "id" -> 
     "Image:DiseaseData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "imagesource", {}, {"https://phil.cdc.gov/Details.aspx?pid=23312"}], 
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Disease\", \
\"NovelCoronavirusDisease\"][EntityProperty[\"Disease\", \"Image\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1: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
h/t04bIHcHldWHRRaiq5kDA00j95uAefGo2LCj5SSGiKjAmXU45T1YrX1EXY
2lVGhdcmRFVHhR5H5VY5u/hv5KoyNBn38a2wsThRTDBWkPT280jKTo+Fw/H5
Bd5OzkUY9NHRwYb6qsqKkrqqytbKhjJMYX4G0kxDHZMYAzx7eKa6tD81KVVH
J1pBwXYHd7qhHlpdM+Lndbk/reuWlOjSlT0S4PS4rvJOc9unQ8eAp88BBg30
YC/R6Au0ZWfacuhw2Yz4Ggv+Ww82/6CCEUE2s1hiLguDJTAFFIyjUT/PvgQ9
bHPTN/BF7Y6emSJy2bLK0fKyLoJ81jw7NTdvsZSXS4uNPBjk5RviGRTkwRZe
l3raezCohmxkZlREXVNtz1gviYRKjQ/uqCa3lxKJSQmxTk4hJmZpLq4h2npo
d/c8B/s0Xe0yW1uijnbirp1FsnJ3QsJvJcIHUxKTfN1r6sv2+bhoGun39fSW
4/GtZWXH+nuKsLm4vGxMbk5daVVbDaW3pZVSXjrZ3Xp9tO98c01venKYiJjL
+s3+QkJ2XFsdt2xIEhYiCwpVCu6u1RR7WIgAZjhlUF+WwDoaMDYKsFisFSOC
uVq4xkGQ8dXb9ncerBVHLicrbYGT48RkIzj39uUc7QudzVTYInJx9m3/0FF4
RoWzV4CktKemQvpBj5wAn9zgwLzICFImIi48KAkW5eVki0qIqUpPRfr61ORk
1xTh8aUFkalRhaS89ubK82cmSksJSfB4Hw9Xd1vbGC+fZFfPhgR4jX8wQl0L
ISfbaG1OMTOI/fXnVjnlMx6+w7B4MjzaydVG2VijpK4sLjYy1N29ODPj0qGx
w51t+dmZoYEBHs7uEaFhWenJJfic8c6GJ2eOvDo7PkXKT5KVz1fXQ6hrs9mF
JgSSqaXRqKbZp6U95mT2uqEE9IiuOkMXQL1lJZj0NboNPucUIdLX5F7+fQfH
9mFxukSwFRqQa7z5COZgL1EZS6Be9urRzeNdrYNYXGNc4mRpeYKbU2zIAba6
j4XF1CKRnTgCJQ+TFReXEhOFSktBxsegY2LK0lInmiiHOpprasgjR/v6Bzpw
+FxyaSGluTEyOkpFRS0sBOpq42CupF6ejEC5HwhXUEDr65WZGBapKqZt3Vwv
IDFp71Lh7DxQjN/Bu4FQS+o/MgBLiC7PzekkEUfrapqKiIkR0NjICEtzK3tL
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
9noMxt/PB12E7z/Uc/vc5OXy0nYXz1ol3eI9MpXCKkccfX1+275vw05KBOze
oaNXLp65+uTu66WlabbWz9Y3X79G6mlHcW1sVZI7oqk+pac7pqWN27H7qE8g
cO8h2wxcoC/Or2QPrvbEWyPpWGuEIGvt1vw4g7XGqOXUT3BaPdFWm2wvAu+u
3IXpWZbIahN3S6Tzi3vz8DpLCI+VET7fOHOlp6405EBL5MFcY+0YWan9O3fa
8vJnePpjY+LLczJq8KiK/ILMxIyUxJxwaFI8DBkYEBrl5xvuYGMtsEtv468u
ooKl4aEXuzv762qaW+rrOxpOnB5/d+/6rZr6Ag3DQkH5Kkm1Rh1z+B6Rg1w8
5fvdj+fiqJevAotzHz+/e/7xE3Xl6q7pUjeXbCnJYVOTq/vsz5uZjxsalcnI
n4yHAY+esg2m5S64f//8z/96rJ65vyBI5XgLGcv5sRxLg/7nu4YERIqoHBs+
6F4Rmy1cPsoKwINbwNyHxVMTt4ryj8ZA8bqaqTLS+zZt1v11na+Onr+Febib
IwkBx8Qnxh+EYrPwsdEp0QkpyfAkUnpKhIGu7S+/Ru7eGyUgXGDvcLevb7Ch
prqmpLW36drlU2e72io9fQ5A/kDtES9V1iSZm5Pc9p0g5X85dvj92CjYMvTD
h5dXr6xIKzYN/vm4GhqMNTNstLcYc9/XbWk64rL/aFjI5+4e8NIfGngH6cIP
RlX/g/G9NfRXjRoMvVA5sfvlygrg2bFTZQf8CNZ2oYpKqr/8YrhrF5Wt4Tx9
NDvQdysrs9XaGictVaKjnSIv7y8mGm5s6KGraakoHulsF+vkkh0aPUjprimv
bWhsam9qONve0hIGjVrPXcgv2WPmQNQ1aoiNPNPTfu/y2avnTjy5dfFUW+Nk
bl6do9OxIGiVjeXzjjrg1ing1R3g8wvg3Wva1PGzpSXA50/gjVpsDQWsSPr8
59GhWy21Zwg5x7Lg46nx10k46tEjnKb3C2DGL+uHiPf9l+N7X8S/IshcviV1
folTnwZGD4HXL+cunj/d1IiBhiY4Oj4dGh5OSk2RlmthW3wCwsXCYp3GpmRd
7RwD7arw4EZEooemQpilUcp+pwZE1lR7b09d49mTx0+O9r8/djRfRz9r3bYh
Ge0+ed06TYMpdA7jzpUXk5MXe3quT4xeGu58MtQzlpV6uQDdnxj+5yAFmH8O
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
5cnxYDKDSikAyLI6eL0fBttmXQ==
                "], {{0, 84}, {150, 0}}, {0, 255}, ColorFunction -> RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", ImageResolution -> {96, 96}, 
                Interleaving -> True], Selectable -> False], DefaultBaseStyle -> 
              "ImageGraphics", ImageSizeRaw -> {150, 84}, 
              PlotRange -> {{0, 150}, {0, 84}}], Annotation[#, 
              Association[
              "URL" -> 
               "http://www.wolframcdn.com/waimage/hset110/fae/\
fae44ac1e065f39a7dd061617b7daa7e_v001s.jpg", "Dimensions" -> {150, 84}, 
               "Source" -> "https://phil.cdc.gov/Details.aspx?pid=23312", 
               "Popup" -> 
               "hset110/fae/fae44ac1e065f39a7dd061617b7daa7e_v001ms.jpg"], 
              "Image"]& ], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Medical specialty", "scanner" -> "Data", "id" -> 
     "MedicalSpecialty:DiseaseData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"TheWikimediaFoundationIncWikipedia"}],
          "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              
              GridBox[{{"\"infectious disease\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Temporal characteristics", "scanner" -> "Data", "id" -> 
     "TemporalCharacteristics:DiseaseData", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"TheWikimediaFoundationIncWikipedia"}],
          "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Disease\", \
\"NovelCoronavirusDisease\"], {EntityProperty[\"Disease\", \
\"ExposureToDiseaseOnset\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"exposure to disease onset\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TemplateBox[{
                    TagBox["2", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2", "SRString" -> "2"]], 
                    TagBox["14", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "14", "SRString" -> "14"]], 
                    RowBox[{
                    StyleBox["(", 
                    GrayLevel[0.6]], 
                    TagBox["2", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2", "SRString" -> "2"]], 
                    StyleBox[
                    FormBox[
                    "\"\[MediumSpace]to\[MediumSpace]\"", TraditionalForm], 
                    GrayLevel[0.6]], 
                    TagBox["14", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "14", "SRString" -> "14"]], 
                    StyleBox[")", 
                    GrayLevel[0.6]]}]}, "Interval", DisplayFunction -> (#3& ),
                     InterpretationFunction -> (RowBox[{"Interval", "[", 
                    RowBox[{"{", #, ",", #2, "}"}], "]"}]& )], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"days\"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Right}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Common causes", "scanner" -> "Data", "id" -> 
     "CommonCauses:DiseaseData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"TheWikimediaFoundationIncWikipedia"}],
          "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              
              GridBox[{{"\"SARS-CoV-2 virus\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Transmission", "scanner" -> "Data", "id" -> 
     "Transmission:DiseaseData", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Disease\", \
\"NovelCoronavirusDisease\"], {EntityProperty[\"Disease\", \"Transmission\"], \
EntityProperty[\"Disease\", \"BasicReproductionNumber\"]}, \
\"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"transmission\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 "\"airborne droplet\""}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"basic reproduction number\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TemplateBox[{
                   TagBox["1.4", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.4", "SRString" -> "1.4"]], 
                   TagBox["2.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.5", "SRString" -> "2.5"]], 
                   RowBox[{
                    StyleBox["(", 
                    GrayLevel[0.6]], 
                    TagBox["1.4", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.4", "SRString" -> "1.4"]], 
                    StyleBox[
                    FormBox[
                    "\"\[MediumSpace]to\[MediumSpace]\"", TraditionalForm], 
                    GrayLevel[0.6]], 
                    TagBox["2.5", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.5", "SRString" -> "2.5"]], 
                    StyleBox[")", 
                    GrayLevel[0.6]]}]}, "Interval", DisplayFunction -> (#3& ),
                   InterpretationFunction -> (RowBox[{"Interval", "[", 
                    RowBox[{"{", #, ",", #2, "}"}], "]"}]& )]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["definitions", {"count" -> "1"}, {
       XMLElement[
       "definition", {
        "word" -> "basic reproduction number", "desc" -> 
         "the expected number of new cases of an infection caused by an \
infected individual"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Typical treatment", "scanner" -> "Data", "id" -> 
     "TypicalTreatment:DiseaseData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"TheWikimediaFoundationIncWikipedia"}],
          "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              
              GridBox[{{"\"supportive care\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Prevention", "scanner" -> "Data", "id" -> 
     "Prevention:DiseaseData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"TheWikimediaFoundationIncWikipedia"}],
          "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox[
                  RowBox[{"\"handwashing\"", 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    "\"avoiding infected people\""}], 
                  LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                  0]}}, GridBoxAlignment -> {
                "Columns" -> {Left}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Common symptoms", "scanner" -> "Data", "id" -> 
     "CommonSymptoms:DiseaseData", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"DiseaseData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"UMLS"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Disease\", \
\"NovelCoronavirusDisease\"][EntityProperty[\"Disease\", \
\"CommonSymptoms\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"\"fever\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], "\"cough\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"shortness of breath\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www5a.wolframalpha.com/sources/\
DiseaseDataSourceInformationNotes.html", "text" -> "Disease data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "10", "datatypes" -> 
    "Disease", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.278", 
    "parsetiming" -> "0.11800000000000001", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSP20231b0ed11ac3d3594000004h7b55hhea5g5aa2", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "36", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa20241b0ed11ac3d35940000033675b20cbgb9agi2574324192558130273", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2020, 5, 17, 21, 47, 35.818839`8.306686484519547}, "Line" -> 
    51, "SessionID" -> 29108639064962778423}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Covid-19"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1312., {376., 382.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Output",
 CellChangeTimes->{3.798390785749298*^9, 3.798495519633613*^9, 
  3.798559307357623*^9, 3.798559700114875*^9, 3.798561448011874*^9, 
  3.798561600133567*^9, 3.7987370329877253`*^9, 3.798737255856121*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"a865407a-f1ba-41e4-9ea9-9b863e54382e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wikipedia", "Section",
 CellChangeTimes->{{3.793105989651456*^9, 3.7931060209190106`*^9}, {
  3.793109627904931*^9, 3.793109628263386*^9}, {3.7931132125852256`*^9, 
  3.7931132141230664`*^9}, {3.798390707945075*^9, 3.798390726688531*^9}, {
  3.7983920389290953`*^9, 3.798392064478063*^9}, {3.798399261520561*^9, 
  3.7983992647485857`*^9}, {3.798559712336108*^9, 
  3.798559733423954*^9}},ExpressionUUID->"da6eb7c6-4d31-433d-910e-\
7cc828c78f77"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"search", " ", "for", " ", "COVID"}], "-", "19", "-", 
    RowBox[{"related", " ", "articles", " ", "on", " ", "Wikipedia"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Panel", "/@", 
   RowBox[{"WikipediaSearch", "[", "\"\<COVID-19\>\"", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.7983911046460876`*^9, 3.7983912151131487`*^9}, {
  3.798391562700385*^9, 3.798391595844397*^9}, {3.798542345369873*^9, 
  3.798542394507094*^9}, {3.798547782573352*^9, 3.798547792914312*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"f782353e-c4b9-4634-9909-d5d4d6308b35"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   PanelBox["\<\"CoViD 19\"\>"], ",", 
   PanelBox["\<\"COVID-19 testing\"\>"], ",", 
   PanelBox["\<\"COVID-19 vaccine\"\>"], ",", 
   PanelBox["\<\"COVID-19 apps\"\>"], ",", 
   PanelBox["\<\"COVID-19 drug development\"\>"], ",", 
   PanelBox["\<\"COVID-19 drug repurposing research\"\>"], ",", 
   PanelBox["\<\"COVID-19 in pregnancy\"\>"], ",", 
   PanelBox["\<\"COVID-19 surveillance\"\>"], ",", 
   PanelBox["\<\"COVID-19 Case-Cluster-Study\"\>"], ",", 
   PanelBox["\<\"COVID-19 Solidarity Response Fund\"\>"], ",", 
   PanelBox["\<\"COVID-19 Congressional Oversight Commission\"\>"], ",", 
   PanelBox["\<\"COVID-19 crisis\"\>"], ",", 
   PanelBox["\<\"COVID-19 in India\"\>"], ",", 
   PanelBox["\<\"COVID-19 in the United States\"\>"], ",", 
   PanelBox["\<\"COVID-19 Hospital\"\>"], ",", 
   PanelBox["\<\"COVID-19 by country\"\>"], ",", 
   PanelBox["\<\"COVID-19 in the UK\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Italy\"\>"], ",", 
   PanelBox["\<\"COVID-19 in Spain\"\>"], ",", 
   PanelBox["\<\"COVID-19 in Canada\"\>"], ",", 
   PanelBox["\<\"COVID-19 conspiracy\"\>"], ",", 
   PanelBox["\<\"COVID-19 pandemic in mainland China\"\>"], ",", 
   PanelBox["\<\"Covid-19 in Australia\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Germany\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Daegu\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Sweden\"\>"], ",", 
   PanelBox["\<\"COVID-19 in France\"\>"], ",", 
   PanelBox["\<\"COVID-19 in NY\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in South Africa\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Poland\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Russia\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Mexico\"\>"], ",", 
   PanelBox["\<\"Covid-19 virus\"\>"], ",", 
   PanelBox["\<\"COVID-19 in Eire\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in the Philippines\"\>"], ",", 
   PanelBox["\<\"COVID-19 Pandemic Unemployment Payment\"\>"], ",", 
   PanelBox["\<\"COVID-19 in New Zealand\"\>"], ",", 
   PanelBox["\<\"COVID-19 in Europe\"\>"], ",", 
   PanelBox["\<\"COVID-19 in Pakistan\"\>"], ",", 
   PanelBox["\<\"COVID-19 in Bangladesh\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Brazil\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Turkey\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Japan\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Malaysia\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in the Czech Republic\"\>"], ",", 
   PanelBox["\<\"COVID-19 recession\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Singapore\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Indonesia\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Belgium\"\>"], ",", 
   PanelBox["\<\"COVID-19 outbreak in Greece\"\>"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.798391121371005*^9, {3.7983911575317574`*^9, 3.798391215930544*^9}, {
   3.798391573209066*^9, 3.798391596402896*^9}, 3.7984966928744793`*^9, {
   3.798542366690445*^9, 3.798542395464952*^9}, {3.798547786652648*^9, 
   3.7985477934800787`*^9}, 3.7985614538658237`*^9, 3.798561601350391*^9, 
   3.798737041203225*^9, 3.798737256603101*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"2603b776-69c9-4668-a3c6-36cb0b4018b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "summary", " ", "of", " ", "Wikipedia", " ", "article", " ", "on", " ", 
    "\"\<CoViD 19\>\""}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Style", "[", 
   RowBox[{
    RowBox[{"StringReplace", "[", 
     RowBox[{
      RowBox[{"WikipediaData", "[", 
       RowBox[{"\"\<CoViD 19\>\"", ",", " ", "\"\<SummaryPlaintext\>\""}], 
       "]"}], ",", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"\"\<.\>\"", " ", "~~", " ", 
         RowBox[{"w", ":", "LetterCharacter"}]}], ")"}], " ", 
       "\[RuleDelayed]", " ", 
       RowBox[{"\"\<.\\n\\n\>\"", "<>", "w"}]}]}], "]"}], ",", " ", 
    "\"\<Text\>\"", ",", " ", "15"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.7983912247335987`*^9, 3.79839125093722*^9}, {
  3.798391486541396*^9, 3.798391538076632*^9}, {3.7983920699147053`*^9, 
  3.798392087846757*^9}, {3.798392214782049*^9, 3.798392265513126*^9}, {
  3.7984997825237427`*^9, 3.7984997865812273`*^9}, {3.7985000334262123`*^9, 
  3.798500034917684*^9}, {3.798500428453533*^9, 3.79850048615411*^9}, {
  3.798500549535843*^9, 3.798500565635745*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"b47ca147-5005-48ef-b6e8-77c0f0c20459"],

Cell[BoxData[
 StyleBox["\<\"Coronavirus disease 2019 (COVID-19) is an infectious disease \
caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). It \
was first identified in December 2019 in Wuhan, China, and has since spread \
globally, resulting in an ongoing pandemic. As of 17 May 2020, more than 4.68 \
million cases have been reported across 188 countries and territories, \
resulting in more than 313,000 deaths. More than 1.72 million people have \
recovered.\\n\\nCommon symptoms include fever, cough, fatigue, shortness of \
breath, and loss of smell and taste. While the majority of cases result in \
mild symptoms, some progress to an unusual form of acute respiratory distress \
syndrome (ARDS) likely precipitated by cytokine storm, multi-organ failure, \
septic shock, and blood clots. The time from exposure to onset of symptoms is \
typically around five days but may range from two to fourteen days.\\n\\nThe \
virus is primarily spread between people during close contact, most often via \
small droplets produced by coughing, sneezing, and talking. The droplets \
usually fall to the ground or onto surfaces rather than travelling through \
air over long distances. Less commonly, people may become infected by \
touching a contaminated surface and then touching their face. It is most \
contagious during the first three days after the onset of symptoms, although \
spread is possible before symptoms appear, and from people who do not show \
symptoms. The standard method of diagnosis is by real-time reverse \
transcription polymerase chain reaction (rRT-PCR) from a nasopharyngeal swab. \
Chest CT imaging may also be helpful for diagnosis in individuals where there \
is a high suspicion of infection based on symptoms and risk factors; however, \
guidelines do not recommend using CT imaging for routine \
screening.\\n\\nRecommended measures to prevent infection include frequent \
hand washing, maintaining physical distance from others (especially from \
those with symptoms), quarantine (especially for those with symptoms), \
covering coughs, and keeping unwashed hands away from the face. In addition, \
the use of a face covering is recommended for those who suspect they have the \
virus and their caregivers. Recommendations for face covering use by the \
general public vary, with some authorities recommending for them, some \
recommending against them, and others requiring their use. There is limited \
evidence for or against the use of masks (medical or other) in healthy \
individuals in the wider community.\\n\\nAccording to the World Health \
Organization, there are no available vaccines nor specific antiviral \
treatments for COVID-19. On 1 May 2020, the United States gave Emergency Use \
Authorization to the antiviral remdesivir for people hospitalized with severe \
COVID\:201119. Management involves the treatment of symptoms, supportive \
care, isolation, and experimental measures. The World Health Organization \
(WHO) declared the COVID\:201119 outbreak a Public Health Emergency of \
International Concern (PHEIC) on 30 January 2020 and a pandemic on 11 March \
2020. Local transmission of the disease has occurred in most countries across \
all six WHO regions.\"\>", "Text",
  StripOnInput->False,
  FontSize->15]], "Output",
 CellChangeTimes->{{3.798391508052415*^9, 3.798391539261997*^9}, 
   3.7983920892424*^9, {3.7983922158049173`*^9, 3.798392266545527*^9}, 
   3.798496728758257*^9, {3.798500433742565*^9, 3.798500487499968*^9}, 
   3.798559332415906*^9, 3.798561456129121*^9, 3.798561602077323*^9, 
   3.798737042020961*^9, 3.798737257425988*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"e2a7bbaf-a401-4140-a5c2-6f29a7ccd968"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"wordcloud", " ", "of", " ", "the", " ", "Covid"}], "-", 
    RowBox[{"19", " ", "Wikipedia", " ", "article"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"WordCloud", "@", 
   RowBox[{"DeleteStopwords", "@", 
    RowBox[{"TextWords", "@", 
     RowBox[{"WikipediaData", "[", 
      RowBox[{"\"\<CoViD 19\>\"", ",", " ", "\"\<ArticlePlaintext\>\""}], 
      "]"}]}]}]}]}]], "Code",
 CellChangeTimes->{{3.79849683337008*^9, 3.798496855836412*^9}, {
   3.798496895326562*^9, 3.798496942444661*^9}, {3.798497026915004*^9, 
   3.7984970427335987`*^9}, {3.798497280768862*^9, 3.798497280900426*^9}, 
   3.7984997461233397`*^9},
 CellLabel->"In[54]:=",ExpressionUUID->"3c318e20-25c3-4adc-8d9e-29a835085865"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"COVID\:201119\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1767676767676768],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"symptoms\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12065095398428732`],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {-0.5, -41.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"disease\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.14029180695847365`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {9.5, 52.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"people\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.14029180695847365`],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {-0.5, -84.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"respiratory\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0841750841750842],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {-0.5, 90.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"infection\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0925925925925926],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {-0.5, 118.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"Coronavirus\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07295173961840629],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {4.5, -124.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"virus\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12065095398428732`],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {115.5, 125.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"COVID-19\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07575757575757576],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], 
    {-7.5, 147.5}, Center, Automatic], InsetBox[
    StyleBox["\<\"Health\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08978675645342313],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {-113.5, -147.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"SARS-CoV-2\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05611672278338945],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {10.5, -148.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2020\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08978675645342313],
     FontColor->RGBColor[1, 0.75, 0]], {-126.5, 47.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"syndrome\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.058922558922558925`],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {-120.5, 109.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"treatment\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06453423120089788],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {120.5, 157.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"%\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.13187429854096522`],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {103.5, -84.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"infected\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.058922558922558925`],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {-120.5, 73.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"severe\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0813692480359147],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {126.5, 80.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"recommended\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {11.5, -166.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cases\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07856341189674523],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {-127.5, -69.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"China\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.058922558922558925`],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {136.5, 40.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Clinical\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04769921436588104],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {138.5, -33.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"available\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0420875420875421],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {-117.5, -90.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"acute\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05611672278338945],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {-138.5, -33.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Research\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {113.5, 97.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"patients\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0420875420875421],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {-113.5, -107.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"recommends\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {107.5, -107.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"mortality\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {138.5, -51.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"transmission\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.5750747800184488, 0.4174563783225715, 0.8498130499538777]], {140.5, 59.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"death\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04769921436588104],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {-95.5, 125.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"March\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.044893378226711564`],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {145.5, -72.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"include\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0420875420875421],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {110.5, -123.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"study\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04769921436588104],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {151.5, -90.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"vaccine\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {110.5, -140.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"pneumonia\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], {-142.5, -50.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"individuals\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {-0.5, 169.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"found\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.044893378226711564`],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {-104.5, 143.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"spread\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {-63.5, -166.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"National\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03647586980920314],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {90.5, -165.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"suggested\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {-75.5, 169.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"medications\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.8510135028964549, 0.47400900193096995`, 0.018912152606809424`]], {-110.5, 91.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Cause\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {-144.5, 128.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"risk\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05331088664421998],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {71.5, -16.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"remdesivir\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.6102054708420535, 0.39696347534213544`, 0.7619863228948663]], {-116.5, -167.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"number\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {-130.5, 160.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"guidelines\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.8926354502560807, 0.366046824615879, 0.15658862564020168`]], {145.5, -155.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"medical\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {-151.5, 143.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"distress\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {147.5, -169.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"days\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0420875420875421],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {157.5, -120.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Wuhan\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {53.5, 175.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"evidence\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[0.5788038738141875, 0.715, 0.049249615145579635`]], {-87.5, 179.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"healthcare\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[0.6672593867853922, 0.7205288207539324, 0.]], {-99.5, -121.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"percent\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {-2.5, -179.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ACE2\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03647586980920314],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {-164.5, -106.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"high\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0420875420875421],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {93.5, 176.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"surfaces\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.3383114092015346, 0.5643508726387724, 0.8209736910418415]], {69.5, -179.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"antibody\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.26512246998569167`, 0.6229020240114467, 0.73314696398283]], {161.5, -138.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"testing\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {130.5, 175.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"reported\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[0.7989994773739094, 0.735166608597101, 0.]], {-133.5, 173.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cytokine\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.922066817647527, 0.5213778784316846, 0.08286013588277422]], {-165.5, -121.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"common\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], {-108.5, -179.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"blood\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03647586980920314],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {166.5, 97.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"deaths\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {-163.5, -166.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"develop\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.6670481226429111, 0.3638052617916352, 0.6198796933927223]], {176.5, -15.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"alveolar\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.8335801463353031, 0.3487839707329394, 0.3481997561078282]], {-176.5, -18.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"use\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05331088664421998],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {176.5, 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"data\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {-175.5, -3.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"contact\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {-0.5, 183.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"hospital\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[0.7658565873730018, 0.358, 0.4582975578876895]], {-44.5, -181.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"United\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[0.9307395679624266, 0.7498043964402695, 0.]], {176.5, 20.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"States\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {-175.5, 29.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"time\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {-177.5, 10.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"including\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[
      0.9107287510704583, 0.33890687339431275`, 0.20182187767614543`]], {-42.5, 187.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"used\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03647586980920314],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {-169.5, -89.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"studies\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.8774935098648088, 0.34000129802703827`, 0.2750108168919853]], {40.5, 188.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"lung\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03647586980920314],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {-182.5, -33.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"public\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {-179.5, 68.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"using\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {-179.5, 84.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"damage\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[
      0.9986489531525362, 0.7507447657626809, 0.0036478264881522893`]], {36.5, -190.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"known\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[0.15725938678540247`, 0.715, 0.5857607804549424]], {109.5, -181.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"higher\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.9840111653093676, 0.677555826546838, 0.04316985366470745]], {-114.5, 189.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"face\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03647586980920314],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {182.5, 35.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"rate\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03928170594837262],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {-181.5, 43.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"hands\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[0.4567336004533182, 0.4884598397280091, 0.85]], {120.5, 188.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"heart\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {181.5, 111.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"World\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.8633598745697435, 0.40996018814538476`, 0.08339968642435877]], {180.5, 123.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"CDC\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {71.5, 23.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"women\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[0.4177882075393331, 0.715, 0.25417864494993975`]], {79.5, 191.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"April\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {183.5, -31.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"failure\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[
      0.8949268664259606, 0.5032845776173072, 0.05843417978336459]], {-126.5, 8.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"based\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[0.529922539669161, 0.44454647619850335`, 0.85]], {-179.5, -134.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2019\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {179.5, 136.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"care\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03647586980920314],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {-169.5, 155.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"trials\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[
      0.9603267270590103, 0.5591336352950514, 0.10711783694067224`]], {-83.5, 5.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"fever\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[
      0.6453361616656581, 0.37647057236169945`, 0.6741595958358548]], {182.5, -44.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"U.S.\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.028058361391694726`],
     FontColor->RGBColor[0.7042770479220728, 0.358, 0.5530353108891188]], {180.5, -59.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"men\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.033670033670033676`],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {-0.5, -191.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"died\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[
      0.8064401951137368, 0.3542119609772526, 0.39343300814377197`]], {-52.5, -19.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"new\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {-181.5, -63.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"due\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.025252525252525256`],
     FontColor->RGBColor[
      0.2198892179497479, 0.6590886256402017, 0.6788670615396974]], {33.5, 1.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"1\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0308641975308642],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {-9.5, 0.5},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Helvetica"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{-198., 198.}, {-198., 197.}}]], "Output",
 CellChangeTimes->{
  3.798496835027565*^9, {3.798496904878908*^9, 3.798496948056898*^9}, 
   3.79849704819884*^9, 3.798497285287999*^9, 3.7985593666941137`*^9, 
   3.798561461813974*^9, 3.79856160727728*^9, 3.798737047130975*^9, 
   3.798737261987836*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"2e4e386e-83d3-4b5b-a01c-25c7a9817851"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "daily", " ", "page", " ", "hits", " ", "of", " ", "the", " ", "article"}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"DateListPlot", "[", 
   RowBox[{
    RowBox[{"WikipediaData", "[", 
     RowBox[{"\"\<CoViD 19\>\"", ",", " ", "\"\<DailyPageHits\>\""}], "]"}], 
    ",", " ", 
    RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.798497081377418*^9, 3.798497118010436*^9}, {
   3.798497293760231*^9, 3.798497389161775*^9}, 3.798497926538403*^9, {
   3.798499751145567*^9, 3.798499754986505*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"1a1ac13a-c086-4cc7-a035-862b9eaa635d"],

Cell[BoxData[
 GraphicsBox[{{}, {{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw91AtIFFEYBeApe5kVo5lZCY5CIFGwVIag6ai1qZktQi/JGiQhCGrJCAKh
IbJEghYpEKKYkMpoqzWkCEKnMDJqaaEwkqK17GGZTprlIyvv2XNbWM5+/Hce
h507KRUHSiunKoqye/IrcvITurO2Lxe/jAZdxDvpuoCwa042feGasLFG+sxF
YZ8hXdIobNdJt1rCTot0F47X3v6ftwh7onMiNncFhc1VtN71QjhQTiv9XcLh
k7Sd80FYvUVrfx1h/TUdWD0o7J2h0zt+CFsu2kkeFg6V0dabn+hfI9e/xHrX
TenxIfR/Jb1yDP2jciMOe2F7Be1LgJ1ttLcV1o7RljmO/n7aTB1F/055fDkc
UPLouCiR4WW0JzhDpLqFzmpWRepHab+yWKT3Kl17fYFI6zkd8sWKDE1IV8Uh
0/Ijbu/HelcpvScpXqRRTSfeTxDpu0z3PEsUaYfopiHMnTE5d8Pa0nURH8pe
KNKzme4owfXMI7TdgOsFGun4MO43HJTzTlgdof3puH89dT3/3ytz0b+YVkdh
67Cct8Ehix4JRiOf0J6RWeg/TDeVzUb/ZHfErrSZ6F9IJ/ZMQ/8q6ZTp6H+e
3p4Bax20thz/p2eQrr00Bf2TNkRcsAQOuGm9+I+Ox4x2/BPC6jnaiIH1h7Sd
BXsHaLMGthYV8Pm78Vs4lC/thZX9tO7D8+dqoL3N2B/GAzmvh3198vjI/rET
CtnvOPaXo9Nq+y9hbR/tZGHuOUsHqrG/zDZaf/RdONBLhyowD88vYt8kWM2m
vZnY7/peOU+O7P/6IrkfcT7rHm09HUD/j7SmwErsRvm+60f/TNp8jPeLUUmH
T2C97zRtFHxD/7vSwS/o/57WCnrRf14x527MPRnSW2GzgrZ39qH/KTqc9xX9
b0v3Yr3aTWsZWK/HbOL5uj+jfzqtH/yk/wM/NpVV
       "]]}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{3.7904544*^9, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameStyle->Automatic,
  FrameTicks->FrontEndValueCache[{{Automatic, Automatic}, {
      Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
      Charting`DateTicksFunction[
      Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, {{
     Automatic, Automatic}, {{{3.789504*^9, 
        FormBox[
         StyleBox["\"Feb\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7920096*^9, 
        FormBox[
         StyleBox["\"Mar\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.794688*^9, 
        FormBox[
         StyleBox["\"Apr\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.79728*^9, 
        FormBox[
         StyleBox["\"May\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7999584*^9, 
        FormBox[
         StyleBox["\"Jun\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}}, {{3.789504*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7920096*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.794688*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.79728*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}, {3.7999584*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.013888888888888888`, 0.}, 
        Directive[]}}}}],
  GridLines->FrontEndValueCache[{Charting`ScaledTickValues[
      ((Transpose[{#, 
        Table[
         Directive[
          GrayLevel[0.4, 0.5], 
          AbsoluteThickness[1], 
          AbsoluteDashing[{1, 2}]], {
          Length[#]}]}]& )[
       Part[
        Select[
         Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}][
          SlotSequence[1]], And[
          FreeQ[#, 
           Alternatives["", 
            Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 1]]& )[
       SlotSequence[1]], {Identity, Identity}]& , Automatic}, {{{3.789504*^9, 
       Directive[
        GrayLevel[0.4], 
        Opacity[0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {3.7920096*^9, 
       Directive[
        GrayLevel[0.4], 
        Opacity[0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {3.794688*^9, 
       Directive[
        GrayLevel[0.4], 
        Opacity[0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {3.79728*^9, 
       Directive[
        GrayLevel[0.4], 
        Opacity[0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {3.7999584*^9, 
       Directive[
        GrayLevel[0.4], 
        Opacity[0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}}, Automatic}],
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  Method->{
   "NoShowPlotTheme" -> "Detailed", "OptimizePlotMarkers" -> True, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{3.7904544*^9, 3.798576*^9}, {0, 426027.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{{}, Automatic}]], "Output",
 CellChangeTimes->{
  3.798497101213141*^9, 3.798497264599678*^9, {3.798497296224379*^9, 
   3.798497347287568*^9}, 3.798497927334366*^9, 3.798499770336699*^9, 
   3.798543101446453*^9, 3.798559372948759*^9, 3.798561463194059*^9, 
   3.7985616082128973`*^9, 3.798737048357679*^9, 3.7987372626659327`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"45834ba5-f30f-4de4-8706-8a17975443f0"]
}, Open  ]],

Cell["\<\
We can also see a breakdown of how people have been accessing the article. \
Comparably way fewer people use the Wikipedia mobile app and that\
\[CloseCurlyQuote]s probably why that line is mostly flat for the entire \
period. Mobile web and Desktop views were initially the same but mobile grew \
faster in March. Views from Mobile and Desktop are now similar again in \
mid-May, though mobile is still slightly above. This could be because people \
are generally using their phones more frequently than their laptops each day.\
\>", "Text",
 CellChangeTimes->{{3.7984976785264053`*^9, 3.7984978211166286`*^9}, {
  3.798497977145495*^9, 
  3.7984980459412193`*^9}},ExpressionUUID->"f2e0cbbb-208b-4c50-a165-\
e92c1dc7ff1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "breakdown", " ", "of", " ", "page", " ", "views", " ", "by", " ", 
    "access", " ", "types"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"accessData", " ", "=", " ", 
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", " ", "\[Rule]", " ", 
           RowBox[{"WikipediaData", "[", 
            RowBox[{"\"\<CoViD 19\>\"", ",", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<DailyPageHits\>\"", ",", " ", 
               RowBox[{"\"\<Access\>\"", " ", "\[Rule]", " ", "#"}]}], 
              "}"}]}], "]"}]}], ")"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Desktop\>\"", ",", " ", "\"\<MobileApp\>\"", ",", " ", 
          "\"\<MobileWeb\>\""}], "}"}]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"DateListPlot", "[", 
     RowBox[{"accessData", ",", " ", 
      RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", " ", 
      RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.7984974995441923`*^9, 3.798497688835184*^9}, {
  3.798497828736948*^9, 3.7984979174927063`*^9}, {3.798498207679452*^9, 
  3.7984982083486023`*^9}, {3.798499418645173*^9, 3.798499420776664*^9}, {
  3.798499801787163*^9, 3.798499821594521*^9}, {3.798499936842993*^9, 
  3.798499950573442*^9}, {3.7985005343096*^9, 3.798500538341107*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"ae1e3e82-1ef3-47d9-9fc9-b0678b11ffc5"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw11AlIVEEcBvBBIehkI40Cwa0oJIgeRBFY+jzySmkRMiisp2AIQS6FZRA5
FaGY1GYHUoQPhMLO7SALkl6WJJi0FJmm6XpkB5amHXZYOd9+s7DM/vjP/He+
x8xbkF+UXRAmhNg2+VXj5CdQv3YoAb9iTphq6NO+VqtszIij/TXK1irt6kpl
n6WddkzZqdCOQL+R29peW9ndo515UdkzNV6vb1CWK2g52Kjsz9UueawcLNN+
2qrsuqnXx3cqm120HRVU9k4xQ3Zf6lW2Ddos6lcObKbtM7A4Qsur6Gdcp8XR
18jfQQfL3iF/eAL73XiL/Mtoe8kg8m+ig4Ww+xBtLcd6zxXty9ivbKOdRdiv
XySyvmsE+Zcm6v2OIf9G2l/8B/lLaV9EuBq9dbRT/hf5X9Cuw1+Rf4J2Z3xH
/pikkAunCTUa2bSncgL599Pteaj7LmjnhKnRCdDWln/I/4sWxT+Rf3FyyIEx
2LOBNkvQX+6jrWe/kb+WNh7+QP5WWqSPI/+47tcMmwvX8Xmc/aLszaRFLWzv
oY29ofw2LetGkb+Ftkth45tefwu2olM4f2xY2ZdO24kflZ3dtPvuJ+Q/T4tX
n5G/mbY6h5B/lHa6sV5GpXJ9MuxPoeV2nJ+glxY1A8h/jnY8sNmk50e/R/5h
XW9AP3t+Gs/jQdQDSbTZhPModtLyCc6zUU1b5TiPVqP2gT7kH6LFKfy/Mzed
rsB9GjFpGRk6/zvo4ADWe07r+ZHoLx/o+aldyP+BtrNQD87J4PPJw31xxdGy
HjYLaXO4B/mrtLd2I/992nmE+x0Y1PWTuN9i9nrWqzuQP5a2ZqK/VUDLN9if
77ien4t+zj1dz2lH/n5aRLch/6xMet5L5F9NOy2wzNf1KuzHX0nLbOwneEfP
96G/q1fX16BuTs/S7y/0866kRexz8z9mZqAU
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxV0gtIU1Ecx/FLQRhGrCcGQSsKQnqMyjGI7OyRZlldrEzKx5CEIKmBEARB
lyiCkBpBpC1rm5JJlhcrzQd4FS2j1y1DCoKWkRQMGkEgQpHnt/MbNNjjw/+c
c++X3ZXVJ0tqZmmaVjXzlt8zL7t7W9Kb/pkn5OdExpXSrnn5ylaZdNBNiwrp
cJDWgtLWpcy8XDr1KOMqaednOlonrc/drtxwWdrYTBvXpc0K+ntcOnGR3nBP
2tFJl3VIi0+076F0aI5Qbu2WjrroRtg+TC/sQf8FevQJ+jvo2GP0f6Q3daF/
tlc5G7bW06vh1CHaBzvP0ftxfb2d3ovrG+O0HzY1X9pG7iD6c5W1wWH0H6T7
XqP/rLJVOI7+Ns5zxtA/Rte+Rf8fnr/xHfrX+pXdmLtK/DzfRv8ZWofDd7i+
HrZs+sgb9E/T6f3ONQHlv7hffZ+yVvoc/adp9zP0N9PFcOIVPZnun6JtWKza
oTw1hP5iOgZHT9GhAfRHadGH/hd0Wy/6f9PefvSvKPjveQoX0d/wf1l1dC/m
qSZ6Sfr/H6VHOtH/K7PeRP/yQuUs2Cyg4w/QH6J1PO+OCN2O9WKEFvfR/5Oe
vov+ZTuVF8O2n26BtRP0RCv6G+gszINDdADzcJI2m9G/tIjPO5wS9DDsPE57
4ui/Rh+NoX+ArsTc/EE/xTyxaBfvB3bk06Hb6D9G195C/1X6QBP6++n3sD2Z
2Y/12oLdyuui6N9K59xEfw29BfvDV+jADfT30C2N6P9Kv4ygf36x8nmcp3to
A9c3qukkzjPr6Q9woov24HzHF7oc+0X2Ht4fzg/l0Y6I+AcrnmuI
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw90wtIFFEUBuBJwTTNNhQrCNySIIJiQ7JIstE181UtRhRKNAhCJeREEEZB
QyBFZG2ZIUQ0ZASW4GJSSA+HpAdUMhDIZlrjA18tudlLSynvv/9tYTn7ce69
sz9n7oryqpKKKEVRDsx9RZ372A+3hLLxy39SFWVAOtQg7EnIopVrwlqGdGyd
sF+Trq4Xts5L59cKh9uknavC7k//198U9sVtpW+1Cxvp0h87hQP7aaPpjbBz
Vjo9KOxqpdVDA8Jqr+wP9QvrMWrEWvKQsOmhjb5BYbtU9qNGkL+GNjtGkb+F
tmbR197T6pJx5I/OjthdFUL+tbSS8xn599JWEfruM7QxAvuaaafqC/J3y/0R
B5SciPXab8i/hnYqfyH/HjqcOU9U9TRtpyWKqjfRgftxoprv6IbWGFHtWdo8
NR91tTdiXzPWe0potQx97RS9LyVeVP8dWtu4UFTLpke9CaKGf9PBR+i7V+VG
vLRukai+XbSreIGoxgla78bzA420fRj/13lLm5th1xQdbofVldt4/r1o5C+m
jVnYPE4Hz0Uhv0nrWX8x/9fSL2Yx/x+0O1VB/tS8iD29M5h/Ae2P/YP5H6ON
8WnM/wbtNMLuV7T69CfmP0m77O+Y//LtnH8yHMijw2mTmL8uXQ67rtNq8Kuw
+lzu94aF9QnafIL3yVyWzzylE8K2l7Yuw8oR2unB++tpoJVSvO/aM9lfP4b8
IVoN4X5YKQU8v3AY+VVay8B9clfSxlH0ffVyfRfup9FBO7lwYIw2y2AnqZDr
X8KuLNrpHED+g7S1G/dbv0JrSeibj+X+GQf5h2mlE1YWF/G8LtiTKX0b1ipo
Yx3sv0RbF/uQv51W7n5A/kG5vq0H+ROL6Was922ilele5C+nrWo4cEG6Buc5
D+T+FtjVL/fvxHlq/A66BM/TN9DGVI/6DzaUl7k=
         "]]}}, {{
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]]}}, {{
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]]}, {}, {}, {}, {}, {}, {}, {}}, {{
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[
         1.6]]}, {}, {}, {}, {}, {}, {}, {}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {False, False}, AxesLabel -> {None, None}, 
     AxesOrigin -> {3.7904544*^9, 0}, DisplayFunction :> Identity, 
     Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {
        Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
        Charting`DateTicksFunction[
        Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, 
     GridLines -> {Charting`ScaledTickValues[
        ((Transpose[{#, 
          Table[
           Directive[
            GrayLevel[0.4, 0.5], 
            AbsoluteThickness[1], 
            AbsoluteDashing[{1, 2}]], {
            Length[#]}]}]& )[
         Part[
          Select[
           Charting`DateTicksFunction[
           Automatic, DateTicksFormat -> {Automatic}][
            SlotSequence[1]], And[
            FreeQ[#, 
             Alternatives["", 
              Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
          1]]& )[
         SlotSequence[1]], {Identity, Identity}]& , Automatic}, 
     GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], 
     Method -> {
      "NoShowPlotTheme" -> "Detailed", "OptimizePlotMarkers" -> True, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{3.7904544*^9, 3.798576*^9}, {0, 258659.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {{}, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Desktop\"", "\"MobileApp\"", "\"MobileWeb\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.798497502420702*^9, 3.798497534963757*^9}, 
   3.798497879090746*^9, {3.7984979109667807`*^9, 3.798497919023671*^9}, 
   3.798498210172708*^9, 3.798543105977955*^9, 3.798559377990611*^9, 
   3.7985614648069887`*^9, 3.798561609513043*^9, 3.798737050453849*^9, 
   3.798737263971403*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"364edba6-246d-40b8-a77f-1f3f30159a3f"]
}, Open  ]],

Cell["\<\
But are all of those views even from real people? What portion of them are \
from bots?\
\>", "Text",
 CellChangeTimes->{{3.798498061409339*^9, 3.798498100710925*^9}, {
  3.79856128303965*^9, 
  3.798561298752543*^9}},ExpressionUUID->"58e48f20-a5c0-4737-aacf-\
b3f7f0b1309a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "\"\<Bot\>\"", " ", "is", " ", "currenlty", " ", "returning", " ", "an", 
    " ", 
    RowBox[{
    "error", ":", " ", 
     "\"\<Wikipedia servers are currently under maintenance or experiencing a \
technical problem. Please try again in a few minutes.\>\""}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"agentData", " ", "=", " ", 
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", " ", "\[Rule]", " ", 
           RowBox[{"WikipediaData", "[", 
            RowBox[{"\"\<CoViD 19\>\"", ",", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<DailyPageHits\>\"", ",", " ", 
               RowBox[{"\"\<Agent\>\"", " ", "\[Rule]", " ", "#"}]}], "}"}]}],
             "]"}]}], ")"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"\"\<User\>\"", ",", " ", "\"\<Spider\>\""}], 
         RowBox[{"(*", 
          RowBox[{",", " ", "\"\<Bot\>\""}], "*)"}], "}"}]}], "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"DateListPlot", "[", 
     RowBox[{"agentData", ",", " ", 
      RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", " ", 
      RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.798498624680244*^9, 3.798498669746552*^9}, {
   3.7984990380422297`*^9, 3.7984990411737537`*^9}, {3.798499838502323*^9, 
   3.798499858664418*^9}, {3.7984999325601273`*^9, 3.798499963315984*^9}, {
   3.7985005307416973`*^9, 3.7985005321981077`*^9}, {3.798543110616452*^9, 
   3.798543116419115*^9}, 3.798559384649351*^9},
 CellLabel->"In[57]:=",ExpressionUUID->"b83475a6-19d2-42c8-a772-114f90573450"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw11AtIFEEcBvDtgSWVrJqGIHQ9DAuKpYeIla2PLEvpskIIxE00hCKPCkkq
usIo7aKlEIwINowoFTpMMinpECIho7UkSILWsrfVallmSTnffXNw/O/Hf2Z2
v92Zm1dSUVA2WVGU4omvqBMfu23tYAZ+qfW6KK+la4LC2sx0OtAkbKRIV18R
Ng3p5AbhUK10oyXstkoHMd/zSnpxq7A3ch2d3y3sX0Hrpb3CwSLpBX3Czik6
1D8grLbQnnZXWH8p1xsaEvZF6GGbUT+ELY3W2mB7J63U/UT+k7RRjb52k3ab
viP/Czn+yW/kn5IRtv0LDi2lzeOwW0i76WPIf4L2R/9B/mY5v3MU+Z/T+jTM
DyqZ8nqTRXWW0KGsCFHVHXR9kSqqfoy+3pwgqu8GXVoWJ6r1TK5XGC2qPU77
lsWgJmeFvbcJ47UC+vTTWFGNI3Ricbyo5jU6++wcUUM2fbUSfXeMdnqwnicp
m/Pvou/dQh8cnS2qv4oeyIWDDXTvBdyv85h2SmF1lC7vg/X568NOXTkL+fNo
vQa2KmlnK2xbtLkoEvUR7dk1HflHaK0ffWNuTthdHXj+Zi5tHp6K/Ado7Rbs
XqYPdcKeLlpvwfv0DtPqmknIn7iB7/eigvw5tFs1LvaD46ODbX+F1Uu0kgbr
D2gjG/Z9o9Xl2G9Wwkb2e2A7i/ZXwMo+WgtgP2r10vaIsNEpx++GzUHaE4fz
E4rPZd/C+XF12mnEeM8e2k1D31tHe1uGhf33aS0K5zf4kda70XdiNzHPflhN
p60AxuvltLstfP7Py34M/h+se7SS+QX538n+nUHkj97M+0+BtdW0MvIV+cuk
z2C+eU466TPyt8v5Ax+Q/43s175H/qg8ejv63lTaKIb9JbT/6CfkD9DWP/Sd
27TzEFb7pbMxXp+Rz+e1ENfzraKdjrf6f8cejag=
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw91A9IE1EAx/GrIJAk1h+iIGgNgyEFV6YIkd7SLG3RECIJmsdACIQaJGVR
eEUhhdAyR8NRLi3Lslxms2DlEIL1D64SqQhaf5CMVUcURBS099v73WC3fXj3
3vZ9t93ywN76ppmKojTmnuI19zBH12c9+bdrNXH8YNuqzB3UwgraJcb1MttO
4ZBuu0Q4dcp2kbA1YrtU2PmOjgWEfQWV0ouPChsltHFEOL6LbjgpnGm3x9uF
HcO2zwhrb+lsSDg4W5NOdwrHVFrtFjZ30m6MKyfoiS5hdYi2zqL/NZ2NoH+W
R7r6AvpX0bFe9O+gMz3oP0ano+gfpLPn0D9Jd4XRr2yQ/hRDfzG95hb6t9PT
I+hvo2fcQf8AXTCM/pf050H0/6MbsJ7irpKejKO/nj6A+fphuu0u+vvp4gn0
m7RnDP1/bN9H/4pq6eYU+rfRYXxf4yA9ehv9fbQDzjyjW5Po/00/T6DftVH6
G/qCXvrndfTvp4/DZoz+iv1TntBT6FV/0f6b6F9WI919Df21tAtO7aMPYX3r
PN16A/1p21jP94P2Y76xdJP0aux/vIauw3gmSF/FfEeUXolx7SFdOIT+79JG
dBz9SzZzfr6/ip6Pz1P20J789Y/QbuynPk4nsT+hLO0YQP+iWukWnG9p0sYj
XG9nM8edWN8Xpr2Yb4zRrivon6Zf9KJ/QR334zL6K+g3sLab/nIJ/Z20vw/9
SboMNqfox7Ayb4t0EdZT19EPsJ7eRJfj/NBp+i/OT92jE/i/Wh/pCO4Pzrle
3u8uor+c7kCfEaBbMB7voPV+9Cfop7h/ON7Tr3C+Nmcrf9+43wRL6YU92n/I
R2bW
         "]]}}, {{
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}}, {{
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}, {}, {}, {}}, {{
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.009166666666666668], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}, {}, {}, {}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {False, False}, AxesLabel -> {None, None}, 
     AxesOrigin -> {3.7904544*^9, 0}, DisplayFunction :> Identity, 
     Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {
        Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
        Charting`DateTicksFunction[
        Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, 
     GridLines -> {Charting`ScaledTickValues[
        ((Transpose[{#, 
          Table[
           Directive[
            GrayLevel[0.4, 0.5], 
            AbsoluteThickness[1], 
            AbsoluteDashing[{1, 2}]], {
            Length[#]}]}]& )[
         Part[
          Select[
           Charting`DateTicksFunction[
           Automatic, DateTicksFormat -> {Automatic}][
            SlotSequence[1]], And[
            FreeQ[#, 
             Alternatives["", 
              Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
          1]]& )[
         SlotSequence[1]], {Identity, Identity}]& , Automatic}, 
     GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], 
     Method -> {
      "NoShowPlotTheme" -> "Detailed", "OptimizePlotMarkers" -> True, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{3.7904544*^9, 3.798576*^9}, {0, 420650.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {{}, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"User\"", "\"Spider\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.79849860838242*^9, 3.7984986476230097`*^9, 3.798498680161049*^9, {
   3.79849903993981*^9, 3.798499042634596*^9}, {3.7985431132641993`*^9, 
   3.7985431177639513`*^9}, {3.798559382118759*^9, 3.7985593956217012`*^9}, 
   3.798561465734927*^9, 3.798561610649251*^9, 3.798737051827682*^9, 
   3.798737264903277*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"94d4e4a3-9182-4a8a-9606-901ab778d067"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Spider", " ", "views", " ", "appear", " ", "to", " ", "come", " ", "only",
     " ", "from", " ", 
    RowBox[{"Desktop", ".", " ", "Bot"}], " ", "data", " ", "also", " ", 
    "not", " ", "available", " ", "in", " ", "this", " ", "case"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Grid", "@", 
   RowBox[{"List", "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"accessAgentData", " ", "=", " ", 
          RowBox[{"Association", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", 
              RowBox[{"WikipediaData", "[", 
               RowBox[{"\"\<CoViD 19\>\"", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"\"\<DailyPageHits\>\"", ",", " ", 
                  RowBox[{"\"\<Access\>\"", "\[Rule]", "ac"}], ",", " ", 
                  RowBox[{"\"\<Agent\>\"", "\[Rule]", "#"}]}], "}"}]}], 
               "]"}]}], "&"}], "/@", 
            RowBox[{"{", 
             RowBox[{"\"\<User\>\"", ",", " ", "\"\<Spider\>\""}], 
             RowBox[{"(*", 
              RowBox[{",", " ", "\"\<Bot\>\""}], "*)"}], "}"}]}], "]"}]}], 
         "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"DateListPlot", "[", 
         RowBox[{"accessAgentData", ",", " ", 
          RowBox[{"PlotLabel", "\[Rule]", "ac"}], ",", " ", 
          RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", " ", 
          RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"ac", ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Desktop\>\"", ",", " ", "\"\<MobileApp\>\"", ",", " ", 
          "\"\<MobileWeb\>\""}], "}"}]}], "}"}]}], "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.798498876296054*^9, 3.798498890191763*^9}, {
   3.798498927243606*^9, 3.798499013578835*^9}, {3.798499045706018*^9, 
   3.79849913621196*^9}, {3.798499187778593*^9, 3.798499221425796*^9}, {
   3.7984993143724623`*^9, 3.798499357195397*^9}, {3.798499886154361*^9, 
   3.798499988101142*^9}, 3.79854313568368*^9, {3.798559401525568*^9, 
   3.798559406779694*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"8f91bdcf-1625-4817-9d0e-f7b42fd20392"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       GraphicsBox[{{}, {{{}, {}, {
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJw10w1I1GAcx/FhIEQRJ5EUFC7BCiMZRSKF9uiVL3XRYVQUhJdgHAQ5CIIk
aCgVieIRBYK9DAShkBq9EgkNKxBKubQM03JqiqJ5y7CkEvP59XsEufvwf/Z3
X9zWl1eWViRpmla2+Cs/F3/iT3On8vFtPCbkx7DyvWZpY3ke3XhbOpKtHK2T
jkWUO+ql3VplH/v8R8ohW1ofVM5ukQ4v3UWffC5tbaOt1e3SznE1115Ke5eV
q99KBx4on/gkLQaUQ4PSZrL470jGkLRt0F7rsHT8GK2tGkH/Rdq9gn3GfWWr
D/19tOgfQ/+SfO4b+Ir+LbSVOor+I7SohfVqWjdxfbiVtpM99Pcq18OOVsD7
m06gP5OO3JhB/yHayP2D/gt0cVWS/DTv0E7NPPp7aPvxD/TP04GDs+jfFGRv
5gL6S+lA7V/0n6edKOaxFtrqgt24cj3+nv+b1l/9Qn/Gbu5PmUP/AdouwH7r
nPLD3+hvpsNtP9HfScfuwoE52qjCfpG+h/MeX9oM0eER2D6rzH6btqu+o/8N
rVfCxixtTcKRtEK6Zhr9JbTdPY7+M7SXM4X+m7S29Rv6O2g9bRL9M7Qom0D/
2iL+f8uxzymkrWk8X55J694w+ptouxMWr9X5w3i+zAQtgrC9pphzH44HaW8U
z6d2Ws0TeB+MRlrrxvsUaaf1IjyfsSna3ojzbmoJ79/H++YLWluH+9NP0dYC
rg9fp91i7Lde0OIW3jdnQp3Px3lv5V766Bf059FaAhZRWmz4jP6rtNuE99lu
U57vRf+Yuj4Mayn76MAH9O+krax+9FeoeRbuL9ag5tGP6H9Gu+579I+o833d
6F8R4rzhHfpzaCuIuVWu5puxz6mjxQ7cj/dEnb+E/YEhdf4a5mLZfroa+8zt
tJXeJf4By2yi1A==
             "]]}, {
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJxV0w9IE1EAx/HDINYfxAhGwSCVggiCYX8IWuvUWs5WLaECIboEIQhsEASC
1BGGo4wOUVpqtXKZlullq9BGLrEQIhgYUhC1TPojw0aUSBDk+937HWywP5+9
d3f73tsrqjlVVZunKMqxhad4X3iknu7IlFof3ap4nbJtfbncS68S49rWXBua
N+f45EXbxcLZuO0S4cJPtHZcOLhkp3ThWWF9E52sFzaP0uEm4XQT3dMoXDBo
z78krH6wxy8Lhxar0hFDOOqmAxHhVDW9GePKBdrTIuweoGMY197TrW3oX1Qq
3dyO/o103i30H6HfdqD/PP39Kvr76Egr+ifpMVzfVMqk391A/wa6YgD9h+jw
I/Sfo/1wqJc+aKJ/gu7vRf8/eqof/evLpcseoL+KXovjtQbafIz+bulkwwT6
Uxz/mED/Xzr/GfrX7ZIueo7+A3Q1fq9eTyceor+L3o/rp9/Q34bQP0/PxNFf
vFt6ugf9AXruLvrP0B6Mp6L07CD6X9MOXN/9h85ivrbGx/8zzmf4c508Tf+G
s9fp4D30j9Nj99H/i57HfN21R9qF9TB9tI7xdIiexfEFHXQJfp/6kjb60P+T
nnmB/tUV0k5r/cvpOay3Ukfr1vpH7HHM10bpYdwfI0O/6ka/0y/djvlZlR4b
Qf9J+jD6gm30Uqt/hK68g/4f9GgU/SsrpX1d6PfSSgz9J+hJ7L9QC+2Bowm6
Dk59pTOwsmIv7yfO795Oh2+jv5ZuxHzjCj2N+ckh2oH9mv1Cj1v7Pz/A/XQT
/dvoMKzX0DEcbzbTXvSln9COa+j/TDtxf9Rl+6TjnejfQrs61f/jJGTv
             "]]}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}, {}, {}, {}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}, {}, {}, {}}}, {{}, {{}, {}}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False},
          AxesLabel -> {None, None}, AxesOrigin -> {3.7904544*^9, 0}, 
         DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
         FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
         FrameTicks -> {{Automatic, Automatic}, {
            Charting`DateTicksFunction[
            Automatic, DateTicksFormat -> {Automatic}], 
            Charting`DateTicksFunction[
            Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> 
             None]}}, GridLines -> {Charting`ScaledTickValues[
            ((Transpose[{#, 
              Table[
               Directive[
                GrayLevel[0.4, 0.5], 
                AbsoluteThickness[1], 
                AbsoluteDashing[{1, 2}]], {
                Length[#]}]}]& )[
             Part[
              Select[
               Charting`DateTicksFunction[
               Automatic, DateTicksFormat -> {Automatic}][
                SlotSequence[1]], And[
                FreeQ[#, 
                 Alternatives["", 
                  Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
              1]]& )[
             SlotSequence[1]], {Identity, Identity}]& , Automatic}, 
         GridLinesStyle -> Directive[
           GrayLevel[0.4, 0.5], 
           AbsoluteThickness[1], 
           AbsoluteDashing[{1, 2}]], ImageSize -> 300, 
         Method -> {
          "NoShowPlotTheme" -> "Detailed", "OptimizePlotMarkers" -> True, 
           "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, PlotLabel -> 
         FormBox["\"Desktop\"", TraditionalForm], 
         PlotRange -> {{3.7904544*^9, 3.798576*^9}, {0, 151369.}}, 
         PlotRangeClipping -> True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.02], 
            Scaled[0.08090169943749476]}}, Ticks -> {{}, Automatic}}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"User\"", "\"Spider\""}, "LineLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                    "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   TagBox[#, HoldForm], ",", 
                   TagBox[#2, HoldForm]}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], 
     TemplateBox[{
       GraphicsBox[{{}, {{{}, {}, {
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJxV0g1IE2Ecx/GjN3qjFr1D0JSCkqJROYJIn83SrFWXZIX4MiQhMGogBEHQ
CCIIqRGF1rLOGZlkeahpmyOvkVlEdWUIQdAykgKhEQQiFPn89vwGDrbbh/9z
z92Xu6zqUyU10zRNq5r8yuPkx+7dMeZJ/80V8nck40pp1/w8ZeuotN9Niwrp
kJ/W/NLWpcy8XDrVnXGVtPMLbdRJ63PylRsvSwe30MEGabOC/hGRTl6ksx9I
Ozrpwx3S4jPt7ZIOzBLKrb3ShotugO0yemEU/RfowSfo76CNx+j/RLt60D/d
ozwXtjbSWXDqCO2Bnefpg7i+3k7vx/WDw7QXNjVv2sH1z9CfQz99jv5SOvoW
/eeUraJh9LfRy4fQP8T1te/R/1dZ2/QB/esK1NyNuauEjtnoP6us6XDoHuf1
sGVzXvYO/RPKog9z59qdav0/3K9+QFkrfYX+M7R7EP0ttA9OvqFH0/3jtA2L
7F3K4wn0++hm2DhNB/rRb9CiD/2v6bYY+v/Q+XH0ry6c8j6FiunveF5WHd2N
eaqJXpp+/i/pgU70/6ZjJvpXFSnPhM1COvII/QFax/vuCNPtWC8GaPEQ/b/o
ifvoX7lbeQlsF9B3Ye0kPdKK/kZ6Nub+BC0wD43RZgv6lxXz/YVTgk7Azlp6
cwT91+ljzejvpysxN3/SLzBPLt6jPAN25NGBO+g/Tp+4jf6r9KEm9Mfpj7A9
OnW9tmivco6B/u30ilvor6G34vzQFVrcRH+UvnYD/d/oeBj9C3y8X+ynb8sY
1w9W00nsZ9bTNpzsoTdgf8dXuhzni3n7lNdg/0Au7QiL/3CwbEU=
             "]]}, {
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJxV03FEJGEYx/FXkTudzCnpONriOBFDSqR6Z2e32nZXa0lEbiwRUUNEHLeO
RKIREYkhIqKRXOJoRERiiIho6jhiaUQkot3+mPoOM+Pjed/nnd+8Mw25yexo
mRDiR/Es3YuHt9dZ0MS744ZWP3XBRhttGbQ7Twe7dOSKznzshvMttDNC+3Oh
62TxouyEDrqLF3nJ8WaFhG31zaX53nDoDyWLWYl+6jZtXHC+Va6h7jZr6BcM
sR75rWF+Zktj/nOOd0QU4/2m0DWv+QejWE/+ijL/ZhT97DP2855p8V3n/md1
1I2frFsbtOvpzP+kM/+3GPd/IIb++RnWnXXaP6WVR1o2xpk/RdvTtGfT4oRW
H+LMX9/D/AnanQr9+n0Ga6xHjunMPZ3/2ov35/T0Mr9JK6u0PKLNO9r+0sf8
Oi0maHWFNg778D6sAutubYL/v0xw/8cTyJdZ5vj8Ae3c0n51P9ZXuvqZf4w2
l2j7L+39p8XnJPN30MYobS0mkc/dT+L5gn+hlZIjVSnmb08xf452Fmj/D61c
07IyjfXM1vRb/QUXlvkD
             "]]}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}, {}, {}, {}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}, {}, {}, {}}}, {{}, {{}, {}}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False},
          AxesLabel -> {None, None}, AxesOrigin -> {3.7904544*^9, 0}, 
         DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
         FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
         FrameTicks -> {{Automatic, Automatic}, {
            Charting`DateTicksFunction[
            Automatic, DateTicksFormat -> {Automatic}], 
            Charting`DateTicksFunction[
            Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> 
             None]}}, GridLines -> {Charting`ScaledTickValues[
            ((Transpose[{#, 
              Table[
               Directive[
                GrayLevel[0.4, 0.5], 
                AbsoluteThickness[1], 
                AbsoluteDashing[{1, 2}]], {
                Length[#]}]}]& )[
             Part[
              Select[
               Charting`DateTicksFunction[
               Automatic, DateTicksFormat -> {Automatic}][
                SlotSequence[1]], And[
                FreeQ[#, 
                 Alternatives["", 
                  Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
              1]]& )[
             SlotSequence[1]], {Identity, Identity}]& , Automatic}, 
         GridLinesStyle -> Directive[
           GrayLevel[0.4, 0.5], 
           AbsoluteThickness[1], 
           AbsoluteDashing[{1, 2}]], ImageSize -> 300, 
         Method -> {
          "NoShowPlotTheme" -> "Detailed", "OptimizePlotMarkers" -> True, 
           "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, PlotLabel -> 
         FormBox["\"MobileApp\"", TraditionalForm], 
         PlotRange -> {{3.7904544*^9, 3.798576*^9}, {0, 22815.}}, 
         PlotRangeClipping -> True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.02], 
            Scaled[0.08090169943749476]}}, Ticks -> {{}, Automatic}}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"User\"", "\"Spider\""}, "LineLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                    "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   TagBox[#, HoldForm], ",", 
                   TagBox[#2, HoldForm]}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], 
     TemplateBox[{
       GraphicsBox[{{}, {{{}, {}, {
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJw11A9IE2EYBvBrgqH5ZxKIgdgWVFJEi0jC0M4sm6U0NSmC6BKEoNJBIIaJ
VxCFGK1SEEM6CM1m0IgoBcGjqIRKBkqUGZ0aprVyqZWJYn7Pnm8w3v14v7vb
s/f75iyrLC63KYpyYvkt6vIr+DQrlINPnhpVlFHpiWZhV1w2PdskrGVIK7eE
fZr0GfTNemn1mnD4sfRgo7Djs7TnjrAnZjd9sltY3y5tPhcOHKf1hjfC1hVa
TXsvbH9EawWjwuowbQ6MCHuj1Ygt2xdhw0Ub/WPCwWO0Y2Yc+S/TSucE8j+k
9bGvyP+BNhcmkT8qh/2iEPJvkU7/jvxHpDej77hEm32w5wGtlv5E/ne0cRQO
KHsiDl6cQf5NtKfkL/KX0sq2FaKqdbQ9OUFU7316ri1GVGOANtuiRQ0u0tVn
V6Km50bc0YL1rmK6y42+doG2lmJF9bXLvjNeVDNIT7jiRA3P024/+o71eyP2
1iaK6jlEuzNxP/083fwSzw/cpc3D+L7WWzplA2yfo7v8sLpuX8ThlijkL6Cv
/oCNKrqrxob8Bq2nLWH+r2lfxyLm/5uujlGQf20e91vvAuafT+tT85j/OTrQ
/w/zb6WNetjRJ93xB/Ofpq2eWcw/dT/naYMDebQRP435e2lHIWy/TXv7fgmr
L2R/a1jYO0WrN7CfjDVuuV+mhIO5tFUBKxW06cf+dTXLfsY3Ye2ZdFJk/4do
4xXOh5mcz98jFecprNLGAvqO07Ragr6niVb8OJ96L61thAOT8vpM2Fp9gPnu
wfZsWm0fRf5TtObE+fbepM0Q/g+MHloftJB/XF7fCitJB5mvE3btopVaWCun
tVjYd53Wsz4hf7dcX/kR+cdotW4I+RMK6CKs9+yUbhxG/jJpJxxooJUU3M96
QutVsH1Erk/E/dRVhexH4XneHdLdQ+p/LLSTgA==
             "]]}, {
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJxV1A9kFmEcB/BHkVJyiYjYlWIijpRI7561tlq9qzMmYnVNa6vVdrWarVZ7
Wq0m0YmIxBEpopOUiE7ESBwRET0VI0YnIhG9z/e978O9vPe+H7/n3/e5e251
z1Bn7zwhxKHa1/zWPtmLbXPN9b+ONNdv1nlT7eItqdALTT3YbC2Mo6BcT69X
Sv3zZ+W6+8V6rbG/qKmw9I3VRlrsNU66rTuM9TXbvsvYeUrrE8byM50GxuEC
WVgdNo49Ou02zg7Y+kHkn6LjI8beE1oeR/5Ptj0czW9m+5PIv4FWx4zz/bQb
Iv8knQ4i/2PbH+Opj3RwFPnFds7fh/zr6WgU+btofRb5J2h1Hvkf0SEcf6CT
MeT/R/sXkb+xpfDDS8jfSU9PIv84PXoV+R/Y9lPIn9HiMvL/pSOM567bUWrv
76NnUFdjdDKB/PdpB/Pp9/T0FeT/Q4dYv1zTWrhRIX+VzjFePELLc8gfl+vi
Ha0vIP/v1tJ6g4a2wtk48rfTDvYzHbZ17Hd+j5aouzN0jPvl/6K9YeRftZP7
dxr522h/BPlDOkN/5y4dDyH/W1pjvPAn7aF/vHIX78cZ5G+hw1PIP0g7eL68
O7Y96sEbWuB5juZoH+tNV7RzfZgvl7TGfrkDtKw//7dpB/3Va1rhPCU/rDGf
Xr67NL9ToevnT/ZbY/3hLdrB+uNXtML7IpulNfqLZXt4XrGf3lY6qefvpeUA
8t+0dawnfUlrnOf8Oy1wnt2lVbof+bfQEvuleqql9SY3ytbPaRfjOV+t6++/
xR2l+cJNdNon/wO/Bk4e
             "]]}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}, {}, {}, {}}, {{
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]]}, {
            Directive[
             PointSize[0.009166666666666668], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]]}, {}, {}, {}}}, {{}, {{}, {}}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False},
          AxesLabel -> {None, None}, AxesOrigin -> {3.7904544*^9, 0}, 
         DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
         FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
         FrameTicks -> {{Automatic, Automatic}, {
            Charting`DateTicksFunction[
            Automatic, DateTicksFormat -> {Automatic}], 
            Charting`DateTicksFunction[
            Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> 
             None]}}, GridLines -> {Charting`ScaledTickValues[
            ((Transpose[{#, 
              Table[
               Directive[
                GrayLevel[0.4, 0.5], 
                AbsoluteThickness[1], 
                AbsoluteDashing[{1, 2}]], {
                Length[#]}]}]& )[
             Part[
              Select[
               Charting`DateTicksFunction[
               Automatic, DateTicksFormat -> {Automatic}][
                SlotSequence[1]], And[
                FreeQ[#, 
                 Alternatives["", 
                  Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
              1]]& )[
             SlotSequence[1]], {Identity, Identity}]& , Automatic}, 
         GridLinesStyle -> Directive[
           GrayLevel[0.4, 0.5], 
           AbsoluteThickness[1], 
           AbsoluteDashing[{1, 2}]], ImageSize -> 300, 
         Method -> {
          "NoShowPlotTheme" -> "Detailed", "OptimizePlotMarkers" -> True, 
           "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, PlotLabel -> 
         FormBox["\"MobileWeb\"", TraditionalForm], 
         PlotRange -> {{3.7904544*^9, 3.798576*^9}, {0, 257966.}}, 
         PlotRangeClipping -> True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.02], 
            Scaled[0.08090169943749476]}}, Ticks -> {{}, Automatic}}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"User\"", "\"Spider\""}, "LineLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.009166666666666668`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                    "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   TagBox[#, HoldForm], ",", 
                   TagBox[#2, HoldForm]}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.79849889504524*^9, {3.7984989558134727`*^9, 3.798498984272957*^9}, 
   3.798499016610623*^9, {3.798499089146427*^9, 3.7984991391159983`*^9}, {
   3.798499202860853*^9, 3.798499224696558*^9}, 3.7984993204288673`*^9, 
   3.7984993601863117`*^9, 3.7984999939859962`*^9, {3.798543120444489*^9, 
   3.798543140540269*^9}, {3.798559398970533*^9, 3.798559410374619*^9}, 
   3.798561468236521*^9, 3.798561613307838*^9, 3.798737056794335*^9, 
   3.7987372674107733`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"d1a72cf7-becd-4b84-b171-e0245c791c17"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wikidata", "Section",
 CellChangeTimes->{{3.793105989651456*^9, 3.7931060209190106`*^9}, {
  3.793109627904931*^9, 3.793109628263386*^9}, {3.7931132125852256`*^9, 
  3.7931132141230664`*^9}, {3.798390707945075*^9, 3.798390726688531*^9}, {
  3.7983920389290953`*^9, 3.798392064478063*^9}, {3.798399261520561*^9, 
  3.7983992647485857`*^9}, {3.798559712336108*^9, 
  3.798559749180087*^9}},ExpressionUUID->"ea3713b8-fd6f-440e-a8c5-\
5b34b84550de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"search", " ", "for", " ", "COVID"}], "-", "19", "-", 
    RowBox[{"related", " ", "data", " ", "on", " ", "Wikipedia"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"WikidataSearch", "[", "\"\<Covid-19\>\"", "]"}]}]], "Code",
 CellChangeTimes->{{3.798390822061082*^9, 3.798390825708703*^9}, {
  3.798390967397052*^9, 3.79839101644739*^9}, {3.798543621951036*^9, 
  3.798543627817994*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"f200a038-9f72-46d6-a566-ef171bc6a8fa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q84263196\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"COVID-19\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"zoonotic respiratory syndrome and infectious disease in \
humans, caused by SARS coronavirus 2\""}]}], "\[RightAssociation]"}]}], "]"}],
      "\"Wikidata\"", "\"COVID-19\"", 
     "http://www.wikidata.org/entity/Q84263196"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q87718451\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           
           RowBox[{"\"Label\"", "\[Rule]", 
             "\"2020 COVID-19 pandemic in Nigeria\""}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 COVID-19 pandemic in Nigeria\"", 
     "http://www.wikidata.org/entity/Q87718451"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q81068910\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"COVID-19 pandemic\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"ongoing pandemic of COVID-19\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"COVID-19 pandemic\"", "http://www.wikidata.org/entity/Q81068910"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q93202208\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"COVID-19\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"scientific article published on 01 April 2020\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"COVID-19\"", 
     "http://www.wikidata.org/entity/Q93202208"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q93219706\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"COVID-19\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"scientific article published on 23 April 2020\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"COVID-19\"", 
     "http://www.wikidata.org/entity/Q93219706"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q91601520\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"COVID-19\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"scientific article published on 30 March 2020\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"COVID-19\"", 
     "http://www.wikidata.org/entity/Q91601520"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q94502207\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"Covid-19\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"scientific article published on 30 April 2020\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"Covid-19\"", 
     "http://www.wikidata.org/entity/Q94502207"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q84055514\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"2020 COVID-19 pandemic in India\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"details of ongoing viral pandemic in India in 2020\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 COVID-19 pandemic in India\"", 
     "http://www.wikidata.org/entity/Q84055514"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q83741704\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"COVID-19 pandemic by country and territory\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"details regarding the 2019\[Dash]20 coronavirus pandemic by \
country and territory\""}]}], "\[RightAssociation]"}]}], "]"}], 
     "\"Wikidata\"", "\"COVID-19 pandemic by country and territory\"", 
     "http://www.wikidata.org/entity/Q83741704"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q83873577\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"COVID-19 pandemic in the United States\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"ongoing coronavirus pandemic in the United States\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"COVID-19 pandemic in the United States\"", 
     "http://www.wikidata.org/entity/Q83873577"},
    "ExternalIdentifierURL"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.798390972270019*^9, 3.798391017930489*^9, 3.7984967616369753`*^9, 
   3.7985431233170013`*^9, {3.798543623065411*^9, 3.798543628233191*^9}, 
   3.7985594558073387`*^9, 3.7985614688608637`*^9, 3.798561614117782*^9, 
   3.798737058052856*^9, 3.798737267956113*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"e9d49599-99ed-435e-92d6-cd4033b51108"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "view", " ", "the", " ", "properties", " ", "of", " ", "a", " ", "given", 
    " ", "Wikidata", " ", "item"}], " ", "*)"}], "\n", 
  RowBox[{"WikidataData", "[", 
   RowBox[{
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"Q87718451\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            
            RowBox[{"\"Label\"", "\[Rule]", 
              "\"2020 COVID-19 pandemic in Nigeria\""}], 
            "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
      "\"2020 COVID-19 pandemic in Nigeria\"", 
      "http://www.wikidata.org/entity/Q87718451"},
     "ExternalIdentifierURL"], ",", " ", "\"\<NonIdentifierProperties\>\""}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.798543618158029*^9, 3.798543618581626*^9}, {
  3.798543662078003*^9, 3.798543684366139*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"598e3424-247f-4bcf-a15d-924b7e351c5a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P17\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"country\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"sovereign state of this item (not to be used for human \
beings)\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"country\"", "http://www.wikidata.org/entity/P17"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P31\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"instance of\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"that class of which this subject is a particular example \
and member\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"instance of\"", "http://www.wikidata.org/entity/P31"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P237\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"coat of arms\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"subject's coat of arms\""}]}], "\[RightAssociation]"}]}], 
       "]"}], "\"Wikidata\"", "\"coat of arms\"", 
     "http://www.wikidata.org/entity/P237"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P276\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"location\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               
               "\"location of the item, physical object or event is within. \
In case of an administrative entity use P131. In case of a distinct terrain \
feature use P706.\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"location\"", "http://www.wikidata.org/entity/P276"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P361\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"part of\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"object of which the subject is a part (if this subject is \
already part of object A which is a part of object B, then please only make \
the subject part of object A). Inverse property of \\\"has part\\\" (P527, \
see also \\\"has parts of the class\\\" (P2670)).\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"part of\"", 
     "http://www.wikidata.org/entity/P361"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P580\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"start time\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"time an item begins to exist or a statement starts being \
valid\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"start time\"", "http://www.wikidata.org/entity/P580"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P625\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"coordinate location\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               
               "\"geocoordinates of the subject. For Earth, please note that \
only WGS84 coordinating system is supported at the moment\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"coordinate location\"", "http://www.wikidata.org/entity/P625"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P373\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"Commons category\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"name of the Wikimedia Commons category containing files \
related to this item (without the prefix \\\"Category:\\\")\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"Commons category\"", "http://www.wikidata.org/entity/P373"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P828\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"has cause\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"underlying cause, thing that ultimately resulted in this \
effect\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"has cause\"", "http://www.wikidata.org/entity/P828"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P910\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"topic's main category\""}], 
             ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"main Wikimedia category\""}]}], "\[RightAssociation]"}]}], 
       "]"}], "\"Wikidata\"", "\"topic's main category\"", 
     "http://www.wikidata.org/entity/P910"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1120\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"number of deaths\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"Total (cumulative) number of people who died since start as \
a direct result of an event or cause\""}]}], "\[RightAssociation]"}]}], "]"}],
      "\"Wikidata\"", "\"number of deaths\"", 
     "http://www.wikidata.org/entity/P1120"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1603\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"number of cases\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"cumulative number of confirmed, probable and suspected \
occurrences\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"number of cases\"", "http://www.wikidata.org/entity/P1603"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1846\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"distribution map\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"distribution of item on a mapped area (for  range map of \
taxa, use (P181).)\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"distribution map\"", "http://www.wikidata.org/entity/P1846"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P2572\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"hashtag\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"hashtag associated with this entity. Format: do not include \
the \\\"#\\\" symbol\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"",
      "\"hashtag\"", "http://www.wikidata.org/entity/P2572"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P3457\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"case fatality rate\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"proportion of patients who die of a particular medical \
condition out of all who have this condition within a given time frame\""}]}],
            "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"case fatality rate\"", "http://www.wikidata.org/entity/P3457"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P8010\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"number of recoveries\""}], 
             ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"number of cases that recovered from disease\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"number of recoveries\"", "http://www.wikidata.org/entity/P8010"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P8045\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"organized response related to outbreak\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"specific action taken or system used as a reaction to an \
outbreak\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"organized response related to outbreak\"", 
     "http://www.wikidata.org/entity/P8045"},
    "ExternalIdentifierURL"]}], "}"}]], "Output",
 CellChangeTimes->{3.798543630161694*^9, 3.7985594714577293`*^9, 
  3.798561469572691*^9, 3.798561615386573*^9, 3.798737058923437*^9, 
  3.7987372685547323`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"80bf9de6-3f58-4cdf-a25a-4867adc5f008"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "view", " ", "data", " ", "and", " ", "their", " ", "respective", " ", 
    "sources"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Values", "@", 
    RowBox[{"WikidataData", "[", 
     RowBox[{
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87718451\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              
              RowBox[{"\"Label\"", "\[Rule]", 
                "\"2020 COVID-19 pandemic in Nigeria\""}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Nigeria\"", 
        "http://www.wikidata.org/entity/Q87718451"},
       "ExternalIdentifierURL"], ",", " ", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"P1120\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                RowBox[{"\"Label\"", "\[Rule]", "\"number of deaths\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"Total (cumulative) number of people who died since start \
as a direct result of an event or cause\""}]}], "\[RightAssociation]"}]}], 
          "]"}], "\"Wikidata\"", "\"number of deaths\"", 
        "http://www.wikidata.org/entity/P1120"},
       "ExternalIdentifierURL"], ",", "\n", 
      RowBox[{"Method", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<StatementFormat\>\"", " ", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"\"\<Association\>\"", ",", " ", 
           RowBox[{"\"\<IncludeQualifiers\>\"", "\[Rule]", "True"}], ",", " ", 
           RowBox[{"\"\<IncludeReferences\>\"", "\[Rule]", "True"}]}], 
          "}"}]}], "}"}]}]}], "]"}]}], " ", "//", " ", 
   RowBox[{
    RowBox[{"Short", "[", 
     RowBox[{"#", ",", "5"}], "]"}], "&"}]}]}]], "Code",
 CellChangeTimes->{{3.7985437029567957`*^9, 3.798543704186692*^9}, {
   3.798543855878172*^9, 3.798544005067494*^9}, {3.7985440584059563`*^9, 
   3.79854406188798*^9}, {3.79854409712136*^9, 3.798544222039139*^9}, 
   3.798544714972931*^9, {3.798545654438086*^9, 3.798545673943404*^9}, {
   3.798547562665012*^9, 3.798547563267274*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"a1147914-39a4-481b-8411-dd8c2a536862"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Tue 17 Mar 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "3", ",", "17"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{
           TemplateBox[{
             RowBox[{"ExternalIdentifier", "[", 
               RowBox[{"\"WikidataID\"", ",", "\"P585\"", ",", 
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"point in time\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"time and date something took place, existed or a \
statement was true\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
             "\"point in time\"", "http://www.wikidata.org/entity/P585"},
            "ExternalIdentifierURL"], "\[Rule]", 
           RowBox[{"{", 
            TemplateBox[{
              RowBox[{
                StyleBox[
                "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> 
                 Plain], "\"Mon 16 Mar 2020\""}], 
              RowBox[{"DateObject", "[", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16"}], "}"}], ",", 
                  "\"Day\"", ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
             "DateObject",
             Editable->False], "}"}]}], ",", 
          RowBox[{
           TemplateBox[{
             RowBox[{"ExternalIdentifier", "[", 
               RowBox[{"\"WikidataID\"", ",", "\"P248\"", ",", 
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"stated in\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"to be used in the references field to refer to the \
information document or database in which a claim is made; for qualifiers use \
P805\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
             "\"stated in\"", "http://www.wikidata.org/entity/P248"},
            "ExternalIdentifierURL"], "\[Rule]", 
           RowBox[{"{", 
            TemplateBox[{
              RowBox[{"ExternalIdentifier", "[", 
                RowBox[{"\"WikidataID\"", ",", "\"Q87779474\"", ",", 
                  RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"Novel Coronavirus (2019-nCoV) Situation Report 56\""}],
                     ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"report from the WHO about COVID-19 epidemic at 16 \
March 2020\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
              "\"Novel Coronavirus (2019-nCoV) Situation Report 56\"", 
              "http://www.wikidata.org/entity/Q87779474"},
             "ExternalIdentifierURL"], "}"}]}]}], "\[RightAssociation]"}], 
        ",", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P248\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"stated in\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"to be used in the references field to refer to the \
information document or database in which a claim is made; for qualifiers use \
P805\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"stated in\"", "http://www.wikidata.org/entity/P248"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           TemplateBox[{
             RowBox[{"ExternalIdentifier", "[", 
               RowBox[{"\"WikidataID\"", ",", "\"Q87843252\"", ",", 
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"Novel Coronavirus (2019-nCoV) Situation Report 57\""}],
                     ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"report from the WHO about COVID-19 epidemic at 17 \
March 2020\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
             "\"Novel Coronavirus (2019-nCoV) Situation Report 57\"", 
             "http://www.wikidata.org/entity/Q87843252"},
            "ExternalIdentifierURL"], "}"}]}], "\[RightAssociation]"}], ",", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P143\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"imported from Wikimedia project\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"source of this claim's value; used in references \
section by bots importing data from Wikimedia projects; also allowed to be \
used for manual imports\""}]}], "\[RightAssociation]"}]}], "]"}], 
            "\"Wikidata\"", "\"imported from Wikimedia project\"", 
            "http://www.wikidata.org/entity/P143"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           TemplateBox[{
             RowBox[{"ExternalIdentifier", "[", 
               RowBox[{"\"WikidataID\"", ",", "\"Q328\"", ",", 
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"English Wikipedia\""}],
                     ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"English\:2011language edition of the free online \
encyclopedia\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
             "\"English Wikipedia\"", "http://www.wikidata.org/entity/Q328"},
            "ExternalIdentifierURL"], "}"}]}], "\[RightAssociation]"}]}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"103.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Wed 6 May 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "5", ",", "6"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P813\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"retrieved\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"date or point in time that information was retrieved \
from a database or website (for use in online sources)\""}]}], 
                  "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"retrieved\"", "http://www.wikidata.org/entity/P813"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           TemplateBox[{
             RowBox[{
               StyleBox[
               "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain],
                "\"Thu 7 May 2020\""}], 
             RowBox[{"DateObject", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"2020", ",", "5", ",", "7"}], "}"}], ",", 
                 "\"Day\"", ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
            "DateObject",
            Editable->False], "}"}]}], ",", 
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P854\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"reference URL\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"should be used for Internet URLs as references. Use \\\
\"Wikimedia import URL\\\" (P4656) for interwiki links\""}]}], 
                  "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"reference URL\"", "http://www.wikidata.org/entity/P854"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"URL", "[", 
            TemplateBox[{"\"https://github.com/datasets/covid-19\""},
             "URLArgument"], "]"}], "}"}]}]}], "\[RightAssociation]"}], 
       "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"143.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Sun 10 May 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "5", ",", "10"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P813\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"retrieved\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"date or point in time that information was retrieved \
from a database or website (for use in online sources)\""}]}], 
                  "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"retrieved\"", "http://www.wikidata.org/entity/P813"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           TemplateBox[{
             RowBox[{
               StyleBox[
               "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain],
                "\"Tue 12 May 2020\""}], 
             RowBox[{"DateObject", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"2020", ",", "5", ",", "12"}], "}"}], ",", 
                 "\"Day\"", ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
            "DateObject",
            Editable->False], "}"}]}], ",", 
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P854\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"reference URL\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"should be used for Internet URLs as references. Use \\\
\"Wikimedia import URL\\\" (P4656) for interwiki links\""}]}], 
                  "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"reference URL\"", "http://www.wikidata.org/entity/P854"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"URL", "[", 
            TemplateBox[{"\"https://datahub.io/core/covid-19\""},
             "URLArgument"], "]"}], "}"}]}], ",", 
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P7793\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", "\"filename in archive\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"qualifier and referencing property to identify the \
specific file within a compressed archive that is relevant to a \
statement\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"filename in archive\"", "http://www.wikidata.org/entity/P7793"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", "\<\"r/countries-aggregated.csv\"\>", "}"}]}]}], 
        "\[RightAssociation]"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"158.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Tue 12 May 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "5", ",", "12"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P813\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"retrieved\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"date or point in time that information was retrieved \
from a database or website (for use in online sources)\""}]}], 
                  "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"retrieved\"", "http://www.wikidata.org/entity/P813"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           TemplateBox[{
             RowBox[{
               StyleBox[
               "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain],
                "\"Thu 14 May 2020\""}], 
             RowBox[{"DateObject", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"2020", ",", "5", ",", "14"}], "}"}], ",", 
                 "\"Day\"", ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
            "DateObject",
            Editable->False], "}"}]}], ",", 
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P854\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"reference URL\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"should be used for Internet URLs as references. Use \\\
\"Wikimedia import URL\\\" (P4656) for interwiki links\""}]}], 
                  "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"reference URL\"", "http://www.wikidata.org/entity/P854"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"URL", "[", 
            TemplateBox[{"\"https://datahub.io/core/covid-19\""},
             "URLArgument"], "]"}], "}"}]}], ",", 
         RowBox[{
          TemplateBox[{
            RowBox[{"ExternalIdentifier", "[", 
              RowBox[{"\"WikidataID\"", ",", "\"P7793\"", ",", 
                RowBox[{"\[LeftAssociation]", 
                  RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", "\"filename in archive\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"qualifier and referencing property to identify the \
specific file within a compressed archive that is relevant to a \
statement\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
            "\"filename in archive\"", "http://www.wikidata.org/entity/P7793"},
           "ExternalIdentifierURL"], "\[Rule]", 
          RowBox[{"{", "\<\"r/countries-aggregated.csv\"\>", "}"}]}]}], 
        "\[RightAssociation]"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Sat 28 Mar 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "3", ",", "28"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}]}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "21", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"68.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Fri 1 May 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "5", ",", "1"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         TemplateBox[{
           RowBox[{"ExternalIdentifier", "[", 
             RowBox[{"\"WikidataID\"", ",", "\"P854\"", ",", 
               RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                   RowBox[{"\"Label\"", "\[Rule]", "\"reference URL\""}], ",", 
                   
                   RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"should be used for Internet URLs as references. Use \\\
\"Wikimedia import URL\\\" (P4656) for interwiki links\""}]}], 
                 "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
           "\"reference URL\"", "http://www.wikidata.org/entity/P854"},
          "ExternalIdentifierURL"], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"URL", "[", 
           
           TemplateBox[{
            "\"https://ncdc.gov.ng/diseases/sitreps/?cat=14&name=An%20update%\
20of%20COVID-19%20outbreak%20in%20Nigeria\""},
            "URLArgument"], "]"}], "}"}]}], "\[RightAssociation]"}], "}"}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"85.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Sat 2 May 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "5", ",", "2"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         TemplateBox[{
           RowBox[{"ExternalIdentifier", "[", 
             RowBox[{"\"WikidataID\"", ",", "\"P854\"", ",", 
               RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                   RowBox[{"\"Label\"", "\[Rule]", "\"reference URL\""}], ",", 
                   
                   RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"should be used for Internet URLs as references. Use \\\
\"Wikimedia import URL\\\" (P4656) for interwiki links\""}]}], 
                 "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
           "\"reference URL\"", "http://www.wikidata.org/entity/P854"},
          "ExternalIdentifierURL"], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"URL", "[", 
           
           TemplateBox[{
            "\"https://ncdc.gov.ng/diseases/sitreps/?cat=14&name=An%20update%\
20of%20COVID-19%20outbreak%20in%20Nigeria\""},
            "URLArgument"], "]"}], "}"}]}], "\[RightAssociation]"}], "}"}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"87.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Sun 3 May 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "5", ",", "3"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         TemplateBox[{
           RowBox[{"ExternalIdentifier", "[", 
             RowBox[{"\"WikidataID\"", ",", "\"P854\"", ",", 
               RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                   RowBox[{"\"Label\"", "\[Rule]", "\"reference URL\""}], ",", 
                   
                   RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"should be used for Internet URLs as references. Use \\\
\"Wikimedia import URL\\\" (P4656) for interwiki links\""}]}], 
                 "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
           "\"reference URL\"", "http://www.wikidata.org/entity/P854"},
          "ExternalIdentifierURL"], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"URL", "[", 
           
           TemplateBox[{
            "\"https://ncdc.gov.ng/diseases/sitreps/?cat=14&name=An%20update%\
20of%20COVID-19%20outbreak%20in%20Nigeria\""},
            "URLArgument"], "]"}], "}"}]}], "\[RightAssociation]"}], "}"}]}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"93.`", ",", 
      RowBox[{"{", 
       TemplateBox[{
         RowBox[{
           StyleBox[
           "\"Day: \"", FontColor -> GrayLevel[0.5], FontWeight -> Plain], 
           "\"Mon 4 May 2020\""}], 
         RowBox[{"DateObject", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"2020", ",", "5", ",", "4"}], "}"}], ",", "\"Day\"", 
             ",", "\"Gregorian\"", ",", "0.`"}], "]"}]},
        "DateObject",
        Editable->False], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         TemplateBox[{
           RowBox[{"ExternalIdentifier", "[", 
             RowBox[{"\"WikidataID\"", ",", "\"P854\"", ",", 
               RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                   RowBox[{"\"Label\"", "\[Rule]", "\"reference URL\""}], ",", 
                   
                   RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"should be used for Internet URLs as references. Use \\\
\"Wikimedia import URL\\\" (P4656) for interwiki links\""}]}], 
                 "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
           "\"reference URL\"", "http://www.wikidata.org/entity/P854"},
          "ExternalIdentifierURL"], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"URL", "[", 
           
           TemplateBox[{
            "\"https://ncdc.gov.ng/diseases/sitreps/?cat=14&name=An%20update%\
20of%20COVID-19%20outbreak%20in%20Nigeria\""},
            "URLArgument"], "]"}], "}"}]}], "\[RightAssociation]"}], "}"}]}], 
     "}"}]}], "}"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{
  3.798543704798045*^9, {3.798543856552866*^9, 3.7985438786948223`*^9}, {
   3.7985439095998707`*^9, 3.798543916295252*^9}, {3.798543951797491*^9, 
   3.798544006966312*^9}, 3.7985440635562563`*^9, 3.798544102053095*^9, {
   3.7985441917857037`*^9, 3.798544224076453*^9}, {3.798545662908031*^9, 
   3.798545676252144*^9}, 3.79855950772156*^9, 3.79856147234435*^9, 
   3.798561617738882*^9, 3.798737061568696*^9, 3.798737270531022*^9},
 CellLabel->
  "Out[61]//Short=",ExpressionUUID->"8515b3a0-7ace-4035-86be-02a80bef717f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"get", " ", "data", " ", "for", " ", 
    RowBox[{"no", ".", " ", "of"}], " ", "cases", " ", "and", " ", "deaths"}],
    " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"casesAndDeathsInNigeria", " ", "=", " ", 
    RowBox[{
     RowBox[{"Association", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"#", " ", "\[Rule]", " ", 
         RowBox[{"WikidataData", "[", 
          RowBox[{
           TemplateBox[{
             RowBox[{"ExternalIdentifier", "[", 
               RowBox[{"\"WikidataID\"", ",", "\"Q87718451\"", ",", 
                 RowBox[{"\[LeftAssociation]", 
                   
                   RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 COVID-19 pandemic in Nigeria\""}], 
                   "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
             "\"2020 COVID-19 pandemic in Nigeria\"", 
             "http://www.wikidata.org/entity/Q87718451"},
            "ExternalIdentifierURL"], ",", " ", "#", ",", "\n", 
           RowBox[{"Method", " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<StatementFormat\>\"", " ", "\[Rule]", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<Association\>\"", ",", " ", 
                RowBox[{"\"\<IncludeQualifiers\>\"", "\[Rule]", "True"}], ",",
                 " ", 
                RowBox[{"\"\<IncludeReferences\>\"", "\[Rule]", "False"}]}], 
               "}"}]}], "}"}]}]}], "]"}]}], "&"}], "/@", 
       RowBox[{"{", 
        RowBox[{
         TemplateBox[{
           RowBox[{"ExternalIdentifier", "[", 
             RowBox[{"\"WikidataID\"", ",", "\"P1603\"", ",", 
               RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                   RowBox[{"\"Label\"", "\[Rule]", "\"number of cases\""}], 
                   ",", 
                   
                   RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"cumulative number of confirmed, probable and suspected \
occurrences\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
           "\"number of cases\"", "http://www.wikidata.org/entity/P1603"},
          "ExternalIdentifierURL"], ",", "  ", 
         TemplateBox[{
           RowBox[{"ExternalIdentifier", "[", 
             RowBox[{"\"WikidataID\"", ",", "\"P1120\"", ",", 
               RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                   RowBox[{"\"Label\"", "\[Rule]", "\"number of deaths\""}], 
                   ",", 
                   
                   RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"Total (cumulative) number of people who died since \
start as a direct result of an event or cause\""}]}], 
                 "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
           "\"number of deaths\"", "http://www.wikidata.org/entity/P1120"},
          "ExternalIdentifierURL"]}], "}"}]}], "\[IndentingNewLine]", "]"}], "/.", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a_Association", " ", "/;", " ", 
        RowBox[{
         RowBox[{"Length", "[", "a", "]"}], "<", "2"}]}], ")"}], " ", 
      "\[Rule]", " ", "Nothing"}]}]}], ";"}]}]], "Code",
 CellChangeTimes->{{3.7985447874908667`*^9, 3.798544826166315*^9}, {
   3.798544884447329*^9, 3.798544889667006*^9}, {3.7985450033855047`*^9, 
   3.798545022641119*^9}, 3.798545368121129*^9, {3.798545458441375*^9, 
   3.798545476979721*^9}, {3.798545514224079*^9, 3.798545532171706*^9}, {
   3.798545680934461*^9, 3.798545693654133*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"1a78227a-723d-4ba4-9429-b21981a88c42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"plot", " ", "data"}], " ", "*)"}], "\n", 
  RowBox[{"DateListPlot", "[", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Reverse", "[", 
        RowBox[{"Flatten", "@", "#"}], "]"}], "&"}], ",", " ", 
      RowBox[{"Values", "/@", "casesAndDeathsInNigeria"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{";;", ",", " ", ";;"}], "}"}]}], "]"}], ",", "\n", 
    RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", " ", 
    RowBox[{
    "PlotLabel", "\[Rule]", 
     "\"\<Number of Covid-19 cases and deaths in Nigeria\>\""}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.798544834977453*^9, 3.7985449856532784`*^9}, {
  3.798545504052247*^9, 3.798545504230433*^9}, {3.798545555451539*^9, 
  3.7985456231158648`*^9}, {3.79854569707358*^9, 3.798545699733856*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"854785be-67f3-4c59-89b4-a260423f6032"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw90L9LAmEcx/GH/oIQAqGGLvoDpDnoqdCu2rSt7UIEMa4UBxFKrCEIAn+A
RWByIdzs0CgiDQUN0V8g4iAYISJNDfn99Hw6OO553XC8P2c5bjQ+p5SyZrc8
Z9cktv25+XdUWl6vho31gbjs0Z1DcfeN7jniyTetEuIVK2K8nBQXs7Q6Frce
6A7cf/23Kw5MaX0qTts7xvMZsZeme7CzaBuf5NAbpht59Lr0+xl67+hxAb3P
9O2FOPpFv1yiP7jL71+hf4u2r9Gfov0b9NfopRL6R/Sggv6FPboq/tigxzX8
/ySt7sVrVTpUx942PW1g75D2PewN7Bv/PGLvOj1oYl+JLvv66DzYrtBPvv4F
X5B/pQ==
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQSfgp3fODIgAJOKK4z/wR5IJFXA+QwOQHzoDCpf
SdENxhcA8ZtK4XwREF/oC5wvAeIXebjD+DIg/qIiOF8FxE+S9oDxNUD8Sa5w
vhbY/nw43xDE/zQTzjcGu+cInG8K4ge9g/PNwO6T8ITxLUH8TU5wvg2I/ygH
zrcHu386nO8Adv9rON8FxL9k7wXju4H4TFkwfoMniG80BS7vC/bfPjg/EOy/
FzC+QyjYf0LeUP4BMP+TDYzvEA72z0S4fCTYfVY+UP6DRLD7+mD8A8kOAK24
XAI=
         "]]}}, {{
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}}, {{
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}, {}, {}, {}}, {{
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]]}, {
        Directive[
         PointSize[0.011000000000000001`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]]}, {}, {}, {}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {False, False}, AxesLabel -> {None, None}, 
     AxesOrigin -> {3.7933956*^9, 0}, DisplayFunction :> Identity, 
     Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {
        Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
        Charting`DateTicksFunction[
        Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, 
     GridLines -> {Charting`ScaledTickValues[
        ((Transpose[{#, 
          Table[
           Directive[
            GrayLevel[0.4, 0.5], 
            AbsoluteThickness[1], 
            AbsoluteDashing[{1, 2}]], {
            Length[#]}]}]& )[
         Part[
          Select[
           Charting`DateTicksFunction[
           Automatic, DateTicksFormat -> {Automatic}][
            SlotSequence[1]], And[
            FreeQ[#, 
             Alternatives["", 
              Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
          1]]& )[
         SlotSequence[1]], {Identity, Identity}]& , Automatic}, 
     GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], 
     Method -> {
      "NoShowPlotTheme" -> "Detailed", "OptimizePlotMarkers" -> True, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Number of Covid-19 cases and deaths in Nigeria\"", 
       TraditionalForm], 
     PlotRange -> {{3.7933956*^9, 3.798234*^9}, {0, 3163.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {{}, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{
       TemplateBox[{
         RowBox[{"ExternalIdentifier", "[", 
           RowBox[{"\"WikidataID\"", ",", "\"P1603\"", ",", 
             RowBox[{"\[LeftAssociation]", 
               RowBox[{
                 RowBox[{"\"Label\"", "\[Rule]", "\"number of cases\""}], ",", 
                 
                 RowBox[{
                  "\"Description\"", "\[Rule]", 
                   "\"cumulative number of confirmed, probable and suspected \
occurrences\""}]}], "\[RightAssociation]"}]}], "]"}], 
         FormBox["\"Wikidata\"", TraditionalForm], 
         FormBox["\"number of cases\"", TraditionalForm], 
         "http://www.wikidata.org/entity/P1603"}, "ExternalIdentifierURL"], 
       TemplateBox[{
         RowBox[{"ExternalIdentifier", "[", 
           RowBox[{"\"WikidataID\"", ",", "\"P1120\"", ",", 
             RowBox[{"\[LeftAssociation]", 
               RowBox[{
                 RowBox[{"\"Label\"", "\[Rule]", "\"number of deaths\""}], 
                 ",", 
                 
                 RowBox[{
                  "\"Description\"", "\[Rule]", 
                   "\"Total (cumulative) number of people who died since \
start as a direct result of an event or cause\""}]}], 
               "\[RightAssociation]"}]}], "]"}], 
         FormBox["\"Wikidata\"", TraditionalForm], 
         FormBox["\"number of deaths\"", TraditionalForm], 
         "http://www.wikidata.org/entity/P1120"}, "ExternalIdentifierURL"]}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.798544857600659*^9, 3.798544939759014*^9}, {
   3.79854498039657*^9, 3.7985449862121487`*^9}, 3.798545434428244*^9, {
   3.7985455051112747`*^9, 3.79854557212893*^9}, {3.798545604956835*^9, 
   3.798545630546034*^9}, 3.7985595181609507`*^9, 3.798561474924707*^9, 
   3.798561620888216*^9, 3.7987370634099817`*^9, 3.798737272648448*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"0dab1b74-09d2-405f-92f6-4c7cc612e2db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"with", " ", "Wikidata"}], ",", " ", 
    RowBox[{"properties", " ", "have", " ", "properties", " ", 
     RowBox[{"too", ".", " ", "this"}], " ", "is", " ", "great", " ", "for", 
     " ", "building", " ", "a", " ", "custom", " ", "knowledge", " ", "graph",
      " ", "for", " ", "a", " ", "given", " ", "topic"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"WikidataData", "[", 
   RowBox[{
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"P1603\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            RowBox[{
              RowBox[{"\"Label\"", "\[Rule]", "\"number of cases\""}], ",", 
              
              RowBox[{"\"Description\"", "\[Rule]", 
                "\"cumulative number of confirmed, probable and suspected \
occurrences\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
      "\"number of cases\"", "http://www.wikidata.org/entity/P1603"},
     "ExternalIdentifierURL"], ",", " ", "\"\<NonIdentifierProperties\>\""}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.7985431884659986`*^9, 3.79854318941918*^9}, {
   3.798543238297576*^9, 3.798543276386415*^9}, {3.798543363796445*^9, 
   3.7985433643091803`*^9}, {3.798543526009624*^9, 3.7985435266200457`*^9}, {
   3.798545758004409*^9, 3.7985458144136477`*^9}, 3.798545899427846*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"03c7d746-71a6-4588-98c9-be9a693ad382"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1629\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"subject item of this property\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"relationship represented by the property\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"subject item of this property\"", 
     "http://www.wikidata.org/entity/P1629"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P31\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"instance of\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"that class of which this subject is a particular example \
and member\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"instance of\"", "http://www.wikidata.org/entity/P31"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1659\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"see also\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"used to indicate another property that might provide \
additional information about the Wikidata-property\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"see also\"", 
     "http://www.wikidata.org/entity/P1659"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1855\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{
              "\"Label\"", "\[Rule]", "\"Wikidata property example\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"example where this Wikidata property is used; target item \
is one that would use this property, with qualifier the property being \
described given the associated value\""}]}], "\[RightAssociation]"}]}], "]"}],
      "\"Wikidata\"", "\"Wikidata property example\"", 
     "http://www.wikidata.org/entity/P1855"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P2302\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"property constraint\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"constraint applicable to this Wikidata property\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"property constraint\"", "http://www.wikidata.org/entity/P2302"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P2875\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"property usage tracking category\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"category tracking a Wikidata property in sister \
projects\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"property usage tracking category\"", 
     "http://www.wikidata.org/entity/P2875"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P3254\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"property proposal discussion\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               
               "\"URL of the page (or page section) on which the creation of \
the property was discussed\""}]}], "\[RightAssociation]"}]}], "]"}], 
     "\"Wikidata\"", "\"property proposal discussion\"", 
     "http://www.wikidata.org/entity/P3254"},
    "ExternalIdentifierURL"]}], "}"}]], "Output",
 CellChangeTimes->{{3.798543261552981*^9, 3.798543278255651*^9}, 
   3.798543365218142*^9, 3.7985435277173243`*^9, 3.7985595532765512`*^9, 
   3.798561475265152*^9, 3.798561621700204*^9, 3.7987370638188868`*^9, 
   3.798737273051355*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"604cbce5-b1f1-42bf-bf43-d674b544b414"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"example", " ", "property", " ", "of", " ", "a", " ", "property"}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"WikidataData", "[", 
   RowBox[{
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"P1603\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            RowBox[{
              RowBox[{"\"Label\"", "\[Rule]", "\"number of cases\""}], ",", 
              
              RowBox[{"\"Description\"", "\[Rule]", 
                "\"cumulative number of confirmed, probable and suspected \
occurrences\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
      "\"number of cases\"", "http://www.wikidata.org/entity/P1603"},
     "ExternalIdentifierURL"], ",", " ", 
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"P1659\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            RowBox[{
              RowBox[{"\"Label\"", "\[Rule]", "\"see also\""}], ",", 
              
              RowBox[{"\"Description\"", "\[Rule]", 
                "\"used to indicate another property that might provide \
additional information about the Wikidata-property\""}]}], 
            "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"see also\"", 
      "http://www.wikidata.org/entity/P1659"},
     "ExternalIdentifierURL"]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.798545833778915*^9, 3.79854587225504*^9}, 
   3.798545905920177*^9},
 CellLabel->"In[65]:=",ExpressionUUID->"b567dd33-007a-4e1f-becf-333ecca10e3b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P8049\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"number of hospitalized cases\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"number of cases that are hospitalized\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"number of hospitalized cases\"", 
     "http://www.wikidata.org/entity/P8049"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P8204\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"tabular case data\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"tabular data on Wikimedia Commons of confirmed cases, \
recoveries, deaths, etc. due to a medical event; corresponds to P8011, P1603, \
P8049, P8010, P1120. Do not delete such statements.\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"tabular case data\"", "http://www.wikidata.org/entity/P8204"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1120\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"number of deaths\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"Total (cumulative) number of people who died since start as \
a direct result of an event or cause\""}]}], "\[RightAssociation]"}]}], "]"}],
      "\"Wikidata\"", "\"number of deaths\"", 
     "http://www.wikidata.org/entity/P1120"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1193\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"prevalence\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"portion of a population with a given disease\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"prevalence\"",
      "http://www.wikidata.org/entity/P1193"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P2844\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"incidence\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"probability of occurrence of a given condition in a \
population within a specified period of time\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", "\"incidence\"", 
     "http://www.wikidata.org/entity/P2844"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P8011\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"number of clinical tests\""}],
              ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"cumulative number of clinical tests\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"number of clinical tests\"", "http://www.wikidata.org/entity/P8011"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P8010\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"number of recoveries\""}], 
             ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"number of cases that recovered from disease\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"number of recoveries\"", "http://www.wikidata.org/entity/P8010"},
    "ExternalIdentifierURL"]}], "}"}]], "Output",
 CellChangeTimes->{{3.798545834349739*^9, 3.798545872674337*^9}, 
   3.798559554248769*^9, 3.798561475551242*^9, 3.798561622533647*^9, 
   3.798737064217628*^9, 3.798737273359334*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"026e330c-b77b-413f-8f29-0261dc3d4665"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "see", " ", "info", " ", "on", " ", "a", " ", "given", " ", "data", " ", 
      RowBox[{"collection", ".", " ", "this"}], " ", "shows", " ", "the", " ",
       "braoder", " ", "context", " ", "of", " ", "the", " ", "data"}], " ", 
     "-", " ", 
     RowBox[{
     "it", " ", "could", " ", "be", " ", "subset", " ", "of", " ", "a", " ", 
      "bigger", " ", "dataset"}]}], ",", " ", 
    RowBox[{
     RowBox[{"and", "/", "or"}], " ", "have", " ", 
     RowBox[{"it", "'"}], "s", " ", "own", " ", 
     RowBox[{"parts", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"WikidataData", "[", 
   RowBox[{
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"Q83873577\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            RowBox[{
              
              RowBox[{"\"Label\"", "\[Rule]", 
                "\"2020 COVID-19 pandemic in the United States\""}], ",", 
              
              RowBox[{"\"Description\"", "\[Rule]", 
                "\"viral outbreak in the United States\""}]}], 
            "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
      "\"2020 COVID-19 pandemic in the United States\"", 
      "http://www.wikidata.org/entity/Q83873577"},
     "ExternalIdentifierURL"], ",", " ", "\"\<Dataset\>\""}], "]"}]}]], "Code",
 CellChangeTimes->{{3.798391718245682*^9, 3.798391763607583*^9}, {
   3.7983918011400127`*^9, 3.798391868529909*^9}, 3.7985459985386333`*^9},
 CellLabel->"In[66]:=",ExpressionUUID->"40679cf5-30d1-436d-95a2-5d8faef8cd8b"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> Association[ExternalIdentifier["WikidataID", "P17", 
         Association[
         "Label" -> "country", "Description" -> 
          "sovereign state of this item (not to be used for human beings)"]] -> {
         ExternalIdentifier["WikidataID", "Q30", 
          Association[
          "Label" -> "United States of America", "Description" -> 
           "country in North America"]]}, 
       ExternalIdentifier["WikidataID", "P18", 
         Association[
         "Label" -> "image", "Description" -> 
          "image of relevant illustration of the subject; if available, use \
more specific properties (sample: coat of arms image, locator map, flag \
image, signature image, logo image, collage image); only images which exist \
on Wikimedia Commons are acceptable"]] -> {
         URL[
         "http://commons.wikimedia.org/wiki/Special:FilePath/Donald%20Trump%\
20Coronavirus%20briefing.jpg"]}, ExternalIdentifier["WikidataID", "P31", 
         Association[
         "Label" -> "instance of", "Description" -> 
          "that class of which this subject is a particular example and \
member"]] -> {
         ExternalIdentifier["WikidataID", "Q3241045", 
          Association[
          "Label" -> "disease outbreak", "Description" -> 
           "sudden increase in occurrences of a disease in a particular time \
and place"]], 
         ExternalIdentifier["WikidataID", "Q216227", 
          Association[
          "Label" -> "state of emergency", "Description" -> 
           "legal declaration or de facto acts by a government allowing \
assumption of extraordinary powers"]]}, 
       ExternalIdentifier["WikidataID", "P361", 
         Association[
         "Label" -> "part of", "Description" -> 
          "object of which the subject is a part (if this subject is already \
part of object A which is a part of object B, then please only make the \
subject part of object A). Inverse property of \"has part\" (P527, see also \
\"has parts of the class\" (P2670))."]] -> {
         ExternalIdentifier["WikidataID", "Q83741704", 
          Association[
          "Label" -> "COVID-19 pandemic by country and territory", 
           "Description" -> 
           "details regarding the 2019\[Dash]20 coronavirus pandemic by \
country and territory"]], 
         ExternalIdentifier["WikidataID", "Q86695115", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in North America", "Description" -> 
           "viral outbreak in North America"]]}, 
       ExternalIdentifier["WikidataID", "P373", 
         Association[
         "Label" -> "Commons category", "Description" -> 
          "name of the Wikimedia Commons category containing files related to \
this item (without the prefix \"Category:\")"]] -> {
        "COVID-19 pandemic in the United States"}, 
       ExternalIdentifier["WikidataID", "P276", 
         Association[
         "Label" -> "location", "Description" -> 
          "location of the item, physical object or event is within. In case \
of an administrative entity use P131. In case of a distinct terrain feature \
use P706."]] -> {
         ExternalIdentifier["WikidataID", "Q30", 
          Association[
          "Label" -> "United States of America", "Description" -> 
           "country in North America"]]}, 
       ExternalIdentifier["WikidataID", "P973", 
         Association[
         "Label" -> "described at URL", "Description" -> 
          "item is described at the following URL"]] -> {
         URL["https://www.cdc.gov/coronavirus/2019-ncov/cases-in-us.html"], 
         URL["https://www.worldometers.info/coronavirus/country/us/"]}, 
       ExternalIdentifier["WikidataID", "P580", 
         Association[
         "Label" -> "start time", "Description" -> 
          "time an item begins to exist or a statement starts being valid"]] -> {
         DateObject[{2020, 1, 21}, "Day", "Gregorian", 0.]}, 
       ExternalIdentifier["WikidataID", "P828", 
         Association[
         "Label" -> "has cause", "Description" -> 
          "underlying cause, thing that ultimately resulted in this effect"]] -> {
         ExternalIdentifier["WikidataID", "Q82069695", 
          Association[
          "Label" -> "SARS-CoV-2", "Description" -> 
           "strain of virus causing the ongoing pandemic of coronavirus \
disease 2019 (COVID-19)"]], 
         ExternalIdentifier["WikidataID", "Q84263196", 
          Association[
          "Label" -> "COVID-19", "Description" -> 
           "zoonotic respiratory syndrome and infectious disease in humans, \
caused by SARS coronavirus 2"]]}, ExternalIdentifier["WikidataID", "P856", 
         Association[
         "Label" -> "official website", "Description" -> 
          "URL of the official homepage of an item (current or former) [if \
the homepage changes, add an additional statement with preferred rank. Do not \
remove the former URL]"]] -> {
         URL["https://coronavirus.gov/"]}, 
       ExternalIdentifier["WikidataID", "P910", 
         Association[
         "Label" -> "topic's main category", "Description" -> 
          "main Wikimedia category"]] -> {
         ExternalIdentifier["WikidataID", "Q87568950", 
          Association[
          "Label" -> 
           "Category:2020 coronavirus pandemic in the United States", 
           "Description" -> "Wikimedia category"]]}, 
       ExternalIdentifier["WikidataID", "P527", 
         Association[
         "Label" -> "has part", "Description" -> 
          "part of this subject; inverse property of \"part of\" (P361). See \
also \"has parts of the class\" (P2670)."]] -> {
         ExternalIdentifier["WikidataID", "Q87660693", 
          Association[
          "Label" -> "COVID-19 pandemic in Puerto Rico", "Description" -> 
           "Details of ongoing pandemic in Puerto Rico"]], 
         ExternalIdentifier["WikidataID", "Q87742116", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Louisiana", "Description" -> 
           "pandemic in Louisiana, United States"]], 
         ExternalIdentifier["WikidataID", "Q87414741", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in New York", "Description" -> 
           "ongoing viral pandemic in New York state, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743879", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Connecticut", "Description" -> 
           "pandemic in Connecticut, United States"]], 
         ExternalIdentifier["WikidataID", "Q87745202", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Nevada", "Description" -> 
           "pandemic in Nevada, United States"]], 
         ExternalIdentifier["WikidataID", "Q87409953", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Washington", "Description" -> 
           "viral ongoing pandemic in Washington state, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746160", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Oklahoma", "Description" -> 
           "pandemic in Oklahoma, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746032", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in South Dakota", "Description" -> 
           "pandemic in South Dakota, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742765", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Texas", "Description" -> 
           "pandemic in Texas, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742103", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Florida", "Description" -> 
           "pandemic in Florida, United States"]], 
         ExternalIdentifier["WikidataID", "Q87816112", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in American Samoa", 
           "Description" -> "American Samoa"]], 
         ExternalIdentifier["WikidataID", "Q87742107", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Georgia", "Description" -> 
           "pandemic in Georgia, United States"]], 
         ExternalIdentifier["WikidataID", "Q87663590", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in New Jersey", "Description" -> 
           "Details of ongoing viral pandemic in New Jersey"]], 
         ExternalIdentifier["WikidataID", "Q87599914", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Massachusetts", "Description" -> 
           "ongoing viral outbreak in Massachusetts, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742718", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Minnesota", "Description" -> 
           "pandemic in Minnesota, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743903", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Utah", "Description" -> 
           "pandemic in Utah, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742125", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Pennsylvania", "Description" -> 
           "pandemic in Pennsylvania, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746397", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Alaska", "Description" -> 
           "pandemic in Alaska, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742750", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Kansas", "Description" -> 
           "pandemic in Kansas, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743852", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Tennessee", "Description" -> 
           "pandemic in Tennessee, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746177", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Hawaii", "Description" -> 
           "pandemic in Hawaii, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746410", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in North Dakota", "Description" -> 
           "pandemic in North Dakota, United States"]], 
         ExternalIdentifier["WikidataID", "Q87730011", 
          Association[
          "Label" -> 
           "COVID-19 pandemic in the United States Virgin Islands"]], 
         ExternalIdentifier["WikidataID", "Q87742754", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Michigan", "Description" -> 
           "2020 pandemic in Michigan, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743873", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Ohio", "Description" -> 
           "pandemic in Ohio, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746043", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Montana", "Description" -> 
           "pandemic in Montana, United States"]], 
         ExternalIdentifier["WikidataID", "Q87745216", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Arkansas", "Description" -> 
           "pandemic in Arkansas, United States"]], 
         ExternalIdentifier["WikidataID", "Q87745208", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Nebraska", "Description" -> 
           "pandemic in Nebraska, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746132", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in New Hampshire", "Description" -> 
           "pandemic in New Hampshire, United States"]], 
         ExternalIdentifier["WikidataID", "Q87745981", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Kentucky", "Description" -> 
           "pandemic in Kentucky, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742131", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Washington, D.C.", 
           "Description" -> "pandemic in Washington, D.C., United States"]], 
         ExternalIdentifier["WikidataID", "Q87743899", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Indiana", "Description" -> 
           "pandemic in Indiana, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743905", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Iowa", "Description" -> 
           "pandemic in Iowa, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742118", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Maryland", "Description" -> 
           "pandemic in Maryland, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743900", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in South Carolina", 
           "Description" -> "pandemic in South Carolina, United States"]], 
         ExternalIdentifier["WikidataID", "Q87816426", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in the Northern Mariana Islands",
            "Description" -> "pandemic in Northern Mariana Islands"]], 
         ExternalIdentifier["WikidataID", "Q87769115", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Guam", "Description" -> 
           "pandemic in Guam, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742748", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Illinois", "Description" -> 
           "pandemic in Illinois, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743890", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Rhode Island", "Description" -> 
           "pandemic in Rhode Island, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743872", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Wisconsin", "Description" -> 
           "pandemic in Wisconsin, United States"]], 
         ExternalIdentifier["WikidataID", "Q87455852", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in California", "Description" -> 
           "public health event"]], 
         ExternalIdentifier["WikidataID", "Q87746304", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Maine", "Description" -> 
           "pandemic in Maine, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746018", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in New Mexico", "Description" -> 
           "pandemic in New Mexico, United States"]], 
         ExternalIdentifier["WikidataID", "Q87651920", 
          Association["Label" -> "2020 COVID-19 pandemic in Oregon"]], 
         ExternalIdentifier["WikidataID", "Q87742089", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Virginia", "Description" -> 
           "pandemic in Virginia, United States"]], 
         ExternalIdentifier["WikidataID", "Q87816110", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in West Virginia", "Description" -> 
           "pandemic in West Virginia, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742745", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Delaware", "Description" -> 
           "pandemic in Delaware, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746165", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Mississippi", "Description" -> 
           "pandemic in Mississippi, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746024", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Alabama", "Description" -> 
           "pandemic in Alabama, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746168", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Idaho", "Description" -> 
           "pandemic in Idaho, United States"]], 
         ExternalIdentifier["WikidataID", "Q87743878", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in North Carolina", 
           "Description" -> "pandemic in North Carolina, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746028", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Arizona", "Description" -> 
           "pandemic in Arizona, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746277", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Vermont", "Description" -> 
           "pandemic in Vermont, United States"]], 
         ExternalIdentifier["WikidataID", "Q87746359", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Wyoming", "Description" -> 
           "pandemic in Wyoming, United States"]], 
         ExternalIdentifier["WikidataID", "Q87742736", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Colorado", "Description" -> 
           "Ongoing COVID-19 viral pandemic in Colorado, United States"]], 
         ExternalIdentifier["WikidataID", "Q89490207", 
          Association[
          "Label" -> "COVID-19 pandemic on USS Theodore Roosevelt", 
           "Description" -> 
           "2020 coronavirus pandemic on the aircraft carrier USS Theodore \
Roosevelt (CVN-71)"]], 
         ExternalIdentifier["WikidataID", "Q89819517", 
          Association[
          "Label" -> 
           "2020 COVID-19 pandemic in the Guantanamo Bay Naval Base"]], 
         ExternalIdentifier["WikidataID", "Q87746176", 
          Association[
          "Label" -> "2020 COVID-19 pandemic in Missouri", "Description" -> 
           "pandemic in Missouri, United States"]]}, 
       ExternalIdentifier["WikidataID", "P3457", 
         Association[
         "Label" -> "case fatality rate", "Description" -> 
          "proportion of patients who die of a particular medical condition \
out of all who have this condition within a given time frame"]] -> \
CompressedData["
1:eJxTTMoPSmVkYGAwBOLKl2qGHGvW2M+aCQIr7SVZwvh0N821n3NEYUNRxkT7
Pys/XvJNmmC/Q671deCOPjhtueVE2b75XfbVIuvcH1a1QNVvtP9Vl7WnZPIK
+12ePEza7cvstdvFbp77vhgqvxBq3gKoOfPsgZLBj5fOhtMQ/R1Q/W1wOmz+
6rU34pfZa8b0H/qqscbe+r5/7/S8RfZL/RyEEw8vtv8g5hHwR2Kx/ZtAkMkb
of5YC6dPAl0rpb/WvtMx4ekFpdVQ96+yB3tfZpX9KpCzBFZA/bMETkdAFELD
Zyachrhzhr20/l0VtsapUPVT7G//BEtA3TcJTkPCuQdOd+c8/73y4yJ7WPgD
AKWxv4w=
        "], ExternalIdentifier["WikidataID", "P3479", 
         Association[
         "Label" -> "Omni topic ID", "Description" -> 
          "identifier for a topic, used by Omni and Aftonbladet"]] -> {
         ExternalIdentifier[
          ExternalIdentifier["WikidataID", "P3479", 
           Association[
           "Label" -> "Omni topic ID", "Description" -> 
            "identifier for a topic, used by Omni and Aftonbladet"]], 
          "d73a4655-3455-4719-9206-6561ff18cf18"]}, 
       ExternalIdentifier["WikidataID", "P3984", 
         Association[
         "Label" -> "subreddit", "Description" -> 
          "name of the Reddit forum associated to this subject"]] -> {
         ExternalIdentifier[
          ExternalIdentifier["WikidataID", "P3984", 
           Association[
           "Label" -> "subreddit", "Description" -> 
            "name of the Reddit forum associated to this subject"]], 
          "CoronavirusUS"]}, ExternalIdentifier["WikidataID", "P1120", 
         Association[
         "Label" -> "number of deaths", "Description" -> 
          "Total (cumulative) number of people who died since start as a \
direct result of an event or cause"]] -> CompressedData["
1:eJxTTMoPSmVkYGDwY4ABPQcIbQuhG1ygfCcIfaEIKj4LQhvUQeht28F0g/VR
MO0w7SqEVrgLpg+suw+mFZ4/QDNXCUpLgOkE1+dgegHfazA9gfcDRHw/hBYQ
+gimA7o+g+kNs79C9EcthNij8AxiT81LMG3wA6JOIO4LhGb4BrVPDUobQ2lL
CH0gFEI/yIfQPBMg9LvNEHrVeqj8HgjddABCnzgEoR+dgbjD5wKE9rsEERe7
DgkPlUcQcZ7HYPrB+ceo9sPdowJRf+gJmG5ofwERr3sFEf/wBkKXQ8Llg9Mn
MF1gCPGvwU4IfeHMF6h5H+xR6BMQ9QwN0VB/J0HpUghtMwVCJ3RA6IzFEHrF
Coh7RE5C7Je4gqofKAQiFuyGxB+D9DsIrfce4s4lkPhjsPjqAADVNnjR
        "], ExternalIdentifier["WikidataID", "P1424", 
         Association[
         "Label" -> "topic's main template", "Description" -> 
          "primary infobox or navigational template of this subject"]] -> {
         ExternalIdentifier["WikidataID", "Q89388402", 
          Association[
          "Label" -> 
           "Template:2020 coronavirus pandemic in the United States", 
           "Description" -> "Wikimedia template"]]}, 
       ExternalIdentifier["WikidataID", "P1542", 
         Association[
         "Label" -> "has effect", "Description" -> "effect of this cause"]] -> {
         ExternalIdentifier["WikidataID", "Q90840954", 
          Association[
          "Label" -> 
           "Impact of the 2019\[Dash]20 coronavirus pandemic on abortion in \
the United States"]]}, ExternalIdentifier["WikidataID", "P1603", 
         Association[
         "Label" -> "number of cases", "Description" -> 
          "cumulative number of confirmed, probable and suspected \
occurrences"]] -> CompressedData["
1:eJxTTMoPSmVkYGAoZIABDQcILQGlRdBoBeziIVMg9JeNYLrh5SkI/0UDhD6x
A0IbVINpg+UfwPSDZEZHEL0g4SmYf8OOC8zPeMILpr8wCIPplh4RMG2TLwGm
CzbKgemqm0oQ+bUqYPpCtxqYZrCYBbGvoRbqTn8wPeuZpiOqP2G0Hpk0xFwm
WwOwuWJOhmDabRuEbnxkBKbf9pmAaZ/LpmB6L6M5xB0VM8H65ZwVoO7SckCm
DRT0wOJ/l5pB5dUcsNMyEHrJUggt0A+hPxRD6JOvwPQC7X9g+kH2TzCtwMAC
NnfJKwGI+RqHwOJVLxXB/LZjymD63ApViHxDEsQ8hQSovdFguuCPBtR9OhDx
Bi8UOoRXGxI+gbqQ+L0K8Vf+Vki4OWtDwidLFRI+O21h/v1gj0xvuP0FbN6r
2fpg+Zo6U6g6Bqh9gQ4ofL6FEDr9AYRecB1MH3h5CUxPYGaHpKc0MTC9p1sK
TEfMlIHQkpBw2BGqDrUnAKwvzxDq3wZHB+y0LwqdYKMDVi+lCEkPixsh9BdX
YzDtvxNCh90zcQQA4d+EnQ==
        "], ExternalIdentifier["WikidataID", "P1660", 
         Association[
         "Label" -> "has index case", "Description" -> 
          "initial patient in the population of an epidemiological \
investigation"]] -> {
         ExternalIdentifier["WikidataID", "Q89703948", 
          Association[
          "Label" -> "Patrick Jones", "Description" -> 
           "first federal inmate to die in the 2020 COVID-19 pandemic in the \
United States"]], 
         ExternalIdentifier["WikidataID", "Q90136425", 
          Association[
          "Label" -> "Frank Gabrin", "Description" -> 
           "first ER physician to die in the 2020 COVID-19 pandemic in the \
United States"]]}, ExternalIdentifier["WikidataID", "P7153", 
         Association[
         "Label" -> "significant place", "Description" -> 
          "significant or notable places associated with the subject"]] -> {
         ExternalIdentifier["WikidataID", "Q392599", 
          Association[
          "Label" -> "Everett", "Description" -> 
           "city in Washington, United States of America"]], 
         ExternalIdentifier["WikidataID", "Q110739", 
          Association[
          "Label" -> "Santa Clara County", "Description" -> 
           "county in California, United States"]]}, 
       ExternalIdentifier["WikidataID", "P8011", 
         Association[
         "Label" -> "number of clinical tests", "Description" -> 
          "cumulative number of clinical tests"]] -> {8.005589*^6}, 
       ExternalIdentifier["WikidataID", "P8010", 
         Association[
         "Label" -> "number of recoveries", "Description" -> 
          "number of cases that recovered from disease"]] -> CompressedData["
1:eJxTTMoPSmVkYGAwZYCCBRUOYDr8IIQO3gOmGwKPQOi/xyHi68+AaYe+i2D6
gPFViPy9+xDa7g2YvrD6A5hWaP0C4f9hcATRH2IYwfQKZi4w7cIoAOHLCIHp
hi0iYFrh5h+Ivv8Q+sYOZrA4g9NiiDuat0Lsj7oG4QfdhNjP9QhCf4HQB5je
Q9wb9hFMB6yB0BccIe5S+AWhZ/yDuOsEE8SeFyasEHd8ZQPTEq0Q92oEcEPc
4bMSYu+ljRD62y8w/aKOAyIvwAuhE9Ih7om4DKHX3ILQJ+9C6BPPwbTAWYh9
DV78YPrMe0h46GQKg2kZRhFHAI0AWso=
        "], ExternalIdentifier["WikidataID", "P8045", 
         Association[
         "Label" -> "organized response related to outbreak", "Description" -> 
          "specific action taken or system used as a reaction to an \
outbreak"]] -> {
         ExternalIdentifier["WikidataID", "Q87945071", 
          Association[
          "Label" -> 
           "U.S. state and local government response to the 2020 coronavirus \
pandemic"]]}, ExternalIdentifier["WikidataID", "P1846", 
         Association[
         "Label" -> "distribution map", "Description" -> 
          "distribution of item on a mapped area (for  range map of taxa, use \
(P181).)"]] -> {
         URL[
         "http://commons.wikimedia.org/wiki/Special:FilePath/COVID-19%\
20Outbreak%20Cases%20in%20the%20United%20States%20%28Density%29.svg"]}, 
       ExternalIdentifier["WikidataID", "P2184", 
         Association[
         "Label" -> "history of topic", "Description" -> 
          "historical development of an item's topic"]] -> {
         ExternalIdentifier["WikidataID", "Q87952372", 
          Association[
          "Label" -> 
           "timeline of the 2020 coronavirus pandemic in the United States", 
           "Description" -> "timeline"]]}, 
       ExternalIdentifier["WikidataID", "P2572", 
         Association[
         "Label" -> "hashtag", "Description" -> 
          "hashtag associated with this entity. Format: do not include the \
\"#\" symbol"]] -> {"CoronavirusUSA"}], "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 27], 
     "Meta" -> Association["ID" -> 227006402680459], "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 27], 
     "Path" -> {}, "BaseIndices" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 27, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P17\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"country\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"sovereign state of this item (not to be used for human \
beings)\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"country\"", "http://www.wikidata.org/entity/P17"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P17", 
                   Association[
                   "Label" -> "country", "Description" -> 
                    "sovereign state of this item (not to be used for human \
beings)"]]]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q30", 
                    Association[
                    "Label" -> "United States of America", "Description" -> 
                    "country in North America"]]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q30", 
                    Association[
                    "Label" -> "United States of America", "Description" -> 
                    "country in North America"]]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P17", 
                    Association[
                    "Label" -> "country", "Description" -> 
                    "sovereign state of this item (not to be used for human \
beings)"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P17", 
                   Association[
                   "Label" -> "country", "Description" -> 
                    "sovereign state of this item (not to be used for human \
beings)"]]]}, "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P18\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"image\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"image of relevant illustration of the subject; if \
available, use more specific properties (sample: coat of arms image, locator \
map, flag image, signature image, logo image, collage image); only images \
which exist on Wikimedia Commons are acceptable\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"image\"", "http://www.wikidata.org/entity/P18"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P18", 
                   Association[
                   "Label" -> "image", "Description" -> 
                    "image of relevant illustration of the subject; if \
available, use more specific properties (sample: coat of arms image, locator \
map, flag image, signature image, logo image, collage image); only images \
which exist on Wikimedia Commons are acceptable"]]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    URL[
                    "http://commons.wikimedia.org/wiki/Special:FilePath/\
Donald%20Trump%20Coronavirus%20briefing.jpg"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    URL[
                    "http://commons.wikimedia.org/wiki/Special:FilePath/\
Donald%20Trump%20Coronavirus%20briefing.jpg"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P18", 
                    Association[
                    "Label" -> "image", "Description" -> 
                    "image of relevant illustration of the subject; if \
available, use more specific properties (sample: coat of arms image, locator \
map, flag image, signature image, logo image, collage image); only images \
which exist on Wikimedia Commons are acceptable"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P18", 
                   Association[
                   "Label" -> "image", "Description" -> 
                    "image of relevant illustration of the subject; if \
available, use more specific properties (sample: coat of arms image, locator \
map, flag image, signature image, logo image, collage image); only images \
which exist on Wikimedia Commons are acceptable"]]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P31\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"instance of\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"that class of which this subject is a particular \
example and member\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"instance of\"", "http://www.wikidata.org/entity/P31"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P31", 
                   Association[
                   "Label" -> "instance of", "Description" -> 
                    "that class of which this subject is a particular example \
and member"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q3241045", 
                    Association[
                    "Label" -> "disease outbreak", "Description" -> 
                    "sudden increase in occurrences of a disease in a \
particular time and place"]], 
                    ExternalIdentifier["WikidataID", "Q216227", 
                    Association[
                    "Label" -> "state of emergency", "Description" -> 
                    "legal declaration or de facto acts by a government \
allowing assumption of extraordinary powers"]]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q3241045", 
                    Association[
                    "Label" -> "disease outbreak", "Description" -> 
                    
                    "sudden increase in occurrences of a disease in a \
particular time and place"]], 
                    ExternalIdentifier["WikidataID", "Q216227", 
                    Association[
                    "Label" -> "state of emergency", "Description" -> 
                    "legal declaration or de facto acts by a government \
allowing assumption of extraordinary powers"]]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P31", 
                    Association[
                    "Label" -> "instance of", "Description" -> 
                    "that class of which this subject is a particular example \
and member"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P31", 
                   Association[
                   "Label" -> "instance of", "Description" -> 
                    "that class of which this subject is a particular example \
and member"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P361\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"part of\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"object of which the subject is a part (if this subject \
is already part of object A which is a part of object B, then please only \
make the subject part of object A). Inverse property of \\\"has part\\\" \
(P527, see also \\\"has parts of the class\\\" (P2670)).\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"part of\"", "http://www.wikidata.org/entity/P361"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P361", 
                   Association[
                   "Label" -> "part of", "Description" -> 
                    "object of which the subject is a part (if this subject \
is already part of object A which is a part of object B, then please only \
make the subject part of object A). Inverse property of \"has part\" (P527, \
see also \"has parts of the class\" (P2670))."]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q83741704", 
                    Association[
                    "Label" -> "COVID-19 pandemic by country and territory", 
                    "Description" -> 
                    "details regarding the 2019\[Dash]20 coronavirus pandemic \
by country and territory"]], 
                    ExternalIdentifier["WikidataID", "Q86695115", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in North America", 
                    "Description" -> "viral outbreak in North America"]]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q83741704", 
                    Association[
                    "Label" -> "COVID-19 pandemic by country and territory", 
                    "Description" -> 
                    "details regarding the 2019\[Dash]20 coronavirus pandemic \
by country and territory"]], 
                    ExternalIdentifier["WikidataID", "Q86695115", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in North America", 
                    "Description" -> "viral outbreak in North America"]]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P361", 
                    Association[
                    "Label" -> "part of", "Description" -> 
                    "object of which the subject is a part (if this subject \
is already part of object A which is a part of object B, then please only \
make the subject part of object A). Inverse property of \"has part\" (P527, \
see also \"has parts of the class\" (P2670))."]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P361", 
                   Association[
                   "Label" -> "part of", "Description" -> 
                    "object of which the subject is a part (if this subject \
is already part of object A which is a part of object B, then please only \
make the subject part of object A). Inverse property of \"has part\" (P527, \
see also \"has parts of the class\" (P2670))."]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P373\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"Commons category\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"name of the Wikimedia Commons category containing \
files related to this item (without the prefix \\\"Category:\\\")\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"Commons category\"", 
                   "http://www.wikidata.org/entity/P373"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P373", 
                   Association[
                   "Label" -> "Commons category", "Description" -> 
                    
                    "name of the Wikimedia Commons category containing files \
related to this item (without the prefix \"Category:\")"]]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"COVID-19 pandemic in the United States"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"COVID-19 pandemic in the United States"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P373", 
                    Association[
                    "Label" -> "Commons category", "Description" -> 
                    "name of the Wikimedia Commons category containing files \
related to this item (without the prefix \"Category:\")"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P373", 
                   Association[
                   "Label" -> "Commons category", "Description" -> 
                    "name of the Wikimedia Commons category containing files \
related to this item (without the prefix \"Category:\")"]]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P276\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"location\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"location of the item, physical object or event is \
within. In case of an administrative entity use P131. In case of a distinct \
terrain feature use P706.\""}]}], "\[RightAssociation]"}]}], "]"}], 
                   "\"Wikidata\"", "\"location\"", 
                   "http://www.wikidata.org/entity/P276"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P276", 
                   Association[
                   "Label" -> "location", "Description" -> 
                    "location of the item, physical object or event is \
within. In case of an administrative entity use P131. In case of a distinct \
terrain feature use P706."]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q30", 
                    Association[
                    "Label" -> "United States of America", "Description" -> 
                    "country in North America"]]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q30", 
                    Association[
                    "Label" -> "United States of America", "Description" -> 
                    "country in North America"]]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P276", 
                    Association[
                    "Label" -> "location", "Description" -> 
                    "location of the item, physical object or event is \
within. In case of an administrative entity use P131. In case of a distinct \
terrain feature use P706."]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P276", 
                   Association[
                   "Label" -> "location", "Description" -> 
                    "location of the item, physical object or event is \
within. In case of an administrative entity use P131. In case of a distinct \
terrain feature use P706."]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P973\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"described at URL\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"item is described at the following URL\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"described at URL\"", 
                   "http://www.wikidata.org/entity/P973"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P973", 
                   Association[
                   "Label" -> "described at URL", "Description" -> 
                    "item is described at the following URL"]]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    URL[
                    "https://www.cdc.gov/coronavirus/2019-ncov/cases-in-us.\
html"], 
                    URL[
                    "https://www.worldometers.info/coronavirus/country/us/"]},
                    ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    URL[
                    "https://www.cdc.gov/coronavirus/2019-ncov/cases-in-us.\
html"], 
                    URL[
                    "https://www.worldometers.info/coronavirus/country/us/"]},
                     ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P973", 
                    Association[
                    "Label" -> "described at URL", "Description" -> 
                    "item is described at the following URL"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P973", 
                   Association[
                   "Label" -> "described at URL", "Description" -> 
                    "item is described at the following URL"]]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P580\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"start time\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"time an item begins to exist or a statement starts \
being valid\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"start time\"", "http://www.wikidata.org/entity/P580"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P580", 
                   Association[
                   "Label" -> "start time", "Description" -> 
                    "time an item begins to exist or a statement starts being \
valid"]]]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    DateObject[{2020, 1, 21}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    DateObject[{2020, 1, 21}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P580", 
                    Association[
                    "Label" -> "start time", "Description" -> 
                    "time an item begins to exist or a statement starts being \
valid"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P580", 
                   Association[
                   "Label" -> "start time", "Description" -> 
                    "time an item begins to exist or a statement starts being \
valid"]]]}, "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P828\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"has cause\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"underlying cause, thing that ultimately resulted in \
this effect\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"has cause\"", "http://www.wikidata.org/entity/P828"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P828", 
                   Association[
                   "Label" -> "has cause", "Description" -> 
                    "underlying cause, thing that ultimately resulted in this \
effect"]]]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q82069695", 
                    Association[
                    "Label" -> "SARS-CoV-2", "Description" -> 
                    "strain of virus causing the ongoing pandemic of \
coronavirus disease 2019 (COVID-19)"]], 
                    ExternalIdentifier["WikidataID", "Q84263196", 
                    Association[
                    "Label" -> "COVID-19", "Description" -> 
                    "zoonotic respiratory syndrome and infectious disease in \
humans, caused by SARS coronavirus 2"]]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q82069695", 
                    Association[
                    "Label" -> "SARS-CoV-2", "Description" -> 
                    "strain of virus causing the ongoing pandemic of \
coronavirus disease 2019 (COVID-19)"]], 
                    ExternalIdentifier["WikidataID", "Q84263196", 
                    Association[
                    "Label" -> "COVID-19", "Description" -> 
                    "zoonotic respiratory syndrome and infectious disease in \
humans, caused by SARS coronavirus 2"]]}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P828", 
                    Association[
                    "Label" -> "has cause", "Description" -> 
                    "underlying cause, thing that ultimately resulted in this \
effect"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P828", 
                   Association[
                   "Label" -> "has cause", "Description" -> 
                    "underlying cause, thing that ultimately resulted in this \
effect"]]]}, "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P856\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"official website\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"URL of the official homepage of an item (current or \
former) [if the homepage changes, add an additional statement with preferred \
rank. Do not remove the former URL]\""}]}], "\[RightAssociation]"}]}], "]"}], 
                   "\"Wikidata\"", "\"official website\"", 
                   "http://www.wikidata.org/entity/P856"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P856", 
                   Association[
                   "Label" -> "official website", "Description" -> 
                    "URL of the official homepage of an item (current or \
former) [if the homepage changes, add an additional statement with preferred \
rank. Do not remove the former URL]"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    URL["https://coronavirus.gov/"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    URL["https://coronavirus.gov/"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P856", 
                    Association[
                    "Label" -> "official website", "Description" -> 
                    
                    "URL of the official homepage of an item (current or \
former) [if the homepage changes, add an additional statement with preferred \
rank. Do not remove the former URL]"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P856", 
                   Association[
                   "Label" -> "official website", "Description" -> 
                    "URL of the official homepage of an item (current or \
former) [if the homepage changes, add an additional statement with preferred \
rank. Do not remove the former URL]"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P910\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", "\"topic's main category\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"main Wikimedia category\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"topic's main category\"", 
                   "http://www.wikidata.org/entity/P910"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P910", 
                   Association[
                   "Label" -> "topic's main category", "Description" -> 
                    "main Wikimedia category"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q87568950", 
                    Association[
                    "Label" -> 
                    "Category:2020 coronavirus pandemic in the United States",
                     "Description" -> "Wikimedia category"]]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q87568950", 
                    Association[
                    "Label" -> 
                    "Category:2020 coronavirus pandemic in the United States",
                     "Description" -> "Wikimedia category"]]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P910", 
                    Association[
                    "Label" -> "topic's main category", "Description" -> 
                    "main Wikimedia category"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P910", 
                   Association[
                   "Label" -> "topic's main category", "Description" -> 
                    "main Wikimedia category"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P527\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"has part\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"part of this subject; inverse property of \\\"part \
of\\\" (P361). See also \\\"has parts of the class\\\" (P2670).\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"has part\"", "http://www.wikidata.org/entity/P527"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P527", 
                   Association[
                   "Label" -> "has part", "Description" -> 
                    "part of this subject; inverse property of \"part of\" \
(P361). See also \"has parts of the class\" (P2670)."]]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 58], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 58], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P527", 
                    Association[
                    "Label" -> "has part", "Description" -> 
                    "part of this subject; inverse property of \"part of\" \
(P361). See also \"has parts of the class\" (P2670)."]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P527", 
                   Association[
                   "Label" -> "has part", "Description" -> 
                    "part of this subject; inverse property of \"part of\" \
(P361). See also \"has parts of the class\" (P2670)."]]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P3457\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", "\"case fatality rate\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"proportion of patients who die of a particular medical \
condition out of all who have this condition within a given time frame\""}]}],
                     "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"case fatality rate\"", 
                   "http://www.wikidata.org/entity/P3457"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P3457", 
                   Association[
                   "Label" -> "case fatality rate", "Description" -> 
                    "proportion of patients who die of a particular medical \
condition out of all who have this condition within a given time frame"]]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 49], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 49], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P3457", 
                    Association[
                    "Label" -> "case fatality rate", "Description" -> 
                    "proportion of patients who die of a particular medical \
condition out of all who have this condition within a given time frame"]]]}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P3457", 
                   Association[
                   "Label" -> "case fatality rate", "Description" -> 
                    "proportion of patients who die of a particular medical \
condition out of all who have this condition within a given time frame"]]]}, 
                "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P3479\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"Omni topic ID\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"identifier for a topic, used by Omni and \
Aftonbladet\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"Omni topic ID\"", 
                   "http://www.wikidata.org/entity/P3479"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P3479", 
                   Association[
                   "Label" -> "Omni topic ID", "Description" -> 
                    "identifier for a topic, used by Omni and \
Aftonbladet"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier[
                    ExternalIdentifier["WikidataID", "P3479", 
                    Association[
                    "Label" -> "Omni topic ID", "Description" -> 
                    "identifier for a topic, used by Omni and Aftonbladet"]], 
                    "d73a4655-3455-4719-9206-6561ff18cf18"]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier[
                    ExternalIdentifier["WikidataID", "P3479", 
                    Association[
                    "Label" -> "Omni topic ID", "Description" -> 
                    "identifier for a topic, used by Omni and Aftonbladet"]], 
                    "d73a4655-3455-4719-9206-6561ff18cf18"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P3479", 
                    Association[
                    "Label" -> "Omni topic ID", "Description" -> 
                    "identifier for a topic, used by Omni and \
Aftonbladet"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P3479", 
                   Association[
                   "Label" -> "Omni topic ID", "Description" -> 
                    "identifier for a topic, used by Omni and \
Aftonbladet"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P3984\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"subreddit\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"name of the Reddit forum associated to this \
subject\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"subreddit\"", "http://www.wikidata.org/entity/P3984"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P3984", 
                   Association[
                   "Label" -> "subreddit", "Description" -> 
                    "name of the Reddit forum associated to this subject"]]]},
                 "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier[
                    ExternalIdentifier["WikidataID", "P3984", 
                    Association[
                    "Label" -> "subreddit", "Description" -> 
                    "name of the Reddit forum associated to this subject"]], 
                    "CoronavirusUS"]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier[
                    ExternalIdentifier["WikidataID", "P3984", 
                    Association[
                    "Label" -> "subreddit", "Description" -> 
                    "name of the Reddit forum associated to this subject"]], 
                    "CoronavirusUS"]}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P3984", 
                    Association[
                    "Label" -> "subreddit", "Description" -> 
                    "name of the Reddit forum associated to this subject"]]]},
                   4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P3984", 
                   Association[
                   "Label" -> "subreddit", "Description" -> 
                    "name of the Reddit forum associated to this subject"]]]},
                 "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P1120\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"number of deaths\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"Total (cumulative) number of people who died since \
start as a direct result of an event or cause\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"number of deaths\"", 
                   "http://www.wikidata.org/entity/P1120"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1120", 
                   Association[
                   "Label" -> "number of deaths", "Description" -> 
                    "Total (cumulative) number of people who died since start \
as a direct result of an event or cause"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 78], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 78], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P1120", 
                    Association[
                    "Label" -> "number of deaths", "Description" -> 
                    "Total (cumulative) number of people who died since start \
as a direct result of an event or cause"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1120", 
                   Association[
                   "Label" -> "number of deaths", "Description" -> 
                    "Total (cumulative) number of people who died since start \
as a direct result of an event or cause"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P1424\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", "\"topic's main template\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"primary infobox or navigational template of this \
subject\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"topic's main template\"", 
                   "http://www.wikidata.org/entity/P1424"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1424", 
                   Association[
                   "Label" -> "topic's main template", "Description" -> 
                    "primary infobox or navigational template of this \
subject"]]]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q89388402", 
                    Association[
                    "Label" -> 
                    "Template:2020 coronavirus pandemic in the United States",
                     "Description" -> "Wikimedia template"]]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q89388402", 
                    Association[
                    "Label" -> 
                    "Template:2020 coronavirus pandemic in the United States",
                     "Description" -> "Wikimedia template"]]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P1424", 
                    Association[
                    "Label" -> "topic's main template", "Description" -> 
                    "primary infobox or navigational template of this \
subject"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1424", 
                   Association[
                   "Label" -> "topic's main template", "Description" -> 
                    "primary infobox or navigational template of this \
subject"]]]}, "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P1542\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"has effect\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"effect of this cause\""}]}], "\[RightAssociation]"}]}],
                     "]"}], "\"Wikidata\"", "\"has effect\"", 
                   "http://www.wikidata.org/entity/P1542"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1542", 
                   Association[
                   "Label" -> "has effect", "Description" -> 
                    "effect of this cause"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q90840954", 
                    Association[
                    "Label" -> 
                    "Impact of the 2019\[Dash]20 coronavirus pandemic on \
abortion in the United States"]]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q90840954", 
                    Association[
                    "Label" -> 
                    "Impact of the 2019\[Dash]20 coronavirus pandemic on \
abortion in the United States"]]}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P1542", 
                    Association[
                    "Label" -> "has effect", "Description" -> 
                    "effect of this cause"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1542", 
                   Association[
                   "Label" -> "has effect", "Description" -> 
                    "effect of this cause"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P1603\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"number of cases\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"cumulative number of confirmed, probable and suspected \
occurrences\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"number of cases\"", 
                   "http://www.wikidata.org/entity/P1603"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1603", 
                   Association[
                   "Label" -> "number of cases", "Description" -> 
                    "cumulative number of confirmed, probable and suspected \
occurrences"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 113], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 113], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P1603", 
                    Association[
                    "Label" -> "number of cases", "Description" -> 
                    "cumulative number of confirmed, probable and suspected \
occurrences"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1603", 
                   Association[
                   "Label" -> "number of cases", "Description" -> 
                    "cumulative number of confirmed, probable and suspected \
occurrences"]]]}, "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}],
              BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P1660\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"has index case\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"initial patient in the population of an \
epidemiological investigation\""}]}], "\[RightAssociation]"}]}], "]"}], 
                   "\"Wikidata\"", "\"has index case\"", 
                   "http://www.wikidata.org/entity/P1660"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1660", 
                   Association[
                   "Label" -> "has index case", "Description" -> 
                    "initial patient in the population of an epidemiological \
investigation"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q89703948", 
                    Association[
                    "Label" -> "Patrick Jones", "Description" -> 
                    "first federal inmate to die in the 2020 COVID-19 \
pandemic in the United States"]], 
                    ExternalIdentifier["WikidataID", "Q90136425", 
                    Association[
                    "Label" -> "Frank Gabrin", "Description" -> 
                    "first ER physician to die in the 2020 COVID-19 pandemic \
in the United States"]]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q89703948", 
                    Association[
                    "Label" -> "Patrick Jones", "Description" -> 
                    "first federal inmate to die in the 2020 COVID-19 \
pandemic in the United States"]], 
                    ExternalIdentifier["WikidataID", "Q90136425", 
                    Association[
                    "Label" -> "Frank Gabrin", "Description" -> 
                    "first ER physician to die in the 2020 COVID-19 pandemic \
in the United States"]]}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P1660", 
                    Association[
                    "Label" -> "has index case", "Description" -> 
                    "initial patient in the population of an epidemiological \
investigation"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1660", 
                   Association[
                   "Label" -> "has index case", "Description" -> 
                    "initial patient in the population of an epidemiological \
investigation"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 27, 1], {1, 27 - -20 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 27, 1], {1, 27 - -20 + 1}], Appearance -> None],
                     " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    27, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    27, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 27, 1], {1, 27 - 20 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 27, 1], {1, 27 - 20 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = T\
ypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{965., {347.134033203125, 352.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{965., {347.134033203125, 352.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.798391720724388*^9, 3.7983917655071373`*^9}, 
   3.798543390808502*^9, 3.79854601822313*^9, 3.798559556908349*^9, 
   3.798561476971034*^9, 3.79856162587446*^9, 3.79873706559734*^9, 
   3.7987372750316057`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"40535930-2473-4ef7-9df6-ce0995cd3f5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "list", " ", "of", " ", "countries", " ", "for", " ", "which", " ", 
     "there", " ", "is", " ", "Wikidata", " ", "coverage", " ", "on", " ", 
     "Covid"}], "-", 
    RowBox[{"19", " ", "pandemic"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"covidPandemicCountries", " ", "=", " ", 
     RowBox[{"WikidataData", "[", 
      RowBox[{
       TemplateBox[{
         RowBox[{"ExternalIdentifier", "[", 
           RowBox[{"\"WikidataID\"", ",", "\"Q83741704\"", ",", 
             RowBox[{"\[LeftAssociation]", 
               RowBox[{
                 
                 RowBox[{
                  "\"Label\"", "\[Rule]", 
                   "\"COVID-19 pandemic by country and territory\""}], ",", 
                 
                 RowBox[{
                  "\"Description\"", "\[Rule]", 
                   "\"details regarding the 2019\[Dash]20 coronavirus \
pandemic by country and territory\""}]}], "\[RightAssociation]"}]}], "]"}], 
         "\"Wikidata\"", "\"COVID-19 pandemic by country and territory\"", 
         "http://www.wikidata.org/entity/Q83741704"},
        "ExternalIdentifierURL"], ",", " ", 
       TemplateBox[{
         RowBox[{"ExternalIdentifier", "[", 
           RowBox[{"\"WikidataID\"", ",", "\"P527\"", ",", 
             RowBox[{"\[LeftAssociation]", 
               RowBox[{
                 RowBox[{"\"Label\"", "\[Rule]", "\"has part\""}], ",", 
                 
                 RowBox[{
                  "\"Description\"", "\[Rule]", 
                   "\"part of this subject; inverse property of \\\"part of\\\
\" (P361). See also \\\"has parts of the class\\\" (P2670).\""}]}], 
               "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
         "\"has part\"", "http://www.wikidata.org/entity/P527"},
        "ExternalIdentifierURL"]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Highlighted", "@", 
      RowBox[{"Length", "@", "covidPandemicCountries"}]}], ",", " ", 
     RowBox[{"Short", "[", 
      RowBox[{"covidPandemicCountries", ",", " ", ".2"}], "]"}]}], 
    "}"}]}]}]], "Code",
 CellChangeTimes->{{3.798546031078271*^9, 3.79854610822469*^9}, {
  3.798546226612793*^9, 3.798546281780479*^9}, {3.7985464960673018`*^9, 
  3.7985465671347027`*^9}, {3.7987281768163233`*^9, 3.7987281859230633`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"11581f65-329d-410a-ac24-6833c354a1d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"196", FrameStyle -> None},
    "Highlighted"], ",", 
   TagBox[
    RowBox[{"{", 
     RowBox[{
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83872271\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2019\[Dash]20 coronavirus pandemic in mainland \
China\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in mainland China\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2019\[Dash]20 coronavirus pandemic in mainland China\"", 
        "http://www.wikidata.org/entity/Q83872271"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83872291\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", "\"COVID-19 pandemic in Japan\""}], 
                ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in Japan\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"COVID-19 pandemic in Japan\"", 
        "http://www.wikidata.org/entity/Q83872291"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83872398\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2019\[Dash]20 COVID-19 outbreak in South Korea\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in South Korea\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2019\[Dash]20 COVID-19 outbreak in South Korea\"", 
        "http://www.wikidata.org/entity/Q83872398"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83873057\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", "\"COVID-19 pandemic in Vietnam\""}],
                 ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in Vietnam\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"COVID-19 pandemic in Vietnam\"", 
        "http://www.wikidata.org/entity/Q83873057"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83873387\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Singapore\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"details of ongoing viral outbreak in Singapore\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Singapore\"", 
        "http://www.wikidata.org/entity/Q83873387"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83873548\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Australia\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in Australia\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Australia\"", 
        "http://www.wikidata.org/entity/Q83873548"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83873556\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Malaysia\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in Malaysia\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Malaysia\"", 
        "http://www.wikidata.org/entity/Q83873556"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83873566\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Thailand\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in Thailand\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Thailand\"", 
        "http://www.wikidata.org/entity/Q83873566"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q83873573\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2019\[Dash]20 coronavirus outbreak in Nepal\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral outbreak in Nepal\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2019\[Dash]20 coronavirus outbreak in Nepal\"", 
        "http://www.wikidata.org/entity/Q83873573"},
       "ExternalIdentifierURL"], ",", 
      RowBox[{"\[LeftSkeleton]", "178", "\[RightSkeleton]"}], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87709900\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Mauritania\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"details of ongoing viral pandemic in Mauritania\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Mauritania\"", 
        "http://www.wikidata.org/entity/Q87709900"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87709973\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Eswatini\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral pandemic in Eswatini\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Eswatini\"", 
        "http://www.wikidata.org/entity/Q87709973"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87714704\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Rwanda\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral pandemic in Rwanda\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Rwanda\"", 
        "http://www.wikidata.org/entity/Q87714704"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87715166\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Bhutan\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral pandemic in Bhutan\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Bhutan\"", 
        "http://www.wikidata.org/entity/Q87715166"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87715843\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Andorra\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"details of ongoing viral pandemic in Teil der \
COVID-19-Pandemie\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Andorra\"", 
        "http://www.wikidata.org/entity/Q87715843"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87722485\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Azerbaijan\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral pandemic in Azerbaijan\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Azerbaijan\"", 
        "http://www.wikidata.org/entity/Q87722485"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87729500\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Seychelles\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral pandemic in Seychelles\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Seychelles\"", 
        "http://www.wikidata.org/entity/Q87729500"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87729501\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Namibia\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral pandemic in Namibia\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Namibia\"", 
        "http://www.wikidata.org/entity/Q87729501"},
       "ExternalIdentifierURL"], ",", 
      TemplateBox[{
        RowBox[{"ExternalIdentifier", "[", 
          RowBox[{"\"WikidataID\"", ",", "\"Q87733671\"", ",", 
            RowBox[{"\[LeftAssociation]", 
              RowBox[{
                
                RowBox[{
                 "\"Label\"", "\[Rule]", 
                  "\"2020 COVID-19 pandemic in Qatar\""}], ",", 
                
                RowBox[{
                 "\"Description\"", "\[Rule]", 
                  "\"viral pandemic in Qatar\""}]}], 
              "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
        "\"2020 COVID-19 pandemic in Qatar\"", 
        "http://www.wikidata.org/entity/Q87733671"},
       "ExternalIdentifierURL"]}], "}"}],
    Short[#, 0.2]& ]}], "}"}]], "Output",
 CellChangeTimes->{{3.798546262215719*^9, 3.798546283631195*^9}, {
   3.7985465393470087`*^9, 3.798546568572549*^9}, 3.798559565451976*^9, 
   3.7985614789269*^9, 3.7985616292244053`*^9, {3.798728172427525*^9, 
   3.798728187251404*^9}, 3.7987370667755737`*^9, 3.7987372766163397`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"94f1f52b-99d9-478a-a4c7-8430aac7603c"]
}, Open  ]],

Cell["\<\
Responses to the outbreak differ from one country to another. Also, the \
absence of data for a particular country does not suggest that no precautions \
were put in place.\
\>", "Text",
 CellChangeTimes->{{3.798546942766765*^9, 
  3.79854697829884*^9}},ExpressionUUID->"c02d98e3-3590-4475-8233-\
c6490dcb6164"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WikidataData", "[", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q87186365\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"2020 COVID-19 pandemic in the Republic of Ireland\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"details of ongoing viral outbreak in the Republic of \
Ireland\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 COVID-19 pandemic in the Republic of Ireland\"", 
     "http://www.wikidata.org/entity/Q87186365"},
    "ExternalIdentifierURL"], ",", "  ", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P8045\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"organized response related to outbreak\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"specific action taken or system used as a reaction to an \
outbreak\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"organized response related to outbreak\"", 
     "http://www.wikidata.org/entity/P8045"},
    "ExternalIdentifierURL"]}], "]"}]], "Code",
 CellChangeTimes->{{3.798546734577189*^9, 3.798546808652699*^9}, {
  3.798546906418603*^9, 3.7985469506587687`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"2a30e187-8c35-49e8-a6be-35f312df79d2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q93623431\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"2020 Ireland COVID-19 social distancing\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"COVID-19 countermeasure in Ireland\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 Ireland COVID-19 social distancing\"", 
     "http://www.wikidata.org/entity/Q93623431"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q93623429\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"2020 Ireland COVID-19 closing of educational \
institutions\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"COVID-19 countermeasure in Ireland\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 Ireland COVID-19 closing of educational institutions\"", 
     "http://www.wikidata.org/entity/Q93623429"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q93623435\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"2020 Ireland COVID-19 closing of non-essential \
businesses\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"COVID-19 countermeasure in Ireland\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 Ireland COVID-19 closing of non-essential businesses\"", 
     "http://www.wikidata.org/entity/Q93623435"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q93623433\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"2020 Ireland COVID-19 lockdown\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"COVID-19 countermeasure in Ireland\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 Ireland COVID-19 lockdown\"", 
     "http://www.wikidata.org/entity/Q93623433"},
    "ExternalIdentifierURL"]}], "}"}]], "Output",
 CellChangeTimes->{{3.7985467365091352`*^9, 3.7985467755761414`*^9}, 
   3.798546818789535*^9, 3.798546951333263*^9, 3.7985595711472597`*^9, 
   3.798561479447639*^9, 3.798561629738806*^9, 3.7987370670675077`*^9, 
   3.7987372769504013`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"99f98cb5-7b84-4194-be65-887f2e46d642"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "see", " ", "when", " ", "a", " ", "particular", " ", "measure", " ", 
    "was", " ", "announced", " ", "and", " ", "enacted"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"WikidataData", "[", 
   RowBox[{
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"Q93623431\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            RowBox[{
              
              RowBox[{"\"Label\"", "\[Rule]", 
                "\"2020 Ireland COVID-19 social distancing\""}], ",", 
              
              RowBox[{"\"Description\"", "\[Rule]", 
                "\"COVID-19 countermeasure in Ireland\""}]}], 
            "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
      "\"2020 Ireland COVID-19 social distancing\"", 
      "http://www.wikidata.org/entity/Q93623431"},
     "ExternalIdentifierURL"], ",", " ", "\"\<Dataset\>\""}], "]"}]}]], "Code",
 CellChangeTimes->{{3.798546324305773*^9, 3.7985464140745163`*^9}, {
  3.7985464722063313`*^9, 3.7985464726960573`*^9}, {3.7985465918139467`*^9, 
  3.7985465924681063`*^9}, {3.7985468250967484`*^9, 3.798546891277136*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"55ad6394-6835-486d-8e35-f5db3e73af49"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> Association[ExternalIdentifier["WikidataID", "P6949", 
         Association[
         "Label" -> "announcement date", "Description" -> 
          "time of the first public presentation of a subject by the creator, \
of information by the media"]] -> {
         DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, 
       ExternalIdentifier["WikidataID", "P580", 
         Association[
         "Label" -> "start time", "Description" -> 
          "time an item begins to exist or a statement starts being valid"]] -> {
         DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, 
       ExternalIdentifier["WikidataID", "P828", 
         Association[
         "Label" -> "has cause", "Description" -> 
          "underlying cause, thing that ultimately resulted in this effect"]] -> {
         ExternalIdentifier["WikidataID", "Q89277307"]}, 
       ExternalIdentifier["WikidataID", "P1001", 
         Association[
         "Label" -> "applies to jurisdiction", "Description" -> 
          "the item (an institution, law, public office ...) or statement \
belongs to or has power over or applies to the value (a territorial \
jurisdiction: a country, state, municipality, ...)"]] -> {
         ExternalIdentifier["WikidataID", "Q27", 
          Association[
          "Label" -> "Ireland", "Description" -> 
           "sovereign state in northwestern Europe covering five-sixths of \
the island of Ireland"]]}, ExternalIdentifier["WikidataID", "P31", 
         Association[
         "Label" -> "instance of", "Description" -> 
          "that class of which this subject is a particular example and \
member"]] -> {
         ExternalIdentifier["WikidataID", "Q30314010", 
          Association[
          "Label" -> "social distancing", "Description" -> 
           "reduction of human social interaction in an effort to prevent the \
spread of infectious disease"]]}], "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 5, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[TypeSystem`AnyType, 1], 5], "Meta" -> 
     Association["ID" -> 227010697647757], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 5, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[TypeSystem`AnyType, 1], 5], "Path" -> {}, 
     "BaseIndices" -> {}, "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 
     1, "DataRowCount" -> 5, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P6949\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"announcement date\""}],
                     ",", 
                    RowBox[{"\"Description\"", "\[Rule]", 
                    "\"time of the first public presentation of a subject by \
the creator, of information by the media\""}]}], "\[RightAssociation]"}]}], 
                    "]"}], "\"Wikidata\"", "\"announcement date\"", 
                   "http://www.wikidata.org/entity/P6949"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P6949", 
                   Association[
                   "Label" -> "announcement date", "Description" -> 
                    "time of the first public presentation of a subject by \
the creator, of information by the media"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P6949", 
                    Association[
                    "Label" -> "announcement date", "Description" -> 
                    "time of the first public presentation of a subject by \
the creator, of information by the media"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P6949", 
                   Association[
                   "Label" -> "announcement date", "Description" -> 
                    "time of the first public presentation of a subject by \
the creator, of information by the media"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P580\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"start time\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"time an item begins to exist or a statement starts \
being valid\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"start time\"", "http://www.wikidata.org/entity/P580"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P580", 
                   Association[
                   "Label" -> "start time", "Description" -> 
                    "time an item begins to exist or a statement starts being \
valid"]]]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P580", 
                    Association[
                    "Label" -> "start time", "Description" -> 
                    "time an item begins to exist or a statement starts being \
valid"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P580", 
                   Association[
                   "Label" -> "start time", "Description" -> 
                    "time an item begins to exist or a statement starts being \
valid"]]]}, "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P828\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"has cause\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"underlying cause, thing that ultimately resulted in \
this effect\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"has cause\"", "http://www.wikidata.org/entity/P828"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P828", 
                   Association[
                   "Label" -> "has cause", "Description" -> 
                    "underlying cause, thing that ultimately resulted in this \
effect"]]]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q89277307"]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q89277307"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P828", 
                    Association[
                    "Label" -> "has cause", "Description" -> 
                    "underlying cause, thing that ultimately resulted in this \
effect"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P828", 
                   Association[
                   "Label" -> "has cause", "Description" -> 
                    "underlying cause, thing that ultimately resulted in this \
effect"]]]}, "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P1001\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", 
                    "\"applies to jurisdiction\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"the item (an institution, law, public office ...) or \
statement belongs to or has power over or applies to the value (a territorial \
jurisdiction: a country, state, municipality, ...)\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"applies to jurisdiction\"", 
                   "http://www.wikidata.org/entity/P1001"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1001", 
                   Association[
                   "Label" -> "applies to jurisdiction", "Description" -> 
                    "the item (an institution, law, public office ...) or \
statement belongs to or has power over or applies to the value (a territorial \
jurisdiction: a country, state, municipality, ...)"]]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q27", 
                    Association[
                    "Label" -> "Ireland", "Description" -> 
                    "sovereign state in northwestern Europe covering \
five-sixths of the island of Ireland"]]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q27", 
                    Association[
                    "Label" -> "Ireland", "Description" -> 
                    
                    "sovereign state in northwestern Europe covering \
five-sixths of the island of Ireland"]]}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P1001", 
                    Association[
                    "Label" -> "applies to jurisdiction", "Description" -> 
                    "the item (an institution, law, public office ...) or \
statement belongs to or has power over or applies to the value (a territorial \
jurisdiction: a country, state, municipality, ...)"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P1001", 
                   Association[
                   "Label" -> "applies to jurisdiction", "Description" -> 
                    "the item (an institution, law, public office ...) or \
statement belongs to or has power over or applies to the value (a territorial \
jurisdiction: a country, state, municipality, ...)"]]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"P31\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"instance of\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"that class of which this subject is a particular \
example and member\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"instance of\"", "http://www.wikidata.org/entity/P31"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P31", 
                   Association[
                   "Label" -> "instance of", "Description" -> 
                    "that class of which this subject is a particular example \
and member"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q30314010", 
                    Association[
                    "Label" -> "social distancing", "Description" -> 
                    "reduction of human social interaction in an effort to \
prevent the spread of infectious disease"]]}, ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q30314010", 
                    Association[
                    "Label" -> "social distancing", "Description" -> 
                    
                    "reduction of human social interaction in an effort to \
prevent the spread of infectious disease"]]}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "P31", 
                    Association[
                    "Label" -> "instance of", "Description" -> 
                    "that class of which this subject is a particular example \
and member"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "P31", 
                   Association[
                   "Label" -> "instance of", "Description" -> 
                    "that class of which this subject is a particular example \
and member"]]]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{370., {98.634033203125, 104.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{370., {98.634033203125, 104.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.798546348513185*^9, 3.7985464150845823`*^9}, 
   3.7985464734266863`*^9, 3.798546593078557*^9, 3.798546841066003*^9, {
   3.7985468727030983`*^9, 3.798546892240899*^9}, 3.7985595738198643`*^9, 
   3.798561480030079*^9, 3.798561630913453*^9, 3.798737067553359*^9, 
   3.798737277519691*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"05676bcd-628a-4e76-bf1d-f110ed9c7e78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WikidataData", "[", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"Q93623431\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"2020 Ireland COVID-19 social distancing\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"COVID-19 countermeasure in Ireland\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"2020 Ireland COVID-19 social distancing\"", 
     "http://www.wikidata.org/entity/Q93623431"},
    "ExternalIdentifierURL"], ",", " ", "\"\<NonIdentifierProperties\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.798548182831276*^9, 3.798548183583647*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"c9651b25-be6b-43ad-9e0e-be2e49c01c75"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P31\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"instance of\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"that class of which this subject is a particular example \
and member\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"instance of\"", "http://www.wikidata.org/entity/P31"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P6949\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"announcement date\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"time of the first public presentation of a subject by the \
creator, of information by the media\""}]}], "\[RightAssociation]"}]}], "]"}],
      "\"Wikidata\"", "\"announcement date\"", 
     "http://www.wikidata.org/entity/P6949"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P580\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"start time\""}], ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"time an item begins to exist or a statement starts being \
valid\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"start time\"", "http://www.wikidata.org/entity/P580"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P828\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"has cause\""}], ",", 
             RowBox[{
              "\"Description\"", "\[Rule]", 
               "\"underlying cause, thing that ultimately resulted in this \
effect\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"has cause\"", "http://www.wikidata.org/entity/P828"},
    "ExternalIdentifierURL"], ",", 
   TemplateBox[{
     RowBox[{"ExternalIdentifier", "[", 
       RowBox[{"\"WikidataID\"", ",", "\"P1001\"", ",", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             RowBox[{"\"Label\"", "\[Rule]", "\"applies to jurisdiction\""}], 
             ",", 
             
             RowBox[{"\"Description\"", "\[Rule]", 
               "\"the item (an institution, law, public office ...) or \
statement belongs to or has power over or applies to the value (a territorial \
jurisdiction: a country, state, municipality, ...)\""}]}], 
           "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
     "\"applies to jurisdiction\"", "http://www.wikidata.org/entity/P1001"},
    "ExternalIdentifierURL"]}], "}"}]], "Output",
 CellChangeTimes->{3.798548184357767*^9, 3.798559576026606*^9, 
  3.798561631744857*^9, 3.798737277993333*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"b6763619-1fe2-47d2-b9fc-d07c884ae398"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "responses", " ", "of", " ", "countries", " ", "for", " ", "which", " ", 
    "this", " ", "data", " ", "is", " ", "available"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"covidPandemicResponses", " ", "=", " ", 
    RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"#", " ", "\[Rule]", " ", 
           RowBox[{"WikidataData", "[", 
            RowBox[{"#", ",", " ", 
             TemplateBox[{
               RowBox[{"ExternalIdentifier", "[", 
                 RowBox[{"\"WikidataID\"", ",", "\"P8045\"", ",", 
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"organized response related to outbreak\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"specific action taken or system used as a reaction to \
an outbreak\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
               "\"organized response related to outbreak\"", 
               "http://www.wikidata.org/entity/P8045"},
              "ExternalIdentifierURL"]}], "]"}]}], "]"}], "&"}], "@", 
        "covidPandemicCountries"}], " ", "//", " ", "Association"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", "}"}]}], "]"}]}], ";"}]}]], "Code",
 CellChangeTimes->{{3.798547178422851*^9, 3.7985473039453983`*^9}, {
  3.798547365829199*^9, 3.798547417361822*^9}, {3.798547542331337*^9, 
  3.79854754958601*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"c4908c34-6d39-4e02-b972-bae473fda647"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Sweden", " ", "has", " ", "so", " ", "far", " ", "has", " ", "the", " ", 
     "highest", " ", "number", " ", "of", " ", "distinct", " ", "responses"}],
     ",", " ", 
    RowBox[{"followed", " ", "by", " ", "Jordan", " ", "and", " ", "New", " ", 
     RowBox[{"Zealand", "."}]}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ReverseSortBy", "[", "Length", "]"}], "@", 
     "covidPandemicResponses"}], " ", "//", " ", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{"#", ",", " ", 
       RowBox[{"MaxItems", "\[Rule]", "5"}]}], "]"}], "&"}]}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Sweden", "'"}], "s", " ", "responses"}], " ", "*)"}], "\n", 
   RowBox[{"%", "[", "1", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.798547310199916*^9, 3.7985473647642183`*^9}, {
   3.798547420011537*^9, 3.798547441932295*^9}, {3.798547744825639*^9, 
   3.798547763399928*^9}, {3.798547888827173*^9, 3.7985479281576643`*^9}, {
   3.7985479713430433`*^9, 3.7985480843274107`*^9}, {3.7985481512942467`*^9, 
   3.798548153597508*^9}, 3.798549777903466*^9},
 CellLabel->"In[73]:=",ExpressionUUID->"f7ebb62e-9dc1-41ec-9b86-31c33dee4919"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> Association[ExternalIdentifier["WikidataID", "Q84081576", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Sweden", "Description" -> 
          "viral outbreak in Sweden"]] -> {
         ExternalIdentifier["WikidataID", "Q93670215", 
          Association[
          "Label" -> "2020 Sweden COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Sweden"]], 
         ExternalIdentifier["WikidataID", "Q93670218", 
          Association[
          "Label" -> "2020 Sweden COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Sweden"]], 
         ExternalIdentifier["WikidataID", "Q87722315", 
          Association[
          "Label" -> 
           "Regulation prohibiting public meetings and public events", 
           "Description" -> "Swedish regulation prohibiting large meetings"]], 
         ExternalIdentifier["WikidataID", "Q88286009", 
          Association[
          "Label" -> 
           "Law regarding temporary closure of school activities in the event \
of extraordinary events in peacetime", "Description" -> 
           "Swedish law regarding closure of schools"]], 
         ExternalIdentifier["WikidataID", "Q88807745", 
          Association[
          "Label" -> "special rules for restaurants and pubs", "Description" -> 
           "measure in Sweden against covid-19 that for example only allows \
seated guests"]], 
         ExternalIdentifier["WikidataID", "Q88810165", 
          Association[
          "Label" -> "prohibition of non-essential visits to Sweden", 
           "Description" -> 
           "temporary measure against the covid-19 pandemia"]], 
         ExternalIdentifier["WikidataID", "Q88812834", 
          Association[
          "Label" -> "travel advice against travelling to any country", 
           "Description" -> 
           "temporary measure by Sweden against the covid-19 pandemia"]], 
         ExternalIdentifier["WikidataID", "Q89211754", 
          Association[
          "Label" -> "limited purchase of pharmaceuticals", "Description" -> 
           "countermeasure by the Swedish government against the covid-19 \
pandemia"]], 
         ExternalIdentifier["WikidataID", "Q89212931", 
          Association[
          "Label" -> 
           "general prohibition to visit special housing for elderly", 
           "Description" -> 
           "countermeasure by the Swedish government against the covid-19 \
pandemia"]], 
         ExternalIdentifier["WikidataID", "Q89285002", 
          Association[
          "Label" -> 
           "classification of the coronavirus as an illness that is dangerous \
to society", "Description" -> "decision by the Swedish Government"]], 
         ExternalIdentifier["WikidataID", "Q89285724", 
          Association[
          "Label" -> "increased testing for Covid 19", "Description" -> 
           "task given to the Public Health Agency of Sweden by the Swedish \
Government"]], 
         ExternalIdentifier["WikidataID", "Q89371649", 
          Association[
          "Label" -> 
           "recommendation to implement remote learning in upper secondary \
schools and above", "Description" -> 
           "countermeasure by the Public Health Agency in Sweden against the \
covid-19 pandemia"]]}, ExternalIdentifier["WikidataID", "Q87589148", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Jordan", "Description" -> 
          "viral pandemic in Jordan"]] -> {
         ExternalIdentifier["WikidataID", "Q93623566", 
          Association[
          "Label" -> "2020 Jordan COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Jordan"]], 
         ExternalIdentifier["WikidataID", "Q93623571", 
          Association[
          "Label" -> 
           "2020 Jordan COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Jordan"]], 
         ExternalIdentifier["WikidataID", "Q93623568", 
          Association[
          "Label" -> "2020 Jordan COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Jordan"]], 
         ExternalIdentifier["WikidataID", "Q93623574", 
          Association[
          "Label" -> "2020 Jordan COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Jordan"]], 
         ExternalIdentifier["WikidataID", "Q93623578", 
          Association[
          "Label" -> 
           "2020 Jordan COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Jordan"]], 
         ExternalIdentifier["WikidataID", "Q93623583", 
          Association[
          "Label" -> "2020 Jordan COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Jordan"]], 
         ExternalIdentifier["WikidataID", "Q93623580", 
          Association[
          "Label" -> "2020 Jordan COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Jordan"]], 
         ExternalIdentifier["WikidataID", "Q93623606", 
          Association[
          "Label" -> 
           "2020 Jordan COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Jordan"]]}, 
       ExternalIdentifier["WikidataID", "Q87250803", 
         Association[
         "Label" -> "COVID-19 pandemic in New Zealand", "Description" -> 
          "ongoing coronavirus pandemic in New Zealand"]] -> {
         ExternalIdentifier["WikidataID", "Q93662534", 
          Association[
          "Label" -> "2020 New Zealand COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in New Zealand"]], 
         ExternalIdentifier["WikidataID", "Q93662535", 
          Association[
          "Label" -> "2020 New Zealand COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in New Zealand"]], 
         ExternalIdentifier["WikidataID", "Q93662539", 
          Association[
          "Label" -> 
           "2020 New Zealand COVID-19 declaration of public health emergency",
            "Description" -> "COVID-19 countermeasure in New Zealand"]], 
         ExternalIdentifier["WikidataID", "Q93662537", 
          Association[
          "Label" -> "2020 New Zealand COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in New Zealand"]], 
         ExternalIdentifier["WikidataID", "Q93662543", 
          Association[
          "Label" -> 
           "2020 New Zealand COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in New Zealand"]], 
         ExternalIdentifier["WikidataID", "Q93662540", 
          Association[
          "Label" -> "2020 New Zealand COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in New Zealand"]], 
         ExternalIdentifier["WikidataID", "Q93662544", 
          Association[
          "Label" -> 
           "2020 New Zealand COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in New Zealand"]]}, 
       ExternalIdentifier["WikidataID", "Q87652010", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Venezuela", "Description" -> 
          "viral outbreak in Venezuela"]] -> {
         ExternalIdentifier["WikidataID", "Q93671174", 
          Association[
          "Label" -> "2020 Venezuela COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Venezuela"]], 
         ExternalIdentifier["WikidataID", "Q93671173", 
          Association[
          "Label" -> "2020 Venezuela COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Venezuela"]], 
         ExternalIdentifier["WikidataID", "Q93671186", 
          Association[
          "Label" -> 
           "2020 Venezuela COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Venezuela"]], 
         ExternalIdentifier["WikidataID", "Q93671190", 
          Association[
          "Label" -> "2020 Venezuela COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Venezuela"]], 
         ExternalIdentifier["WikidataID", "Q93671194", 
          Association[
          "Label" -> "2020 Venezuela COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Venezuela"]], 
         ExternalIdentifier["WikidataID", "Q93671193", 
          Association[
          "Label" -> 
           "2020 Venezuela COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Venezuela"]]}, 
       ExternalIdentifier["WikidataID", "Q87589123", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Paraguay", "Description" -> 
          "viral pandemic in Paraguay"]] -> {
         ExternalIdentifier["WikidataID", "Q93668015", 
          Association[
          "Label" -> "2020 Paraguay COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Paraguay"]], 
         ExternalIdentifier["WikidataID", "Q93668012", 
          Association[
          "Label" -> 
           "2020 Paraguay COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Paraguay"]], 
         ExternalIdentifier["WikidataID", "Q93668019", 
          Association[
          "Label" -> "2020 Paraguay COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Paraguay"]], 
         ExternalIdentifier["WikidataID", "Q93668020", 
          Association[
          "Label" -> "2020 Paraguay COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Paraguay"]], 
         ExternalIdentifier["WikidataID", "Q93668027", 
          Association[
          "Label" -> "2020 Paraguay COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Paraguay"]], 
         ExternalIdentifier["WikidataID", "Q93668025", 
          Association[
          "Label" -> "2020 Paraguay COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Paraguay"]]}, 
       ExternalIdentifier["WikidataID", "Q87563855", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Dominican Republic", 
          "Description" -> "viral pandemic in the Dominican Republic"]] -> {
         ExternalIdentifier["WikidataID", "Q93622471", 
          Association[
          "Label" -> 
           "2020 Dominican Republic COVID-19 declaration of public health \
emergency", "Description" -> 
           "COVID-19 countermeasure in Dominican Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622474", 
          Association[
          "Label" -> "2020 Dominican Republic COVID-19 flight ban", 
           "Description" -> "COVID-19 countermeasure in Dominican Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622473", 
          Association[
          "Label" -> "2020 Dominican Republic COVID-19 travel ban", 
           "Description" -> "COVID-19 countermeasure in Dominican Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622478", 
          Association[
          "Label" -> 
           "2020 Dominican Republic COVID-19 closing of non-essential \
businesses", "Description" -> 
           "COVID-19 countermeasure in Dominican Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622477", 
          Association[
          "Label" -> 
           "2020 Dominican Republic COVID-19 closing of educational \
institutions", "Description" -> 
           "COVID-19 countermeasure in Dominican Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622498", 
          Association[
          "Label" -> "2020 Dominican Republic COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Dominican Republic"]]}, 
       ExternalIdentifier["WikidataID", "Q87483673", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Colombia", "Description" -> 
          "viral pandemic in Colombia"]] -> {
         ExternalIdentifier["WikidataID", "Q92639068", 
          Association[
          "Label" -> "2020 Colombia COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Colombia"]], 
         ExternalIdentifier["WikidataID", "Q93622132", 
          Association[
          "Label" -> 
           "2020 Colombia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Colombia"]], 
         ExternalIdentifier["WikidataID", "Q93622150", 
          Association[
          "Label" -> "2020 Colombia COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Colombia"]], 
         ExternalIdentifier["WikidataID", "Q93622151", 
          Association[
          "Label" -> "2020 Colombia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Colombia"]], 
         ExternalIdentifier["WikidataID", "Q93622154", 
          Association[
          "Label" -> 
           "2020 Colombia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Colombia"]], 
         ExternalIdentifier["WikidataID", "Q93622156", 
          Association[
          "Label" -> "2020 Colombia COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Colombia"]]}, 
       ExternalIdentifier["WikidataID", "Q87193778", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Serbia", "Description" -> 
          "details of ongoing viral outbreak in Serbia"]] -> {
         ExternalIdentifier["WikidataID", "Q93669647", 
          Association[
          "Label" -> "2020 Serbia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Serbia"]], 
         ExternalIdentifier["WikidataID", "Q93669645", 
          Association[
          "Label" -> 
           "2020 Serbia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Serbia"]], 
         ExternalIdentifier["WikidataID", "Q93669651", 
          Association[
          "Label" -> "2020 Serbia COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Serbia"]], 
         ExternalIdentifier["WikidataID", "Q93669649", 
          Association[
          "Label" -> 
           "2020 Serbia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Serbia"]], 
         ExternalIdentifier["WikidataID", "Q93669654", 
          Association[
          "Label" -> "2020 Serbia COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Serbia"]], 
         ExternalIdentifier["WikidataID", "Q93669653", 
          Association[
          "Label" -> "2020 Serbia COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Serbia"]]}, 
       ExternalIdentifier["WikidataID", "Q87119811", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Hungary", "Description" -> 
          "viral outbreak in Hungary"]] -> {
         ExternalIdentifier["WikidataID", "Q93623070", 
          Association[
          "Label" -> "2020 Hungary COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Hungary"]], 
         ExternalIdentifier["WikidataID", "Q93623073", 
          Association[
          "Label" -> 
           "2020 Hungary COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Hungary"]], 
         ExternalIdentifier["WikidataID", "Q93623077", 
          Association[
          "Label" -> "2020 Hungary COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Hungary"]], 
         ExternalIdentifier["WikidataID", "Q93623083", 
          Association[
          "Label" -> 
           "2020 Hungary COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Hungary"]], 
         ExternalIdentifier["WikidataID", "Q93623086", 
          Association[
          "Label" -> 
           "2020 Hungary COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Hungary"]], 
         ExternalIdentifier["WikidataID", "Q93623084", 
          Association[
          "Label" -> "2020 Hungary COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Hungary"]]}, 
       ExternalIdentifier["WikidataID", "Q87070975", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Israel", "Description" -> 
          "viral outbreak in Israel"]] -> {
         ExternalIdentifier["WikidataID", "Q93623463", 
          Association[
          "Label" -> "2020 Israel COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Israel"]], 
         ExternalIdentifier["WikidataID", "Q93623467", 
          Association[
          "Label" -> "2020 Israel COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Israel"]], 
         ExternalIdentifier["WikidataID", "Q93623470", 
          Association[
          "Label" -> "2020 Israel COVID-19 stay-at-home order", "Description" -> 
           "COVID-19 countermeasure in Israel"]], 
         ExternalIdentifier["WikidataID", "Q93623468", 
          Association[
          "Label" -> 
           "2020 Israel COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Israel"]], 
         ExternalIdentifier["WikidataID", "Q93623473", 
          Association[
          "Label" -> 
           "2020 Israel COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Israel"]], 
         ExternalIdentifier["WikidataID", "Q93623476", 
          Association[
          "Label" -> "2020 Israel COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Israel"]]}, 
       ExternalIdentifier["WikidataID", "Q87975745", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Fiji", "Description" -> 
          "details of ongoing viral pandemic in Fiji"]] -> {
         ExternalIdentifier["WikidataID", "Q93622542", 
          Association[
          "Label" -> "2020 Fiji COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Fiji"]], 
         ExternalIdentifier["WikidataID", "Q93622543", 
          Association[
          "Label" -> "2020 Fiji COVID-19 closing of educational institutions",
            "Description" -> "COVID-19 countermeasure in Fiji"]], 
         ExternalIdentifier["WikidataID", "Q93622547", 
          Association[
          "Label" -> "2020 Fiji COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Fiji"]], 
         ExternalIdentifier["WikidataID", "Q93622545", 
          Association[
          "Label" -> "2020 Fiji COVID-19 closing of non-essential businesses",
            "Description" -> "COVID-19 countermeasure in Fiji"]], 
         ExternalIdentifier["WikidataID", "Q93622549", 
          Association[
          "Label" -> "2020 Fiji COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Fiji"]]}, 
       ExternalIdentifier["WikidataID", "Q87814953", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Syria", "Description" -> 
          "viral pandemic in Syria"]] -> {
         ExternalIdentifier["WikidataID", "Q93670234", 
          Association[
          "Label" -> 
           "2020 Syria COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Syria"]], 
         ExternalIdentifier["WikidataID", "Q93670232", 
          Association[
          "Label" -> "2020 Syria COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Syria"]], 
         ExternalIdentifier["WikidataID", "Q93670238", 
          Association[
          "Label" -> "2020 Syria COVID-19 travel restrictions", "Description" -> 
           "COVID-19 countermeasure in Syria"]], 
         ExternalIdentifier["WikidataID", "Q93670241", 
          Association[
          "Label" -> "2020 Syria COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Syria"]], 
         ExternalIdentifier["WikidataID", "Q93670294", 
          Association[
          "Label" -> "2020 Syria COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Syria"]]}, 
       ExternalIdentifier["WikidataID", "Q87660365", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Uruguay", "Description" -> 
          "viral pandemic in Uruguay"]] -> {
         ExternalIdentifier["WikidataID", "Q93671040", 
          Association[
          "Label" -> "2020 Uruguay COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Uruguay"]], 
         ExternalIdentifier["WikidataID", "Q93671091", 
          Association[
          "Label" -> "2020 Uruguay COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Uruguay"]], 
         ExternalIdentifier["WikidataID", "Q93671089", 
          Association[
          "Label" -> 
           "2020 Uruguay COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Uruguay"]], 
         ExternalIdentifier["WikidataID", "Q93671093", 
          Association[
          "Label" -> "2020 Uruguay COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Uruguay"]], 
         ExternalIdentifier["WikidataID", "Q93671098", 
          Association[
          "Label" -> "2020 Uruguay COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Uruguay"]]}, 
       ExternalIdentifier["WikidataID", "Q87480220", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bolivia", "Description" -> 
          "viral pandemic in Bolivia"]] -> {
         ExternalIdentifier["WikidataID", "Q93622035", 
          Association[
          "Label" -> "2020 Bolivia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Bolivia"]], 
         ExternalIdentifier["WikidataID", "Q93622039", 
          Association[
          "Label" -> "2020 Bolivia COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Bolivia"]], 
         ExternalIdentifier["WikidataID", "Q93622037", 
          Association[
          "Label" -> "2020 Bolivia COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Bolivia"]], 
         ExternalIdentifier["WikidataID", "Q93622040", 
          Association[
          "Label" -> "2020 Bolivia COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Bolivia"]], 
         ExternalIdentifier["WikidataID", "Q93622044", 
          Association[
          "Label" -> 
           "2020 Bolivia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Bolivia"]]}, 
       ExternalIdentifier["WikidataID", "Q87473205", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Turkey", "Description" -> 
          "details of ongoing viral outbreak in Turkey"]] -> {
         ExternalIdentifier["WikidataID", "Q93670434", 
          Association[
          "Label" -> "2020 Turkey COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Turkey"]], 
         ExternalIdentifier["WikidataID", "Q93670432", 
          Association[
          "Label" -> "2020 Turkey COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Turkey"]], 
         ExternalIdentifier["WikidataID", "Q93670438", 
          Association[
          "Label" -> "2020 Turkey COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Turkey"]], 
         ExternalIdentifier["WikidataID", "Q93670437", 
          Association[
          "Label" -> 
           "2020 Turkey COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Turkey"]], 
         ExternalIdentifier["WikidataID", "Q93670440", 
          Association[
          "Label" -> 
           "2020 Turkey COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Turkey"]]}, 
       ExternalIdentifier["WikidataID", "Q87245450", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Lebanon", "Description" -> 
          "viral outbreak in Lebanon"]] -> {
         ExternalIdentifier["WikidataID", "Q93623922", 
          Association[
          "Label" -> "2020 Lebanon COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Lebanon"]], 
         ExternalIdentifier["WikidataID", "Q93623920", 
          Association[
          "Label" -> 
           "2020 Lebanon COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Lebanon"]], 
         ExternalIdentifier["WikidataID", "Q93623926", 
          Association[
          "Label" -> "2020 Lebanon COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Lebanon"]], 
         ExternalIdentifier["WikidataID", "Q93623927", 
          Association[
          "Label" -> "2020 Lebanon COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Lebanon"]], 
         ExternalIdentifier["WikidataID", "Q93623924", 
          Association[
          "Label" -> "2020 Lebanon COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Lebanon"]]}, 
       ExternalIdentifier["WikidataID", "Q87191204", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Chile", "Description" -> 
          "viral outbreak in Chile"]] -> {
         ExternalIdentifier["WikidataID", "Q93622122", 
          Association[
          "Label" -> "2020 Chile COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Chile"]], 
         ExternalIdentifier["WikidataID", "Q93622126", 
          Association[
          "Label" -> "2020 Chile COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Chile"]], 
         ExternalIdentifier["WikidataID", "Q93622125", 
          Association[
          "Label" -> 
           "2020 Chile COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Chile"]], 
         ExternalIdentifier["WikidataID", "Q93622130", 
          Association[
          "Label" -> 
           "2020 Chile COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Chile"]], 
         ExternalIdentifier["WikidataID", "Q93622131", 
          Association[
          "Label" -> "2020 Chile COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Chile"]]}, 
       ExternalIdentifier["WikidataID", "Q87186117", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Saudi Arabia", "Description" -> 
          "details of ongoing viral pandemic in Saudi Arabia"]] -> {
         ExternalIdentifier["WikidataID", "Q93669579", 
          Association[
          "Label" -> "2020 Saudi Arabia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Saudi Arabia"]], 
         ExternalIdentifier["WikidataID", "Q93669582", 
          Association[
          "Label" -> "2020 Saudi Arabia COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Saudi Arabia"]], 
         ExternalIdentifier["WikidataID", "Q93669583", 
          Association[
          "Label" -> 
           "2020 Saudi Arabia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Saudi Arabia"]], 
         ExternalIdentifier["WikidataID", "Q93669581", 
          Association[
          "Label" -> "2020 Saudi Arabia COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Saudi Arabia"]], 
         ExternalIdentifier["WikidataID", "Q93669586", 
          Association[
          "Label" -> 
           "2020 Saudi Arabia COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Saudi Arabia"]]}, 
       ExternalIdentifier["WikidataID", "Q86919406", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Czech Republic", 
          "Description" -> 
          "details of ongoing viral pandemic in the Czech Republic"]] -> {
         ExternalIdentifier["WikidataID", "Q93622398", 
          Association[
          "Label" -> "2020 Czech Republic COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Czech Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622403", 
          Association[
          "Label" -> 
           "2020 Czech Republic COVID-19 declaration of public health \
emergency", "Description" -> "COVID-19 countermeasure in Czech Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622400", 
          Association[
          "Label" -> 
           "2020 Czech Republic COVID-19 closing of educational institutions",
            "Description" -> "COVID-19 countermeasure in Czech Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622404", 
          Association[
          "Label" -> "2020 Czech Republic COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Czech Republic"]], 
         ExternalIdentifier["WikidataID", "Q93622426", 
          Association[
          "Label" -> "2020 Czech Republic COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Czech Republic"]]}, 
       ExternalIdentifier["WikidataID", "Q84098939", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Russia", "Description" -> 
          "details of ongoing viral pandemic in Russia in 2020"]] -> {
         ExternalIdentifier["WikidataID", "Q93668843", 
          Association[
          "Label" -> "2020 Russia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Russia"]], 
         ExternalIdentifier["WikidataID", "Q93668846", 
          Association[
          "Label" -> "2020 Russia COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Russia"]], 
         ExternalIdentifier["WikidataID", "Q93668895", 
          Association[
          "Label" -> "2020 Russia COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Russia"]], 
         ExternalIdentifier["WikidataID", "Q93668898", 
          Association[
          "Label" -> 
           "2020 Russia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Russia"]], 
         ExternalIdentifier["WikidataID", "Q93668901", 
          Association[
          "Label" -> 
           "2020 Russia COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Russia"]]}, 
       ExternalIdentifier["WikidataID", "Q84055415", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Finland", "Description" -> 
          "viral outbreak in Finland"]] -> {
         ExternalIdentifier["WikidataID", "Q93622563", 
          Association[
          "Label" -> 
           "2020 Finland COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Finland"]], 
         ExternalIdentifier["WikidataID", "Q93622567", 
          Association[
          "Label" -> "2020 Finland COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Finland"]], 
         ExternalIdentifier["WikidataID", "Q93622565", 
          Association[
          "Label" -> "2020 Finland COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Finland"]], 
         ExternalIdentifier["WikidataID", "Q88806641", 
          Association["Label" -> "2020 isolation of Uusimaa"]], 
         ExternalIdentifier["WikidataID", "Q90400101"]}, 
       ExternalIdentifier["WikidataID", "Q89277147", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Samoa", "Description" -> 
          "viral pandemic in Samoa"]] -> {
         ExternalIdentifier["WikidataID", "Q93668967", 
          Association[
          "Label" -> "2020 Samoa COVID-19 travel restrictions", "Description" -> 
           "COVID-19 countermeasure in Samoa"]], 
         ExternalIdentifier["WikidataID", "Q93668970", 
          Association[
          "Label" -> 
           "2020 Samoa COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Samoa"]], 
         ExternalIdentifier["WikidataID", "Q93668973", 
          Association[
          "Label" -> "2020 Samoa COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Samoa"]], 
         ExternalIdentifier["WikidataID", "Q93669502", 
          Association[
          "Label" -> "2020 Samoa COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Samoa"]]}, 
       ExternalIdentifier["WikidataID", "Q88082693", 
         Association["Label" -> "2020 COVID-19 pandemic in Haiti"]] -> {
         ExternalIdentifier["WikidataID", "Q93623018", 
          Association[
          "Label" -> "2020 Haiti COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Haiti"]], 
         ExternalIdentifier["WikidataID", "Q93623023", 
          Association[
          "Label" -> "2020 Haiti COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Haiti"]], 
         ExternalIdentifier["WikidataID", "Q93623020", 
          Association[
          "Label" -> "2020 Haiti COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Haiti"]], 
         ExternalIdentifier["WikidataID", "Q93623042", 
          Association[
          "Label" -> 
           "2020 Haiti COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Haiti"]]}, 
       ExternalIdentifier["WikidataID", "Q87722485", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Azerbaijan", "Description" -> 
          "viral pandemic in Azerbaijan"]] -> {
         ExternalIdentifier["WikidataID", "Q93621771", 
          Association[
          "Label" -> "2020 Azerbaijan COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Azerbaijan"]], 
         ExternalIdentifier["WikidataID", "Q93621768", 
          Association[
          "Label" -> 
           "2020 Azerbaijan COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Azerbaijan"]], 
         ExternalIdentifier["WikidataID", "Q93621772", 
          Association[
          "Label" -> "2020 Azerbaijan COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Azerbaijan"]], 
         ExternalIdentifier["WikidataID", "Q93621788", 
          Association[
          "Label" -> "2020 Azerbaijan COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Azerbaijan"]]}, 
       ExternalIdentifier["WikidataID", "Q87707727", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Saint Lucia", "Description" -> 
          "viral pandemic in Saint Lucia"]] -> {
         ExternalIdentifier["WikidataID", "Q93668914", 
          Association[
          "Label" -> 
           "2020 Saint Lucia COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Saint Lucia"]], 
         ExternalIdentifier["WikidataID", "Q93668912", 
          Association[
          "Label" -> "2020 Saint Lucia COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Saint Lucia"]], 
         ExternalIdentifier["WikidataID", "Q93668917", 
          Association[
          "Label" -> 
           "2020 Saint Lucia COVID-19 declaration of public health emergency",
            "Description" -> "COVID-19 countermeasure in Saint Lucia"]], 
         ExternalIdentifier["WikidataID", "Q93668963", 
          Association[
          "Label" -> "2020 Saint Lucia COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Saint Lucia"]]}, 
       ExternalIdentifier["WikidataID", "Q87655119", 
         Association["Label" -> "COVID-19 pandemic in Kosovo"]] -> {
         ExternalIdentifier["WikidataID", "Q93623883", 
          Association[
          "Label" -> "2020 Kosovo COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Kosovo"]], 
         ExternalIdentifier["WikidataID", "Q93623886", 
          Association[
          "Label" -> "2020 Kosovo COVID-19 partial lockdown", "Description" -> 
           "COVID-19 countermeasure in Kosovo"]], 
         ExternalIdentifier["WikidataID", "Q93623888", 
          Association[
          "Label" -> 
           "2020 Kosovo COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Kosovo"]], 
         ExternalIdentifier["WikidataID", "Q93623889", 
          Association[
          "Label" -> "2020 Kosovo COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Kosovo"]]}, 
       ExternalIdentifier["WikidataID", "Q87610822", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Jamaica", "Description" -> 
          "viral pandemic in Jamaica"]] -> {
         ExternalIdentifier["WikidataID", "Q93623523", 
          Association[
          "Label" -> "2020 Jamaica COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Jamaica"]], 
         ExternalIdentifier["WikidataID", "Q93623520", 
          Association[
          "Label" -> "2020 Jamaica COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Jamaica"]], 
         ExternalIdentifier["WikidataID", "Q93623526", 
          Association[
          "Label" -> 
           "2020 Jamaica COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Jamaica"]], 
         ExternalIdentifier["WikidataID", "Q93623529", 
          Association[
          "Label" -> "2020 Jamaica COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Jamaica"]]}, 
       ExternalIdentifier["WikidataID", "Q87587763", 
         Association[
         "Label" -> "COVID-19 pandemic in Peru", "Description" -> 
          "ongoing viral pandemic"]] -> {
         ExternalIdentifier["WikidataID", "Q93668096", 
          Association[
          "Label" -> "2020 Peru COVID-19 closing of educational institutions",
            "Description" -> "COVID-19 countermeasure in Peru"]], 
         ExternalIdentifier["WikidataID", "Q93668103", 
          Association[
          "Label" -> "2020 Peru COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Peru"]], 
         ExternalIdentifier["WikidataID", "Q93668100", 
          Association[
          "Label" -> "2020 Peru COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Peru"]], 
         ExternalIdentifier["WikidataID", "Q93668108", 
          Association[
          "Label" -> "2020 Peru COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Peru"]]}, 
       ExternalIdentifier["WikidataID", "Q87250770", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bosnia and Herzegovina", 
          "Description" -> 
          "details of ongoing viral outbreak in Bosnia and Herzegovina"]] -> {
         ExternalIdentifier["WikidataID", "Q93622045", 
          Association[
          "Label" -> 
           "2020 Bosnia and Herzegovina COVID-19 closing of educational \
institutions", "Description" -> 
           "COVID-19 countermeasure in Bosnia and Herzegovina"]], 
         ExternalIdentifier["WikidataID", "Q93622058", 
          Association[
          "Label" -> 
           "2020 Bosnia and Herzegovina COVID-19 travel restrictions", 
           "Description" -> 
           "COVID-19 countermeasure in Bosnia and Herzegovina"]], 
         ExternalIdentifier["WikidataID", "Q93622060", 
          Association[
          "Label" -> 
           "2020 Bosnia and Herzegovina COVID-19 declaration of public health \
emergency", "Description" -> 
           "COVID-19 countermeasure in Bosnia and Herzegovina"]], 
         ExternalIdentifier["WikidataID", "Q93622061", 
          Association[
          "Label" -> "2020 Bosnia and Herzegovina COVID-19 flight ban", 
           "Description" -> 
           "COVID-19 countermeasure in Bosnia and Herzegovina"]]}, 
       ExternalIdentifier["WikidataID", "Q87235177", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ukraine", "Description" -> 
          "details of ongoing viral outbreak in Ukraine"]] -> {
         ExternalIdentifier["WikidataID", "Q93670491", 
          Association[
          "Label" -> "2020 Ukraine COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Ukraine"]], 
         ExternalIdentifier["WikidataID", "Q93671019", 
          Association[
          "Label" -> "2020 Ukraine COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Ukraine"]], 
         ExternalIdentifier["WikidataID", "Q93671021", 
          Association[
          "Label" -> "2020 Ukraine COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Ukraine"]], 
         ExternalIdentifier["WikidataID", "Q93671024", 
          Association[
          "Label" -> 
           "2020 Ukraine COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Ukraine"]]}, 
       ExternalIdentifier["WikidataID", "Q87186365", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Republic of Ireland", 
          "Description" -> 
          "details of ongoing viral outbreak in the Republic of Ireland"]] -> {
         ExternalIdentifier["WikidataID", "Q93623431", 
          Association[
          "Label" -> "2020 Ireland COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Ireland"]], 
         ExternalIdentifier["WikidataID", "Q93623429", 
          Association[
          "Label" -> 
           "2020 Ireland COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Ireland"]], 
         ExternalIdentifier["WikidataID", "Q93623435", 
          Association[
          "Label" -> 
           "2020 Ireland COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Ireland"]], 
         ExternalIdentifier["WikidataID", "Q93623433", 
          Association[
          "Label" -> "2020 Ireland COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Ireland"]]}, 
       ExternalIdentifier["WikidataID", "Q87070999", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bahrain", "Description" -> 
          "viral pandemic in Bahrain"]] -> {
         ExternalIdentifier["WikidataID", "Q93621798", 
          Association[
          "Label" -> 
           "2020 Bahrain COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Bahrain"]], 
         ExternalIdentifier["WikidataID", "Q93621799", 
          Association[
          "Label" -> "2020 Bahrain COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Bahrain"]], 
         ExternalIdentifier["WikidataID", "Q93621803", 
          Association[
          "Label" -> "2020 Bahrain COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Bahrain"]], 
         ExternalIdentifier["WikidataID", "Q93621801", 
          Association[
          "Label" -> 
           "2020 Bahrain COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Bahrain"]]}, 
       ExternalIdentifier["WikidataID", "Q86597685", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Denmark", "Description" -> 
          "viral outbreak in Denmark"]] -> {
         ExternalIdentifier["WikidataID", "Q93622445", 
          Association[
          "Label" -> "2020 Denmark COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Denmark"]], 
         ExternalIdentifier["WikidataID", "Q93622462", 
          Association[
          "Label" -> 
           "2020 Denmark COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Denmark"]], 
         ExternalIdentifier["WikidataID", "Q93622467", 
          Association[
          "Label" -> "2020 Denmark COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Denmark"]], 
         ExternalIdentifier["WikidataID", "Q93622465", 
          Association[
          "Label" -> "2020 Denmark COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Denmark"]]}, 
       ExternalIdentifier["WikidataID", "Q84166704", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Spain", "Description" -> 
          "viral outbreak in Spain"]] -> {
         ExternalIdentifier["WikidataID", "Q93670137", 
          Association[
          "Label" -> "2020 Spain COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Spain"]], 
         ExternalIdentifier["WikidataID", "Q93670143", 
          Association[
          "Label" -> 
           "2020 Spain COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in Spain"]], 
         ExternalIdentifier["WikidataID", "Q93670141", 
          Association[
          "Label" -> 
           "2020 Spain COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Spain"]], 
         ExternalIdentifier["WikidataID", "Q93670145", 
          Association[
          "Label" -> 
           "2020 Spain COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Spain"]]}, 
       ExternalIdentifier["WikidataID", "Q84030045", 
         Association[
         "Label" -> 
          "2019\[Dash]20 coronavirus outbreak in the United Arab Emirates", 
          "Description" -> 
          "details of ongoing viral outbreak in the United Arab Emirates"]] -> {
         ExternalIdentifier["WikidataID", "Q93671027", 
          Association[
          "Label" -> "2020 United Arab Emirates COVID-19 curfew", 
           "Description" -> 
           "COVID-19 countermeasure in United Arab Emirates"]], 
         ExternalIdentifier["WikidataID", "Q93671029", 
          Association[
          "Label" -> "2020 United Arab Emirates COVID-19 flight ban", 
           "Description" -> 
           "COVID-19 countermeasure in United Arab Emirates"]], 
         ExternalIdentifier["WikidataID", "Q93671035", 
          Association[
          "Label" -> "2020 United Arab Emirates COVID-19 stay-at-home order", 
           "Description" -> 
           "COVID-19 countermeasure in United Arab Emirates"]], 
         ExternalIdentifier["WikidataID", "Q93671032", 
          Association[
          "Label" -> "2020 United Arab Emirates COVID-19 social distancing", 
           "Description" -> 
           "COVID-19 countermeasure in United Arab Emirates"]]}, 
       ExternalIdentifier["WikidataID", "Q83873548", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Australia", "Description" -> 
          "viral outbreak in Australia"]] -> {
         ExternalIdentifier["WikidataID", "Q93621759", 
          Association[
          "Label" -> "2020 Australia COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Australia"]], 
         ExternalIdentifier["WikidataID", "Q93621756", 
          Association[
          "Label" -> 
           "2020 Australia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Australia"]], 
         ExternalIdentifier["WikidataID", "Q93621763", 
          Association[
          "Label" -> "2020 Australia COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Australia"]], 
         ExternalIdentifier["WikidataID", "Q93621761", 
          Association[
          "Label" -> "2020 Australia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Australia"]]}, 
       ExternalIdentifier["WikidataID", "Q83873057", 
         Association[
         "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
          "viral outbreak in Vietnam"]] -> {
         ExternalIdentifier["WikidataID", "Q93671210", 
          Association[
          "Label" -> 
           "2020 Vietnam COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Vietnam"]], 
         ExternalIdentifier["WikidataID", "Q93671249", 
          Association[
          "Label" -> "2020 Vietnam COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Vietnam"]], 
         ExternalIdentifier["WikidataID", "Q93671254", 
          Association[
          "Label" -> "2020 Vietnam COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Vietnam"]], 
         ExternalIdentifier["WikidataID", "Q93671253", 
          Association[
          "Label" -> 
           "2020 Vietnam COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Vietnam"]]}, 
       ExternalIdentifier["WikidataID", "Q89277064", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Nauru", "Description" -> 
          "viral pandemic in Nauru"]] -> {
         ExternalIdentifier["WikidataID", "Q93631955", 
          Association[
          "Label" -> 
           "2020 Nauru COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Nauru"]], 
         ExternalIdentifier["WikidataID", "Q93631958", 
          Association[
          "Label" -> "2020 Nauru COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Nauru"]], 
         ExternalIdentifier["WikidataID", "Q93631961", 
          Association[
          "Label" -> "2020 Nauru COVID-19 travel restrictions", "Description" -> 
           "COVID-19 countermeasure in Nauru"]]}, 
       ExternalIdentifier["WikidataID", "Q87755488", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Bahamas", "Description" -> 
          "viral pandemic in the Bahamas"]] -> {
         ExternalIdentifier["WikidataID", "Q93621794", 
          Association[
          "Label" -> 
           "2020 The Bahamas COVID-19 closing of non-essential businesses", 
           "Description" -> "COVID-19 countermeasure in The Bahamas"]], 
         ExternalIdentifier["WikidataID", "Q93621792", 
          Association[
          "Label" -> "2020 The Bahamas COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in The Bahamas"]], 
         ExternalIdentifier["WikidataID", "Q93621797", 
          Association[
          "Label" -> "2020 The Bahamas COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in The Bahamas"]]}, 
       ExternalIdentifier["WikidataID", "Q87745903", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Senegal", "Description" -> 
          "COVID-19 outbreak in Senegal"]] -> {
         ExternalIdentifier["WikidataID", "Q93669590", 
          Association[
          "Label" -> "2020 Senegal COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Senegal"]], 
         ExternalIdentifier["WikidataID", "Q93669594", 
          Association[
          "Label" -> 
           "2020 Senegal COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Senegal"]], 
         ExternalIdentifier["WikidataID", "Q93669592", 
          Association[
          "Label" -> 
           "2020 Senegal COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Senegal"]]}, 
       ExternalIdentifier["WikidataID", "Q87733671", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Qatar", "Description" -> 
          "viral pandemic in Qatar"]] -> {
         ExternalIdentifier["WikidataID", "Q93668682", 
          Association[
          "Label" -> 
           "2020 Qatar COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Qatar"]], 
         ExternalIdentifier["WikidataID", "Q93668686", 
          Association[
          "Label" -> "2020 Qatar COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Qatar"]], 
         ExternalIdentifier["WikidataID", "Q93668689", 
          Association[
          "Label" -> "2020 Qatar COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Qatar"]]}, 
       ExternalIdentifier["WikidataID", "Q87704267", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ivory Coast", "Description" -> 
          "viral pandemic in Ivory Coast"]] -> {
         ExternalIdentifier["WikidataID", "Q93623511", 
          Association[
          "Label" -> "2020 Ivory Coast COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Ivory Coast"]], 
         ExternalIdentifier["WikidataID", "Q93623514", 
          Association[
          "Label" -> "2020 Ivory Coast COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Ivory Coast"]], 
         ExternalIdentifier["WikidataID", "Q93623517", 
          Association[
          "Label" -> 
           "2020 Ivory Coast COVID-19 declaration of public health emergency",
            "Description" -> "COVID-19 countermeasure in Ivory Coast"]]}, 
       ExternalIdentifier["WikidataID", "Q87694131", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Trinidad and Tobago", 
          "Description" -> "viral pandemic in Trinidad and Tobago"]] -> {
         ExternalIdentifier["WikidataID", "Q93670391", 
          Association[
          "Label" -> "2020 Trinidad and Tobago COVID-19 flight ban", 
           "Description" -> 
           "COVID-19 countermeasure in Trinidad and Tobago"]], 
         ExternalIdentifier["WikidataID", "Q93670388", 
          Association[
          "Label" -> "2020 Trinidad and Tobago COVID-19 travel ban", 
           "Description" -> 
           "COVID-19 countermeasure in Trinidad and Tobago"]], 
         ExternalIdentifier["WikidataID", "Q93670431", 
          Association[
          "Label" -> 
           "2020 Trinidad and Tobago COVID-19 closing of educational \
institutions", "Description" -> 
           "COVID-19 countermeasure in Trinidad and Tobago"]]}, 
       ExternalIdentifier["WikidataID", "Q87587760", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Malta", "Description" -> 
          "details of ongoing viral pandemic in Malta"]] -> {
         ExternalIdentifier["WikidataID", "Q93624002", 
          Association[
          "Label" -> 
           "2020 Malta COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Malta"]], 
         ExternalIdentifier["WikidataID", "Q93624000", 
          Association[
          "Label" -> "2020 Malta COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Malta"]], 
         ExternalIdentifier["WikidataID", "Q93624005", 
          Association[
          "Label" -> "2020 Malta COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Malta"]]}, 
       ExternalIdentifier["WikidataID", "Q87486535", 
         Association["Label" -> "2020 COVID-19 pandemic in Bulgaria"]] -> {
         ExternalIdentifier["WikidataID", "Q93622091", 
          Association[
          "Label" -> "2020 Bulgaria COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Bulgaria"]], 
         ExternalIdentifier["WikidataID", "Q93622089", 
          Association[
          "Label" -> 
           "2020 Bulgaria COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Bulgaria"]], 
         ExternalIdentifier["WikidataID", "Q93622094", 
          Association[
          "Label" -> "2020 Bulgaria COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Bulgaria"]]}, 
       ExternalIdentifier["WikidataID", "Q87454162", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Oman", "Description" -> 
          "viral pandemic in Oman"]] -> {
         ExternalIdentifier["WikidataID", "Q93667850", 
          Association[
          "Label" -> "2020 Oman COVID-19 closing of educational institutions",
            "Description" -> "COVID-19 countermeasure in Oman"]], 
         ExternalIdentifier["WikidataID", "Q93667853", 
          Association[
          "Label" -> "2020 Oman COVID-19 closing of non-essential businesses",
            "Description" -> "COVID-19 countermeasure in Oman"]], 
         ExternalIdentifier["WikidataID", "Q93667856", 
          Association[
          "Label" -> "2020 Oman COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Oman"]]}, 
       ExternalIdentifier["WikidataID", "Q87250897", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in North Macedonia", 
          "Description" -> 
          "details of ongoing viral outbreak in North Macedonia"]] -> {
         ExternalIdentifier["WikidataID", "Q93662587", 
          Association[
          "Label" -> "2020 North Macedonia COVID-19 flight ban", 
           "Description" -> "COVID-19 countermeasure in North Macedonia"]], 
         ExternalIdentifier["WikidataID", "Q93662589", 
          Association[
          "Label" -> 
           "2020 North Macedonia COVID-19 declaration of public health \
emergency", "Description" -> "COVID-19 countermeasure in North Macedonia"]], 
         ExternalIdentifier["WikidataID", "Q93662592", 
          Association[
          "Label" -> "2020 North Macedonia COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in North Macedonia"]]}, 
       ExternalIdentifier["WikidataID", "Q87250838", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Lithuania", "Description" -> 
          "details of ongoing viral outbreak in Lithuania"]] -> {
         ExternalIdentifier["WikidataID", "Q93623933", 
          Association[
          "Label" -> 
           "2020 Lithuania COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Lithuania"]], 
         ExternalIdentifier["WikidataID", "Q93623939", 
          Association[
          "Label" -> 
           "2020 Lithuania COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Lithuania"]], 
         ExternalIdentifier["WikidataID", "Q93623942", 
          Association[
          "Label" -> "2020 Lithuania COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Lithuania"]]}, 
       ExternalIdentifier["WikidataID", "Q87250752", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Romania", "Description" -> 
          "details of ongoing viral pandemic im Romania"]] -> {
         ExternalIdentifier["WikidataID", "Q93668835", 
          Association[
          "Label" -> 
           "2020 Romania COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Romania"]], 
         ExternalIdentifier["WikidataID", "Q93668837", 
          Association[
          "Label" -> 
           "2020 Romania COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Romania"]], 
         ExternalIdentifier["WikidataID", "Q93668840", 
          Association[
          "Label" -> "2020 Romania COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Romania"]]}, 
       ExternalIdentifier["WikidataID", "Q87250713", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ecuador", "Description" -> 
          "Pandemia viral en Ecuador"]] -> {
         ExternalIdentifier["WikidataID", "Q93622502", 
          Association[
          "Label" -> 
           "2020 Ecuador COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Ecuador"]], 
         ExternalIdentifier["WikidataID", "Q93622507", 
          Association[
          "Label" -> "2020 Ecuador COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Ecuador"]], 
         ExternalIdentifier["WikidataID", "Q93622505", 
          Association[
          "Label" -> "2020 Ecuador COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Ecuador"]]}, 
       ExternalIdentifier["WikidataID", "Q87250695", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Poland", "Description" -> 
          "spread of SARS-CoV-2 infections in Poland in during the 2020 \
pandemic"]] -> {
         ExternalIdentifier["WikidataID", "Q93668594", 
          Association[
          "Label" -> "2020 Poland COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Poland"]], 
         ExternalIdentifier["WikidataID", "Q93668598", 
          Association[
          "Label" -> 
           "2020 Poland COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Poland"]], 
         ExternalIdentifier["WikidataID", "Q93668600", 
          Association[
          "Label" -> "2020 Poland COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Poland"]]}, 
       ExternalIdentifier["WikidataID", "Q87250691", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kuwait", "Description" -> 
          "details of ongoing viral pandemic in Kuwait"]] -> {
         ExternalIdentifier["WikidataID", "Q93623895", 
          Association[
          "Label" -> "2020 Kuwait COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Kuwait"]], 
         ExternalIdentifier["WikidataID", "Q93623892", 
          Association[
          "Label" -> "2020 Kuwait COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Kuwait"]], 
         ExternalIdentifier["WikidataID", "Q93623893", 
          Association[
          "Label" -> "2020 Kuwait COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Kuwait"]]}, 
       ExternalIdentifier["WikidataID", "Q87199320", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the State of Palestine", 
          "Description" -> 
          "details of ongoing viral pandemic in the State of Palestine"]] -> {
         ExternalIdentifier["WikidataID", "Q93667941", 
          Association[
          "Label" -> "2020 Palestine COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Palestine"]], 
         ExternalIdentifier["WikidataID", "Q93667945", 
          Association[
          "Label" -> 
           "2020 Palestine COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Palestine"]], 
         ExternalIdentifier["WikidataID", "Q93667948", 
          Association[
          "Label" -> 
           "2020 Palestine COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Palestine"]]}, 
       ExternalIdentifier["WikidataID", "Q87068864", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Greece", "Description" -> 
          "details of ongoing viral outbreak in Greece"]] -> {
         ExternalIdentifier["WikidataID", "Q93622970", 
          Association[
          "Label" -> 
           "2020 Greece COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Greece"]], 
         ExternalIdentifier["WikidataID", "Q93622973", 
          Association[
          "Label" -> "2020 Greece COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Greece"]], 
         ExternalIdentifier["WikidataID", "Q93622976", 
          Association[
          "Label" -> "2020 Greece COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Greece"]]}, 
       ExternalIdentifier["WikidataID", "Q87066621", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Latvia", "Description" -> 
          "details of ongoing viral outbreak in Latvia"]] -> {
         ExternalIdentifier["WikidataID", "Q93623914", 
          Association[
          "Label" -> 
           "2020 Latvia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Latvia"]], 
         ExternalIdentifier["WikidataID", "Q93623918", 
          Association[
          "Label" -> "2020 Latvia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Latvia"]], 
         ExternalIdentifier["WikidataID", "Q93623916", 
          Association[
          "Label" -> 
           "2020 Latvia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Latvia"]]}, 
       ExternalIdentifier["WikidataID", "Q87058723", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Morocco", "Description" -> 
          "viral pandemic in Morocco"]] -> {
         ExternalIdentifier["WikidataID", "Q93631906", 
          Association[
          "Label" -> "2020 Morocco COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Morocco"]], 
         ExternalIdentifier["WikidataID", "Q93631911", 
          Association[
          "Label" -> 
           "2020 Morocco COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Morocco"]], 
         ExternalIdentifier["WikidataID", "Q93631909", 
          Association[
          "Label" -> 
           "2020 Morocco COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Morocco"]]}, 
       ExternalIdentifier["WikidataID", "Q86717788", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Switzerland", "Description" -> 
          "overview about the coronavirus outbreak in Switzerland in 2020"]] -> {
         ExternalIdentifier["WikidataID", "Q93670223", 
          Association[
          "Label" -> "2020 Switzerland COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Switzerland"]], 
         ExternalIdentifier["WikidataID", "Q93670227", 
          Association[
          "Label" -> "2020 Switzerland COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Switzerland"]], 
         ExternalIdentifier["WikidataID", "Q93670224", 
          Association[
          "Label" -> 
           "2020 Switzerland COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Switzerland"]]}, 
       ExternalIdentifier["WikidataID", "Q86675924", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in North Korea", "Description" -> 
          "details of ongoing viral pandemic in North Korea"]] -> {
         ExternalIdentifier["WikidataID", "Q93662581", 
          Association[
          "Label" -> "2020 North Korea COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in North Korea"]], 
         ExternalIdentifier["WikidataID", "Q93662584", 
          Association[
          "Label" -> 
           "2020 North Korea COVID-19 declaration of public health emergency",
            "Description" -> "COVID-19 countermeasure in North Korea"]], 
         ExternalIdentifier["WikidataID", "Q93662585", 
          Association[
          "Label" -> 
           "2020 North Korea COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in North Korea"]]}, 
       ExternalIdentifier["WikidataID", "Q84104992", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Italy", "Description" -> 
          "viral outbreak in Italy"]] -> {
         ExternalIdentifier["WikidataID", "Q87348909", 
          Association[
          "Label" -> "2020 Italy coronavirus lockdown", "Description" -> 
           "quarantine in Italy"]], 
         ExternalIdentifier["WikidataID", "Q93623479", 
          Association[
          "Label" -> 
           "2020 Italy COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Italy"]], 
         ExternalIdentifier["WikidataID", "Q93623509", 
          Association[
          "Label" -> 
           "2020 Italy COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Italy"]]}, 
       ExternalIdentifier["WikidataID", "Q84055514", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in India", "Description" -> 
          "details of ongoing viral pandemic in India in 2020"]] -> {
         ExternalIdentifier["WikidataID", "Q88323877", 
          Association[
          "Label" -> "closing of educational institutions", "Description" -> 
           "action to reduce virus transmission"]], 
         ExternalIdentifier["WikidataID", "Q93623124", 
          Association[
          "Label" -> 
           "2020 India COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in India"]], 
         ExternalIdentifier["WikidataID", "Q88580475", 
          Association["Label" -> "2020 India coronavirus lockdown"]]}, 
       ExternalIdentifier["WikidataID", "Q83873593", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in France", "Description" -> 
          "viral outbreak in France"]] -> {
         ExternalIdentifier["WikidataID", "Q93622914", 
          Association[
          "Label" -> 
           "2020 France COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in France"]], 
         ExternalIdentifier["WikidataID", "Q93622918", 
          Association[
          "Label" -> "2020 France COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in France"]], 
         ExternalIdentifier["WikidataID", "Q93622916", 
          Association[
          "Label" -> "2020 France COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in France"]]}, 
       ExternalIdentifier["WikidataID", "Q83873573", 
         Association[
         "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
          "Description" -> "viral outbreak in Nepal"]] -> {
         ExternalIdentifier["WikidataID", "Q93631970", 
          Association[
          "Label" -> "2020 Nepal COVID-19 travel restrictions", "Description" -> 
           "COVID-19 countermeasure in Nepal"]], 
         ExternalIdentifier["WikidataID", "Q93631971", 
          Association[
          "Label" -> 
           "2020 Nepal COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Nepal"]], 
         ExternalIdentifier["WikidataID", "Q93631974", 
          Association[
          "Label" -> "2020 Nepal COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Nepal"]]}, 
       ExternalIdentifier["WikidataID", "Q83873387", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Singapore", "Description" -> 
          "details of ongoing viral outbreak in Singapore"]] -> {
         ExternalIdentifier["WikidataID", "Q93669684", 
          Association[
          "Label" -> "2020 Singapore COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Singapore"]], 
         ExternalIdentifier["WikidataID", "Q93669686", 
          Association[
          "Label" -> 
           "2020 Singapore COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Singapore"]], 
         ExternalIdentifier["WikidataID", "Q93669687", 
          Association[
          "Label" -> "2020 Singapore COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Singapore"]]}, 
       ExternalIdentifier["WikidataID", "Q88556836", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Mali", "Description" -> 
          "viral pandemic in Mali"]] -> {
         ExternalIdentifier["WikidataID", "Q93623990", 
          Association[
          "Label" -> "2020 Mali COVID-19 travel restrictions", "Description" -> 
           "COVID-19 countermeasure in Mali"]], 
         ExternalIdentifier["WikidataID", "Q93623997", 
          Association[
          "Label" -> "2020 Mali COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Mali"]]}, 
       ExternalIdentifier["WikidataID", "Q88164033", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Zimbabwe", "Description" -> 
          "viral pandemic in Zimbabwe"]] -> {
         ExternalIdentifier["WikidataID", "Q93671379", 
          Association[
          "Label" -> "2020 Zimbabwe COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Zimbabwe"]], 
         ExternalIdentifier["WikidataID", "Q93671377", 
          Association[
          "Label" -> "2020 Zimbabwe COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Zimbabwe"]]}, 
       ExternalIdentifier["WikidataID", "Q88082639", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Cape Verde", "Description" -> 
          "viral pandemic"]] -> {
         ExternalIdentifier["WikidataID", "Q93622119", 
          Association[
          "Label" -> "2020 Cape Verde COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Cape Verde"]], 
         ExternalIdentifier["WikidataID", "Q93622121", 
          Association[
          "Label" -> "2020 Cape Verde COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Cape Verde"]]}, 
       ExternalIdentifier["WikidataID", "Q88082534", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Angola", "Description" -> 
          "viral pandemic in Angola"]] -> {
         ExternalIdentifier["WikidataID", "Q93621690", 
          Association[
          "Label" -> "2020 Angola COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Angola"]], 
         ExternalIdentifier["WikidataID", "Q93621693", 
          Association[
          "Label" -> 
           "2020 Angola COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Angola"]]}, 
       ExternalIdentifier["WikidataID", "Q87979033", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Mauritius", "Description" -> 
          "viral pandemic in Mauritius"]] -> {
         ExternalIdentifier["WikidataID", "Q93631188", 
          Association[
          "Label" -> "2020 Mauritius COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Mauritius"]], 
         ExternalIdentifier["WikidataID", "Q93631189", 
          Association[
          "Label" -> "2020 Mauritius COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Mauritius"]]}, 
       ExternalIdentifier["WikidataID", "Q87899016", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Gambia", "Description" -> 
          "viral pandemic in the Gambia"]] -> {
         ExternalIdentifier["WikidataID", "Q93622931", 
          Association[
          "Label" -> "2020 Gambia COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Gambia"]], 
         ExternalIdentifier["WikidataID", "Q93622929", 
          Association[
          "Label" -> "2020 Gambia COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Gambia"]]}, 
       ExternalIdentifier["WikidataID", "Q87770645", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Somalia", "Description" -> 
          "viral pandemic in Somalia"]] -> {
         ExternalIdentifier["WikidataID", "Q93669741", 
          Association[
          "Label" -> "2020 Somalia COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Somalia"]], 
         ExternalIdentifier["WikidataID", "Q93669771", 
          Association[
          "Label" -> "2020 Somalia COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Somalia"]]}, 
       ExternalIdentifier["WikidataID", "Q87729501", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Namibia", "Description" -> 
          "viral pandemic in Namibia"]] -> {
         ExternalIdentifier["WikidataID", "Q93631918", 
          Association[
          "Label" -> "2020 Namibia COVID-19 partial lockdown", "Description" -> 
           "COVID-19 countermeasure in Namibia"]], 
         ExternalIdentifier["WikidataID", "Q93631916", 
          Association[
          "Label" -> "2020 Namibia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Namibia"]]}, 
       ExternalIdentifier["WikidataID", "Q87708832", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Mongolia", "Description" -> 
          "details of ongoing viral pandemic in Mongolia"]] -> {
         ExternalIdentifier["WikidataID", "Q93631285", 
          Association[
          "Label" -> 
           "2020 Mongolia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Mongolia"]], 
         ExternalIdentifier["WikidataID", "Q93631289", 
          Association[
          "Label" -> "2020 Mongolia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Mongolia"]]}, 
       ExternalIdentifier["WikidataID", "Q87708719", 
         Association["Label" -> "2020 COVID-19 pandemic in Aruba"]] -> {
         ExternalIdentifier["WikidataID", "Q93621740", 
          Association[
          "Label" -> "2020 Aruba COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Aruba"]], 
         ExternalIdentifier["WikidataID", "Q93621741", 
          Association[
          "Label" -> 
           "2020 Aruba COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Aruba"]]}, 
       ExternalIdentifier["WikidataID", "Q87705884", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kenya", "Description" -> 
          "viral pandemic in Kenya"]] -> {
         ExternalIdentifier["WikidataID", "Q93623661", 
          Association[
          "Label" -> "2020 Kenya COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Kenya"]], 
         ExternalIdentifier["WikidataID", "Q93623664", 
          Association[
          "Label" -> "2020 Kenya COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Kenya"]]}, 
       ExternalIdentifier["WikidataID", "Q87666247", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ghana", "Description" -> 
          "viral pandemic in Ghana"]] -> {
         ExternalIdentifier["WikidataID", "Q93622967", 
          Association[
          "Label" -> "2020 Ghana COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Ghana"]], 
         ExternalIdentifier["WikidataID", "Q93622965", 
          Association[
          "Label" -> "2020 Ghana COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Ghana"]]}, 
       ExternalIdentifier["WikidataID", "Q87665038", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ethiopia", "Description" -> 
          "details of ongoing viral pandemic in Ethiopia"]] -> {
         ExternalIdentifier["WikidataID", "Q93622533", 
          Association[
          "Label" -> "2020 Ethiopia COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Ethiopia"]], 
         ExternalIdentifier["WikidataID", "Q93622536", 
          Association[
          "Label" -> "2020 Ethiopia COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Ethiopia"]]}, 
       ExternalIdentifier["WikidataID", "Q87664046", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Suriname", "Description" -> 
          "viral pandemic in Suriname"]] -> {
         ExternalIdentifier["WikidataID", "Q93670150", 
          Association[
          "Label" -> "2020 Suriname COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Suriname"]], 
         ExternalIdentifier["WikidataID", "Q93670154", 
          Association[
          "Label" -> "2020 Suriname COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Suriname"]]}, 
       ExternalIdentifier["WikidataID", "Q87662819", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Togo", "Description" -> 
          "viral pandemic in Togo"]] -> {
         ExternalIdentifier["WikidataID", "Q93670372", 
          Association[
          "Label" -> "2020 Togo COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Togo"]], 
         ExternalIdentifier["WikidataID", "Q93670376", 
          Association[
          "Label" -> "2020 Togo COVID-19 partial lockdown", "Description" -> 
           "COVID-19 countermeasure in Togo"]]}, 
       ExternalIdentifier["WikidataID", "Q87250732", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Croatia", "Description" -> 
          "details pf ongoing viral outbreak in Croatia"]] -> {
         ExternalIdentifier["WikidataID", "Q93622386", 
          Association[
          "Label" -> 
           "2020 Croatia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Croatia"]], 
         ExternalIdentifier["WikidataID", "Q93622387", 
          Association[
          "Label" -> "2020 Croatia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Croatia"]]}, 
       ExternalIdentifier["WikidataID", "Q87235137", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Argentina", "Description" -> 
          "details of ongoing viral outbreak in Argentina"]] -> {
         ExternalIdentifier["WikidataID", "Q93621722", 
          Association[
          "Label" -> "2020 Argentina COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Argentina"]], 
         ExternalIdentifier["WikidataID", "Q93621721", 
          Association[
          "Label" -> "2020 Argentina COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Argentina"]]}, 
       ExternalIdentifier["WikidataID", "Q87204911", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Estonia", "Description" -> 
          "details of ongoing viral outbreak in Estonia"]] -> {
         ExternalIdentifier["WikidataID", "Q93622515", 
          Association[
          "Label" -> 
           "2020 Estonia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Estonia"]], 
         ExternalIdentifier["WikidataID", "Q93622532", 
          Association[
          "Label" -> "2020 Estonia COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Estonia"]]}, 
       ExternalIdentifier["WikidataID", "Q87121993", 
         Association["Label" -> "2020 COVID-19 pandemic in Iceland"]] -> {
         ExternalIdentifier["WikidataID", "Q93623091", 
          Association[
          "Label" -> "2020 Iceland COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Iceland"]], 
         ExternalIdentifier["WikidataID", "Q93623088", 
          Association[
          "Label" -> 
           "2020 Iceland COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Iceland"]]}, 
       ExternalIdentifier["WikidataID", "Q87116829", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Egypt", "Description" -> 
          "details of ongoing viral pandemic in Egypt"]] -> {
         ExternalIdentifier["WikidataID", "Q93622510", 
          Association[
          "Label" -> "2020 Egypt COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Egypt"]], 
         ExternalIdentifier["WikidataID", "Q93622509", 
          Association[
          "Label" -> "2020 Egypt COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Egypt"]]}, 
       ExternalIdentifier["WikidataID", "Q86913546", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Indonesia", "Description" -> 
          "details of an ongoing pandemic in Indonesia"]] -> {
         ExternalIdentifier["WikidataID", "Q93623153", 
          Association[
          "Label" -> "2020 Indonesia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Indonesia"]], 
         ExternalIdentifier["WikidataID", "Q93623420", 
          Association[
          "Label" -> 
           "2020 Indonesia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Indonesia"]]}, 
       ExternalIdentifier["WikidataID", "Q86847911", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Austria", "Description" -> 
          "overview about the coronavirus outbreak in Austria in 2020"]] -> {
         ExternalIdentifier["WikidataID", "Q93621766", 
          Association[
          "Label" -> "2020 Austria COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Austria"]], 
         ExternalIdentifier["WikidataID", "Q93621765", 
          Association[
          "Label" -> "2020 Austria COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Austria"]]}, 
       ExternalIdentifier["WikidataID", "Q86756826", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Netherlands", 
          "Description" -> "viral outbreak in the Netherlands"]] -> {
         ExternalIdentifier["WikidataID", "Q93631976", 
          Association[
          "Label" -> 
           "2020 Netherlands COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Netherlands"]], 
         ExternalIdentifier["WikidataID", "Q93631980", 
          Association[
          "Label" -> "2020 Netherlands COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Netherlands"]]}, 
       ExternalIdentifier["WikidataID", "Q86597695", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Brazil", "Description" -> 
          "details of ongoing viral pandemic in Brazil"]] -> {
         ExternalIdentifier["WikidataID", "Q93622066", 
          Association[
          "Label" -> "2020 Brazil COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Brazil"]], 
         ExternalIdentifier["WikidataID", "Q93622064", 
          Association[
          "Label" -> 
           "2020 Brazil COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Brazil"]]}, 
       ExternalIdentifier["WikidataID", "Q84446340", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Belgium", "Description" -> 
          "viral outbreak in Belgium"]] -> {
         ExternalIdentifier["WikidataID", "Q93621827", 
          Association[
          "Label" -> "2020 Belgium COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Belgium"]], 
         ExternalIdentifier["WikidataID", "Q93621825", 
          Association[
          "Label" -> "2020 Belgium COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Belgium"]]}, 
       ExternalIdentifier["WikidataID", "Q84081307", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Taiwan", "Description" -> 
          "viral outbreak in Taiwan"]] -> {
         ExternalIdentifier["WikidataID", "Q93670297", 
          Association[
          "Label" -> 
           "2020 Taiwan COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Taiwan"]], 
         ExternalIdentifier["WikidataID", "Q93670300", 
          Association[
          "Label" -> "2020 Taiwan COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Taiwan"]]}, 
       ExternalIdentifier["WikidataID", "Q83888864", 
         Association[
         "Label" -> "2019\[Dash]20 coronavirus outbreak in Cambodia", 
          "Description" -> "viral outbreak in Cambodia"]] -> {
         ExternalIdentifier["WikidataID", "Q93622103", 
          Association[
          "Label" -> "2020 Cambodia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Cambodia"]], 
         ExternalIdentifier["WikidataID", "Q93622116", 
          Association[
          "Label" -> 
           "2020 Cambodia COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Cambodia"]]}, 
       ExternalIdentifier["WikidataID", "Q88460663", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Myanmar", "Description" -> 
          "viral pandemic in Myanmar"]] -> {
         ExternalIdentifier["WikidataID", "Q93631914", 
          Association[
          "Label" -> "2020 Myanmar COVID-19 partial lockdown", "Description" -> 
           "COVID-19 countermeasure in Myanmar"]]}, 
       ExternalIdentifier["WikidataID", "Q88371105", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Eritrea", "Description" -> 
          "viral pandemic in Eritrea"]] -> {
         ExternalIdentifier["WikidataID", "Q93622513", 
          Association[
          "Label" -> "2020 Eritrea COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Eritrea"]]}, 
       ExternalIdentifier["WikidataID", "Q88263719", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Uganda", "Description" -> 
          "viral pandemic in Uganda"]] -> {
         ExternalIdentifier["WikidataID", "Q93670488", 
          Association[
          "Label" -> "2020 Uganda COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Uganda"]]}, 
       ExternalIdentifier["WikidataID", "Q88137634", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Papua New Guinea", 
          "Description" -> 
          "details of ongoing viral pandemic in Papua New Guinea"]] -> {
         ExternalIdentifier["WikidataID", "Q93667949", 
          Association[
          "Label" -> "2020 Papua New Guinea COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Papua New Guinea"]]}, 
       ExternalIdentifier["WikidataID", "Q88082809", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Niger", "Description" -> 
          "viral outbreak in Niger"]] -> {
         ExternalIdentifier["WikidataID", "Q93662563", 
          Association[
          "Label" -> "2020 Niger COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Niger"]]}, 
       ExternalIdentifier["WikidataID", "Q87976629", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Zambia", "Description" -> 
          "viral pandemic in Zambia"]] -> {
         ExternalIdentifier["WikidataID", "Q93671375", 
          Association[
          "Label" -> "2020 Zambia COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Zambia"]]}, 
       ExternalIdentifier["WikidataID", "Q87906931", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Faroe Islands"]] -> {
         ExternalIdentifier["WikidataID", "Q93622538", 
          Association[
          "Label" -> "2020 Faroe Islands COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Faroe Islands"]]}, 
       ExternalIdentifier["WikidataID", "Q87902950", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kyrgyzstan", "Description" -> 
          "viral pandemic in Kyrgyzstan"]] -> {
         ExternalIdentifier["WikidataID", "Q93623912", 
          Association[
          "Label" -> 
           "2020 Kyrgyzstan COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Kyrgyzstan"]]}, 
       ExternalIdentifier["WikidataID", "Q87899022", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Djibouti", "Description" -> 
          "viral pandemic in Djibouti"]] -> {
         ExternalIdentifier["WikidataID", "Q93622469", 
          Association[
          "Label" -> "2020 Djibouti COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Djibouti"]]}, 
       ExternalIdentifier["WikidataID", "Q87887813", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Montenegro", "Description" -> 
          "details of ongoing viral pandemic in Montenegro"]] -> {
         ExternalIdentifier["WikidataID", "Q93631904", 
          Association[
          "Label" -> "2020 Montenegro COVID-19 partial lockdown", 
           "Description" -> "COVID-19 countermeasure in Montenegro"]]}, 
       ExternalIdentifier["WikidataID", "Q87743173", 
         Association["Label" -> "2020 COVID-19 pandemic in Northern Cyprus"]] -> {
         ExternalIdentifier["WikidataID", "Q93667732", 
          Association[
          "Label" -> 
           "2020 Turkish Republic of Northern Cyprus COVID-19 closing of \
educational institutions", "Description" -> 
           "COVID-19 countermeasure in Turkish Republic of Northern \
Cyprus"]]}, ExternalIdentifier["WikidataID", "Q87729500", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Seychelles", "Description" -> 
          "viral pandemic in Seychelles"]] -> {
         ExternalIdentifier["WikidataID", "Q93669655", 
          Association[
          "Label" -> "2020 Seychelles COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Seychelles"]]}, 
       ExternalIdentifier["WikidataID", "Q87718451", 
         Association["Label" -> "2020 COVID-19 pandemic in Nigeria"]] -> {
         ExternalIdentifier["WikidataID", "Q93662565", 
          Association[
          "Label" -> "2020 Nigeria COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Nigeria"]]}, 
       ExternalIdentifier["WikidataID", "Q87715843", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Andorra", "Description" -> 
          "details of ongoing viral pandemic in Teil der COVID-19-Pandemie"]] -> {
         ExternalIdentifier["WikidataID", "Q93621687", 
          Association[
          "Label" -> "2020 Andorra COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Andorra"]]}, 
       ExternalIdentifier["WikidataID", "Q87715166", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bhutan", "Description" -> 
          "viral pandemic in Bhutan"]] -> {
         ExternalIdentifier["WikidataID", "Q93622033", 
          Association[
          "Label" -> "2020 Bhutan COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Bhutan"]]}, 
       ExternalIdentifier["WikidataID", "Q87714704", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Rwanda", "Description" -> 
          "viral pandemic in Rwanda"]] -> {
         ExternalIdentifier["WikidataID", "Q93668904", 
          Association[
          "Label" -> "2020 Rwanda COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in Rwanda"]]}, 
       ExternalIdentifier["WikidataID", "Q87709760", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Cura\[CCedilla]ao", 
          "Description" -> "viral outbreak in Cura\[CCedilla]ao"]] -> {
         ExternalIdentifier["WikidataID", "Q93622393", 
          Association[
          "Label" -> "2020 Cura\[CCedilla]ao COVID-19 flight ban", 
           "Description" -> "COVID-19 countermeasure in Cura\[CCedilla]ao"]]},
        ExternalIdentifier["WikidataID", "Q87706558", 
         Association[
         "Label" -> 
          "2020 COVID-19 pandemic in the Democratic Republic of the Congo", 
          "Description" -> 
          "viral pandemic in the Democratic Republic of the Congo"]] -> {
         ExternalIdentifier["WikidataID", "Q93622442", 
          Association[
          "Label" -> 
           "2020 Democratic Republic of the Congo COVID-19 social distancing",
            "Description" -> 
           "COVID-19 countermeasure in Democratic Republic of the Congo"]]}, 
       ExternalIdentifier["WikidataID", "Q87662895", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Maldives", "Description" -> 
          "viral pandemic in the Maldives"]] -> {
         ExternalIdentifier["WikidataID", "Q93623986", 
          Association[
          "Label" -> 
           "2020 Maldives COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Maldives"]]}, 
       ExternalIdentifier["WikidataID", "Q87659698", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Guyana", "Description" -> 
          "viral pandemic in Guyana"]] -> {
         ExternalIdentifier["WikidataID", "Q93623014", 
          Association[
          "Label" -> "2020 Guyana COVID-19 flight ban", "Description" -> 
           "COVID-19 countermeasure in Guyana"]]}, 
       ExternalIdentifier["WikidataID", "Q87657486", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Sudan", "Description" -> 
          "viral pandemic in Sudan"]] -> {
         ExternalIdentifier["WikidataID", "Q93670149", 
          Association[
          "Label" -> "2020 Sudan COVID-19 travel restrictions", "Description" -> 
           "COVID-19 countermeasure in Sudan"]]}, 
       ExternalIdentifier["WikidataID", "Q87651995", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kazakhstan", "Description" -> 
          "viral pandemic in Kazakhstan"]] -> {
         ExternalIdentifier["WikidataID", "Q93623624", 
          Association[
          "Label" -> 
           "2020 Kazakhstan COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Kazakhstan"]]}, 
       ExternalIdentifier["WikidataID", "Q87648634", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Armenia", "Description" -> 
          "details of ongoing viral pandemic in Armenia"]] -> {
         ExternalIdentifier["WikidataID", "Q93621738", 
          Association[
          "Label" -> 
           "2020 Armenia COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Armenia"]]}, 
       ExternalIdentifier["WikidataID", "Q87592982", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Moldova", "Description" -> 
          "details of ongoing viral pandemic in Moldova"]] -> {
         ExternalIdentifier["WikidataID", "Q93631280", 
          Association[
          "Label" -> 
           "2020 Moldova COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Moldova"]]}, 
       ExternalIdentifier["WikidataID", "Q87590993", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Cuba", "Description" -> 
          "viral pandemic in Cuba"]] -> {
         ExternalIdentifier["WikidataID", "Q93622391", 
          Association[
          "Label" -> "2020 Cuba COVID-19 travel ban", "Description" -> 
           "COVID-19 countermeasure in Cuba"]]}, 
       ExternalIdentifier["WikidataID", "Q87580938", 
         Association["Label" -> "2020 COVID-19 pandemic in Cyprus"]] -> {
         ExternalIdentifier["WikidataID", "Q93622395", 
          Association[
          "Label" -> "2020 Republic of Cyprus COVID-19 travel restrictions", 
           "Description" -> 
           "COVID-19 countermeasure in Republic of Cyprus"]]}, 
       ExternalIdentifier["WikidataID", "Q87450756", 
         Association["Label" -> "2020 COVID-19 pandemic in Albania"]] -> {
         ExternalIdentifier["WikidataID", "Q93621645", 
          Association[
          "Label" -> "2020 Albania COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Albania"]]}, 
       ExternalIdentifier["WikidataID", "Q87250913", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Georgia", "Description" -> 
          "details of ongoing viral pandemic in Georgia"]] -> {
         ExternalIdentifier["WikidataID", "Q93622934", 
          Association[
          "Label" -> "2020 Georgia COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Georgia"]]}, 
       ExternalIdentifier["WikidataID", "Q87250877", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Monaco", "Description" -> 
          "details of ongoing viral outbreak in Monaco"]] -> {
         ExternalIdentifier["WikidataID", "Q93631284", 
          Association[
          "Label" -> "2020 Monaco COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Monaco"]]}, 
       ExternalIdentifier["WikidataID", "Q87250860", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Luxembourg", "Description" -> 
          "viral outbreak in Luxembourg"]] -> {
         ExternalIdentifier["WikidataID", "Q93623956", 
          Association[
          "Label" -> "2020 Luxembourg COVID-19 travel restrictions", 
           "Description" -> "COVID-19 countermeasure in Luxembourg"]]}, 
       ExternalIdentifier["WikidataID", "Q87250819", 
         Association["Label" -> "2020 COVID-19 pandemic in Liechtenstein"]] -> {
         ExternalIdentifier["WikidataID", "Q93623931", 
          Association[
          "Label" -> "2020 Liechtenstein COVID-19 social distancing", 
           "Description" -> "COVID-19 countermeasure in Liechtenstein"]]}, 
       ExternalIdentifier["WikidataID", "Q87243915", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in South Africa", "Description" -> 
          "details of ongoing viral outbreak in South Africa"]] -> {
         ExternalIdentifier["WikidataID", "Q93669774", 
          Association[
          "Label" -> "2020 South Africa COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in South Africa"]]}, 
       ExternalIdentifier["WikidataID", "Q87222526", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Vatican City", "Description" -> 
          "details of ongoing viral outbreak in Vatican City"]] -> {
         ExternalIdentifier["WikidataID", "Q93671166", 
          Association[
          "Label" -> "2020 Vatican City COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in Vatican City"]]}, 
       ExternalIdentifier["WikidataID", "Q87202921", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Algeria", "Description" -> 
          "viral outbreak in Algeria"]] -> {
         ExternalIdentifier["WikidataID", "Q93621682", 
          Association[
          "Label" -> "2020 Algeria COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Algeria"]]}, 
       ExternalIdentifier["WikidataID", "Q87123561", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in San Marino", "Description" -> 
          "viral outbreak in San Marino"]] -> {
         ExternalIdentifier["WikidataID", "Q93669505", 
          Association[
          "Label" -> "2020 San Marino COVID-19 lockdown", "Description" -> 
           "COVID-19 countermeasure in San Marino"]]}, 
       ExternalIdentifier["WikidataID", "Q86948603", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Portugal", "Description" -> 
          "details of ongoing viral pandemic in Portugal"]] -> {
         ExternalIdentifier["WikidataID", "Q93668611", 
          Association[
          "Label" -> 
           "2020 Portugal COVID-19 declaration of public health emergency", 
           "Description" -> "COVID-19 countermeasure in Portugal"]]}, 
       ExternalIdentifier["WikidataID", "Q86886544", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Norway", "Description" -> 
          "details regarding the 2019\[Dash]20 coronavirus outbreak in \
Norway"]] -> {
         ExternalIdentifier["WikidataID", "Q93667745", 
          Association[
          "Label" -> "2020 Norway COVID-19 social distancing", "Description" -> 
           "COVID-19 countermeasure in Norway"]]}, 
       ExternalIdentifier["WikidataID", "Q86733728", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Iraq", "Description" -> 
          "details of ongoing viral outbreak in Iraq"]] -> {
         ExternalIdentifier["WikidataID", "Q93623427", 
          Association[
          "Label" -> "2020 Iraq COVID-19 closing of educational institutions",
            "Description" -> "COVID-19 countermeasure in Iraq"]]}, 
       ExternalIdentifier["WikidataID", "Q84167106", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the United Kingdom", 
          "Description" -> "viral outbreak in the United Kingdom"]] -> {
         ExternalIdentifier["WikidataID", "Q93671037", 
          Association[
          "Label" -> "2020 United Kingdom COVID-19 curfew", "Description" -> 
           "COVID-19 countermeasure in United Kingdom"]]}, 
       ExternalIdentifier["WikidataID", "Q84055544", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Philippines", 
          "Description" -> "pandemic in the Philippines"]] -> {
         ExternalIdentifier["WikidataID", "Q93668109", 
          Association[
          "Label" -> 
           "2020 Philippines COVID-19 declaration of public health emergency",
            "Description" -> "COVID-19 countermeasure in Philippines"]]}, 
       ExternalIdentifier["WikidataID", "Q83873577", 
         Association[
         "Label" -> "COVID-19 pandemic in the United States", "Description" -> 
          "ongoing coronavirus pandemic in the United States"]] -> {
         ExternalIdentifier["WikidataID", "Q87945071", 
          Association[
          "Label" -> 
           "U.S. state and local government response to the 2020 coronavirus \
pandemic"]]}, ExternalIdentifier["WikidataID", "Q83872291", 
         Association[
         "Label" -> "COVID-19 pandemic in Japan", "Description" -> 
          "viral outbreak in Japan"]] -> {
         ExternalIdentifier["WikidataID", "Q93623531", 
          Association[
          "Label" -> 
           "2020 Japan COVID-19 closing of educational institutions", 
           "Description" -> "COVID-19 countermeasure in Japan"]]}], 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 5, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 132], 
     "Meta" -> Association["ID" -> 227014992615055, MaxItems -> 5], 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 5, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 132], 
     "Path" -> {}, "BaseIndices" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 132, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q84081576\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 COVID-19 pandemic in Sweden\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"viral outbreak in Sweden\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 COVID-19 pandemic in Sweden\"", 
                   "http://www.wikidata.org/entity/Q84081576"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q84081576", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Sweden", 
                    "Description" -> "viral outbreak in Sweden"]]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 12], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 12], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q84081576", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Sweden", 
                    "Description" -> "viral outbreak in Sweden"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q84081576", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Sweden", 
                    "Description" -> "viral outbreak in Sweden"]]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q87589148\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 COVID-19 pandemic in Jordan\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"viral pandemic in Jordan\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 COVID-19 pandemic in Jordan\"", 
                   "http://www.wikidata.org/entity/Q87589148"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87589148", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Jordan", 
                    "Description" -> "viral pandemic in Jordan"]]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 8], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 8], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q87589148", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Jordan", 
                    "Description" -> "viral pandemic in Jordan"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87589148", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Jordan", 
                    "Description" -> "viral pandemic in Jordan"]]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q87250803\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"COVID-19 pandemic in New Zealand\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"ongoing coronavirus pandemic in New Zealand\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"COVID-19 pandemic in New Zealand\"", 
                   "http://www.wikidata.org/entity/Q87250803"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87250803", 
                   Association[
                   "Label" -> "COVID-19 pandemic in New Zealand", 
                    "Description" -> 
                    "ongoing coronavirus pandemic in New Zealand"]]]}, "Item",
                 False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 7], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 7], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q87250803", 
                    Association[
                    "Label" -> "COVID-19 pandemic in New Zealand", 
                    "Description" -> 
                    "ongoing coronavirus pandemic in New Zealand"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87250803", 
                   Association[
                   "Label" -> "COVID-19 pandemic in New Zealand", 
                    "Description" -> 
                    "ongoing coronavirus pandemic in New Zealand"]]]}, "Item",
                 False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q87652010\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 COVID-19 pandemic in Venezuela\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"viral outbreak in Venezuela\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 COVID-19 pandemic in Venezuela\"", 
                   "http://www.wikidata.org/entity/Q87652010"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87652010", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Venezuela", 
                    "Description" -> "viral outbreak in Venezuela"]]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 6], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 6], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q87652010", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Venezuela", 
                    "Description" -> "viral outbreak in Venezuela"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87652010", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Venezuela", 
                    "Description" -> "viral outbreak in Venezuela"]]]}, 
                "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q87589123\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 COVID-19 pandemic in Paraguay\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"viral pandemic in Paraguay\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 COVID-19 pandemic in Paraguay\"", 
                   "http://www.wikidata.org/entity/Q87589123"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87589123", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Paraguay", 
                    "Description" -> "viral pandemic in Paraguay"]]]}, "Item",
                 False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 6], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 6], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q87589123", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Paraguay", 
                    "Description" -> "viral pandemic in Paraguay"]]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q87589123", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Paraguay", 
                    "Description" -> "viral pandemic in Paraguay"]]]}, "Item",
                 False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[True, 132, 1], {1, 132 - -5 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[False, 132, 1], {1, 132 - -5 + 1}], Appearance -> 
                    None], " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    132, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    132, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[False, 132, 1], {1, 132 - 5 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[True, 132, 1], {1, 132 - 5 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{383., {105.634033203125, 111.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{383., {105.634033203125, 111.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.798547284610907*^9, 3.7985473118447723`*^9}, {
   3.798547345877863*^9, 3.798547355780335*^9}, {3.798547422917626*^9, 
   3.79854744239688*^9}, {3.798547753625145*^9, 3.798547764383806*^9}, {
   3.798547892052534*^9, 3.798547928585458*^9}, {3.7985479856282883`*^9, 
   3.798548084894766*^9}, 3.7985481540955257`*^9, 3.7985498139673433`*^9, 
   3.798559586457889*^9, 3.7985614814742804`*^9, 3.798561633299738*^9, 
   3.798737068618352*^9, 3.798737279274097*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"50ceaa47-f7e9-471a-9fec-1ef96f369fb9"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       ExternalIdentifier["WikidataID", "Q93670215", 
        Association[
        "Label" -> "2020 Sweden COVID-19 social distancing", "Description" -> 
         "COVID-19 countermeasure in Sweden"]], 
       ExternalIdentifier["WikidataID", "Q93670218", 
        Association[
        "Label" -> "2020 Sweden COVID-19 travel restrictions", "Description" -> 
         "COVID-19 countermeasure in Sweden"]], 
       ExternalIdentifier["WikidataID", "Q87722315", 
        Association[
        "Label" -> "Regulation prohibiting public meetings and public events",
          "Description" -> "Swedish regulation prohibiting large meetings"]], 
       ExternalIdentifier["WikidataID", "Q88286009", 
        Association[
        "Label" -> 
         "Law regarding temporary closure of school activities in the event \
of extraordinary events in peacetime", "Description" -> 
         "Swedish law regarding closure of schools"]], 
       ExternalIdentifier["WikidataID", "Q88807745", 
        Association[
        "Label" -> "special rules for restaurants and pubs", "Description" -> 
         "measure in Sweden against covid-19 that for example only allows \
seated guests"]], 
       ExternalIdentifier["WikidataID", "Q88810165", 
        Association[
        "Label" -> "prohibition of non-essential visits to Sweden", 
         "Description" -> "temporary measure against the covid-19 pandemia"]], 
       ExternalIdentifier["WikidataID", "Q88812834", 
        Association[
        "Label" -> "travel advice against travelling to any country", 
         "Description" -> 
         "temporary measure by Sweden against the covid-19 pandemia"]], 
       ExternalIdentifier["WikidataID", "Q89211754", 
        Association[
        "Label" -> "limited purchase of pharmaceuticals", "Description" -> 
         "countermeasure by the Swedish government against the covid-19 \
pandemia"]], 
       ExternalIdentifier["WikidataID", "Q89212931", 
        Association[
        "Label" -> "general prohibition to visit special housing for elderly",
          "Description" -> 
         "countermeasure by the Swedish government against the covid-19 \
pandemia"]], 
       ExternalIdentifier["WikidataID", "Q89285002", 
        Association[
        "Label" -> 
         "classification of the coronavirus as an illness that is dangerous \
to society", "Description" -> "decision by the Swedish Government"]], 
       ExternalIdentifier["WikidataID", "Q89285724", 
        Association[
        "Label" -> "increased testing for Covid 19", "Description" -> 
         "task given to the Public Health Agency of Sweden by the Swedish \
Government"]], 
       ExternalIdentifier["WikidataID", "Q89371649", 
        Association[
        "Label" -> 
         "recommendation to implement remote learning in upper secondary \
schools and above", "Description" -> 
         "countermeasure by the Public Health Agency in Sweden against the \
covid-19 pandemia"]]}, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 12, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Vector[TypeSystem`AnyType, 12], "Meta" -> 
     Association["ID" -> 227019287582351], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 12, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Vector[TypeSystem`AnyType, 12], "Path" -> {}, 
     "BaseIndices" -> {}, "DisplayedRowCount" -> 12, "DisplayedColumnCount" -> 
     1, "DataRowCount" -> 12, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q93670215\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 Sweden COVID-19 social distancing\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"COVID-19 countermeasure in Sweden\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 Sweden COVID-19 social distancing\"", 
                   "http://www.wikidata.org/entity/Q93670215"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q93670218\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 Sweden COVID-19 travel restrictions\""}], ",", 
                    RowBox[{"\"Description\"", "\[Rule]", 
                    "\"COVID-19 countermeasure in Sweden\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 Sweden COVID-19 travel restrictions\"", 
                   "http://www.wikidata.org/entity/Q93670218"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q87722315\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"Regulation prohibiting public meetings and public \
events\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"Swedish regulation prohibiting large meetings\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"Regulation prohibiting public meetings and public \
events\"", "http://www.wikidata.org/entity/Q87722315"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q88286009\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"Law regarding temporary closure of school activities \
in the event of extraordinary events in peacetime\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"Swedish law regarding closure of schools\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"Law regarding temporary closure of school activities in \
the event of extraordinary events in peacetime\"", 
                   "http://www.wikidata.org/entity/Q88286009"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q88807745\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"special rules for restaurants and pubs\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"measure in Sweden against covid-19 that for example \
only allows seated guests\""}]}], "\[RightAssociation]"}]}], "]"}], 
                   "\"Wikidata\"", 
                   "\"special rules for restaurants and pubs\"", 
                   "http://www.wikidata.org/entity/Q88807745"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q88810165\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"prohibition of non-essential visits to Sweden\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"temporary measure against the covid-19 pandemia\""}]}],
                     "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"prohibition of non-essential visits to Sweden\"", 
                   "http://www.wikidata.org/entity/Q88810165"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q88812834\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"travel advice against travelling to any country\""}], 
                    ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"temporary measure by Sweden against the covid-19 \
pandemia\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"travel advice against travelling to any country\"", 
                   "http://www.wikidata.org/entity/Q88812834"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q89211754\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"limited purchase of pharmaceuticals\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"countermeasure by the Swedish government against the \
covid-19 pandemia\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"limited purchase of pharmaceuticals\"", 
                   "http://www.wikidata.org/entity/Q89211754"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q89212931\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"general prohibition to visit special housing for \
elderly\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"countermeasure by the Swedish government against the \
covid-19 pandemia\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"general prohibition to visit special housing for \
elderly\"", "http://www.wikidata.org/entity/Q89212931"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q89285002\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    
                    "\"classification of the coronavirus as an illness that \
is dangerous to society\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"decision by the Swedish Government\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"classification of the coronavirus as an illness that is \
dangerous to society\"", "http://www.wikidata.org/entity/Q89285002"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q89285724\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"increased testing for Covid 19\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"task given to the Public Health Agency of Sweden by \
the Swedish Government\""}]}], "\[RightAssociation]"}]}], "]"}], 
                   "\"Wikidata\"", "\"increased testing for Covid 19\"", 
                   "http://www.wikidata.org/entity/Q89285724"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q89371649\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"recommendation to implement remote learning in upper \
secondary schools and above\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"countermeasure by the Public Health Agency in Sweden \
against the covid-19 pandemia\""}]}], "\[RightAssociation]"}]}], "]"}], 
                   "\"Wikidata\"", 
                   "\"recommendation to implement remote learning in upper \
secondary schools and above\"", "http://www.wikidata.org/entity/Q89371649"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{621., {207.634033203125, 213.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{621., {207.634033203125, 213.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.798547284610907*^9, 3.7985473118447723`*^9}, {
   3.798547345877863*^9, 3.798547355780335*^9}, {3.798547422917626*^9, 
   3.79854744239688*^9}, {3.798547753625145*^9, 3.798547764383806*^9}, {
   3.798547892052534*^9, 3.798547928585458*^9}, {3.7985479856282883`*^9, 
   3.798548084894766*^9}, 3.7985481540955257`*^9, 3.7985498139673433`*^9, 
   3.798559586457889*^9, 3.7985614814742804`*^9, 3.798561633299738*^9, 
   3.798737068618352*^9, 3.798737279546442*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"2aa66354-8ad9-4685-a5b9-11ecac372d7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "response", " ", "type", " ", "and", " ", "start", " ", "date", " ", 
    "data", " ", "for", " ", "all", " ", "countries"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"covidPandemicResponsesData", " ", "=", " ", 
     RowBox[{"MapAt", "[", 
      RowBox[{"Flatten", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"WikidataData", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{
             TemplateBox[{
               RowBox[{"ExternalIdentifier", "[", 
                 RowBox[{"\"WikidataID\"", ",", "\"P31\"", ",", 
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"instance of\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"that class of which this subject is a particular \
example and member\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
               "\"instance of\"", "http://www.wikidata.org/entity/P31"},
              "ExternalIdentifierURL"], ",", " ", 
             TemplateBox[{
               RowBox[{"ExternalIdentifier", "[", 
                 RowBox[{"\"WikidataID\"", ",", "\"P580\"", ",", 
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"Label\"", "\[Rule]", "\"start time\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"time an item begins to exist or a statement starts \
being valid\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
               "\"start time\"", "http://www.wikidata.org/entity/P580"},
              "ExternalIdentifierURL"]}], "}"}]}], "]"}], "&"}], "/@", 
        "covidPandemicResponses"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{";;", ",", " ", ";;"}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"view", " ", "data"}], " ", "*)"}], "\n", 
   RowBox[{"covidPandemicResponsesData", " ", "//", " ", 
    RowBox[{
     RowBox[{"Dataset", "[", 
      RowBox[{"#", ",", " ", 
       RowBox[{"MaxItems", "\[Rule]", "5"}]}], "]"}], "&"}]}]}]}]], "Code",
 CellChangeTimes->{{3.79854844678298*^9, 3.798548524360957*^9}, {
   3.798548989861704*^9, 3.798549095217119*^9}, {3.798549144930046*^9, 
   3.7985491465971107`*^9}, {3.7985491886586*^9, 3.798549189131255*^9}, {
   3.798549238590137*^9, 3.798549310421289*^9}, {3.798549523174906*^9, 
   3.798549528643977*^9}, 3.798549758196412*^9},
 CellLabel->"In[75]:=",ExpressionUUID->"fae9b2f3-b506-4326-8c47-21b82aef6300"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> Association[ExternalIdentifier["WikidataID", "Q83872291", 
         Association[
         "Label" -> "COVID-19 pandemic in Japan", "Description" -> 
          "viral outbreak in Japan"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q83873057", 
         Association[
         "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
          "viral outbreak in Vietnam"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 1}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 1}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 2, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 2, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q83873387", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Singapore", "Description" -> 
          "details of ongoing viral outbreak in Singapore"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 1, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q83873548", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Australia", "Description" -> 
          "viral outbreak in Australia"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q83873573", 
         Association[
         "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
          "Description" -> "viral outbreak in Nepal"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 2}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q83873577", 
         Association[
         "Label" -> "COVID-19 pandemic in the United States", "Description" -> 
          "ongoing coronavirus pandemic in the United States"]] -> {{}}, 
       ExternalIdentifier["WikidataID", "Q83873593", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in France", "Description" -> 
          "viral outbreak in France"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q83888864", 
         Association[
         "Label" -> "2019\[Dash]20 coronavirus outbreak in Cambodia", 
          "Description" -> "viral outbreak in Cambodia"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84030045", 
         Association[
         "Label" -> 
          "2019\[Dash]20 coronavirus outbreak in the United Arab Emirates", 
          "Description" -> 
          "details of ongoing viral outbreak in the United Arab Emirates"]] -> \
{{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 26}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88307738", 
           Association[
           "Label" -> "stay-at-home order", "Description" -> 
            "type of quarantine"]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84055415", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Finland", "Description" -> 
          "viral outbreak in Finland"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 28}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q1864008", 
           Association[
           "Label" -> "legal act", "Description" -> 
            "juridical fact in which the subject who made it happen acted \
under free will"]], 
          ExternalIdentifier["WikidataID", "Q5370734", 
           Association[
           "Label" -> "emergency procedure", "Description" -> 
            "plan of action to deal with an emergency"]], 
          DateObject[{2020, 4, 4}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84055514", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in India", "Description" -> 
          "details of ongoing viral pandemic in India in 2020"]] -> {{
          ExternalIdentifier["WikidataID", "Q5370734", 
           Association[
           "Label" -> "emergency procedure", "Description" -> 
            "plan of action to deal with an emergency"]]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q182899", 
           Association[
           "Label" -> "quarantine", "Description" -> 
            "epidemiological intervention of restriction on the movement of \
people and goods, which is intended to prevent the spread of infectious \
disease or pests"]], 
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84055544", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Philippines", 
          "Description" -> "pandemic in the Philippines"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 7}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84081307", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Taiwan", "Description" -> 
          "viral outbreak in Taiwan"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 2, 2}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84081576", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Sweden", "Description" -> 
          "viral outbreak in Sweden"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q428148", 
           Association[
           "Label" -> "regulation", "Description" -> 
            "general term for rules or controls, including delegated \
legislation and self-regulation"]], 
          ExternalIdentifier["WikidataID", "Q2795484", 
           Association[
           "Label" -> "implementing regulation", "Description" -> 
            "regulation on the details of the implementation of a law"]]}, {
          ExternalIdentifier["WikidataID", "Q820655", 
           Association[
           "Label" -> "legislative act", "Description" -> 
            "formal written document that creates law, including acts, \
executive orders, and by-laws"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88324058", 
           Association[
           "Label" -> "avoiding crowding", "Description" -> 
            "action to reduce virus transmission"]]}, {
          ExternalIdentifier["WikidataID", "Q88707306", 
           Association[
           "Label" -> "border closure", "Description" -> 
            "action to reduce virus transmission in the community"]], 
          ExternalIdentifier["WikidataID", "Q89211965", 
           Association[
           "Label" -> "decision by the Swedish Government", "Description" -> 
            "formal decisions in government meetings"]]}, {
          ExternalIdentifier["WikidataID", "Q88705465", 
           Association[
           "Label" -> "travel advice as non-pharmaceutical countermeasure", 
            "Description" -> 
            "action to reduce virus transmission in the community"]]}, {
          ExternalIdentifier["WikidataID", "Q207184", 
           Association[
           "Label" -> "press release", "Description" -> 
            "instrument of public relations"]], 
          ExternalIdentifier["WikidataID", "Q1032176", 
           Association[
           "Label" -> "countermeasure", "Description" -> 
            "specific action taken or system used to offset another action"]], 
          ExternalIdentifier["WikidataID", "Q89211965", 
           Association[
           "Label" -> "decision by the Swedish Government", "Description" -> 
            "formal decisions in government meetings"]], 
          DateObject[{2020, 4, 1}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          ExternalIdentifier["WikidataID", "Q89211965", 
           Association[
           "Label" -> "decision by the Swedish Government", "Description" -> 
            "formal decisions in government meetings"]], 
          DateObject[{2020, 4, 1}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89211965", 
           Association[
           "Label" -> "decision by the Swedish Government", "Description" -> 
            "formal decisions in government meetings"]]}, {
          ExternalIdentifier["WikidataID", "Q89211965", 
           Association[
           "Label" -> "decision by the Swedish Government", "Description" -> 
            "formal decisions in government meetings"]], 
          DateObject[{2020, 3, 31}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]]}}, 
       ExternalIdentifier["WikidataID", "Q84098939", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Russia", "Description" -> 
          "details of ongoing viral pandemic in Russia in 2020"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 1, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 30}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84104992", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Italy", "Description" -> 
          "viral outbreak in Italy"]] -> {{
          ExternalIdentifier["WikidataID", "Q182899", 
           Association[
           "Label" -> "quarantine", "Description" -> 
            "epidemiological intervention of restriction on the movement of \
people and goods, which is intended to prevent the spread of infectious \
disease or pests"]], 
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 8}, "Day", "Gregorian", 0.], 
          DateObject[{2020, 3, 9}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 1, 31}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 4}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87186117", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Saudi Arabia", "Description" -> 
          "details of ongoing viral pandemic in Saudi Arabia"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 8}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87186365", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Republic of Ireland", 
          "Description" -> 
          "details of ongoing viral outbreak in the Republic of Ireland"]] -> \
{{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 28}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 28}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87191204", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Chile", "Description" -> 
          "viral outbreak in Chile"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87193778", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Serbia", "Description" -> 
          "details of ongoing viral outbreak in Serbia"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87199320", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the State of Palestine", 
          "Description" -> 
          "details of ongoing viral pandemic in the State of Palestine"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 5}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 5}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 5}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87202921", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Algeria", "Description" -> 
          "viral outbreak in Algeria"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87204911", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Estonia", "Description" -> 
          "details of ongoing viral outbreak in Estonia"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87222526", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Vatican City", "Description" -> 
          "details of ongoing viral outbreak in Vatican City"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87235137", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Argentina", "Description" -> 
          "details of ongoing viral outbreak in Argentina"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87235177", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ukraine", "Description" -> 
          "details of ongoing viral outbreak in Ukraine"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 2, 4}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87243915", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in South Africa", "Description" -> 
          "details of ongoing viral outbreak in South Africa"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 26}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87245450", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Lebanon", "Description" -> 
          "viral outbreak in Lebanon"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 26}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250691", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kuwait", "Description" -> 
          "details of ongoing viral pandemic in Kuwait"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250695", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Poland", "Description" -> 
          "spread of SARS-CoV-2 infections in Poland in during the 2020 \
pandemic"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250713", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ecuador", "Description" -> 
          "Pandemia viral en Ecuador"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250732", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Croatia", "Description" -> 
          "details pf ongoing viral outbreak in Croatia"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250752", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Romania", "Description" -> 
          "details of ongoing viral pandemic im Romania"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250770", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bosnia and Herzegovina", 
          "Description" -> 
          "details of ongoing viral outbreak in Bosnia and Herzegovina"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250803", 
         Association[
         "Label" -> "COVID-19 pandemic in New Zealand", "Description" -> 
          "ongoing coronavirus pandemic in New Zealand"]] -> {{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250838", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Lithuania", "Description" -> 
          "details of ongoing viral outbreak in Lithuania"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 2, 26}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250860", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Luxembourg", "Description" -> 
          "viral outbreak in Luxembourg"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250877", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Monaco", "Description" -> 
          "details of ongoing viral outbreak in Monaco"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250897", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in North Macedonia", 
          "Description" -> 
          "details of ongoing viral outbreak in North Macedonia"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250913", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Georgia", "Description" -> 
          "details of ongoing viral pandemic in Georgia"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87454162", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Oman", "Description" -> 
          "viral pandemic in Oman"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 29}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87473205", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Turkey", "Description" -> 
          "details of ongoing viral outbreak in Turkey"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 2, 29}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 2, 3}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87480220", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bolivia", "Description" -> 
          "viral pandemic in Bolivia"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87483673", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Colombia", "Description" -> 
          "viral pandemic in Colombia"]] -> {{
          ExternalIdentifier["WikidataID", "Q182899", 
           Association[
           "Label" -> "quarantine", "Description" -> 
            "epidemiological intervention of restriction on the movement of \
people and goods, which is intended to prevent the spread of infectious \
disease or pests"]], 
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          ExternalIdentifier["WikidataID", "Q88307738", 
           Association[
           "Label" -> "stay-at-home order", "Description" -> 
            "type of quarantine"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87563855", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Dominican Republic", 
          "Description" -> "viral pandemic in the Dominican Republic"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87587763", 
         Association[
         "Label" -> "COVID-19 pandemic in Peru", "Description" -> 
          "ongoing viral pandemic"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87587760", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Malta", "Description" -> 
          "details of ongoing viral pandemic in Malta"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87589123", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Paraguay", "Description" -> 
          "viral pandemic in Paraguay"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87589148", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Jordan", "Description" -> 
          "viral pandemic in Jordan"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87590993", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Cuba", "Description" -> 
          "viral pandemic in Cuba"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87592982", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Moldova", "Description" -> 
          "details of ongoing viral pandemic in Moldova"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87610822", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Jamaica", "Description" -> 
          "viral pandemic in Jamaica"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84166704", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Spain", "Description" -> 
          "viral outbreak in Spain"]] -> {{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84167106", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the United Kingdom", 
          "Description" -> "viral outbreak in the United Kingdom"]] -> {{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q84446340", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Belgium", "Description" -> 
          "viral outbreak in Belgium"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86597685", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Denmark", "Description" -> 
          "viral outbreak in Denmark"]] -> {{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86597695", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Brazil", "Description" -> 
          "details of ongoing viral pandemic in Brazil"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 2, 3}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86675924", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in North Korea", "Description" -> 
          "details of ongoing viral pandemic in North Korea"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 1, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 1, 30}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 2, 20}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86717788", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Switzerland", "Description" -> 
          "overview about the coronavirus outbreak in Switzerland in 2020"]] -> \
{{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 2, 28}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86733728", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Iraq", "Description" -> 
          "details of ongoing viral outbreak in Iraq"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86756826", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Netherlands", 
          "Description" -> "viral outbreak in the Netherlands"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86847911", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Austria", "Description" -> 
          "overview about the coronavirus outbreak in Austria in 2020"]] -> {{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87121993", 
         Association["Label" -> "2020 COVID-19 pandemic in Iceland"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87250819", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Liechtenstein"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87450756", 
         Association["Label" -> "2020 COVID-19 pandemic in Albania"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87486535", 
         Association["Label" -> "2020 COVID-19 pandemic in Bulgaria"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87580938", 
         Association["Label" -> "2020 COVID-19 pandemic in Cyprus"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87655119", 
         Association["Label" -> "COVID-19 pandemic in Kosovo"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87708719", 
         Association["Label" -> "2020 COVID-19 pandemic in Aruba"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87718451", 
         Association["Label" -> "2020 COVID-19 pandemic in Nigeria"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87743173", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Northern Cyprus"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87906931", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Faroe Islands"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88082693", 
         Association["Label" -> "2020 COVID-19 pandemic in Haiti"]] -> {{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88082639", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Cape Verde", "Description" -> 
          "viral pandemic"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 26}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88082809", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Niger", "Description" -> 
          "viral outbreak in Niger"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88137634", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Papua New Guinea", 
          "Description" -> 
          "details of ongoing viral pandemic in Papua New Guinea"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 1, 30}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88164033", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Zimbabwe", "Description" -> 
          "viral pandemic in Zimbabwe"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88263719", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Uganda", "Description" -> 
          "viral pandemic in Uganda"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88371105", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Eritrea", "Description" -> 
          "viral pandemic in Eritrea"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88460663", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Myanmar", "Description" -> 
          "viral pandemic in Myanmar"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88556836", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Mali", "Description" -> 
          "viral pandemic in Mali"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q89277064", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Nauru", "Description" -> 
          "viral pandemic in Nauru"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q89277147", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Samoa", "Description" -> 
          "viral pandemic in Samoa"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 1, 28}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 26}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87648634", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Armenia", "Description" -> 
          "details of ongoing viral pandemic in Armenia"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87651995", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kazakhstan", "Description" -> 
          "viral pandemic in Kazakhstan"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87652010", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Venezuela", "Description" -> 
          "viral outbreak in Venezuela"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87657486", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Sudan", "Description" -> 
          "viral pandemic in Sudan"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87659698", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Guyana", "Description" -> 
          "viral pandemic in Guyana"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87660365", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Uruguay", "Description" -> 
          "viral pandemic in Uruguay"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87662819", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Togo", "Description" -> 
          "viral pandemic in Togo"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87662895", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Maldives", "Description" -> 
          "viral pandemic in the Maldives"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87664046", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Suriname", "Description" -> 
          "viral pandemic in Suriname"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87665038", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ethiopia", "Description" -> 
          "details of ongoing viral pandemic in Ethiopia"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87666247", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ghana", "Description" -> 
          "viral pandemic in Ghana"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87694131", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Trinidad and Tobago", 
          "Description" -> "viral pandemic in Trinidad and Tobago"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87745903", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Senegal", "Description" -> 
          "COVID-19 outbreak in Senegal"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87755488", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Bahamas", "Description" -> 
          "viral pandemic in the Bahamas"]] -> {{
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87770645", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Somalia", "Description" -> 
          "viral pandemic in Somalia"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87814953", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Syria", "Description" -> 
          "viral pandemic in Syria"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 27}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87887813", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Montenegro", "Description" -> 
          "details of ongoing viral pandemic in Montenegro"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87899016", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Gambia", "Description" -> 
          "viral pandemic in the Gambia"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87899022", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Djibouti", "Description" -> 
          "viral pandemic in Djibouti"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87902950", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kyrgyzstan", "Description" -> 
          "viral pandemic in Kyrgyzstan"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87975745", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Fiji", "Description" -> 
          "details of ongoing viral pandemic in Fiji"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 30}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87976629", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Zambia", "Description" -> 
          "viral pandemic in Zambia"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87979033", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Mauritius", "Description" -> 
          "viral pandemic in Mauritius"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q88082534", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Angola", "Description" -> 
          "viral pandemic in Angola"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86886544", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Norway", "Description" -> 
          "details regarding the 2019\[Dash]20 coronavirus outbreak in \
Norway"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86913546", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Indonesia", "Description" -> 
          "details of an ongoing pandemic in Indonesia"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 8}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86919406", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in the Czech Republic", 
          "Description" -> 
          "details of ongoing viral pandemic in the Czech Republic"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 3}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 12}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q86948603", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Portugal", "Description" -> 
          "details of ongoing viral pandemic in Portugal"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87058723", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Morocco", "Description" -> 
          "viral pandemic in Morocco"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 15}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87066621", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Latvia", "Description" -> 
          "details of ongoing viral outbreak in Latvia"]] -> {{
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 17}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87068864", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Greece", "Description" -> 
          "details of ongoing viral outbreak in Greece"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 10}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87070975", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Israel", "Description" -> 
          "viral outbreak in Israel"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 2, 26}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88307738", 
           Association[
           "Label" -> "stay-at-home order", "Description" -> 
            "type of quarantine"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 25}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87070999", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bahrain", "Description" -> 
          "viral pandemic in Bahrain"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 2, 25}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 26}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 26}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87116829", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Egypt", "Description" -> 
          "details of ongoing viral pandemic in Egypt"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 21}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 19}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87119811", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Hungary", "Description" -> 
          "viral outbreak in Hungary"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 6}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 11}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87123561", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in San Marino", "Description" -> 
          "viral outbreak in San Marino"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87704267", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Ivory Coast", "Description" -> 
          "viral pandemic in Ivory Coast"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 16}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87705884", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Kenya", "Description" -> 
          "viral pandemic in Kenya"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 27}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87706558", 
         Association[
         "Label" -> 
          "2020 COVID-19 pandemic in the Democratic Republic of the Congo", 
          "Description" -> 
          "viral pandemic in the Democratic Republic of the Congo"]] -> {{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87707727", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Saint Lucia", "Description" -> 
          "viral pandemic in Saint Lucia"]] -> {{
          ExternalIdentifier["WikidataID", "Q89681240", 
           Association["Label" -> "closing of non-essential businesses"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q7257745", 
           Association[
           "Label" -> "declaration of public health emergency", "Description" -> 
            "The declaration of a public health emergency in response to a \
(public) health crisis."]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87708832", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Mongolia", "Description" -> 
          "details of ongoing viral pandemic in Mongolia"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 1, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 1, 27}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87709760", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Cura\[CCedilla]ao", 
          "Description" -> "viral outbreak in Cura\[CCedilla]ao"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87714704", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Rwanda", "Description" -> 
          "viral pandemic in Rwanda"]] -> {{
          ExternalIdentifier["WikidataID", "Q223625", 
           Association[
           "Label" -> "curfew", "Description" -> 
            "political or police ban on entering public areas such as streets \
or squares"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87715166", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Bhutan", "Description" -> 
          "viral pandemic in Bhutan"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 22}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87715843", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Andorra", "Description" -> 
          "details of ongoing viral pandemic in Teil der COVID-19-Pandemie"]] -> \
{{
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87722485", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Azerbaijan", "Description" -> 
          "viral pandemic in Azerbaijan"]] -> {{
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 4}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 2}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 14}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87729500", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Seychelles", "Description" -> 
          "viral pandemic in Seychelles"]] -> {{
          ExternalIdentifier["WikidataID", "Q88761692", 
           Association[
           "Label" -> "flight ban", "Description" -> 
            "Restriction of air travel, e.g. closure of airports"]], 
          DateObject[{2020, 3, 9}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87729501", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Namibia", "Description" -> 
          "viral pandemic in Namibia"]] -> {{
          ExternalIdentifier["WikidataID", "Q6665312", 
           Association[
           "Label" -> "lockdown", "Description" -> 
            "emergency protocol that prevents people or information from \
leaving an area"]], 
          DateObject[{2020, 3, 27}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q87745167", 
           Association[
           "Label" -> "travel restriction", "Description" -> "policy"]], 
          DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}}, 
       ExternalIdentifier["WikidataID", "Q87733671", 
         Association[
         "Label" -> "2020 COVID-19 pandemic in Qatar", "Description" -> 
          "viral pandemic in Qatar"]] -> {{
          ExternalIdentifier["WikidataID", "Q88323877", 
           Association[
           "Label" -> "closing of educational institutions", "Description" -> 
            "action to reduce virus transmission"]], 
          DateObject[{2020, 3, 9}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q88761394", 
           Association[
           "Label" -> "travel ban", "Description" -> 
            "restriction of all means of travel"]], 
          DateObject[{2020, 3, 9}, "Day", "Gregorian", 0.]}, {
          ExternalIdentifier["WikidataID", "Q30314010", 
           Association[
           "Label" -> "social distancing", "Description" -> 
            "reduction of human social interaction in an effort to prevent \
the spread of infectious disease"]], 
          DateObject[{2020, 3, 23}, "Day", "Gregorian", 0.]}}], 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`UnknownShape[False]], 3, 
          DirectedInfinity[1], {All}]]], 5, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[
        TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
        TypeSystem`AnyLength], 132], "Meta" -> 
     Association["ID" -> 227023582549695, MaxItems -> 5], "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`UnknownShape[False]], 3, 
          DirectedInfinity[1], {All}]]], 5, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Vector[
        TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
        TypeSystem`AnyLength], 132], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     132, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q83872291\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"COVID-19 pandemic in Japan\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"viral outbreak in Japan\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"COVID-19 pandemic in Japan\"", 
                   "http://www.wikidata.org/entity/Q83872291"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83872291", 
                   Association[
                   "Label" -> "COVID-19 pandemic in Japan", "Description" -> 
                    "viral outbreak in Japan"]]]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q88323877", 
                    Association[
                    "Label" -> "closing of educational institutions", 
                    "Description" -> "action to reduce virus transmission"]], 
                    DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q88323877", 
                    Association[
                    "Label" -> "closing of educational institutions", 
                    "Description" -> "action to reduce virus transmission"]], 
                    DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83872291", 
                    Association[
                    "Label" -> "COVID-19 pandemic in Japan", "Description" -> 
                    "viral outbreak in Japan"]]], 1}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83872291", 
                   Association[
                   "Label" -> "COVID-19 pandemic in Japan", "Description" -> 
                    "viral outbreak in Japan"]]], 1}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q83873057\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"COVID-19 pandemic in Vietnam\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"viral outbreak in Vietnam\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"COVID-19 pandemic in Vietnam\"", 
                   "http://www.wikidata.org/entity/Q83873057"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873057", 
                   Association[
                   "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]]}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q7257745", 
                    Association[
                    "Label" -> "declaration of public health emergency", 
                    "Description" -> 
                    "The declaration of a public health emergency in response \
to a (public) health crisis."]], 
                    DateObject[{2020, 3, 1}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q7257745", 
                    Association[
                    "Label" -> "declaration of public health emergency", 
                    "Description" -> 
                    "The declaration of a public health emergency in response \
to a (public) health crisis."]], 
                    DateObject[{2020, 3, 1}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873057", 
                    Association[
                    "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]], 1}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873057", 
                   Association[
                   "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]], 1}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q87745167", 
                    Association[
                    "Label" -> "travel restriction", "Description" -> 
                    "policy"]], 
                    DateObject[{2020, 3, 1}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q87745167", 
                    Association[
                    "Label" -> "travel restriction", "Description" -> 
                    "policy"]], 
                    DateObject[{2020, 3, 1}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873057", 
                    Association[
                    "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]], 2}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873057", 
                   Association[
                   "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]], 2}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q6665312", 
                    Association[
                    "Label" -> "lockdown", "Description" -> 
                    "emergency protocol that prevents people or information \
from leaving an area"]], 
                    DateObject[{2020, 2, 13}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q6665312", 
                    Association[
                    "Label" -> "lockdown", "Description" -> 
                    "emergency protocol that prevents people or information \
from leaving an area"]], 
                    DateObject[{2020, 2, 13}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873057", 
                    Association[
                    "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]], 3}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873057", 
                   Association[
                   "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]], 3}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["4 total \:203a ", ""], 
                  Style[
                   Superscript["4 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873057", 
                    Association[
                    "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873057", 
                   Association[
                   "Label" -> "COVID-19 pandemic in Vietnam", "Description" -> 
                    "viral outbreak in Vietnam"]]]}, "Item", False], "Mouse"],
               ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q83873387\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 COVID-19 pandemic in Singapore\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"details of ongoing viral outbreak in Singapore\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 COVID-19 pandemic in Singapore\"", 
                   "http://www.wikidata.org/entity/Q83873387"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873387", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Singapore", 
                    "Description" -> 
                    "details of ongoing viral outbreak in Singapore"]]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q87745167", 
                    Association[
                    "Label" -> "travel restriction", "Description" -> 
                    "policy"]], 
                    DateObject[{2020, 1, 23}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q87745167", 
                    Association[
                    "Label" -> "travel restriction", "Description" -> 
                    "policy"]], 
                    DateObject[{2020, 1, 23}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873387", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Singapore", 
                    "Description" -> 
                    "details of ongoing viral outbreak in Singapore"]]], 1}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873387", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Singapore", 
                    "Description" -> 
                    "details of ongoing viral outbreak in Singapore"]]], 1}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q88323877", 
                    Association[
                    "Label" -> "closing of educational institutions", 
                    "Description" -> "action to reduce virus transmission"]], 
                    DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q88323877", 
                    Association[
                    "Label" -> "closing of educational institutions", 
                    "Description" -> "action to reduce virus transmission"]], 
                    DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873387", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Singapore", 
                    "Description" -> 
                    "details of ongoing viral outbreak in Singapore"]]], 2}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873387", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Singapore", 
                    "Description" -> 
                    "details of ongoing viral outbreak in Singapore"]]], 2}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q30314010", 
                    Association[
                    "Label" -> "social distancing", "Description" -> 
                    "reduction of human social interaction in an effort to \
prevent the spread of infectious disease"]], 
                    DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q30314010", 
                    Association[
                    "Label" -> "social distancing", "Description" -> 
                    "reduction of human social interaction in an effort to \
prevent the spread of infectious disease"]], 
                    DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873387", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Singapore", 
                    "Description" -> 
                    "details of ongoing viral outbreak in Singapore"]]], 3}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873387", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Singapore", 
                    "Description" -> 
                    "details of ongoing viral outbreak in Singapore"]]], 3}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q83873548\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2020 COVID-19 pandemic in Australia\""}], ",", 
                    RowBox[{"\"Description\"", "\[Rule]", 
                    "\"viral outbreak in Australia\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2020 COVID-19 pandemic in Australia\"", 
                   "http://www.wikidata.org/entity/Q83873548"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873548", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q30314010", 
                    Association[
                    "Label" -> "social distancing", "Description" -> 
                    "reduction of human social interaction in an effort to \
prevent the spread of infectious disease"]], 
                    DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q30314010", 
                    Association[
                    "Label" -> "social distancing", "Description" -> 
                    "reduction of human social interaction in an effort to \
prevent the spread of infectious disease"]], 
                    DateObject[{2020, 3, 13}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873548", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]], 1}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873548", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]], 1}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q7257745", 
                    Association[
                    "Label" -> "declaration of public health emergency", 
                    "Description" -> 
                    "The declaration of a public health emergency in response \
to a (public) health crisis."]], 
                    DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q7257745", 
                    Association[
                    "Label" -> "declaration of public health emergency", 
                    "Description" -> 
                    "The declaration of a public health emergency in response \
to a (public) health crisis."]], 
                    DateObject[{2020, 2, 27}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873548", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]], 2}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873548", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]], 2}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q88761394", 
                    Association[
                    "Label" -> "travel ban", "Description" -> 
                    "restriction of all means of travel"]], 
                    DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q88761394", 
                    Association[
                    "Label" -> "travel ban", "Description" -> 
                    "restriction of all means of travel"]], 
                    DateObject[{2020, 3, 20}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873548", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]], 3}, 
                  4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873548", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]], 3}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["4 total \:203a ", ""], 
                  Style[
                   Superscript["4 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873548", 
                    Association[
                    "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873548", 
                   Association[
                   "Label" -> "2020 COVID-19 pandemic in Australia", 
                    "Description" -> "viral outbreak in Australia"]]]}, 
                "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 TemplateBox[{
                   RowBox[{"ExternalIdentifier", "[", 
                    RowBox[{"\"WikidataID\"", ",", "\"Q83873573\"", ",", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{
                    "\"Label\"", "\[Rule]", 
                    "\"2019\[Dash]20 coronavirus outbreak in Nepal\""}], ",", 
                    
                    RowBox[{
                    "\"Description\"", "\[Rule]", 
                    "\"viral outbreak in Nepal\""}]}], 
                    "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
                   "\"2019\[Dash]20 coronavirus outbreak in Nepal\"", 
                   "http://www.wikidata.org/entity/Q83873573"}, 
                  "ExternalIdentifierURL"], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873573", 
                   Association[
                   "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
                    "Description" -> "viral outbreak in Nepal"]]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q87745167", 
                    Association[
                    "Label" -> "travel restriction", "Description" -> 
                    "policy"]], 
                    DateObject[{2020, 3, 2}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q87745167", 
                    Association[
                    "Label" -> "travel restriction", "Description" -> 
                    "policy"]], 
                    DateObject[{2020, 3, 2}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873573", 
                    Association[
                    "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
                    "Description" -> "viral outbreak in Nepal"]]], 1}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873573", 
                   Association[
                   "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
                    "Description" -> "viral outbreak in Nepal"]]], 1}, "Item",
                 False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q88323877", 
                    Association[
                    "Label" -> "closing of educational institutions", 
                    "Description" -> "action to reduce virus transmission"]], 
                    DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q88323877", 
                    Association[
                    "Label" -> "closing of educational institutions", 
                    "Description" -> "action to reduce virus transmission"]], 
                    DateObject[{2020, 3, 18}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873573", 
                    Association[
                    "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
                    "Description" -> "viral outbreak in Nepal"]]], 2}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873573", 
                   Association[
                   "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
                    "Description" -> "viral outbreak in Nepal"]]], 2}, "Item",
                 False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    ExternalIdentifier["WikidataID", "Q6665312", 
                    Association[
                    "Label" -> "lockdown", "Description" -> 
                    "emergency protocol that prevents people or information \
from leaving an area"]], 
                    DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    ExternalIdentifier["WikidataID", "Q6665312", 
                    Association[
                    "Label" -> "lockdown", "Description" -> 
                    "emergency protocol that prevents people or information \
from leaving an area"]], 
                    DateObject[{2020, 3, 24}, "Day", "Gregorian", 0.]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    ExternalIdentifier["WikidataID", "Q83873573", 
                    Association[
                    "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
                    "Description" -> "viral outbreak in Nepal"]]], 3}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  ExternalIdentifier["WikidataID", "Q83873573", 
                   Association[
                   "Label" -> "2019\[Dash]20 coronavirus outbreak in Nepal", 
                    "Description" -> "viral outbreak in Nepal"]]], 3}, "Item",
                 False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[True, 132, 1], {1, 132 - -5 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[False, 132, 1], {1, 132 - -5 + 1}], Appearance -> 
                    None], " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    132, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    132, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[False, 132, 1], {1, 132 - 5 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[True, 132, 1], {1, 132 - 5 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{757., {273.134033203125, 278.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{757., {273.134033203125, 278.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.79854958106043*^9, 3.798549813557283*^9, 
  3.798559634060411*^9, 3.798561527184719*^9, 3.7985616872607117`*^9, 
  3.798737117879623*^9, 3.79873732677943*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"c16f6f25-dd6b-4d52-9d91-476589f6b216"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "tally", " ", "of", " ", "responses", " ", "by", " ", "all", " ", 
    "countries"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"ReverseSortBy", "[", "Last", "]"}], "@", 
    RowBox[{"Tally", "@", 
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"Flatten", "@", 
        RowBox[{"Values", "@", "covidPandemicResponsesData"}]}], ",", 
       "_ExternalIdentifier"}], "]"}]}]}], " ", "//", " ", 
   RowBox[{
    RowBox[{"Grid", "[", 
     RowBox[{"#", ",", " ", 
      RowBox[{"Alignment", "\[Rule]", "Right"}]}], "]"}], "&"}]}]}]], "Code",
 CellChangeTimes->{{3.7985499638134193`*^9, 3.798550177628109*^9}, {
   3.798553694405451*^9, 3.798553694769656*^9}, 3.7985586889519567`*^9},
 CellLabel->"In[77]:=",ExpressionUUID->"b972dd55-394e-4021-96a4-91956cc9ddfe"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q88323877\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"Label\"", "\[Rule]", 
                 "\"closing of educational institutions\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"action to reduce virus transmission\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"closing of educational institutions\"", 
       "http://www.wikidata.org/entity/Q88323877"},
      "ExternalIdentifierURL"], "56"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q30314010\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"social distancing\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"reduction of human social interaction in an effort to \
prevent the spread of infectious disease\""}]}], "\[RightAssociation]"}]}], 
         "]"}], "\"Wikidata\"", "\"social distancing\"", 
       "http://www.wikidata.org/entity/Q30314010"},
      "ExternalIdentifierURL"], "54"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q87745167\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"travel restriction\""}], 
               ",", 
               RowBox[{"\"Description\"", "\[Rule]", "\"policy\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"travel restriction\"", "http://www.wikidata.org/entity/Q87745167"},
      "ExternalIdentifierURL"], "50"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q7257745\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"Label\"", "\[Rule]", 
                 "\"declaration of public health emergency\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"The declaration of a public health emergency in response \
to a (public) health crisis.\""}]}], "\[RightAssociation]"}]}], "]"}], 
       "\"Wikidata\"", "\"declaration of public health emergency\"", 
       "http://www.wikidata.org/entity/Q7257745"},
      "ExternalIdentifierURL"], "44"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q88761394\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"travel ban\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"restriction of all means of travel\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"travel ban\"", "http://www.wikidata.org/entity/Q88761394"},
      "ExternalIdentifierURL"], "38"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q88761692\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"flight ban\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"Restriction of air travel, e.g. closure of \
airports\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"flight ban\"", "http://www.wikidata.org/entity/Q88761692"},
      "ExternalIdentifierURL"], "32"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q6665312\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"lockdown\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"emergency protocol that prevents people or information \
from leaving an area\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"",
        "\"lockdown\"", "http://www.wikidata.org/entity/Q6665312"},
      "ExternalIdentifierURL"], "31"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q223625\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"curfew\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"political or police ban on entering public areas such as \
streets or squares\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"curfew\"", "http://www.wikidata.org/entity/Q223625"},
      "ExternalIdentifierURL"], "28"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q89681240\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             
             RowBox[{"\"Label\"", "\[Rule]", 
               "\"closing of non-essential businesses\""}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"closing of non-essential businesses\"", 
       "http://www.wikidata.org/entity/Q89681240"},
      "ExternalIdentifierURL"], "16"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q89211965\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"Label\"", "\[Rule]", 
                 "\"decision by the Swedish Government\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"formal decisions in government meetings\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"decision by the Swedish Government\"", 
       "http://www.wikidata.org/entity/Q89211965"},
      "ExternalIdentifierURL"], "5"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q88307738\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"stay-at-home order\""}], 
               ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", "\"type of quarantine\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"stay-at-home order\"", "http://www.wikidata.org/entity/Q88307738"},
      "ExternalIdentifierURL"], "3"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q182899\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"quarantine\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"epidemiological intervention of restriction on the \
movement of people and goods, which is intended to prevent the spread of \
infectious disease or pests\""}]}], "\[RightAssociation]"}]}], "]"}], 
       "\"Wikidata\"", "\"quarantine\"", 
       "http://www.wikidata.org/entity/Q182899"},
      "ExternalIdentifierURL"], "3"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q5370734\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"emergency procedure\""}], 
               ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"plan of action to deal with an emergency\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"emergency procedure\"", "http://www.wikidata.org/entity/Q5370734"},
      "ExternalIdentifierURL"], "2"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q88707306\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"border closure\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"action to reduce virus transmission in the \
community\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"border closure\"", "http://www.wikidata.org/entity/Q88707306"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q88705465\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"Label\"", "\[Rule]", 
                 "\"travel advice as non-pharmaceutical countermeasure\""}], 
               ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"action to reduce virus transmission in the \
community\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"travel advice as non-pharmaceutical countermeasure\"", 
       "http://www.wikidata.org/entity/Q88705465"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q88324058\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"avoiding crowding\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"action to reduce virus transmission\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"avoiding crowding\"", "http://www.wikidata.org/entity/Q88324058"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q820655\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"legislative act\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 
                 "\"formal written document that creates law, including acts, \
executive orders, and by-laws\""}]}], "\[RightAssociation]"}]}], "]"}], 
       "\"Wikidata\"", "\"legislative act\"", 
       "http://www.wikidata.org/entity/Q820655"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q428148\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"regulation\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"general term for rules or controls, including delegated \
legislation and self-regulation\""}]}], "\[RightAssociation]"}]}], "]"}], 
       "\"Wikidata\"", "\"regulation\"", 
       "http://www.wikidata.org/entity/Q428148"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q2795484\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"Label\"", "\[Rule]", "\"implementing regulation\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"regulation on the details of the implementation of a \
law\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"implementing regulation\"", 
       "http://www.wikidata.org/entity/Q2795484"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q207184\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"press release\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"instrument of public relations\""}]}], 
             "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"press release\"", "http://www.wikidata.org/entity/Q207184"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q1864008\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"legal act\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"juridical fact in which the subject who made it happen \
acted under free will\""}]}], "\[RightAssociation]"}]}], "]"}], 
       "\"Wikidata\"", "\"legal act\"", 
       "http://www.wikidata.org/entity/Q1864008"},
      "ExternalIdentifierURL"], "1"},
    {
     TemplateBox[{
       RowBox[{"ExternalIdentifier", "[", 
         RowBox[{"\"WikidataID\"", ",", "\"Q1032176\"", ",", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               RowBox[{"\"Label\"", "\[Rule]", "\"countermeasure\""}], ",", 
               
               RowBox[{
                "\"Description\"", "\[Rule]", 
                 "\"specific action taken or system used to offset another \
action\""}]}], "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
       "\"countermeasure\"", "http://www.wikidata.org/entity/Q1032176"},
      "ExternalIdentifierURL"], "1"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Right}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.7985499653125343`*^9, 3.798550061834153*^9}, {
   3.798550093055271*^9, 3.798550160252125*^9}, 3.798553695534204*^9, 
   3.7985586897811537`*^9, 3.79855964220789*^9, 3.798561530619475*^9, 
   3.7985616891066217`*^9, 3.798737118440855*^9, 3.7987373274716377`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"fc3ab930-fdea-4ebf-bacf-984ff8ec4e16"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"compare", " ", "start", " ", "dates", " ", "of", " ", "Covid"}], 
    "-", 
    RowBox[{
    "19", " ", "responses", " ", "around", " ", "the", " ", "world"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"responseTimelinePlot", "[", 
    RowBox[{"response_", ",", " ", "plotLabel_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pos", ",", "data"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{"covidPandemicResponsesData", ",", " ", 
         RowBox[{"{", 
          RowBox[{"response", ",", "_"}], "}"}]}], "]"}]}], ";", "\n", 
      RowBox[{"data", " ", "=", " ", 
       RowBox[{"KeyMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Capitalize", "@", 
           RowBox[{"StringDelete", "[", 
            RowBox[{
             RowBox[{"#", "@", "\"\<Label\>\""}], ",", " ", 
             RowBox[{"__", "~~", "\"\<in \>\""}]}], "]"}]}], "&"}], ",", " ", 
         RowBox[{"Association", "@", 
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"pos", "\[LeftDoubleBracket]", 
             RowBox[{";;", ",", " ", "1", ",", " ", "1"}], 
             "\[RightDoubleBracket]"}], " ", "\[Rule]", " ", 
            RowBox[{
             RowBox[{"Extract", "[", 
              RowBox[{"covidPandemicResponsesData", ",", " ", "pos"}], "]"}], 
             "\[LeftDoubleBracket]", 
             RowBox[{";;", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], 
           "]"}]}]}], "]"}]}], ";", "\n", 
      RowBox[{"TimelinePlot", "[", 
       RowBox[{
        RowBox[{"Association", "@", "data"}], ",", " ", 
        RowBox[{"PlotLayout", "\[Rule]", "\"\<VerticalGrouped\>\""}], ",", 
        " ", 
        RowBox[{"PlotTheme", "\[Rule]", "\"\<Business\>\""}], ",", " ", 
        RowBox[{"AspectRatio", "\[Rule]", ".4"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Automatic", ",", " ", "500"}], "}"}]}], ",", " ", 
        RowBox[{"PlotLabel", "\[Rule]", "plotLabel"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.798558323757661*^9, 3.798558379433257*^9}, {
  3.7985584206289043`*^9, 3.798558601420721*^9}, {3.7985617223535147`*^9, 
  3.798561737484077*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"53fe083b-a8c5-4980-a7ba-3539c38b6757"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"educational", " ", "institutions"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"responseTimelinePlot", "[", 
   RowBox[{
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"Q88323877\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            RowBox[{
              
              RowBox[{"\"Label\"", "\[Rule]", 
                "\"closing of educational institutions\""}], ",", 
              
              RowBox[{"\"Description\"", "\[Rule]", 
                "\"action to reduce virus transmission\""}]}], 
            "\[RightAssociation]"}]}], "]"}], "\"Wikidata\"", 
      "\"closing of educational institutions\"", 
      "http://www.wikidata.org/entity/Q88323877"},
     "ExternalIdentifierURL"], ",", " ", 
    "\"\<Start of closing of educational institutions\>\""}], "]"}]}]], "Code",
 CellChangeTimes->{{3.79855859558349*^9, 3.798558618174584*^9}, {
  3.798558703385157*^9, 3.798558705704958*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"f5b0aeba-b69a-4a77-aca1-0e6857c028d0"],

Cell[BoxData[
 GraphicsBox[{
   {AbsolutePointSize[0], Opacity[0], 
    PointBox[NCache[{{0, -3789075600}, {Rational[1, 2], -3794000400}}, {{
       0, -3789075600}, {0.5, -3794000400}}]], 
    PointBox[NCache[{{Rational[-1, 2], -3789075600}, {
       Rational[3549, 20], -3794000400}}, {{-0.5, -3789075600}, {
       177.45, -3794000400}}]]}, {}, {}, {}, {
    {PointSize[0], Opacity[0], 
     PointBox[NCache[{{0, -3.788921355264*^9}, {
        Rational[3549, 20], -3.794154644736*^9}}, {{0, -3.788921355264*^9}, {
        177.45, -3.794154644736*^9}}]]}, {
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1703, 10], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{170.3, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1703, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1703, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1703, 10], -3793309200}]}, {
                 Offset[{-3.2, 0}, {170.3, -3793309200}], 
                 Offset[{1.5, 3.2}, {170.3, -3793309200}], 
                 Offset[{1.5, -3.2}, {170.3, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Hungary\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1703, 10], -3793309200}], 
                Offset[{0, 0}, {170.3, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1703, 10], -3.793463444736*^9}, {
                170.3, -3.793463444736*^9}], 
               NCache[{
                 Rational[3539, 20], -3.793154955264*^9}, {
                176.95, -3.793154955264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 1171.4529692492883`}, {
           132.7279719661096, 165.38482621560206`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[3253, 20], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{162.65, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[3253, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[3253, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[3253, 20], -3793050000}]}, {
                 Offset[{-3.2, 0}, {162.65, -3793050000}], 
                 Offset[{1.5, 3.2}, {162.65, -3793050000}], 
                 Offset[{1.5, -3.2}, {162.65, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Latvia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[3253, 20], -3793050000}], 
                Offset[{0, 0}, {162.65, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[3253, 20], -3.7931928192*^9}, {
                162.65, -3.7931928192*^9}], 
               NCache[{
                 Rational[1693, 10], -3.7929071808*^9}, {
                169.3, -3.7929071808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 1115.0018562597138`}, {
           111.71971844063273`, 144.37657269012516`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{155, -3793050000}, 
                Offset[{0, 0}, {0, -3793050000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {155, -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {155, -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {155, -3793050000}]}, {
                 Offset[{-3.2, 0}, {155, -3793050000}], 
                 Offset[{1.5, 3.2}, {155, -3793050000}], 
                 Offset[{1.5, -3.2}, {155, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Morocco\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {155, -3793050000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{155, -3.7931928192*^9}, 
               NCache[{
                 Rational[3233, 20], -3.7929071808*^9}, {
                161.65, -3.7929071808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 1072.750940508798}, {
           111.71971844063273`, 144.37657269012516`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[2947, 20], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{147.35, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[2947, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[2947, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[2947, 20], -3793136400}]}, {
                 Offset[{-3.2, 0}, {147.35, -3793136400}], 
                 Offset[{1.5, 3.2}, {147.35, -3793136400}], 
                 Offset[{1.5, -3.2}, {147.35, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Syria\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[2947, 20], -3793136400}], 
                Offset[{0, 0}, {147.35, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[2947, 20], -3.793290644736*^9}, {
                147.35, -3.793290644736*^9}], {154, -3.792982155264*^9}]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 1016.2998275192234`}, {
           118.7224696157723, 151.37932386526472`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793222800}, {
                0, -3793222800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1397, 10], -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}, {{139.7, -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1397, 10], -3793222800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1397, 10], -3793222800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1397, 10], -3793222800}]}, {
                 Offset[{-3.2, 0}, {139.7, -3793222800}], 
                 Offset[{1.5, 3.2}, {139.7, -3793222800}], 
                 Offset[{1.5, -3.2}, {139.7, -3793222800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Senegal\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1397, 10], -3793222800}], 
                Offset[{0, 0}, {139.7, -3793222800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1397, 10], -3.793377044736*^9}, {
                139.7, -3.793377044736*^9}], 
               NCache[{
                 Rational[2927, 20], -3.793068555264*^9}, {
                146.35, -3.793068555264*^9}]]}}}},
          ImageSizeCache->{{17.171572875253787`, 973.0489117683076}, {
           125.72522079091186`, 158.3820750404043}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 15 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "15", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 15, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[2641, 20], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{132.05, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[2641, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[2641, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[2641, 20], -3793050000}]}, {
                 Offset[{-3.2, 0}, {132.05, -3793050000}], 
                 Offset[{1.5, 3.2}, {132.05, -3793050000}], 
                 Offset[{1.5, -3.2}, {132.05, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Trinidad and Tobago\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[2641, 20], -3793050000}], 
                Offset[{0, 0}, {132.05, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[2641, 20], -3.793204244736*^9}, {
                132.05, -3.793204244736*^9}], 
               NCache[{
                 Rational[1387, 10], -3.792895755264*^9}, {
                138.7, -3.792895755264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 979.6978973980627}, {
           111.71971844063273`, 144.37657269012516`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[622, 5], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{124.4, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[622, 5], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[622, 5], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[622, 5], -3793136400}]}, {
                 Offset[{-3.2, 0}, {124.4, -3793136400}], 
                 Offset[{1.5, 3.2}, {124.4, -3793136400}], 
                 Offset[{1.5, -3.2}, {124.4, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Uruguay\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[622, 5], -3793136400}], 
                Offset[{0, 0}, {124.4, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[622, 5], -3.793290644736*^9}, {
                124.4, -3.793290644736*^9}], 
               NCache[{
                 Rational[2621, 20], -3.792982155264*^9}, {
                131.05, -3.792982155264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 875.3468830278175}, {
           118.7224696157723, 151.37932386526472`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792790800}, {
                0, -3792790800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[467, 4], -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}, {{116.75, -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[467, 4], -3792790800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[467, 4], -3792790800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[467, 4], -3792790800}]}, {
                 Offset[{-3.2, 0}, {116.75, -3792790800}], 
                 Offset[{1.5, 3.2}, {116.75, -3792790800}], 
                 Offset[{1.5, -3.2}, {116.75, -3792790800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Greece\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[467, 4], -3792790800}], 
                Offset[{0, 0}, {116.75, -3792790800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[467, 4], -3.7929336192*^9}, {
                116.75, -3.7929336192*^9}], 
               NCache[{
                 Rational[617, 5], -3.7926479808*^9}, {
                123.4, -3.7926479808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 820.9958686575723}, {
           90.71146491515583, 123.36831916464826`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 10 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "10", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 10, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[467, 4], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{116.75, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[467, 4], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[467, 4], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[467, 4], -3793309200}]}, {
                 Offset[{-3.2, 0}, {116.75, -3793309200}], 
                 Offset[{1.5, 3.2}, {116.75, -3793309200}], 
                 Offset[{1.5, -3.2}, {116.75, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Aruba\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[467, 4], -3793309200}], 
                Offset[{0, 0}, {116.75, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[467, 4], -3.7934520192*^9}, {
                116.75, -3.7934520192*^9}], 
               NCache[{
                 Rational[617, 5], -3.7931663808*^9}, {
                123.4, -3.7931663808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 818.895770038243}, {
           132.7279719661096, 165.38482621560206`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1091, 10], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{109.1, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1091, 10], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1091, 10], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1091, 10], -3792963600}]}, {
                 Offset[{-3.2, 0}, {109.1, -3792963600}], 
                 Offset[{1.5, 3.2}, {109.1, -3792963600}], 
                 Offset[{1.5, -3.2}, {109.1, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Northern Cyprus\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1091, 10], -3792963600}], 
                Offset[{0, 0}, {109.1, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1091, 10], -3.793117844736*^9}, {
                109.1, -3.793117844736*^9}], 
               NCache[{
                 Rational[463, 4], -3.792809355264*^9}, {
                115.75, -3.792809355264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 812.6448542873271}, {
           104.71696726543496`, 137.37382151492739`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1091, 10], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{109.1, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1091, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1091, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1091, 10], -3793309200}]}, {
                 Offset[{-3.2, 0}, {109.1, -3793309200}], 
                 Offset[{1.5, 3.2}, {109.1, -3793309200}], 
                 Offset[{1.5, -3.2}, {109.1, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Iceland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1091, 10], -3793309200}], 
                Offset[{0, 0}, {109.1, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1091, 10], -3.7934520192*^9}, {
                109.1, -3.7934520192*^9}], 
               NCache[{
                 Rational[463, 4], -3.7931663808*^9}, {
                115.75, -3.7931663808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 770.6448542873271}, {
           132.7279719661096, 165.38482621560206`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[2029, 20], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{101.45, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[2029, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[2029, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[2029, 20], -3793050000}]}, {
                 Offset[{-3.2, 0}, {101.45, -3793050000}], 
                 Offset[{1.5, 3.2}, {101.45, -3793050000}], 
                 Offset[{1.5, -3.2}, {101.45, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Switzerland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[2029, 20], -3793050000}], 
                Offset[{0, 0}, {101.45, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[2029, 20], -3.7931928192*^9}, {
                101.45, -3.7931928192*^9}], 
               NCache[{
                 Rational[1081, 10], -3.7929071808*^9}, {
                108.1, -3.7929071808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 741.293839917082}, {
           111.71971844063273`, 144.37657269012516`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[469, 5], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{93.8, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[469, 5], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[469, 5], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[469, 5], -3792963600}]}, {
                 Offset[{-3.2, 0}, {93.8, -3792963600}], 
                 Offset[{1.5, 3.2}, {93.8, -3792963600}], 
                 Offset[{1.5, -3.2}, {93.8, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Netherlands\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[469, 5], -3792963600}], 
                Offset[{0, 0}, {93.8, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[469, 5], -3.7931064192*^9}, {
                93.8, -3.7931064192*^9}], 
               NCache[{
                 Rational[2009, 20], -3.7928207808*^9}, {
                100.45, -3.7928207808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 713.9428255468368}, {
           104.71696726543496`, 137.37382151492739`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[469, 5], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{93.8, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[469, 5], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[469, 5], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[469, 5], -3793309200}]}, {
                 Offset[{-3.2, 0}, {93.8, -3793309200}], 
                 Offset[{1.5, 3.2}, {93.8, -3793309200}], 
                 Offset[{1.5, -3.2}, {93.8, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Denmark\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[469, 5], -3793309200}], 
                Offset[{0, 0}, {93.8, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[469, 5], -3.7934520192*^9}, {
                93.8, -3.7934520192*^9}], 
               NCache[{
                 Rational[2009, 20], -3.7931663808*^9}, {
                100.45, -3.7931663808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 680.9428255468368}, {
           132.7279719661096, 165.38482621560206`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792790800}, {
                0, -3792790800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1723, 20], -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}, {{86.15, -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1723, 20], -3792790800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1723, 20], -3792790800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1723, 20], -3792790800}]}, {
                 Offset[{-3.2, 0}, {86.15, -3792790800}], 
                 Offset[{1.5, 3.2}, {86.15, -3792790800}], 
                 Offset[{1.5, -3.2}, {86.15, -3792790800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Czech Republic\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1723, 20], -3792790800}], 
                Offset[{0, 0}, {86.15, -3792790800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1723, 20], -3.792945044736*^9}, {
                86.15, -3.792945044736*^9}], 
               NCache[{
                 Rational[464, 5], -3.792636555264*^9}, {
                92.8, -3.792636555264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 680.5918111765918}, {
           90.71146491515583, 123.36831916464826`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 10 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "10", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 10, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793222800}, {
                0, -3793222800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1723, 20], -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}, {{86.15, -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1723, 20], -3793222800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1723, 20], -3793222800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1723, 20], -3793222800}]}, {
                 Offset[{-3.2, 0}, {86.15, -3793222800}], 
                 Offset[{1.5, 3.2}, {86.15, -3793222800}], 
                 Offset[{1.5, -3.2}, {86.15, -3793222800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Jordan\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1723, 20], -3793222800}], 
                Offset[{0, 0}, {86.15, -3793222800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1723, 20], -3.7933656192*^9}, {
                86.15, -3.7933656192*^9}], 
               NCache[{
                 Rational[464, 5], -3.7930799808*^9}, {
                92.8, -3.7930799808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 621.5918111765918}, {
           125.72522079091186`, 158.3820750404043}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 15 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "15", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 15, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792877200}, {
                0, -3792877200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[157, 2], -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}, {{78.5, -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[157, 2], -3792877200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[157, 2], -3792877200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[157, 2], -3792877200}]}, {
                 Offset[{-3.2, 0}, {78.5, -3792877200}], 
                 Offset[{1.5, 3.2}, {78.5, -3792877200}], 
                 Offset[{1.5, -3.2}, {78.5, -3792877200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Spain\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[157, 2], -3792877200}], 
                Offset[{0, 0}, {78.5, -3792877200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[157, 2], -3.793031444736*^9}, {
                78.5, -3.793031444736*^9}], 
               NCache[{
                 Rational[1703, 20], -3.792722955264*^9}, {
                85.15, -3.792722955264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 572.1406981870173}, {
           97.7142160902954, 130.37107033978782`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 11 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "11", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 11, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793395600}, {
                0, -3793395600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[157, 2], -3793395600}, 
                 Offset[{0, 0}, {0, -3793395600}]}, {{78.5, -3793395600}, 
                 Offset[{0, 0}, {0, -3793395600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[157, 2], -3793395600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[157, 2], -3793395600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[157, 2], -3793395600}]}, {
                 Offset[{-3.2, 0}, {78.5, -3793395600}], 
                 Offset[{1.5, 3.2}, {78.5, -3793395600}], 
                 Offset[{1.5, -3.2}, {78.5, -3793395600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Dominican Republic\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[157, 2], -3793395600}], 
                Offset[{0, 0}, {78.5, -3793395600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[157, 2], -3.793549844736*^9}, {
                78.5, -3.793549844736*^9}], 
               NCache[{
                 Rational[1703, 20], -3.793241355264*^9}, {
                85.15, -3.793241355264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 650.2407968063467}, {
           139.73072314124917`, 172.38757739074163`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 17 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "17", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 17, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1417, 20], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{70.85, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1417, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1417, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1417, 20], -3792963600}]}, {
                 Offset[{-3.2, 0}, {70.85, -3792963600}], 
                 Offset[{1.5, 3.2}, {70.85, -3792963600}], 
                 Offset[{1.5, -3.2}, {70.85, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Jamaica\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1417, 20], -3792963600}], 
                Offset[{0, 0}, {70.85, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1417, 20], -3.7931064192*^9}, {
                70.85, -3.7931064192*^9}], 
               NCache[{
                 Rational[155, 2], -3.7928207808*^9}, {
                77.5, -3.7928207808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 528.8897824361014}, {
           104.71696726543496`, 137.37382151492739`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1417, 20], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{70.85, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1417, 20], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1417, 20], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1417, 20], -3793309200}]}, {
                 Offset[{-3.2, 0}, {70.85, -3793309200}], 
                 Offset[{1.5, 3.2}, {70.85, -3793309200}], 
                 Offset[{1.5, -3.2}, {70.85, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Colombia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1417, 20], -3793309200}], 
                Offset[{0, 0}, {70.85, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1417, 20], -3.7934520192*^9}, {
                70.85, -3.7934520192*^9}], 
               NCache[{
                 Rational[155, 2], -3.7931663808*^9}, {
                77.5, -3.7931663808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 533.8897824361014}, {
           132.7279719661096, 165.38482621560206`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[316, 5], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{63.2, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[316, 5], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[316, 5], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[316, 5], -3792963600}]}, {
                 Offset[{-3.2, 0}, {63.2, -3792963600}], 
                 Offset[{1.5, 3.2}, {63.2, -3792963600}], 
                 Offset[{1.5, -3.2}, {63.2, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Malta\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[316, 5], -3792963600}], 
                Offset[{0, 0}, {63.2, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[316, 5], -3.7931064192*^9}, {
                63.2, -3.7931064192*^9}], 
               NCache[{
                 Rational[1397, 20], -3.7928207808*^9}, {
                69.85, -3.7928207808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 473.4386694465269}, {
           104.71696726543496`, 137.37382151492739`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[316, 5], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{63.2, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[316, 5], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[316, 5], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[316, 5], -3793309200}]}, {
                 Offset[{-3.2, 0}, {63.2, -3793309200}], 
                 Offset[{1.5, 3.2}, {63.2, -3793309200}], 
                 Offset[{1.5, -3.2}, {63.2, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Turkey\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[316, 5], -3793309200}], 
                Offset[{0, 0}, {63.2, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[316, 5], -3.793463444736*^9}, {
                63.2, -3.793463444736*^9}], 
               NCache[{
                 Rational[1397, 20], -3.793154955264*^9}, {
                69.85, -3.793154955264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 473.5387680658563}, {
           132.7279719661096, 165.38482621560206`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792790800}, {
                0, -3792790800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1111, 20], -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}, {{55.55, -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1111, 20], -3792790800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1111, 20], -3792790800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1111, 20], -3792790800}]}, {
                 Offset[{-3.2, 0}, {55.55, -3792790800}], 
                 Offset[{1.5, 3.2}, {55.55, -3792790800}], 
                 Offset[{1.5, -3.2}, {55.55, -3792790800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Paraguay\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1111, 20], -3792790800}], 
                Offset[{0, 0}, {55.55, -3792790800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1111, 20], -3.792945044736*^9}, {
                55.55, -3.792945044736*^9}], 
               NCache[{
                 Rational[311, 5], -3.792636555264*^9}, {
                62.2, -3.792636555264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 436.18775369561115`}, {
           90.71146491515583, 123.36831916464826`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 10 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "10", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 10, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1111, 20], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{55.55, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1111, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1111, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1111, 20], -3793136400}]}, {
                 Offset[{-3.2, 0}, {55.55, -3793136400}], 
                 Offset[{1.5, 3.2}, {55.55, -3793136400}], 
                 Offset[{1.5, -3.2}, {55.55, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Oman\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1111, 20], -3793136400}], 
                Offset[{0, 0}, {55.55, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1111, 20], -3.7932792192*^9}, {
                55.55, -3.7932792192*^9}], 
               NCache[{
                 Rational[311, 5], -3.7929935808*^9}, {
                62.2, -3.7929935808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 424.08765507628186`}, {
           118.7224696157723, 151.37932386526472`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[479, 10], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{47.9, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[479, 10], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[479, 10], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[479, 10], -3792963600}]}, {
                 Offset[{-3.2, 0}, {47.9, -3792963600}], 
                 Offset[{1.5, 3.2}, {47.9, -3792963600}], 
                 Offset[{1.5, -3.2}, {47.9, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Lithuania\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[479, 10], -3792963600}], 
                Offset[{0, 0}, {47.9, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[479, 10], -3.7931064192*^9}, {
                47.9, -3.7931064192*^9}], 
               NCache[{
                 Rational[1091, 20], -3.7928207808*^9}, {
                54.55, -3.7928207808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 384.836739325366}, {
           104.71696726543496`, 137.37382151492739`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[479, 10], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{47.9, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[479, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[479, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[479, 10], -3793309200}]}, {
                 Offset[{-3.2, 0}, {47.9, -3793309200}], 
                 Offset[{1.5, 3.2}, {47.9, -3793309200}], 
                 Offset[{1.5, -3.2}, {47.9, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Croatia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[479, 10], -3793309200}], 
                Offset[{0, 0}, {47.9, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[479, 10], -3.7934520192*^9}, {
                47.9, -3.7934520192*^9}], 
               NCache[{
                 Rational[1091, 20], -3.7931663808*^9}, {
                54.55, -3.7931663808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 375.836739325366}, {
           132.7279719661096, 165.38482621560206`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792790800}, {
                0, -3792790800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[161, 4], -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}, {{40.25, -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[161, 4], -3792790800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[161, 4], -3792790800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[161, 4], -3792790800}]}, {
                 Offset[{-3.2, 0}, {40.25, -3792790800}], 
                 Offset[{1.5, 3.2}, {40.25, -3792790800}], 
                 Offset[{1.5, -3.2}, {40.25, -3792790800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Peru\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[161, 4], -3792790800}], 
                Offset[{0, 0}, {40.25, -3792790800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[161, 4], -3.7929336192*^9}, {
                40.25, -3.7929336192*^9}], 
               NCache[{
                 Rational[469, 10], -3.7926479808*^9}, {
                46.9, -3.7926479808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 325.3856263357915}, {
           90.71146491515583, 123.36831916464826`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 10 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "10", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 10, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793222800}, {
                0, -3793222800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[161, 4], -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}, {{40.25, -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[161, 4], -3793222800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[161, 4], -3793222800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[161, 4], -3793222800}]}, {
                 Offset[{-3.2, 0}, {40.25, -3793222800}], 
                 Offset[{1.5, 3.2}, {40.25, -3793222800}], 
                 Offset[{1.5, -3.2}, {40.25, -3793222800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Serbia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[161, 4], -3793222800}], 
                Offset[{0, 0}, {40.25, -3793222800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[161, 4], -3.7933656192*^9}, {
                40.25, -3.7933656192*^9}], 
               NCache[{
                 Rational[469, 10], -3.7930799808*^9}, {
                46.9, -3.7930799808*^9}]]}}}},
          ImageSizeCache->{{17.171572875253787`, 325.3856263357915}, {
           125.72522079091186`, 158.3820750404043}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 15 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "15", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 15, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793568400}, {
                0, -3793568400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[163, 5], -3793568400}, 
                 Offset[{0, 0}, {0, -3793568400}]}, {{32.6, -3793568400}, 
                 Offset[{0, 0}, {0, -3793568400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[163, 5], -3793568400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[163, 5], -3793568400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[163, 5], -3793568400}]}, {
                 Offset[{-3.2, 0}, {32.6, -3793568400}], 
                 Offset[{1.5, 3.2}, {32.6, -3793568400}], 
                 Offset[{1.5, -3.2}, {32.6, -3793568400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Haiti\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[163, 5], -3793568400}], 
                Offset[{0, 0}, {32.6, -3793568400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[163, 5], -3.7937112192*^9}, {
                32.6, -3.7937112192*^9}], 
               NCache[{
                 Rational[157, 4], -3.7934255808*^9}, {
                39.25, -3.7934255808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 276.03461196554645`}, {
           153.7362254915865, 186.39307974107896`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 19 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "19", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 19, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792877200}, {
                0, -3792877200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[163, 5], -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}, {{32.6, -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[163, 5], -3792877200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[163, 5], -3792877200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[163, 5], -3792877200}]}, {
                 Offset[{-3.2, 0}, {32.6, -3792877200}], 
                 Offset[{1.5, 3.2}, {32.6, -3792877200}], 
                 Offset[{1.5, -3.2}, {32.6, -3792877200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Bosnia and Herzegovina\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[163, 5], -3792877200}], 
                Offset[{0, 0}, {32.6, -3792877200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[163, 5], -3.793031444736*^9}, {
                32.6, -3.793031444736*^9}], 
               NCache[{
                 Rational[157, 4], -3.792722955264*^9}, {
                39.25, -3.792722955264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 355.1347105848758}, {
           97.7142160902954, 130.37107033978782`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 11 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "11", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 11, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793222800}, {
                0, -3793222800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[163, 5], -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}, {{32.6, -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[163, 5], -3793222800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[163, 5], -3793222800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[163, 5], -3793222800}]}, {
                 Offset[{-3.2, 0}, {32.6, -3793222800}], 
                 Offset[{1.5, 3.2}, {32.6, -3793222800}], 
                 Offset[{1.5, -3.2}, {32.6, -3793222800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Chile\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[163, 5], -3793222800}], 
                Offset[{0, 0}, {32.6, -3793222800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[163, 5], -3.7933656192*^9}, {
                32.6, -3.7933656192*^9}], 
               NCache[{
                 Rational[157, 4], -3.7930799808*^9}, {
                39.25, -3.7930799808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 276.03461196554645`}, {
           125.72522079091186`, 158.3820750404043}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 15 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "15", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 15, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792704400}, {
                0, -3792704400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[499, 20], -3792704400}, 
                 Offset[{0, 0}, {0, -3792704400}]}, {{24.95, -3792704400}, 
                 Offset[{0, 0}, {0, -3792704400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[499, 20], -3792704400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[499, 20], -3792704400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[499, 20], -3792704400}]}, {
                 Offset[{-3.2, 0}, {24.95, -3792704400}], 
                 Offset[{1.5, 3.2}, {24.95, -3792704400}], 
                 Offset[{1.5, -3.2}, {24.95, -3792704400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Qatar\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[499, 20], -3792704400}], 
                Offset[{0, 0}, {24.95, -3792704400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[499, 20], -3.7928472192*^9}, {
                24.95, -3.7928472192*^9}], 
               NCache[{
                 Rational[158, 5], -3.7925615808*^9}, {
                31.6, -3.7925615808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 226.68359759530125`}, {
           83.70871373995806, 116.36556798945048`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 9 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "9", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 9, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3791581200}, {
                0, -3791581200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[499, 20], -3791581200}, 
                 Offset[{0, 0}, {0, -3791581200}]}, {{24.95, -3791581200}, 
                 Offset[{0, 0}, {0, -3791581200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[499, 20], -3791581200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[499, 20], -3791581200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[499, 20], -3791581200}]}, {
                 Offset[{-3.2, 0}, {24.95, -3791581200}], 
                 Offset[{1.5, 3.2}, {24.95, -3791581200}], 
                 Offset[{1.5, -3.2}, {24.95, -3791581200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Bahrain\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[499, 20], -3791581200}], 
                Offset[{0, 0}, {24.95, -3791581200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[499, 20], -3.7917240192*^9}, {
                24.95, -3.7917240192*^9}], 
               NCache[{
                 Rational[158, 5], -3.7914383808*^9}, {
                31.6, -3.7914383808*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 
           229.78369621463068`}, {-7.327051537089098, 25.329802712403286`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 25 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "25", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 25, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[499, 20], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{24.95, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[499, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[499, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[499, 20], -3793050000}]}, {
                 Offset[{-3.2, 0}, {24.95, -3793050000}], 
                 Offset[{1.5, 3.2}, {24.95, -3793050000}], 
                 Offset[{1.5, -3.2}, {24.95, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Ecuador\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[499, 20], -3793050000}], 
                Offset[{0, 0}, {24.95, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[499, 20], -3.7931928192*^9}, {
                24.95, -3.7931928192*^9}], 
               NCache[{
                 Rational[158, 5], -3.7929071808*^9}, {
                31.6, -3.7929071808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 232.7836962146307}, {
           111.71971844063275`, 144.37657269012516`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[499, 20], -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}, {{24.95, -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[499, 20], -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[499, 20], -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[499, 20], -3793482000}]}, {
                 Offset[{-3.2, 0}, {24.95, -3793482000}], 
                 Offset[{1.5, 3.2}, {24.95, -3793482000}], 
                 Offset[{1.5, -3.2}, {24.95, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Russia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[499, 20], -3793482000}], 
                Offset[{0, 0}, {24.95, -3793482000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[499, 20], -3.7936248192*^9}, {
                24.95, -3.7936248192*^9}], 
               NCache[{
                 Rational[158, 5], -3.7933391808*^9}, {
                31.6, -3.7933391808*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 226.78369621463068`}, {
           146.73347431638877`, 179.39032856588116`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792099600}, {
                0, -3792099600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[173, 10], -3792099600}, 
                 Offset[{0, 0}, {0, -3792099600}]}, {{17.3, -3792099600}, 
                 Offset[{0, 0}, {0, -3792099600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[173, 10], -3792099600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[173, 10], -3792099600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[173, 10], -3792099600}]}, {
                 Offset[{-3.2, 0}, {17.3, -3792099600}], 
                 Offset[{1.5, 3.2}, {17.3, -3792099600}], 
                 Offset[{1.5, -3.2}, {17.3, -3792099600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Azerbaijan\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[173, 10], -3792099600}], 
                Offset[{0, 0}, {17.3, -3792099600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[173, 10], -3.792253844736*^9}, {
                17.3, -3.792253844736*^9}], 
               NCache[{
                 Rational[479, 20], -3.791945355264*^9}, {
                23.95, -3.791945355264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 193.43268184438554`}, {
           34.68945551386467, 67.34630976335708}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 2 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "2", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 2, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3791754000}, {
                0, -3791754000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[173, 10], -3791754000}, 
                 Offset[{0, 0}, {0, -3791754000}]}, {{17.3, -3791754000}, 
                 Offset[{0, 0}, {0, -3791754000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[173, 10], -3791754000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[173, 10], -3791754000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[173, 10], -3791754000}]}, {
                 Offset[{-3.2, 0}, {17.3, -3791754000}], 
                 Offset[{1.5, 3.2}, {17.3, -3791754000}], 
                 Offset[{1.5, -3.2}, {17.3, -3791754000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Iraq\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[173, 10], -3791754000}], 
                Offset[{0, 0}, {17.3, -3791754000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[173, 10], -3.791908244736*^9}, {
                17.3, -3.791908244736*^9}], 
               NCache[{
                 Rational[479, 20], -3.791599755264*^9}, {
                23.95, -3.791599755264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 177.33258322505614`}, {
           6.678450813190032, 39.335305062682416`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 27 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "27", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 27, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792877200}, {
                0, -3792877200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[173, 10], -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}, {{17.3, -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[173, 10], -3792877200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[173, 10], -3792877200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[173, 10], -3792877200}]}, {
                 Offset[{-3.2, 0}, {17.3, -3792877200}], 
                 Offset[{1.5, 3.2}, {17.3, -3792877200}], 
                 Offset[{1.5, -3.2}, {17.3, -3792877200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Romania\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[173, 10], -3792877200}], 
                Offset[{0, 0}, {17.3, -3792877200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[173, 10], -3.7930200192*^9}, {
                17.3, -3.7930200192*^9}], 
               NCache[{
                 Rational[479, 20], -3.7927343808*^9}, {
                23.95, -3.7927343808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 186.43268184438557`}, {
           97.7142160902954, 130.37107033978782`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 11 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "11", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 11, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[173, 10], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{17.3, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[173, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[173, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[173, 10], -3793309200}]}, {
                 Offset[{-3.2, 0}, {17.3, -3793309200}], 
                 Offset[{1.5, 3.2}, {17.3, -3793309200}], 
                 Offset[{1.5, -3.2}, {17.3, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Cambodia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[173, 10], -3793309200}], 
                Offset[{0, 0}, {17.3, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[173, 10], -3.7934520192*^9}, {
                17.3, -3.7934520192*^9}], 
               NCache[{
                 Rational[479, 20], -3.7931663808*^9}, {
                23.95, -3.7931663808*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 192.43268184438554`}, {
           132.72797196610964`, 165.38482621560203`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3794000400}, {
                0, -3794000400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[193, 20], -3794000400}, 
                 Offset[{0, 0}, {0, -3794000400}]}, {{9.65, -3794000400}, 
                 Offset[{0, 0}, {0, -3794000400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[193, 20], -3794000400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[193, 20], -3794000400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[193, 20], -3794000400}]}, {
                 Offset[{-3.2, 0}, {9.65, -3794000400}], 
                 Offset[{1.5, 3.2}, {9.65, -3794000400}], 
                 Offset[{1.5, -3.2}, {9.65, -3794000400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Angola\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[193, 20], -3794000400}], 
                Offset[{0, 0}, {9.65, -3794000400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[193, 20], -3.794154644736*^9}, {
                9.65, -3.794154644736*^9}], 
               NCache[{
                 Rational[163, 10], -3.793846155264*^9}, {
                16.3, -3.793846155264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 128.08166747414037`}, {
           188.74998136734257`, 221.40683561683497`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 24 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "24", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 24, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793654800}, {
                0, -3793654800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[193, 20], -3793654800}, 
                 Offset[{0, 0}, {0, -3793654800}]}, {{9.65, -3793654800}, 
                 Offset[{0, 0}, {0, -3793654800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[193, 20], -3793654800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[193, 20], -3793654800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[193, 20], -3793654800}]}, {
                 Offset[{-3.2, 0}, {9.65, -3793654800}], 
                 Offset[{1.5, 3.2}, {9.65, -3793654800}], 
                 Offset[{1.5, -3.2}, {9.65, -3793654800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Fiji\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[193, 20], -3793654800}], 
                Offset[{0, 0}, {9.65, -3793654800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[193, 20], -3.793809044736*^9}, {
                9.65, -3.793809044736*^9}], 
               NCache[{
                 Rational[163, 10], -3.793500555264*^9}, {
                16.3, -3.793500555264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 127.981568854811}, {
           160.7389766667261, 193.3958309162185}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 20 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "20", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 20, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[193, 20], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{9.65, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[193, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[193, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[193, 20], -3792963600}]}, {
                 Offset[{-3.2, 0}, {9.65, -3792963600}], 
                 Offset[{1.5, 3.2}, {9.65, -3792963600}], 
                 Offset[{1.5, -3.2}, {9.65, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Poland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[193, 20], -3792963600}], 
                Offset[{0, 0}, {9.65, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[193, 20], -3.7931064192*^9}, {
                9.65, -3.7931064192*^9}], 
               NCache[{
                 Rational[163, 10], -3.7928207808*^9}, {
                16.3, -3.7928207808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 128.08166747414037`}, {
           104.71696726543497`, 137.37382151492739`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792358800}, {
                0, -3792358800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[193, 20], -3792358800}, 
                 Offset[{0, 0}, {0, -3792358800}]}, {{9.65, -3792358800}, 
                 Offset[{0, 0}, {0, -3792358800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[193, 20], -3792358800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[193, 20], -3792358800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[193, 20], -3792358800}]}, {
                 Offset[{-3.2, 0}, {9.65, -3792358800}], 
                 Offset[{1.5, 3.2}, {9.65, -3792358800}], 
                 Offset[{1.5, -3.2}, {9.65, -3792358800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The State of Palestine\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[193, 20], -3792358800}], 
                Offset[{0, 0}, {9.65, -3792358800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[193, 20], -3.7925016192*^9}, {
                9.65, -3.7925016192*^9}], 
               NCache[{
                 Rational[163, 10], -3.7922159808*^9}, {
                16.3, -3.7922159808*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 196.08166747414043`}, {
           55.69770903934157, 88.35456328883402}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 5 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "5", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 5, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[193, 20], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{9.65, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[193, 20], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[193, 20], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[193, 20], -3793309200}]}, {
                 Offset[{-3.2, 0}, {9.65, -3793309200}], 
                 Offset[{1.5, 3.2}, {9.65, -3793309200}], 
                 Offset[{1.5, -3.2}, {9.65, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"France\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[193, 20], -3793309200}], 
                Offset[{0, 0}, {9.65, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[193, 20], -3.7934520192*^9}, {
                9.65, -3.7934520192*^9}], 
               NCache[{
                 Rational[163, 10], -3.7931663808*^9}, {
                16.3, -3.7931663808*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 128.08166747414037`}, {
           132.72797196610964`, 165.38482621560203`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3791754000}, {
                0, -3791754000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[193, 20], -3791754000}, 
                 Offset[{0, 0}, {0, -3791754000}]}, {{9.65, -3791754000}, 
                 Offset[{0, 0}, {0, -3791754000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[193, 20], -3791754000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[193, 20], -3791754000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[193, 20], -3791754000}]}, {
                 Offset[{-3.2, 0}, {9.65, -3791754000}], 
                 Offset[{1.5, 3.2}, {9.65, -3791754000}], 
                 Offset[{1.5, -3.2}, {9.65, -3791754000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Singapore\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[193, 20], -3791754000}], 
                Offset[{0, 0}, {9.65, -3791754000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[193, 20], -3.791908244736*^9}, {
                9.65, -3.791908244736*^9}], 
               NCache[{
                 Rational[163, 10], -3.791599755264*^9}, {
                16.3, -3.791599755264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 143.08166747414037`}, {
           6.678450813190032, 39.335305062682416`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 27 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "27", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 27, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3789075600}, {
                0, -3789075600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3789075600}, 
                Offset[{0, 0}, {0, -3789075600}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3789075600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3789075600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3789075600}]}, {
                 Offset[{-3.2, 0}, {2, -3789075600}], 
                 Offset[{1.5, 3.2}, {2, -3789075600}], 
                 Offset[{1.5, -3.2}, {2, -3789075600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Mongolia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3789075600}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.789229844736*^9}, 
               NCache[{
                 Rational[173, 20], -3.788921355264*^9}, {
                8.65, -3.788921355264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 
           88.73065310389524}, {-210.40683561671858`, -177.74998136722618`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 27 Jan 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "1", ",", "27", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 1, 27, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3791149200}, {
                0, -3791149200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3791149200}, 
                Offset[{0, 0}, {0, -3791149200}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3791149200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3791149200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3791149200}]}, {
                 Offset[{-3.2, 0}, {2, -3791149200}], 
                 Offset[{1.5, 3.2}, {2, -3791149200}], 
                 Offset[{1.5, -3.2}, {2, -3791149200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"North Korea\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3791149200}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.7912920192*^9}, 
               NCache[{
                 Rational[173, 20], -3.7910063808*^9}, {
                8.65, -3.7910063808*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 
           101.73065310389524`}, {-42.34080741290334, -9.683953163410955}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 20 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "20", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 20, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793914000}, {
                0, -3793914000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3793914000}, 
                Offset[{0, 0}, {0, -3793914000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3793914000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3793914000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3793914000}]}, {
                 Offset[{-3.2, 0}, {2, -3793914000}], 
                 Offset[{1.5, 3.2}, {2, -3793914000}], 
                 Offset[{1.5, -3.2}, {2, -3793914000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"New Zealand\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3793914000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.7940568192*^9}, 
               NCache[{
                 Rational[173, 20], -3.7937711808*^9}, {
                8.65, -3.7937711808*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 106.73065310389524`}, {
           181.747230192203, 214.4040844416954}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 23 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "23", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 23, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3792963600}, 
                Offset[{0, 0}, {0, -3792963600}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3792963600}]}, {
                 Offset[{-3.2, 0}, {2, -3792963600}], 
                 Offset[{1.5, 3.2}, {2, -3792963600}], 
                 Offset[{1.5, -3.2}, {2, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Republic of Ireland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3792963600}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.793117844736*^9}, 
               NCache[{
                 Rational[173, 20], -3.792809355264*^9}, {
                8.65, -3.792809355264*^9}]]}}}},
          
          ImageSizeCache->{{17.171572875253787`, 152.7306531038953}, {
           104.71696726543497`, 137.37382151492739`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792618000}, {
                0, -3792618000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3792618000}, 
                Offset[{0, 0}, {0, -3792618000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3792618000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3792618000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3792618000}]}, {
                 Offset[{-3.2, 0}, {2, -3792618000}], 
                 Offset[{1.5, 3.2}, {2, -3792618000}], 
                 Offset[{1.5, -3.2}, {2, -3792618000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Saudi Arabia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3792618000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.7927608192*^9}, 
               NCache[{
                 Rational[173, 20], -3.7924751808*^9}, {
                8.65, -3.7924751808*^9}]]}}}},
          
          ImageSizeCache->{{17.1715728752538, 105.73065310389525`}, {
           76.7059625648185, 109.3628168143109}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 8 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "8", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 8, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792272400}, {
                0, -3792272400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3792272400}, 
                Offset[{0, 0}, {0, -3792272400}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3792272400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3792272400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3792272400}]}, {
                 Offset[{-3.2, 0}, {2, -3792272400}], 
                 Offset[{1.5, 3.2}, {2, -3792272400}], 
                 Offset[{1.5, -3.2}, {2, -3792272400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Italy\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3792272400}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.792426644736*^9}, 
               NCache[{
                 Rational[173, 20], -3.792118155264*^9}, {
                8.65, -3.792118155264*^9}]]}}}},
          
          ImageSizeCache->{{17.1715728752538, 78.63055448456588}, {
           48.69495786420202, 81.35181211369444}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 4 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "4", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 4, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3789594000}, {
                0, -3789594000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3789594000}, 
                Offset[{0, 0}, {0, -3789594000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3789594000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3789594000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3789594000}]}, {
                 Offset[{-3.2, 0}, {2, -3789594000}], 
                 Offset[{1.5, 3.2}, {2, -3789594000}], 
                 Offset[{1.5, -3.2}, {2, -3789594000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Taiwan\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3789594000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.7897368192*^9}, 
               NCache[{
                 Rational[173, 20], -3.7894511808*^9}, {
                8.65, -3.7894511808*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 
           79.73065310389524}, {-168.39032856576478`, -135.73347431627238`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 2 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "2", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 2, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3793482000}, 
                Offset[{0, 0}, {0, -3793482000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3793482000}]}, {
                 Offset[{-3.2, 0}, {2, -3793482000}], 
                 Offset[{1.5, 3.2}, {2, -3793482000}], 
                 Offset[{1.5, -3.2}, {2, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Nepal\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3793482000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.793636244736*^9}, 
               NCache[{
                 Rational[173, 20], -3.793327755264*^9}, {
                8.65, -3.793327755264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 78.63055448456586}, {
           146.73347431638877`, 179.39032856588116`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3790630800}, {
                0, -3790630800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3790630800}, 
                Offset[{0, 0}, {0, -3790630800}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3790630800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3790630800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3790630800}]}, {
                 Offset[{-3.2, 0}, {2, -3790630800}], 
                 Offset[{1.5, 3.2}, {2, -3790630800}], 
                 Offset[{1.5, -3.2}, {2, -3790630800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Vietnam\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3790630800}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.7907736192*^9}, 
               NCache[{
                 Rational[173, 20], -3.7904879808*^9}, {
                8.65, -3.7904879808*^9}]]}}}},
          
          ImageSizeCache->{{17.1715728752538, 
           84.73065310389525}, {-84.35731446385715, -51.70046021436475}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 14 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3791754000}, {
                0, -3791754000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3791754000}, 
                Offset[{0, 0}, {0, -3791754000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3791754000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3791754000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3791754000}]}, {
                 Offset[{-3.2, 0}, {2, -3791754000}], 
                 Offset[{1.5, 3.2}, {2, -3791754000}], 
                 Offset[{1.5, -3.2}, {2, -3791754000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Japan\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3791754000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.791908244736*^9}, 
               NCache[{
                 Rational[173, 20], -3.791599755264*^9}, {
                8.65, -3.791599755264*^9}]]}}}},
          
          ImageSizeCache->{{17.17157287525381, 78.63055448456586}, {
           6.678450813190032, 39.335305062682416`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 27 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "27", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 27, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], 
        "Tooltip"]& ]}}, {{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}, {}}}},
  AspectRatio->0.4,
  Axes->{False, False},
  AxesOrigin->{0, 0},
  Frame->{{True, None}, {None, None}},
  FrameTicks->FrontEndValueCache[{{Charting`getDateTicks[
       Charting`FindTicks[{-1, 0}, {1, 0}][Automatic], {Automatic}, 
       (Map[DateList, -Reverse[{
           SlotSequence[1]}]]& )[
        SlotSequence[1]], None, 6, {{0.0048, 0}, {0.0024, 0}}, Automatic]& , 
      Automatic}, {None, None}}, {{{{-3.7868256*^9, 
        FormBox["\"Jan\"", TraditionalForm], {0.0048, 0.}}, {-3.789504*^9, 
        FormBox["\"Feb\"", TraditionalForm], {0.0048, 0.}}, {-3.7920096*^9, 
        FormBox["\"Mar\"", TraditionalForm], {0.0048, 0.}}, {-3.794688*^9, 
        FormBox["\"Apr\"", TraditionalForm], {0.0048, 0.}}, {-3.7907136*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.0024, 
        0.}}, {-3.7932192*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.0024, 0.}}}, 
      Automatic}, {None, None}}],
  GridLines->FrontEndValueCache[{{}, (Transpose[{#, 
       Table[
        Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], {
         Length[#]}]}]& )[
      Part[
       Select[
        (Charting`getDateTicks[
         Charting`FindTicks[{-1, 0}, {1, 0}][Automatic], {Automatic}, 
         (Map[DateList, -Reverse[{
             SlotSequence[1]}]]& )[
          SlotSequence[1]], {{None, 
           Scaled[0.05]}, {
           Scaled[0.06], 
           Scaled[0.06]}}, 6, {{0.0048, 0}, {0.0024, 0}}, Automatic]& )[
         SlotSequence[1]], And[
         FreeQ[#, 
          Alternatives["", 
           Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
       1]]& }, {{}, {{-3.7868256*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.789504*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.7920096*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.794688*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.79728*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}}}],
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  ImageSize->{Automatic, 500},
  PlotLabel->FormBox[
   "\"Start of closing of educational institutions\"", TraditionalForm],
  PlotRange->{{0, All}, {All, All}},
  PlotRangePadding->{{None, 
     Scaled[0.05]}, {
     Scaled[0.06], 
     Scaled[0.06]}},
  Ticks->{None, {{-3.7868256*^9, 
      FormBox["\"Jan\"", TraditionalForm], {0.0048, 0}}, {-3.789504*^9, 
      FormBox["\"Feb\"", TraditionalForm], {0.0048, 0}}, {-3.7920096*^9, 
      FormBox["\"Mar\"", TraditionalForm], {0.0048, 0}}, {-3.794688*^9, 
      FormBox["\"Apr\"", TraditionalForm], {0.0048, 0}}, {-3.7907136*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0024, 0}}, {-3.7932192*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0024, 0}}}}]], "Output",
 CellChangeTimes->{3.798558619339897*^9, 3.798558712803582*^9, 
  3.7985596469262867`*^9, 3.7985615322242002`*^9, 3.798561690101384*^9, 
  3.798737119133198*^9, 3.798737328208403*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"f760969f-f17f-4ff5-baf2-e7a6a4862581"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"social", " ", "distancing"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"responseTimelinePlot", "[", 
   RowBox[{
    TemplateBox[{
      RowBox[{"ExternalIdentifier", "[", 
        RowBox[{"\"WikidataID\"", ",", "\"Q30314010\"", ",", 
          RowBox[{"\[LeftAssociation]", 
            RowBox[{
              RowBox[{"\"Label\"", "\[Rule]", "\"social distancing\""}], ",", 
              
              RowBox[{"\"Description\"", "\[Rule]", 
                "\"reduction of human social interaction in an effort to \
prevent the spread of infectious disease\""}]}], "\[RightAssociation]"}]}], 
        "]"}], "\"Wikidata\"", "\"social distancing\"", 
      "http://www.wikidata.org/entity/Q30314010"},
     "ExternalIdentifierURL"], ",", " ", 
    "\"\<Start of closing of social distancing\>\""}], "]"}]}]], "Code",
 CellChangeTimes->{{3.79855859558349*^9, 3.798558618174584*^9}, {
  3.798558703385157*^9, 3.798558705704958*^9}, {3.798558737282316*^9, 
  3.7985587514933157`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"c290ef10-0b0a-4abb-a73d-4f65abefdde9"],

Cell[BoxData[
 GraphicsBox[{
   {AbsolutePointSize[0], Opacity[0], 
    PointBox[NCache[{{0, -3791840400}, {Rational[1, 2], -3794000400}}, {{
       0, -3791840400}, {0.5, -3794000400}}]], 
    PointBox[NCache[{{Rational[-1, 2], -3791840400}, {
       Rational[767, 5], -3794000400}}, {{-0.5, -3791840400}, {
       153.4, -3794000400}}]]}, {}, {}, {}, {
    {PointSize[0], Opacity[0], 
     PointBox[NCache[{{0, -3.79177776*^9}, {
        Rational[767, 5], -3.7940680512*^9}}, {{0, -3.79177776*^9}, {
        153.4, -3.7940680512*^9}}]]}, {
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[2861, 20], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{143.05, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[2861, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[2861, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[2861, 20], -3793136400}]}, {
                 Offset[{-3.2, 0}, {143.05, -3793136400}], 
                 Offset[{1.5, 3.2}, {143.05, -3793136400}], 
                 Offset[{1.5, -3.2}, {143.05, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Azerbaijan\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[2861, 20], -3793136400}], 
                Offset[{0, 0}, {143.05, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[2861, 20], -3.7932040512*^9}, {
                143.05, -3.7932040512*^9}], 
               NCache[{
                 Rational[1529, 10], -3.7930687488*^9}, {
                152.9, -3.7930687488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 1177.847168976115}, {
           28.710555823891355`, 61.36741007338378}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[661, 5], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{132.2, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[661, 5], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[661, 5], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[661, 5], -3793050000}]}, {
                 Offset[{-3.2, 0}, {132.2, -3793050000}], 
                 Offset[{1.5, 3.2}, {132.2, -3793050000}], 
                 Offset[{1.5, -3.2}, {132.2, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Andorra\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[661, 5], -3793050000}], 
                Offset[{0, 0}, {132.2, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[661, 5], -3.79311264*^9}, {132.2, -3.79311264*^9}], 
               NCache[{
                 Rational[2841, 20], -3.79298736*^9}, {
                142.05, -3.79298736*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 1096.8788671508216`}, {
           12.709348641125416`, 45.36620289061784}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[2427, 20], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{121.35, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[2427, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[2427, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[2427, 20], -3792963600}]}, {
                 Offset[{-3.2, 0}, {121.35, -3792963600}], 
                 Offset[{1.5, 3.2}, {121.35, -3792963600}], 
                 Offset[{1.5, -3.2}, {121.35, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Czech Republic\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[2427, 20], -3792963600}], 
                Offset[{0, 0}, {121.35, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[2427, 20], -3.7930312512*^9}, {
                121.35, -3.7930312512*^9}], 
               NCache[{
                 Rational[656, 5], -3.7928959488*^9}, {
                131.2, -3.7928959488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           1044.404779797497}, {-3.291858541640522, 29.364995707851904`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[2427, 20], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{121.35, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[2427, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[2427, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[2427, 20], -3793136400}]}, {
                 Offset[{-3.2, 0}, {121.35, -3793136400}], 
                 Offset[{1.5, 3.2}, {121.35, -3793136400}], 
                 Offset[{1.5, -3.2}, {121.35, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Syria\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[2427, 20], -3793136400}], 
                Offset[{0, 0}, {121.35, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[2427, 20], -3.7932040512*^9}, {
                121.35, -3.7932040512*^9}], 
               NCache[{
                 Rational[656, 5], -3.7930687488*^9}, {
                131.2, -3.7930687488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 1015.9105653255282`}, {
           28.710555823891355`, 61.36741007338378}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[221, 2], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{110.5, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[221, 2], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[221, 2], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[221, 2], -3792963600}]}, {
                 Offset[{-3.2, 0}, {110.5, -3792963600}], 
                 Offset[{1.5, 3.2}, {110.5, -3792963600}], 
                 Offset[{1.5, -3.2}, {110.5, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Norway\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[221, 2], -3792963600}], 
                Offset[{0, 0}, {110.5, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[221, 2], -3.7930312512*^9}, {
                110.5, -3.7930312512*^9}], 
               NCache[{
                 Rational[2407, 20], -3.7928959488*^9}, {
                120.35, -3.7928959488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           934.942263500235}, {-3.291858541640522, 29.364995707851904`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[221, 2], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{110.5, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[221, 2], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[221, 2], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[221, 2], -3793136400}]}, {
                 Offset[{-3.2, 0}, {110.5, -3793136400}], 
                 Offset[{1.5, 3.2}, {110.5, -3793136400}], 
                 Offset[{1.5, -3.2}, {110.5, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Uruguay\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[221, 2], -3793136400}], 
                Offset[{0, 0}, {110.5, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[221, 2], -3.7932040512*^9}, {
                110.5, -3.7932040512*^9}], 
               NCache[{
                 Rational[2407, 20], -3.7930687488*^9}, {
                120.35, -3.7930687488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 934.942263500235}, {
           28.710555823891355`, 61.36741007338378}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1993, 20], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{99.65, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1993, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1993, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1993, 20], -3792963600}]}, {
                 Offset[{-3.2, 0}, {99.65, -3792963600}], 
                 Offset[{1.5, 3.2}, {99.65, -3792963600}], 
                 Offset[{1.5, -3.2}, {99.65, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Faroe Islands\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1993, 20], -3792963600}], 
                Offset[{0, 0}, {99.65, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1993, 20], -3.79302624*^9}, {
                99.65, -3.79302624*^9}], 
               NCache[{
                 Rational[219, 2], -3.79290096*^9}, {
                109.5, -3.79290096*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           873.4681761469104}, {-3.291858541640522, 29.364995707851904`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1993, 20], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{99.65, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1993, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1993, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1993, 20], -3793136400}]}, {
                 Offset[{-3.2, 0}, {99.65, -3793136400}], 
                 Offset[{1.5, 3.2}, {99.65, -3793136400}], 
                 Offset[{1.5, -3.2}, {99.65, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Jordan\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1993, 20], -3793136400}], 
                Offset[{0, 0}, {99.65, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1993, 20], -3.79319904*^9}, {
                99.65, -3.79319904*^9}], 
               NCache[{
                 Rational[219, 2], -3.79307376*^9}, {
                109.5, -3.79307376*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 853.9739616749416}, {
           28.710555823891355`, 61.36741007338378}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[444, 5], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{88.8, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[444, 5], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[444, 5], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[444, 5], -3792963600}]}, {
                 Offset[{-3.2, 0}, {88.8, -3792963600}], 
                 Offset[{1.5, 3.2}, {88.8, -3792963600}], 
                 Offset[{1.5, -3.2}, {88.8, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Netherlands\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[444, 5], -3792963600}], 
                Offset[{0, 0}, {88.8, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[444, 5], -3.79302624*^9}, {88.8, -3.79302624*^9}], 
               NCache[{
                 Rational[1973, 20], -3.79290096*^9}, {
                98.65, -3.79290096*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           785.499874321617}, {-3.291858541640522, 29.364995707851904`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[444, 5], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{88.8, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[444, 5], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[444, 5], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[444, 5], -3793136400}]}, {
                 Offset[{-3.2, 0}, {88.8, -3793136400}], 
                 Offset[{1.5, 3.2}, {88.8, -3793136400}], 
                 Offset[{1.5, -3.2}, {88.8, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Monaco\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[444, 5], -3793136400}], 
                Offset[{0, 0}, {88.8, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[444, 5], -3.79319904*^9}, {88.8, -3.79319904*^9}], 
               NCache[{
                 Rational[1973, 20], -3.79307376*^9}, {
                98.65, -3.79307376*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 773.0056598496483}, {
           28.710555823891355`, 61.36741007338378}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793395600}, {
                0, -3793395600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1559, 20], -3793395600}, 
                 Offset[{0, 0}, {0, -3793395600}]}, {{77.95, -3793395600}, 
                 Offset[{0, 0}, {0, -3793395600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1559, 20], -3793395600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1559, 20], -3793395600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1559, 20], -3793395600}]}, {
                 Offset[{-3.2, 0}, {77.95, -3793395600}], 
                 Offset[{1.5, 3.2}, {77.95, -3793395600}], 
                 Offset[{1.5, -3.2}, {77.95, -3793395600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Zambia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1559, 20], -3793395600}], 
                Offset[{0, 0}, {77.95, -3793395600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1559, 20], -3.79345824*^9}, {
                77.95, -3.79345824*^9}], 
               NCache[{
                 Rational[439, 5], -3.79333296*^9}, {
                87.8, -3.79333296*^9}]]}}}},
          ImageSizeCache->{{30.171572875253787`, 692.037358024355}, {
           76.71417737207275, 109.37103162156518`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 17 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "17", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 17, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1559, 20], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{77.95, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1559, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1559, 20], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1559, 20], -3792963600}]}, {
                 Offset[{-3.2, 0}, {77.95, -3792963600}], 
                 Offset[{1.5, 3.2}, {77.95, -3792963600}], 
                 Offset[{1.5, -3.2}, {77.95, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Colombia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1559, 20], -3792963600}], 
                Offset[{0, 0}, {77.95, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1559, 20], -3.79302624*^9}, {
                77.95, -3.79302624*^9}], 
               NCache[{
                 Rational[439, 5], -3.79290096*^9}, {
                87.8, -3.79290096*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           692.037358024355}, {-3.291858541640522, 29.364995707851904`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1559, 20], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{77.95, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[1559, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[1559, 20], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[1559, 20], -3793136400}]}, {
                 Offset[{-3.2, 0}, {77.95, -3793136400}], 
                 Offset[{1.5, 3.2}, {77.95, -3793136400}], 
                 Offset[{1.5, -3.2}, {77.95, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Ecuador\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1559, 20], -3793136400}], 
                Offset[{0, 0}, {77.95, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[1559, 20], -3.79319904*^9}, {
                77.95, -3.79319904*^9}], 
               NCache[{
                 Rational[439, 5], -3.79307376*^9}, {
                87.8, -3.79307376*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 692.037358024355}, {
           28.710555823891355`, 61.36741007338378}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793914000}, {
                0, -3793914000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[671, 10], -3793914000}, 
                 Offset[{0, 0}, {0, -3793914000}]}, {{67.1, -3793914000}, 
                 Offset[{0, 0}, {0, -3793914000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[671, 10], -3793914000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[671, 10], -3793914000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[671, 10], -3793914000}]}, {
                 Offset[{-3.2, 0}, {67.1, -3793914000}], 
                 Offset[{1.5, 3.2}, {67.1, -3793914000}], 
                 Offset[{1.5, -3.2}, {67.1, -3793914000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Qatar\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[671, 10], -3793914000}], 
                Offset[{0, 0}, {67.1, -3793914000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[671, 10], -3.79397664*^9}, {67.1, -3.79397664*^9}], 
               NCache[{
                 Rational[1539, 20], -3.79385136*^9}, {
                76.95, -3.79385136*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 611.0690561990616}, {
           172.72142046855194`, 205.3782747180444}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 23 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "23", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 23, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[671, 10], -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}, {{67.1, -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[671, 10], -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[671, 10], -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[671, 10], -3793482000}]}, {
                 Offset[{-3.2, 0}, {67.1, -3793482000}], 
                 Offset[{1.5, 3.2}, {67.1, -3793482000}], 
                 Offset[{1.5, -3.2}, {67.1, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Greece\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[671, 10], -3793482000}], 
                Offset[{0, 0}, {67.1, -3793482000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[671, 10], -3.79354464*^9}, {67.1, -3.79354464*^9}], 
               NCache[{
                 Rational[1539, 20], -3.79341936*^9}, {
                76.95, -3.79341936*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 611.0690561990616}, {
           92.71538455483869, 125.37223880433112`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[671, 10], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{67.1, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[671, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[671, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[671, 10], -3793309200}]}, {
                 Offset[{-3.2, 0}, {67.1, -3793309200}], 
                 Offset[{1.5, 3.2}, {67.1, -3793309200}], 
                 Offset[{1.5, -3.2}, {67.1, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Ethiopia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[671, 10], -3793309200}], 
                Offset[{0, 0}, {67.1, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[671, 10], -3.7933768512*^9}, {
                67.1, -3.7933768512*^9}], 
               NCache[{
                 Rational[1539, 20], -3.7932415488*^9}, {
                76.95, -3.7932415488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 611.0690561990616}, {
           60.71297018930681, 93.36982443879924}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[671, 10], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{67.1, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[671, 10], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[671, 10], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[671, 10], -3793050000}]}, {
                 Offset[{-3.2, 0}, {67.1, -3793050000}], 
                 Offset[{1.5, 3.2}, {67.1, -3793050000}], 
                 Offset[{1.5, -3.2}, {67.1, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Kuwait\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[671, 10], -3793050000}], 
                Offset[{0, 0}, {67.1, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[671, 10], -3.79311264*^9}, {67.1, -3.79311264*^9}], 
               NCache[{
                 Rational[1539, 20], -3.79298736*^9}, {
                76.95, -3.79298736*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 611.0690561990616}, {
           12.709348641125416`, 45.36620289061784}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793827600}, {
                0, -3793827600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[225, 4], -3793827600}, 
                 Offset[{0, 0}, {0, -3793827600}]}, {{56.25, -3793827600}, 
                 Offset[{0, 0}, {0, -3793827600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[225, 4], -3793827600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[225, 4], -3793827600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[225, 4], -3793827600}]}, {
                 Offset[{-3.2, 0}, {56.25, -3793827600}], 
                 Offset[{1.5, 3.2}, {56.25, -3793827600}], 
                 Offset[{1.5, -3.2}, {56.25, -3793827600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Democratic Republic of the Congo\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[225, 4], -3793827600}], 
                Offset[{0, 0}, {56.25, -3793827600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[225, 4], -3.7938952512*^9}, {
                56.25, -3.7938952512*^9}], 
               NCache[{
                 Rational[661, 10], -3.7937599488*^9}, {
                66.1, -3.7937599488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 642.594968845737}, {
           156.720213285786, 189.37706753527846`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 22 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "22", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 22, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[225, 4], -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}, {{56.25, -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[225, 4], -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[225, 4], -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[225, 4], -3793482000}]}, {
                 Offset[{-3.2, 0}, {56.25, -3793482000}], 
                 Offset[{1.5, 3.2}, {56.25, -3793482000}], 
                 Offset[{1.5, -3.2}, {56.25, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Gambia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[225, 4], -3793482000}], 
                Offset[{0, 0}, {56.25, -3793482000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[225, 4], -3.79354464*^9}, {56.25, -3.79354464*^9}], 
               NCache[{
                 Rational[661, 10], -3.79341936*^9}, {
                66.1, -3.79341936*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 530.1007543737682}, {
           92.71538455483869, 125.37223880433112`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[225, 4], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{56.25, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[225, 4], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[225, 4], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[225, 4], -3793309200}]}, {
                 Offset[{-3.2, 0}, {56.25, -3793309200}], 
                 Offset[{1.5, 3.2}, {56.25, -3793309200}], 
                 Offset[{1.5, -3.2}, {56.25, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Venezuela\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[225, 4], -3793309200}], 
                Offset[{0, 0}, {56.25, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[225, 4], -3.79337184*^9}, {56.25, -3.79337184*^9}], 
               NCache[{
                 Rational[661, 10], -3.79324656*^9}, {
                66.1, -3.79324656*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 530.1007543737682}, {
           60.71297018930681, 93.36982443879924}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[225, 4], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{56.25, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[225, 4], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[225, 4], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[225, 4], -3793050000}]}, {
                 Offset[{-3.2, 0}, {56.25, -3793050000}], 
                 Offset[{1.5, 3.2}, {56.25, -3793050000}], 
                 Offset[{1.5, -3.2}, {56.25, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Estonia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[225, 4], -3793050000}], 
                Offset[{0, 0}, {56.25, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[225, 4], -3.79311264*^9}, {56.25, -3.79311264*^9}], 
               NCache[{
                 Rational[661, 10], -3.79298736*^9}, {
                66.1, -3.79298736*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 530.1007543737682}, {
           12.709348641125416`, 45.36620289061784}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793827600}, {
                0, -3793827600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[227, 5], -3793827600}, 
                 Offset[{0, 0}, {0, -3793827600}]}, {{45.4, -3793827600}, 
                 Offset[{0, 0}, {0, -3793827600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[227, 5], -3793827600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[227, 5], -3793827600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[227, 5], -3793827600}]}, {
                 Offset[{-3.2, 0}, {45.4, -3793827600}], 
                 Offset[{1.5, 3.2}, {45.4, -3793827600}], 
                 Offset[{1.5, -3.2}, {45.4, -3793827600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Kenya\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[227, 5], -3793827600}], 
                Offset[{0, 0}, {45.4, -3793827600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[227, 5], -3.7938952512*^9}, {
                45.4, -3.7938952512*^9}], 
               NCache[{
                 Rational[221, 4], -3.7937599488*^9}, {
                55.25, -3.7937599488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 449.13245254847493`}, {
           156.720213285786, 189.37706753527846`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 22 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "22", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 22, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792877200}, {
                0, -3792877200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[227, 5], -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}, {{45.4, -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[227, 5], -3792877200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[227, 5], -3792877200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[227, 5], -3792877200}]}, {
                 Offset[{-3.2, 0}, {45.4, -3792877200}], 
                 Offset[{1.5, 3.2}, {45.4, -3792877200}], 
                 Offset[{1.5, -3.2}, {45.4, -3792877200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Hungary\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[227, 5], -3792877200}], 
                Offset[{0, 0}, {45.4, -3792877200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[227, 5], -3.7929448512*^9}, {
                45.4, -3.7929448512*^9}], 
               NCache[{
                 Rational[221, 4], -3.7928095488*^9}, {
                55.25, -3.7928095488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           449.13245254847493`}, {-19.29306572440646, 13.363788525085965`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 11 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "11", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 11, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793568400}, {
                0, -3793568400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[227, 5], -3793568400}, 
                 Offset[{0, 0}, {0, -3793568400}]}, {{45.4, -3793568400}, 
                 Offset[{0, 0}, {0, -3793568400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[227, 5], -3793568400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[227, 5], -3793568400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[227, 5], -3793568400}]}, {
                 Offset[{-3.2, 0}, {45.4, -3793568400}], 
                 Offset[{1.5, 3.2}, {45.4, -3793568400}], 
                 Offset[{1.5, -3.2}, {45.4, -3793568400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Somalia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[227, 5], -3793568400}], 
                Offset[{0, 0}, {45.4, -3793568400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[227, 5], -3.79363104*^9}, {45.4, -3.79363104*^9}], 
               NCache[{
                 Rational[221, 4], -3.79350576*^9}, {
                55.25, -3.79350576*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 449.13245254847493`}, {
           108.71659173760463`, 141.37344598709706`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 19 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "19", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 19, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793222800}, {
                0, -3793222800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[227, 5], -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}, {{45.4, -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[227, 5], -3793222800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[227, 5], -3793222800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[227, 5], -3793222800}]}, {
                 Offset[{-3.2, 0}, {45.4, -3793222800}], 
                 Offset[{1.5, 3.2}, {45.4, -3793222800}], 
                 Offset[{1.5, -3.2}, {45.4, -3793222800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Ghana\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[227, 5], -3793222800}], 
                Offset[{0, 0}, {45.4, -3793222800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[227, 5], -3.79328544*^9}, {45.4, -3.79328544*^9}], 
               NCache[{
                 Rational[221, 4], -3.79316016*^9}, {
                55.25, -3.79316016*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 449.13245254847493`}, {
           44.711763006657286`, 77.36861725614972}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 15 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "15", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 15, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793395600}, {
                0, -3793395600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[227, 5], -3793395600}, 
                 Offset[{0, 0}, {0, -3793395600}]}, {{45.4, -3793395600}, 
                 Offset[{0, 0}, {0, -3793395600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[227, 5], -3793395600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[227, 5], -3793395600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[227, 5], -3793395600}]}, {
                 Offset[{-3.2, 0}, {45.4, -3793395600}], 
                 Offset[{1.5, 3.2}, {45.4, -3793395600}], 
                 Offset[{1.5, -3.2}, {45.4, -3793395600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Liechtenstein\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[227, 5], -3793395600}], 
                Offset[{0, 0}, {45.4, -3793395600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[227, 5], -3.79345824*^9}, {45.4, -3.79345824*^9}], 
               NCache[{
                 Rational[221, 4], -3.79333296*^9}, {
                55.25, -3.79333296*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 449.13245254847493`}, {
           76.71417737207275, 109.37103162156518`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 17 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "17", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 17, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[227, 5], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{45.4, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[227, 5], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[227, 5], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[227, 5], -3793050000}]}, {
                 Offset[{-3.2, 0}, {45.4, -3793050000}], 
                 Offset[{1.5, 3.2}, {45.4, -3793050000}], 
                 Offset[{1.5, -3.2}, {45.4, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Algeria\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[227, 5], -3793050000}], 
                Offset[{0, 0}, {45.4, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[227, 5], -3.7931176512*^9}, {
                45.4, -3.7931176512*^9}], 
               NCache[{
                 Rational[221, 4], -3.7929823488*^9}, {
                55.25, -3.7929823488*^9}]]}}}},
          ImageSizeCache->{{30.171572875253787`, 449.13245254847493`}, {
           12.709348641125416`, 45.36620289061784}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793654800}, {
                0, -3793654800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[691, 20], -3793654800}, 
                 Offset[{0, 0}, {0, -3793654800}]}, {{34.55, -3793654800}, 
                 Offset[{0, 0}, {0, -3793654800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[691, 20], -3793654800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[691, 20], -3793654800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[691, 20], -3793654800}]}, {
                 Offset[{-3.2, 0}, {34.55, -3793654800}], 
                 Offset[{1.5, 3.2}, {34.55, -3793654800}], 
                 Offset[{1.5, -3.2}, {34.55, -3793654800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Saint Lucia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[691, 20], -3793654800}], 
                Offset[{0, 0}, {34.55, -3793654800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[691, 20], -3.79371744*^9}, {34.55, -3.79371744*^9}], 
               NCache[{
                 Rational[222, 5], -3.79359216*^9}, {
                44.4, -3.79359216*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 368.1641507231816}, {
           124.71779892037057`, 157.374653169863}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 20 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "20", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 20, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792877200}, {
                0, -3792877200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[691, 20], -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}, {{34.55, -3792877200}, 
                 Offset[{0, 0}, {0, -3792877200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[691, 20], -3792877200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[691, 20], -3792877200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[691, 20], -3792877200}]}, {
                 Offset[{-3.2, 0}, {34.55, -3792877200}], 
                 Offset[{1.5, 3.2}, {34.55, -3792877200}], 
                 Offset[{1.5, -3.2}, {34.55, -3792877200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Israel\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[691, 20], -3792877200}], 
                Offset[{0, 0}, {34.55, -3792877200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[691, 20], -3.79293984*^9}, {34.55, -3.79293984*^9}], 
               NCache[{
                 Rational[222, 5], -3.79281456*^9}, {
                44.4, -3.79281456*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           368.1641507231816}, {-19.29306572440646, 13.363788525085965`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 11 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "11", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 11, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[691, 20], -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}, {{34.55, -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[691, 20], -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[691, 20], -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[691, 20], -3793482000}]}, {
                 Offset[{-3.2, 0}, {34.55, -3793482000}], 
                 Offset[{1.5, 3.2}, {34.55, -3793482000}], 
                 Offset[{1.5, -3.2}, {34.55, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Mali\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[691, 20], -3793482000}], 
                Offset[{0, 0}, {34.55, -3793482000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[691, 20], -3.79354464*^9}, {34.55, -3.79354464*^9}], 
               NCache[{
                 Rational[222, 5], -3.79341936*^9}, {
                44.4, -3.79341936*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 368.1641507231816}, {
           92.71538455483869, 125.37223880433112`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793914000}, {
                0, -3793914000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[691, 20], -3793914000}, 
                 Offset[{0, 0}, {0, -3793914000}]}, {{34.55, -3793914000}, 
                 Offset[{0, 0}, {0, -3793914000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[691, 20], -3793914000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[691, 20], -3793914000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[691, 20], -3793914000}]}, {
                 Offset[{-3.2, 0}, {34.55, -3793914000}], 
                 Offset[{1.5, 3.2}, {34.55, -3793914000}], 
                 Offset[{1.5, -3.2}, {34.55, -3793914000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Zimbabwe\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[691, 20], -3793914000}], 
                Offset[{0, 0}, {34.55, -3793914000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[691, 20], -3.79397664*^9}, {34.55, -3.79397664*^9}], 
               NCache[{
                 Rational[222, 5], -3.79385136*^9}, {
                44.4, -3.79385136*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 368.1641507231816}, {
           172.72142046855194`, 205.3782747180444}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 23 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "23", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 23, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[691, 20], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{34.55, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[691, 20], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[691, 20], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[691, 20], -3793309200}]}, {
                 Offset[{-3.2, 0}, {34.55, -3793309200}], 
                 Offset[{1.5, 3.2}, {34.55, -3793309200}], 
                 Offset[{1.5, -3.2}, {34.55, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Jamaica\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[691, 20], -3793309200}], 
                Offset[{0, 0}, {34.55, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[691, 20], -3.79337184*^9}, {34.55, -3.79337184*^9}], 
               NCache[{
                 Rational[222, 5], -3.79324656*^9}, {
                44.4, -3.79324656*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 368.1641507231816}, {
           60.71297018930681, 93.36982443879924}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[691, 20], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{34.55, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[691, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[691, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[691, 20], -3793050000}]}, {
                 Offset[{-3.2, 0}, {34.55, -3793050000}], 
                 Offset[{1.5, 3.2}, {34.55, -3793050000}], 
                 Offset[{1.5, -3.2}, {34.55, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Chile\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[691, 20], -3793050000}], 
                Offset[{0, 0}, {34.55, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[691, 20], -3.79311264*^9}, {34.55, -3.79311264*^9}], 
               NCache[{
                 Rational[222, 5], -3.79298736*^9}, {
                44.4, -3.79298736*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 368.1641507231816}, {
           12.709348641125416`, 45.36620289061784}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793741200}, {
                0, -3793741200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[237, 10], -3793741200}, 
                 Offset[{0, 0}, {0, -3793741200}]}, {{23.7, -3793741200}, 
                 Offset[{0, 0}, {0, -3793741200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[237, 10], -3793741200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[237, 10], -3793741200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[237, 10], -3793741200}]}, {
                 Offset[{-3.2, 0}, {23.7, -3793741200}], 
                 Offset[{1.5, 3.2}, {23.7, -3793741200}], 
                 Offset[{1.5, -3.2}, {23.7, -3793741200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Egypt\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[237, 10], -3793741200}], 
                Offset[{0, 0}, {23.7, -3793741200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[237, 10], -3.7938088512*^9}, {
                23.7, -3.7938088512*^9}], 
               NCache[{
                 Rational[671, 20], -3.7936735488*^9}, {
                33.55, -3.7936735488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 287.1958488978882}, {
           140.71900610302006`, 173.37586035251252`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 21 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "21", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 21, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[237, 10], -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}, {{23.7, -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[237, 10], -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[237, 10], -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[237, 10], -3793482000}]}, {
                 Offset[{-3.2, 0}, {23.7, -3793482000}], 
                 Offset[{1.5, 3.2}, {23.7, -3793482000}], 
                 Offset[{1.5, -3.2}, {23.7, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Uganda\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[237, 10], -3793482000}], 
                Offset[{0, 0}, {23.7, -3793482000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[237, 10], -3.7935496512*^9}, {
                23.7, -3.7935496512*^9}], 
               NCache[{
                 Rational[671, 20], -3.7934143488*^9}, {
                33.55, -3.7934143488*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 287.19584889788825`}, {
           92.71538455483869, 125.37223880433112`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3794000400}, {
                0, -3794000400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[237, 10], -3794000400}, 
                 Offset[{0, 0}, {0, -3794000400}]}, {{23.7, -3794000400}, 
                 Offset[{0, 0}, {0, -3794000400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[237, 10], -3794000400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[237, 10], -3794000400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[237, 10], -3794000400}]}, {
                 Offset[{-3.2, 0}, {23.7, -3794000400}], 
                 Offset[{1.5, 3.2}, {23.7, -3794000400}], 
                 Offset[{1.5, -3.2}, {23.7, -3794000400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Iceland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[237, 10], -3794000400}], 
                Offset[{0, 0}, {23.7, -3794000400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[237, 10], -3.79406304*^9}, {23.7, -3.79406304*^9}], 
               NCache[{
                 Rational[671, 20], -3.79393776*^9}, {
                33.55, -3.79393776*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 287.1958488978882}, {
           188.72262765131788`, 221.37948190081033`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 24 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "24", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 24, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[237, 10], -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}, {{23.7, -3793309200}, 
                 Offset[{0, 0}, {0, -3793309200}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[237, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[237, 10], -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[237, 10], -3793309200}]}, {
                 Offset[{-3.2, 0}, {23.7, -3793309200}], 
                 Offset[{1.5, 3.2}, {23.7, -3793309200}], 
                 Offset[{1.5, -3.2}, {23.7, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"New Zealand\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[237, 10], -3793309200}], 
                Offset[{0, 0}, {23.7, -3793309200}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[237, 10], -3.79337184*^9}, {23.7, -3.79337184*^9}], 
               NCache[{
                 Rational[671, 20], -3.79324656*^9}, {
                33.55, -3.79324656*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 287.19584889788825`}, {
           60.71297018930681, 93.36982443879924}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792963600}, {
                0, -3792963600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[237, 10], -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}, {{23.7, -3792963600}, 
                 Offset[{0, 0}, {0, -3792963600}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[237, 10], -3792963600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[237, 10], -3792963600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[237, 10], -3792963600}]}, {
                 Offset[{-3.2, 0}, {23.7, -3792963600}], 
                 Offset[{1.5, 3.2}, {23.7, -3792963600}], 
                 Offset[{1.5, -3.2}, {23.7, -3792963600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Poland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[237, 10], -3792963600}], 
                Offset[{0, 0}, {23.7, -3792963600}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[237, 10], -3.79302624*^9}, {23.7, -3.79302624*^9}], 
               NCache[{
                 Rational[671, 20], -3.79290096*^9}, {
                33.55, -3.79290096*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 
           287.1958488978882}, {-3.291858541640522, 29.364995707851904`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Thu 12 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "12", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 12, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793136400}, {
                0, -3793136400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[237, 10], -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}, {{23.7, -3793136400}, 
                 Offset[{0, 0}, {0, -3793136400}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[237, 10], -3793136400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[237, 10], -3793136400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[237, 10], -3793136400}]}, {
                 Offset[{-3.2, 0}, {23.7, -3793136400}], 
                 Offset[{1.5, 3.2}, {23.7, -3793136400}], 
                 Offset[{1.5, -3.2}, {23.7, -3793136400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Saudi Arabia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[237, 10], -3793136400}], 
                Offset[{0, 0}, {23.7, -3793136400}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[237, 10], -3.79319904*^9}, {23.7, -3.79319904*^9}], 
               NCache[{
                 Rational[671, 20], -3.79307376*^9}, {
                33.55, -3.79307376*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 287.19584889788825`}, {
           28.710555823891355`, 61.36741007338378}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sat 14 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "14", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 14, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793654800}, {
                0, -3793654800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[257, 20], -3793654800}, 
                 Offset[{0, 0}, {0, -3793654800}]}, {{12.85, -3793654800}, 
                 Offset[{0, 0}, {0, -3793654800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[257, 20], -3793654800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[257, 20], -3793654800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[257, 20], -3793654800}]}, {
                 Offset[{-3.2, 0}, {12.85, -3793654800}], 
                 Offset[{1.5, 3.2}, {12.85, -3793654800}], 
                 Offset[{1.5, -3.2}, {12.85, -3793654800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Mauritius\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[257, 20], -3793654800}], 
                Offset[{0, 0}, {12.85, -3793654800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[257, 20], -3.79371744*^9}, {12.85, -3.79371744*^9}], 
               NCache[{
                 Rational[227, 10], -3.79359216*^9}, {
                22.7, -3.79359216*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 206.22754707259494`}, {
           124.71779892037058`, 157.374653169863}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 20 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "20", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 20, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[257, 20], -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}, {{12.85, -3793482000}, 
                 Offset[{0, 0}, {0, -3793482000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[257, 20], -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[257, 20], -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[257, 20], -3793482000}]}, {
                 Offset[{-3.2, 0}, {12.85, -3793482000}], 
                 Offset[{1.5, 3.2}, {12.85, -3793482000}], 
                 Offset[{1.5, -3.2}, {12.85, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Denmark\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[257, 20], -3793482000}], 
                Offset[{0, 0}, {12.85, -3793482000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[257, 20], -3.79354464*^9}, {12.85, -3.79354464*^9}], 
               NCache[{
                 Rational[227, 10], -3.79341936*^9}, {
                22.7, -3.79341936*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 206.22754707259492`}, {
           92.71538455483869, 125.37223880433112`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792790800}, {
                0, -3792790800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[257, 20], -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}, {{12.85, -3792790800}, 
                 Offset[{0, 0}, {0, -3792790800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[257, 20], -3792790800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[257, 20], -3792790800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[257, 20], -3792790800}]}, {
                 Offset[{-3.2, 0}, {12.85, -3792790800}], 
                 Offset[{1.5, 3.2}, {12.85, -3792790800}], 
                 Offset[{1.5, -3.2}, {12.85, -3792790800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Paraguay\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[257, 20], -3792790800}], 
                Offset[{0, 0}, {12.85, -3792790800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[257, 20], -3.7928584512*^9}, {
                12.85, -3.7928584512*^9}], 
               NCache[{
                 Rational[227, 10], -3.7927231488*^9}, {
                22.7, -3.7927231488*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 
           206.22754707259494`}, {-35.29427290705596, -2.637418657563579}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 10 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "10", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 10, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793222800}, {
                0, -3793222800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[257, 20], -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}, {{12.85, -3793222800}, 
                 Offset[{0, 0}, {0, -3793222800}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[257, 20], -3793222800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[257, 20], -3793222800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[257, 20], -3793222800}]}, {
                 Offset[{-3.2, 0}, {12.85, -3793222800}], 
                 Offset[{1.5, 3.2}, {12.85, -3793222800}], 
                 Offset[{1.5, -3.2}, {12.85, -3793222800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Republic of Ireland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[257, 20], -3793222800}], 
                Offset[{0, 0}, {12.85, -3793222800}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[257, 20], -3.7932904512*^9}, {
                12.85, -3.7932904512*^9}], 
               NCache[{
                 Rational[227, 10], -3.7931551488*^9}, {
                22.7, -3.7931551488*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 249.72176154456363`}, {
           44.71176300665728, 77.36861725614969}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 15 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "15", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 15, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793914000}, {
                0, -3793914000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[257, 20], -3793914000}, 
                 Offset[{0, 0}, {0, -3793914000}]}, {{12.85, -3793914000}, 
                 Offset[{0, 0}, {0, -3793914000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[257, 20], -3793914000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[257, 20], -3793914000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[257, 20], -3793914000}]}, {
                 Offset[{-3.2, 0}, {12.85, -3793914000}], 
                 Offset[{1.5, 3.2}, {12.85, -3793914000}], 
                 Offset[{1.5, -3.2}, {12.85, -3793914000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The United Arab Emirates\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[257, 20], -3793914000}], 
                Offset[{0, 0}, {12.85, -3793914000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[257, 20], -3.79397664*^9}, {12.85, -3.79397664*^9}], 
               NCache[{
                 Rational[227, 10], -3.79385136*^9}, {
                22.7, -3.79385136*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 259.7217615445636}, {
           172.72142046855194`, 205.3782747180444}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 23 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "23", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 23, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[257, 20], -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}, {{12.85, -3793050000}, 
                 Offset[{0, 0}, {0, -3793050000}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {
                   Rational[257, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {
                   Rational[257, 20], -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {
                   Rational[257, 20], -3793050000}]}, {
                 Offset[{-3.2, 0}, {12.85, -3793050000}], 
                 Offset[{1.5, 3.2}, {12.85, -3793050000}], 
                 Offset[{1.5, -3.2}, {12.85, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"France\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[257, 20], -3793050000}], 
                Offset[{0, 0}, {12.85, -3793050000}]], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{
                 Rational[257, 20], -3.79311264*^9}, {12.85, -3.79311264*^9}], 
               NCache[{
                 Rational[227, 10], -3.79298736*^9}, {
                22.7, -3.79298736*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 206.22754707259494`}, {
           12.709348641125437`, 45.36620289061782}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793827600}, {
                0, -3793827600}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3793827600}, 
                Offset[{0, 0}, {0, -3793827600}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3793827600}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3793827600}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3793827600}]}, {
                 Offset[{-3.2, 0}, {2, -3793827600}], 
                 Offset[{1.5, 3.2}, {2, -3793827600}], 
                 Offset[{1.5, -3.2}, {2, -3793827600}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Bahrain\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3793827600}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.79389024*^9}, 
               NCache[{
                 Rational[237, 20], -3.79376496*^9}, {
                11.85, -3.79376496*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 125.25924524730158`}, {
           156.72021328578603`, 189.37706753527843`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Sun 22 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "22", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 22, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793654800}, {
                0, -3793654800}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3793654800}, 
                Offset[{0, 0}, {0, -3793654800}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3793654800}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3793654800}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3793654800}]}, {
                 Offset[{-3.2, 0}, {2, -3793654800}], 
                 Offset[{1.5, 3.2}, {2, -3793654800}], 
                 Offset[{1.5, -3.2}, {2, -3793654800}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"The Bahamas\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3793654800}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.79371744*^9}, 
               NCache[{
                 Rational[237, 20], -3.79359216*^9}, {
                11.85, -3.79359216*^9}]]}}}},
          
          ImageSizeCache->{{30.171572875253787`, 125.75345971927032`}, {
           124.71779892037058`, 157.374653169863}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 20 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "20", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 20, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3791840400}, {
                0, -3791840400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3791840400}, 
                Offset[{0, 0}, {0, -3791840400}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3791840400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3791840400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3791840400}]}, {
                 Offset[{-3.2, 0}, {2, -3791840400}], 
                 Offset[{1.5, 3.2}, {2, -3791840400}], 
                 Offset[{1.5, -3.2}, {2, -3791840400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Switzerland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3791840400}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.79190304*^9}, 
               NCache[{
                 Rational[237, 20], -3.79177776*^9}, {
                11.85, -3.79177776*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 
           125.25924524730158`}, {-211.30755191724847`, \
-178.65069766775608`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 28 Feb 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "2", ",", "28", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 2, 28, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793482000}, {
                0, -3793482000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3793482000}, 
                Offset[{0, 0}, {0, -3793482000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3793482000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3793482000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3793482000}]}, {
                 Offset[{-3.2, 0}, {2, -3793482000}], 
                 Offset[{1.5, 3.2}, {2, -3793482000}], 
                 Offset[{1.5, -3.2}, {2, -3793482000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Belgium\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3793482000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.7935496512*^9}, 
               NCache[{
                 Rational[237, 20], -3.7934143488*^9}, {
                11.85, -3.7934143488*^9}]]}}}},
          
          ImageSizeCache->{{30.1715728752538, 125.25924524730159`}, {
           92.7153845548387, 125.3722388043311}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 18 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "18", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 18, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3792877200}, {
                0, -3792877200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3792877200}, 
                Offset[{0, 0}, {0, -3792877200}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3792877200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3792877200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3792877200}]}, {
                 Offset[{-3.2, 0}, {2, -3792877200}], 
                 Offset[{1.5, 3.2}, {2, -3792877200}], 
                 Offset[{1.5, -3.2}, {2, -3792877200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Sweden\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3792877200}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.79293984*^9}, 
               NCache[{
                 Rational[237, 20], -3.79281456*^9}, {
                11.85, -3.79281456*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 
           125.25924524730158`}, {-19.29306572440644, 13.363788525085944`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Wed 11 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "11", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 11, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793309200}, {
                0, -3793309200}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3793309200}, 
                Offset[{0, 0}, {0, -3793309200}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3793309200}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3793309200}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3793309200}]}, {
                 Offset[{-3.2, 0}, {2, -3793309200}], 
                 Offset[{1.5, 3.2}, {2, -3793309200}], 
                 Offset[{1.5, -3.2}, {2, -3793309200}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Finland\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3793309200}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.79337184*^9}, 
               NCache[{
                 Rational[237, 20], -3.79324656*^9}, {
                11.85, -3.79324656*^9}]]}}}},
          
          ImageSizeCache->{{30.1715728752538, 125.25924524730159`}, {
           60.71297018930681, 93.36982443879923}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Mon 16 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "16", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 16, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3793050000}, {
                0, -3793050000}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3793050000}, 
                Offset[{0, 0}, {0, -3793050000}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3793050000}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3793050000}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3793050000}]}, {
                 Offset[{-3.2, 0}, {2, -3793050000}], 
                 Offset[{1.5, 3.2}, {2, -3793050000}], 
                 Offset[{1.5, -3.2}, {2, -3793050000}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Australia\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3793050000}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.79311264*^9}, 
               NCache[{
                 Rational[237, 20], -3.79298736*^9}, {
                11.85, -3.79298736*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 125.25924524730158`}, {
           12.709348641125437`, 45.36620289061782}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Fri 13 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "13", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 13, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               
               LineBox[{{0, -3794000400}, {
                0, -3794000400}}]}}, {{}, {{{}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[{{2, -3794000400}, 
                Offset[{0, 0}, {0, -3794000400}]}], 
              PolygonBox[
               NCache[{
                 Offset[{
                   Rational[-16, 5], 0}, {2, -3794000400}], 
                 Offset[{1.5, 
                   Rational[16, 5]}, {2, -3794000400}], 
                 Offset[{1.5, 
                   Rational[-16, 5]}, {2, -3794000400}]}, {
                 Offset[{-3.2, 0}, {2, -3794000400}], 
                 Offset[{1.5, 3.2}, {2, -3794000400}], 
                 Offset[{1.5, -3.2}, {2, -3794000400}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox["\"Singapore\"", {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               Offset[{0, 0}, {2, -3794000400}], Left, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[{2, -3.7940680512*^9}, 
               NCache[{
                 Rational[237, 20], -3.7939327488*^9}, {
                11.85, -3.7939327488*^9}]]}}}},
          
          ImageSizeCache->{{30.17157287525381, 125.25924524730158`}, {
           188.7226276513179, 221.3794819008103}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{
                 StyleBox[
                 "\"Hour beginning: \"", FontColor -> GrayLevel[0.5], 
                  FontWeight -> Plain], "\"Tue 24 Mar 2020 1 am\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"2020", ",", "3", ",", "24", ",", "1"}], "}"}], 
                   ",", "\"Hour\"", ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{2020, 3, 24, 1}, "Hour", "Gregorian", 1., {
             "DateTimeShort"}]}}, Alignment -> Right], {}], 
        "Tooltip"]& ]}}, {{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {}}}},
  AspectRatio->0.4,
  Axes->{False, False},
  AxesOrigin->{0, 0},
  Frame->{{True, None}, {None, None}},
  FrameTicks->FrontEndValueCache[{{Charting`getDateTicks[
       Charting`FindTicks[{-1, 0}, {1, 0}][Automatic], {Automatic}, 
       (Map[DateList, -Reverse[{
           SlotSequence[1]}]]& )[
        SlotSequence[1]], None, 6, {{0.0048, 0}, {0.0024, 0}}, Automatic]& , 
      Automatic}, {None, None}}, {{{{-3.792096*^9, 
        FormBox["\"Mar 02\"", TraditionalForm], {0.0031999999999999997`, 
        0.}}, {-3.7927008*^9, 
        FormBox["\"Mar 09\"", TraditionalForm], {0.0031999999999999997`, 
        0.}}, {-3.7933056*^9, 
        FormBox["\"Mar 16\"", TraditionalForm], {0.0031999999999999997`, 
        0.}}, {-3.7939104*^9, 
        FormBox["\"Mar 23\"", TraditionalForm], {0.0031999999999999997`, 
        0.}}, {-3.7945152*^9, 
        FormBox["\"Mar 30\"", TraditionalForm], {0.0031999999999999997`, 
        0.}}, {-3.79512*^9, 
        FormBox["\"Apr 06\"", TraditionalForm], {0.0031999999999999997`, 
        0.}}, {-3.791664*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7917504*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7918368*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7919232*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7920096*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.792096*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7921824*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7922688*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7923552*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7924416*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.792528*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7926144*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7927008*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7927872*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7928736*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.79296*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7930464*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7931328*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7932192*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7933056*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.793392*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7934784*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7935648*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7936512*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7937376*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.793824*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7939104*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7939968*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7940832*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}, {-3.7941696*^9, 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {
        0.0031999999999999997`, 0.}}}, Automatic}, {None, None}}],
  GridLines->FrontEndValueCache[{{}, (Transpose[{#, 
       Table[
        Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], {
         Length[#]}]}]& )[
      Part[
       Select[
        (Charting`getDateTicks[
         Charting`FindTicks[{-1, 0}, {1, 0}][Automatic], {Automatic}, 
         (Map[DateList, -Reverse[{
             SlotSequence[1]}]]& )[
          SlotSequence[1]], {{None, 
           Scaled[0.05]}, {
           Scaled[0.06], 
           Scaled[0.06]}}, 6, {{0.0048, 0}, {0.0024, 0}}, Automatic]& )[
         SlotSequence[1]], And[
         FreeQ[#, 
          Alternatives["", 
           Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
       1]]& }, {{}, {{-3.792096*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.7927008*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.7933056*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.7939104*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.7945152*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {-3.79512*^9, 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}}}],
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  ImageSize->{Automatic, 500},
  PlotLabel->FormBox[
   "\"Start of closing of social distancing\"", TraditionalForm],
  PlotRange->{{0, All}, {All, All}},
  PlotRangePadding->{{None, 
     Scaled[0.05]}, {
     Scaled[0.06], 
     Scaled[0.06]}},
  Ticks->{None, {{-3.792096*^9, 
      FormBox["\"Mar 02\"", TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7927008*^9, 
      FormBox["\"Mar 09\"", TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7933056*^9, 
      FormBox["\"Mar 16\"", TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7939104*^9, 
      FormBox["\"Mar 23\"", TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7945152*^9, 
      FormBox["\"Mar 30\"", TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.79512*^9, 
      FormBox["\"Apr 06\"", TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7918368*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7919232*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7920096*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.792096*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7921824*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7922688*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7923552*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7924416*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.792528*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7926144*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7927008*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7927872*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7928736*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.79296*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7930464*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7931328*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7932192*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7933056*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.793392*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7934784*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7935648*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7936512*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7937376*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.793824*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7939104*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7939968*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7940832*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}, {-3.7941696*^9, 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
      0.0031999999999999997`, 0}}}}]], "Output",
 CellChangeTimes->{3.7985587525048103`*^9, 3.7985596490744677`*^9, 
  3.7985615340682487`*^9, 3.798561691170196*^9, 3.798737119749116*^9, 
  3.798737328937645*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"3cc95904-e4ab-45d2-a1c8-f05ae687cfd7"]
}, Open  ]],

Cell["\<\
Note the not every country is included in the couple of plots above. For \
example, social distancing was introduced in the UK in March but this does \
not appear in Wikidata.\
\>", "Text",
 CellChangeTimes->{{3.798558856814816*^9, 3.798558891427953*^9}, {
  3.798558948233287*^9, 3.7985589660580606`*^9}, {3.798559168490718*^9, 
  3.798559169290679*^9}, {3.798727503258048*^9, 
  3.798727518687282*^9}},ExpressionUUID->"32745416-f2c1-479d-85f4-\
1121d80603ac"],

Cell[CellGroupData[{

Cell["Government measures data from Wolfram Data Repository", "Subsection",
 CellChangeTimes->{{3.793105989651456*^9, 3.7931060209190106`*^9}, {
   3.793109627904931*^9, 3.793109628263386*^9}, {3.7931132125852256`*^9, 
   3.7931132141230664`*^9}, {3.798390707945075*^9, 3.798390726688531*^9}, {
   3.7983920389290953`*^9, 3.798392064478063*^9}, {3.798399261520561*^9, 
   3.7983992647485857`*^9}, {3.798559712336108*^9, 3.798559733423954*^9}, {
   3.798559768643023*^9, 3.798559791317137*^9}, 3.79855989678503*^9, {
   3.79872737415315*^9, 3.79872739891433*^9}, {3.7987274376905203`*^9, 
   3.798727439411625*^9}},ExpressionUUID->"cd5e145e-ec28-4179-a7ec-\
51353bb8d6bc"],

Cell[TextData[{
 "On the ",
 ButtonBox["Wolfram Data Repository",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://datarepository.wolframcloud.com/resources/Coronavirus-COVID-\
19-Pandemic-Government-Measures"], None},
  ButtonNote->
   "https://datarepository.wolframcloud.com/resources/Coronavirus-COVID-19-\
Pandemic-Government-Measures"],
 ", there is a dataset on measures taken by governments around the world. \
This dataset contains more detailed information than what we can pull from \
Wikidata. "
}], "Text",
 CellChangeTimes->{{3.798727440674026*^9, 3.7987274967004347`*^9}, {
   3.798727880491192*^9, 3.798727939772191*^9}, {3.798728242837213*^9, 
   3.798728279444171*^9}, 
   3.798728325494656*^9},ExpressionUUID->"bc552372-f35a-40f5-9d34-\
1a5943ec1968"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AAAAAEB7CfPPU5dWPg4AAAA8kTf3PGPZ5uDHH3NfW16aO80hOWgAAAAAAAAA
AAAAAIB6U/65Y0p35eMAAACY7IrknhtTllQ+/olCc0kOGgAAAAAAAAAAAAAA
oL7C+s+d1AkEAACoivK25J7rp0gOmv0CAAAAAAAAAAAAAADQPI3OHvLPAAAA
FZnxbbZ8rWzYORC8+vXK4Plp/WgBzbXmPOt+0r6ten0BAAAAAAAAAAAAAABM
RI2u3qBjSk/l4wAAAJiMsmZq0V6qXl8AAAAAAAAAAAAAAAATUWNqX5iBrnoc
AAAAk1HV+VyQfwYAAAAAAAAAAAAAAGg3jS7yzwAAAFWpOp8L8s8AAAAAAAAA
AAAAAADtpmNKd5iBrnocAAAAk1HV+VyQfwYAAAAAAAAAAAAAAGg3HZ09QWNE
1eMAAACYjKrO54L8MwAAAAAAAAAAAAAAQLtR7WfqPwMAAAAow48/WZbqRx8v
zdzfc+9+k9qfXsva3w+7elP7K2sONK4P+ncGS/ccD7YcORccPDccnL92O7h8
825w7OK1YOeJC8GK/aeCGesOlPq9zd4XZY+hDH8/xe9e3rz9a71UdSz5jrvM
77Mdb0WOuzS24zHL/i2DvqsZa69VXHOZZ9/5rIdmyXvsNWMe6rLmWrkNzd6/
WY6fvOuwTsfoizNXB3M2HwzWDJ4O9py6FJy8fCP8TXB2+FZw4MyVYOOh74Lu
XceC1xdvqWyMv5+/MViw9XD4G+Xw+avBuae/W45fvP7kd8u+k8HfVu4tbV5t
+87nN0pV5yYpa/unr9kX/h7ccfxCcPTCtXC+L1y/HRw6dzX8/bhs74lgyrJd
TV3LrT5Hx7nOg0W/x3X+qOp4AwAAAAAAAFCeRmdvqOpxAAAAAGhv//jpt4Gt
Xb9zP3OfyhCnNWVGsvZ36cad1P6+HThRaPunLt8d5pgef/+9dR7iTfknZY7K
zrNdu30v9Tuv3LrbkjVhG0MZ7f7Dx86clGtdutrjkd15dWQ7lF3ffux8mEd6
q3tb0+fu+c9Xeo1PmbWyvlPZNldTRq+s79M5wdZu33/Ysqyq8od52r0Hj8LM
2uDZK+FxrP1RRb72xl37XKot3HY4U5/K5lXVlAWsyzzUbc1FTWvv3NUn+dl1
Q2fCfG1Z97Y0+9x9d2TsvseJz3kprel6PHzryflbGVNleKet3teSe4B07dHv
Cn1/lnbv4aNg29HzwR8XbmrJOvxy/YHgzsi51rfpF86R81fDeWzWGvP5jZJl
zGW3vPtGa37uloPB6Ss3M32ffocMfTccfDJyLJS9Rou0Mn4ffbVh0Pod9zKc
K5LoHkRb+2xNsXUMAAAAAAAAoHodU3rIPwMAANTcc+8uDp6f1l8K9VX19jB/
E5fyqLaWtYadaiSmNeW+sq2DbwJbMlnZxTzb/NqCTZmzLElNWc/pa/eXti8m
Q/5Z7YUZK61jKJrvSWuaQ+V2mlWXcd6WQ17jUJ6vrO/0yRlqn5bxXcoJ+7RW
1XAtmkU126PH34dZy5dnrW3J2F+Zu8FrXFnPme2Wf27WPLTDmoua8ojKIb46
r9h9Ea04d/tmkIvkn23txKXrwXt9O0rfr/qt0bv7WHgeKNoGTl0K74Vpxvp7
u2d7cNFyT5hP070fnct2lb7GJmL++dNVA8HNuw8Kf7fOX2XVCa/D7yO9x/Xf
DtNzZpT1+9DWdIy26nkoAAAAAAAAAJqnMbUvaHTW55mQAAAAGO8X0/qDwaGh
UqivqreH+Zu49Mx0W/vdnPXefSlD5IoPZclG/stXa6x9/TVHTd9Nh8vPr313
9VYpz+Qm//xEs/I9UXvw6HGuWuQuvpl61bst6zt9c4bK/Bf9rjWDp72+qx3z
z2ZTzU7lcps59v69J7zHkyVL2W7552bNQ7utuajpHJK3Tu1kyD9HTbVrXdcR
X8qdl5FxNZtqWKtmcFnrTr+tdF4qs2kOf9iVrbbGZMk/a52fupJ+L1/epnts
iq6Fuvw+sj3rRe38tdu5tm/1AfvvDP0OKeu4AgAAAAAAAFCdjind1H8GAACo
OfK7zF+7cGUYPl094N2X6tu5WpbnbE9dvtvaV5bMsfJDg2evOMeXtynT+uLM
1YX2BfnnJ5qd74nakfNXCz2jvciYs9xXYOObM1x/8Gzh77rzwC+71u75ZzXd
xjF/66Gmjf1qhuMsS46y3fLPzZqHdlxzUVN90yk56vNOpvyzms5HRc+j7/Ru
Dx6WUPM5rZV1n00z7ttSu37nfqaa95Mh/6z7LIZHtqVZTefJItfIuvw+Unbe
VS89670c+j7lr9Oavk7bX8YxBQAAAAAAAKBaHZ095J8BAABqjvwu89culLOy
teX7Tnr3tWTnUWemQnlr3/56dx9P7ef2/Yfe/ShTcfJy+bX84u3eg0eF8ljk
n59oVb5H7dC5q6XM26yNQ5m+N8txYOObM9TaLJL11n0Lvm0i5J+jNnD6cunb
869fr8s0BtUE9u27nfLPzZyHdl5zUctas32y5Z/VHj56nPu+o4+W73E+r6KM
tv3Y+UJrrtnHtOawjDU2EfLPWku37pVbCzypnbt2O3Pt7Uidfh+5ajXvOXkx
07bN3DBo7W/LkXNNPb8DAAAAAAAAaJ1GV98I8s8AAAB1Rn6X+WsXqnVXJP9g
Ur04Vzt1+YZ3f/tOX07tR7WcfftRZqJVTfUU8+YlyT8/0cp8j5ryZUXn7cSl
65m+c/jWvVL2V5ac4Qf9O3N/z7aj572/ZyLln9UOny8nIx/p2XUs8xh8a15W
mX8+knGemjkP7b7m1C7fvJvpnoXJmH9Wy5OL1zWomXWf42325ny1y3WPgKvG
btGm+9bKWGPtnn/WsXbh+p2WjUe/b/OsiTr9PtJYbMtTL2V5TovOebbm+u0I
AAAAAAAAoH00qP8MAABQe+R3mb92Ynve9J0MdZZ9cjp6i2+mS1nitKba0D59
fNhvr29ttuMXrwfT1+4PM+HRGJXdeKd3e7Dj+AXvHNLOExdy7Yd2yD8v2n6k
MFc+1pXvOXbxWvAvX60ZR/VSVc9cNQRX7D8V3LzrV8fx7oNHheZMayRPe3nW
2sL7K0vOcODUpVzfoWPhoeUcEW91yT9/smpvuCbk7Z7twScjczV3y8Fgz8g8
qB52lqY6l2WN25XxSmqzNg569a28ZJZj8eINe96vd/cx775+Oztb7ftmzkNV
a+69vh3jzkuaF9VP/3T1QLBg6+Fg6Lth7+39etOQ99hace72vXa7zkvfDpxI
PH/req3zt67v567e8p6nL9cfyLQfzw779a1rg459jS3Kfuv8pjrBC7YdDi45
jp+oPf7++3Abs643XetcTfWK5209FF5PoprC+v91LtAYbds6kDGDW/Q3inLg
vmtt7dAZ63Zrbnz78jlvuGoZR037cvfJi+GxHt2PoeNCvxunrd7ndR9g1L7I
uG6lbr+PNh22nxN9f6u/uWSrtZ9dJ7LVkgYAAAAAAABQb42pS4OOztb874kA
AAAAJj5XXsPnOd2vztvolaVQe33xFmd/yhjZmnJSrj407rseOUflh5RlcfWn
fMvJyze8tvGj5Xsy74e6559bNQZXvmfd0BnvvpQ71LPmXU3Zm7zjVfYurSnn
l9ZU/7boXGXJPyu35XMsx01dvtv7O9Tqkn921Z18Y+Q8dPSCO18YNc110TEr
N5nWbGtF9cWbMYfKgttalvrD7TwPrVpzEb2vb/dxa19qp674Py+hDufuiOu8
1PXtbq9+lOF15SuzzpNv3fHtx857ncvmbD7odW+UagtnmUOfOr/KhPocozqH
37w3Nu+q7HbW47uVa0yZXVtbuscvV+tD1wKfplrjv/xilbO/v4787rhxN/3+
vaipBvnPPlte6rpo9e8j1WS2tTsPHnqtswNnrlj70bmgzPUFAAAAAAAAoFqq
/Uz9ZwAAAABlWbY3PW+m5npuuKj+oG/zed76K3M3WPtQFtnVh77H1ZTZieo6
+lJ9Z1dTtijrfqhDfq0OYygz3yPKGtpqiattOHQ293jT7h9QjWGtrbSm+rdF
5ypL/lltxrrs9SZduaR4a5f8c+Tdvh1e9aBVL7PomBfvOJLav/J+5y1ZtKzn
KR9V5Z/rNg+tXnMRn2tUVGPWpQ7n7khZ+eeIqxaw7zxpPd9/6K5lP3/k90yW
8en3ik+N/Czb/emqAWtfyuJmOT51Xo7mUXOg3GrW/TpR888+98FkrZWte41c
9fXV1mb8PVPH30fK4duansVg+7wy4LY2ePZKqWsLAAAAAAAAQPUaXX3knwEA
ANrU89P6rcr6nr97f0n4LOw0/zR9ReVzUef5m2yUybE1n2fLK5/g25QXdfWn
54inNeWMfLbr9v2H1nHo9ay19yKHPZ5xrhqAWfqsQ36tDmMoO98jv59vr0+e
t66sMk5plT93n3zyvPbvrt5K/V7VwS0yV1nzz6pfnnX7PEqbjmntln8W3U8x
PLK+XU3npSJjvnA9OderOvV6ffm+k6nf/YXHeTirqvLPdZuHKtZcZOi7YWuf
b3g8L0HqcO6OlJ1/FtdzKlTj2NXHrI2D1j7UVuw/lWubVSPXdarMUqfado+A
mrYlzzh/N2d9mNfO89mJmH/WfxO5mn4f5DkX6nyg+2ZsTTWgs1wz6/j7SLWZ
be3s8C3r5201/9U0vjLXFgAAAAAAAIDqkX8GAABoX4NDQ1ZlfY/rf4vee+pS
5XNR5/mbbFzPr/apT/fAo/Zh1PSseFd/Kyz5t2MXrzk/r3pzrvb1pvxrRs9A
d7WD54Yz9VmH/FodxtCMfI88sgR5r45sd54+P1uTntOP7huw1VdXxq3IXGXN
P6v51E6PqF501taO+WdRDs62RtSK1Oy2nWdVP1Pveat7W+p7fO4byaqK/HMd
56GqNSfzttifnfDxij1e/dTh3B1pRv5Z51Nbm7XRfT0fvpU+R2q6J6rImt9x
3P1siFfn+WU5XTWvP+jf2fL1PxHzz5uPnHPuM/03Vd7+Z6zb7+x/wdbD3v3V
9feR6x7ItMy9jjfb8xdUm7vV6xwAAAAAAABA83V09gSNLvLPAAAA7Yj8c3vM
32Rkyy/nrf1me6a2q57boXPptR596jO6akUqb1E027f/zGXrd6hlycPVIb9W
hzE0K9+j2ptp7fH37kx+ElvtVmXk9R7VBU1r56/dLjRXtpzhjbvJx9+SnUe9
+z9+8XpiH7fupde0bNf8s/jUh/3jwk25xjt/a3rOVTlzvUdzl5ZC099/WPL/
LaiK/HMd56HKNWc7P6jN3nzQq586nLsjzcg/v7Zgk7VPVx5Wx62rLdpe7H6U
385e7/wOn/vJRNtja727j7V8/U+0/LPOb657Xg4XvN9C3+F6FkmW+2rq+vvI
dXxuOHQ28XOfrhqwfu4v32xt+ToHAAAAAAAA0Hyq/Uz+GQAAoD2Rf26P+ZuM
bHlhZaNtn03LDCqf8jAlV60MnK3POw/S8yKq7ezaHlempW938eyMK++hNmXZ
Lu/+6pBfq8MYmpXvOWxZ41otWftTRjNtmSnvFL1P+SfbcsxSjznOljPcklLX
cthzP6btB23KtqPnU7+3nfPP2ld3HFm1vDW7zw7fSu0zysqL7jdJa9NW7yt1
DqvIP9dxHqpcc7oXyNbmOa6VkTqcuyPNyD9rbm1t/cHkfGVk4bbD1s/rt0oZ
5y7bdUbNN+v60fI91n5u3n0QnqNbuV8nWv7Zdeyp6f6Eot+jXL2r/ejjpV59
1fn3kZ7NktZ0fCVdT2y569NXbrZ0fQMAAAAAAABonUZXX9DRov89EQAAAOUi
/9we8zcZfTtwwrpmbDmbtAydns+elmHTs7LT+lMOxNZenrXWui16vrytqZad
b9bE5dTl9OyG2kqPWtWROuTX6jCGZuV7bDWLfTPBpk8c2WPzvbb7C3zzjUls
OUNbXUUdI66+56XU6VVtdlsOtJ3zz6K6qram7c/a588+W57an+p0m+9Vvjqt
qd54mXPY6vxzXeehyjX32Zp91j6nLvfLCtfh3B1pRv75xZmrrX26ngthq9Wv
luVabeOq563mU7/clf9V034tcv9MVhMt/2yrRa927uqtUrZF18SHjnvy3l+6
06uvOv8++mv3NuvY4vet6Le8rb3Xt6NlaxsAAAAAAABAa3V09gSNTvLPAAAA
7Yj8c3vM32SkjJWt2Wrg3X3wKPEzyrqtGTyd+JqtprTtOfWKkLi2Zc7mg9Zt
2XniQmnzplrUtpYlP1OH/FodxtCMfI/yZraWJ0+5/8zl1P7imUXbmjwznL/G
oS1nqONItUaTmo5LV98Xrt9O/Kxy1QfOXEn93nbPP7tyd8qxZe1z9qah1P7i
dWt/N2d96nt1/itzfludf67rPFS55lYfSL5GRs3nXgWpw7k70oz8c+eyXdY+
XfeRpD2LImpm7fGibPtC7V3PXKc9Mfuk6X6u5ftOtuR4mGj5Z9t1TG3GugOl
bc+mw/Zzx4qRfejTT91/H9nq+6vWs/lejTWt6fdHs9czAAAAAAAAgOo0unqD
xtS+yscBAACA7Mg/t8f8TUYvzFhpXTPKbyZ9Lq0m472Hj8LXbbUtfzt7fWKf
MzcMpn7mO4888Y7jF6zbsmTn0dLmzVVrWs23rzrk1+owhmbke9ZacjZqazP2
qayZcmdpLV7f01W7VPcK5JkrW87ww/5d4VpParpnwdZvWvZM26xtV2Y7rbV7
/lkeOWp1Zs1KnrTUiU+qcXnnwcPU96vueFlz2Or8c13noao1p9q9ulbamu+z
Cupw7o40I/+sfKit6V6ktM+6ft+olbnWXbWmfX+D6DkCvk33ZegeAp27m7Vf
J1r+2XZ+UXt98ZbStsdVa/rYxWte/dT995F+d9ia/vtU7wtrYlvuSfho+Z6m
rWMAAAAAAAAA1Wt09oY1oKseBwAAALIj/9we8zdZ2bIIyuEkfWbGuv2J7z94
bjh83fZ861kbk/eZLYuh/JlrOw6du2pd/8pklzVnyru5Wjvl1+owhrLzPa7a
5mppazGN8ntp7fSV5HrON++mP1/+6035zl+2nKGOTVvu2laDtG/38cTPRNeO
q5Z1MhHyz8qi2drv5/vV5BXbOeL7lPmy5R73nb5c2hy2Mv9c53moYs1pbnU/
j63ZnpMQZzt3q589Jy/m8lb3tszzVHb+Wb9pbfebqOm3Rtrndbza2u37D0td
J8oh25pqfvv0o/to0p6vYWvHL17PlTEvssbaMf/sasrNl7U9yvPa2sUbd7z6
aYffR2nPnVCL6vx/bXkWwHCL79cAAAAAAAAA0Hph/efO3srHAQAAgOzIP7fH
/E1Wtsyfnmmd9Jntx84nvr9397HR96TlltLW4YlL11PHodrQru2wPX9b7c0l
W0udN1fzzdDUIXtsG8O9B4+CFftP5aIcru8Yysr3KHf+7cAJZy1fZQOzZnaV
C0xrabU9bZk4rfk8+8uWM1yw7XD4Hj1HPqntHtmGtH6v37mf+Jkpy3aFrz+w
3CsxEfLPGw7Z84vv9G737stWzz6t5qctk6bzaVm55Fbmn+s8D61ec7r3wFZD
PWq6D8F3bLZzd5H25foDmeepzPyz9rEtT6k2fOuetQ8dr7Z26vKNUtfJou1H
rN+n302+fU1bnf4MDVe7de9B0L3rWKFzoe8aa7f8s65Trlbm+eW1BZus33XH
M4PfDr+PPl01kNqf6pQr169jNq1NL/EeRQAAAAAAAAD1pOxzo4v8MwAAQDsi
/9we8zdZLbc8X15Zs6TP3LyXXNP2PaO2rLJFSU152qQ+bdlKn7qradnNqP3y
i1WlztuNu/bve2XuBq9+6p5/LtKimn8+XPmew+evBs9/vnIczbPyubM3Hww2
HznnzPVELUvGUJSJsvX96rzkNapjwtbyZNRsOUNlm/Qe5aCTmrYhKdeUVitV
9eGjPJitTYT8s+bO1j4ZmXffvo5eSL+vZP7WQ4mfUT7M1sqq7drK/HOd56Gs
NfeXb7aOOy/p3g/dc6PnDvTsOhacu5Z8P0K8Zc0dTrT8s9aeMvO2uvlRc2Vh
P3GMZ+eJC6Wuk09W2b9v6LvhTP3177Wfj1xNV6ttR88HP/tseaHtmkj5Z82F
raX9Pm3W92kf+fRT999HEdvv8LT/JlDT7+ky5x0AAAAAAABAPXV09pB/BgAA
aFPkn9tj/iYr1/O543WMlalIa8poRO9buf9U6vvidYFd2Q6fPJgr11F2PtNW
N1vtre5tXv2Qf/ZbA2W2PLUNP+zfldqfLTOl77EtTZ/a5nG2nOHap3Ugbbmr
pDqLawZPJ753y5Fz4evKJdraRMg/u+q3ztrod71RjU1b07U67bOnrqRnxGy1
u7NoVf657vNQ1pors2XNHbZT/vmbHUeD381ZP4Yyw7J4x5Fwnn1yz2p3HjwM
c/K28eh4tbXoXpGyvL54i/X7Tl+5mblP1YFOe5aGb9P1R9cFHY95tmsi5Z9d
/52U9syTvFzXTTWfa2fdfx9FbPX+bc332goAAAAAAACgvSn7rAx01eMAAABA
dhMx/7xo++GwvzT/NH1F283fZKW6yLZm1nSWtJqKyi2Z7+tclp4XnbFu/5j3
qk5mWvPN17ha2fOmWo5Z5i0N+ecnWpXvUT3jNxZvyTxHO45fSO1Tr9k+e+T8
1dTP6rWsY7HlDDc/zStLWkb/cMJ33r7/MPG90VwpD2VrEyH/PG/rIWvf87Yk
1yuOm752f2oft+49sH5WOdC09vDx96Vkk1uVf677PJS15spqysdm3a52yj+X
2ZQLdh7PW+zHc/euY6WuEz0DwNZUAzxvv7b7AXybntvx8qy1mb9/IuWfVQ/Z
1o5fvF7q9oiruXL8UvffRxGdv9J+S6S1OyPvb+X5HAAAAAAAAEB1Gp291H8G
AABoUxMx/7zXkZ+y1XWs6/xNZg8tBWqVCTTfu/pAcp3YeAZUOcS0tunwd2Pe
a6sZ5/uM+rsPHlnXpFmbugwXrt+xft+fF2326of88xOtyPfce/go+P38jZnn
R9kc1URMa8r92T4/Z/NB67iy1uW05QzN41AZwaSmo93MXL22YFPi+8x7Gly1
fCdC/rl39zFr38rz+vRz8Fz6vRHxc1+cauLa2gf9OwvPYavyz3Wfh7LWXBlt
YGSf5Jn3yZh/Xve0xr2L7rOyNe3XMteJ1qSt6X6UIv3rnqoL128Xmrv7Dx8H
f/lma2lrrN3yz677/bStZW6PrrOu5tNPnX8fxbnuI4q3BdsOlzrnAAAAAAAA
AOorzD9PzfesQgAAAFSL/HN7zN9kppp3aS2eU1ONyqSmDHO83+t37ie+99KN
O2Pel5apVovnr9NcvnnXuibLyHWYHlky42q+dRbJPz/R7HzPiUvXc9W+lHd6
t1v7duWXX5y52vr56WvctUxNtpyheb+AMslp69T8zhX7TyW+x8ya2e5nUJsI
+WfbeUjtw/5dzj6Ud7OdGXz6uGOpn7n92PnCc9iK/HM7zENZa65I0/HZU6AO
se3crflXpjGPrOckaUX+ea1n9lmmWJ5BoZZUB7+IrzcNWb+vrN/gel7G4Nkr
uedQlwTljMtYY+2Wf3bdx6Njpsztcf13me499Omnzr+P4vRb4J7jfsSo6VzT
qt8OAAAAAAAAAKqn/HPHlO7KxwEAAIDsyD+3x/xNZmn5R7WTl2+Mee/j75NT
bUn7fMuRc6n9mpkHW51QZX18tkH5DVv7aPme0ubLp6afb71p8s9PNCvfc/HG
nULPc3etY9VIVmbLRrkiW9P6zzIe3/yzqB606zvT7lNQbjt6z2TIP2vubO11
j3X06aoBax9ai671ouM+rakOedF8civyz+0wD2Wtubzt24ETmWu/x9Xh+hFp
Zv755r0HQecyd2bepDVma8O3yq31a/sdpeaqeZ7VCzNWhvdsPLQ8myCtHcmQ
/Z5I+WedM1ytyDUkTjW7bU3XXp9+6vz7KInu6fBpvbuL7U8AAAAAAAAA7SWs
/9zZW/k4AAAAkB355/aYv8nMlltSfTbXGkurYacakmnNzBIqQ5rWfPNh+05f
tq7JBVvLe8a2K8+q5psHrUN+zTYG1WBVZigv3zE0K99TpLZqRMdAM5vqcWbJ
D2fJP/+1e1vi+3QXg3L8v529PvH1767eGtPPZMg/D1vytmo+17UDZ/LXZfVt
qkdeZA5bkX9uh3koa83laWXVPa3D9SPSjPyzjsmF2w7nmivXb2Kdd8vc/gHH
caW8ezPmXXMze9NQ6n0saU3Z3LqtsWbnn8X17I5X55X3rJBZGwet33V2+JZX
P3X+fZREvy0eOuZZr+t9zfh+AAAAAAAAAPXU6Owh/wwAANCm8uR3/2n6ijBj
mebv3l8y7jPkn5GX6rzaWpRBTsszpz1H3tbvvK2HwvfY6vGp5qPvNqgOoq2t
HTpT2ny966jpp2d/+/ZVh/xaHcbgyvdsO3o+XIdx/XtPWD+nrJNvLe4kqj/e
ivbJqr3eY8qSf5Zb95LvL1CN3t7dyXUav9409tw60fPPGr+rubJa6iOtPn6Z
bfORc4XmsNn553aZh7LW3O/mrB93XlJtXl0HbG3N4OnCY6vDuTtSJP+suTp9
5WZ4/lLGdca6A4VzqNoPrlZmrd9zV29Zv2vmhsGm74Opy3d756B9a0BPtPyz
ah7bWte3u0vbnhX7Tlq/a4/nf5fV9feRddsd9dD1erOPBwAAAAAAAAD10ujq
DTpa9L8nAgAAoFx58rt58sXkn1GErSbe7+c/ySGtP3g28fUlO4+m9puWAYvW
oy3vohqivuNX7sfWzl31q7PnIy0zGrX9Zy5791WH/FodxuDK96xLya8rq5mW
743ajuPjM8G+0tZ82S3LWs+af1bd0bTvvHxzfM1jnQniddcnev75rZQ62VHT
PLn6+Gj5HmsfZbUs91ckaXb+uV3modlrbt6WQ9bP6TjTPUJFxlaHc3fElX/W
PU9JGc1mnjuuOGq6v+tZA9lF2+CqK6xa+63YDzp+XfeDqd158LB2a6wV+WfX
NV2Z5bK258Sl69bvmr3J779h6vr7yMZ1HdDrrTgeAAAAAAAAANRHY2pfmIGu
ehwAAADIjvxz6+cP2dlyGp+uHgjfc+7a7cTXVSM3rd99py8nfiaq7fxB/87U
7+3O8Gxun+eD//KLVaXM1VVLHkhNuTffvuqQX6vDGPLme+SL9QfsOz7I/0x7
ZcRa0VQv1zcHmDX/rGcGZGlD3w2P62Oi559d1zTb+vPto8xmO+e6NDv/3C7z
0Ow1p3l01eI9eG78sZZFHc7dEVf+ucy6ur42Hbbvu7Kyn584tv3h4+9bvu0b
Drnv3XHVtG/1GmtF/tm1TrM8d8TmZ58td87/K3M3ePVV199HNuSfAQAAAAAA
AMQ1usg/AwAAtCvyz62fP2Rne1a1nqGtLFdadUNb9nHO5oOp/So3Nn9reo3M
95fuzLQNN+/a69ypbnPReVItbFeL6mX7qEN+rQ5jKJLvkUuOZ9qfvnIz85he
X7zFvqNLbqph7jOurPlnOZ9y70JSS8olTeT8sz5jr9zqzmrp/Oiq/1pmUw3T
vHPYzPxzO81DK9acK2up9k7v9txjq8O523dbq8g/694tW9NaLePcdfj8Vev3
HDp3teXbLq5j0Sd/O9Hyz89/vtL6HWpvjFz7i37Pwm2Hrd/xKEMmvo6/j1zI
PwMAAAAAAACI65jSHWagqx4HAAAAsiP/3Pr5Q3a2+oUDpy+H9eGSmnKVtn7T
PqemZ8/b6jMqp5JlG1w5tfsPH3vVO7Q54sg53XvwKFN+sA75tTqMoWi+572R
teRqWuNZxrT6wGlnn2W2PZ7n6Dz559mbhrzG8ODR48T1O5Hzz5ozW1OE8Ecf
L7X28WH/Lq/5LaupLnneOWxm/rmd5qFVa+7s8C3r5y/fzH+OrcO5O1LH/LPP
cyGKZmr/uHCT8zvmbjnY8m2X4xfTn+uhputmndZYK/LPMnzL/gyPU5dvFOpf
18O7I78FbW3w7JXS1nEVv49cyD8DAAAAAAAAiOvo7Akana353xMBAABQLvLP
rZ8/ZPfizNWp+1P5rJkbBhNfW+vIXUhaDcKeXceCE5eS8znKKmfdBtcxoFak
XqhPhmTZ3hOZ+qxDfq0OYyia75FjF69Z+1B98CzZzlv30uuJ563nef3O/dQ+
dZz4jC9P/ln5XZ+qvJuPnEv8/ETNP3+6yl4fVm1LypyYbBnqhymZchd9r639
edHmXHPYzPxzO81Dq9acTx35WRvz/Zapw7k7Usf8s+w7fdk6Lp13f/bZ8tz9
nxm+6ew/631XU5btCrO+RY5FceWffZ5VMRHzz1973A/k+zyGJLbnqUTtre5t
3v3V8feRC/lnAAAAAAAAAHGq/Uz9ZwAAgPZE/rn184d80nLK+mtaZu7jFe4M
Q1ruQhnSeyk18o5euJZrG1x5H7W/5ahzp1rUqjVqa5on5VSy9FuH/FodxlBG
vueVuRusfah17zrmNR7lwmxt1sbBXNup+wVsTfVzXX3kyT+L6k26mrKaSZ+d
iPln5THTznlm070htn6UGVO2N60N5Lz2di6z11JWffI8/TYr/9xu89DKNec6
9nQdzHMM1eHcHalr/tknf64a3XnWvc8zAjYcynbP1WsLNgWPv39yXhoe2Yf6
97zb7jq/+TxjYyLmn3Ws2c5Vajomf/nFqsx9+9TAz1rzvW6/j3yQfwYAAAAA
AAAQ1+jsDVU9DgAAAGRH/rn184d8Tl6+Yd2vSc2nbqLqPGdtK/adzLUNPtkT
ZYve6d3u3aeyJ8qruNqekxczj7cO+bU6jKGMfI/Y6s+qKQ/mk1fU+rO1F2a4
c2NJtO5sbcfx9PxyJG/+WflDW1P9x7TPTqT8s3KOvbv9zknKrbr6e9dRF376
mn25tlVzaksv3ryXvr9smpV/brd5aOWaU4belbRfM5g9x12Hc3ekrvlnuXD9
tmP2g2Dou+FMa3/xjiPOPtWU6fXtU3nkuwn3hClnnfW4XOe410b53rqtsVbl
n8Unu65t98mIR/7yzVave2r0PJUsY63b7yMf5J8BAAAAAAAAxHVM6SH/DAAA
0KbIPz/xd+8vCV6etTbVP01fUdr8IR+fPIjZbnnmzt5csjVTv2p5ajRHXM/5
jpqeUe7KFGkc9x4m16g228PH32fKyUTqkF+rwxjKyvcojx/VzkxrPhnjG3fv
p37+6sh85d1OrTfb+FST0mdNpjVb/ln93n+YXvPSli2bCPlnvfb1pqHwvOXT
lA/0ub9jy5Fz1n6y1oQ3nbhkr2evOuVZ+2xW/rnd5qEVa86kOsC2prOCq9Z4
XB3O3ZE65599f4Oo3rJrLf3o46XBgTPuWvpqmw5/5z3GH3b1Wu+z0v7UPQau
fnT89u0+7hyb1nXd1lgr88/aj65neqg9GLkmT1ttv3dDc96/94SzLzVl8bOO
tW6/j3yQfwYAAAAAAAAQ15jaFzQ6W/O/JwIAAKBc5J+LjY/8c+t8ssqeX4q3
3Z71jpWNzNqy1EyMU8bjgePZ5lFTHnTt0JmwLq9y+MqfvbF4S7Bw2+Fg+FZ6
7ifestbzi9iyRRqbMoVFvNW9rdAY2i3/LK7azWqvzkvPuP1uznrrZ3WfQJFt
PXhu2Nq/K+OWN/8stiynLXvZLvnnJTuPhlk1mb1pKOjdfTz8jE/99njzyRqK
7f6IC9fvFNreBVsPW8eYp05+s/LP7TYPZa053/yz8pYPHdcl1SDOMrZmXz9k
7paDXmOpc/5Z1jrqIZvt9JWbwRfrDwSvLdgU1vrXNUHj128ej/K+YVOWOsux
dPyiPeMfNd2XoSy98qPR+F6ZuyF89oXOd/cS6kcnNds10HeNtXP+WTqXuZ8X
EjXNwzc7joY1nnWt1O/Ft3u2h78HfOdc2WN9Lus46/T7yBf5ZwAAAAAAAABx
HVO6qf8MAADQpsg/Fxsf+efWcWVP4m3WRv/5P3fN/fz5qCkjUnRbpq/dn2lb
irSsmTWTLVtURhs8e6XQGNox/6wsriuPpHxb2udddRz/6pEpt5m1cdDavzKH
ts8XyT//ceGmxM99d/WW9XPtkn8uq/nm7HR/QRn9pFFWztau37mfuc9m5J/b
cR7KWnO++WdRPt/VlKn07a/Z1w811Tr2GUvd889a13nug8jTFJHOUpP84xX2
rGjZbfux86WssXbPP4vqHbeq6T6OPGOs0+8jX+SfAQAAAAAAAMR1dPaQfwYA
AGhT5J+LjY/8c2s98i1uONJUE9G3X9XI821nhotnL+TbAb/nkRdppy7fKJT9
JP/8RJn5Hpmz+aBzbj5ZuTfxs7a63zo+8tbHjahep62pjq7t80Xyz2n7++tN
9nPpZMk/6+znW+/WZzzKmxfd5pv3Hli/I8t5WJqRf27HeShr27LknzW3txzb
oYyub3/kn7PRuVdZ+WY2nUM+XTWQeWzdu441dVxR0/arFnkZa2wi5J91TB4+
f7XsaR7X1h88m3uMdfp95Iv8MwAAAAAAAIC4RlffCPLPAAAA7Yj8c7HxkX9u
rVNXblj3U9SUA83Sb5bnjBfJicQt2n7E+3uzNmVmimZhyT8/UXa+x2dub959
MG7/uerM+synj6uOsdlqTBfNP2uulTMzudbxZMg/qybmm0u2ZhrPXUsdzfsP
H7dkm7NmApuRf27HeSjre7Pkn2XGOvezCXyfrUD+OTud/5pVB1q/i95fujP3
2N7r2xEeL81qt+8/DDPgWcY00fPPkX2nL5c93aNt2d4ThdesrbXq91EW5J8B
AAAAAAAAxDWo/wwAANC2yD8XGx/559byrdN87OK1TP268pNm+2L9gVK3adrq
fc7nfWdtysSVMTbyz080I9/z8Qp7/kZNNTfNz/Q4anDO3DDYkuNsw6H0ewCK
5p/zmMj554ePvw9W7DuZqSaqvLF4i7Xf3ScvlrLNH/TvtH6P6pVn6a/s/HO7
zkNZay5r/lku3rhj7VPXK59jivxzPjrWD50rt+av9sWfF20uPDblk/efKT+L
q+dqZM0+u9bYRMo/i67L/k9AcbeHjx4HX5Xwm6Euv4+yIP8MAAAAAAAAIK4x
dWnQ0dma/z0RAAAA5SL/XGx85J9b69PVA9b9FLXe3dlzKL7PnX913sbSt+uH
Xb1hprRoO33lZvDK3A2ljYv88xPNyPeIMl+2pnqdZn7RVRf0+c+z58eSqL6z
ramebtpnyT+X04ZH1rbydD/M+ayttSNr0tZ0Li1jmzW3jx2hPNUt9+2v7Pxz
u85DWWsuT/753b4d9g0Zacpiuvoh/1yM6i0rN1+k6RqyZOfRws+CiNPvoCPn
i2e0Hzx6HN7Xk3cckyn/HI3h6IVrhed9x/ELuc4NSery+ygL8s8AAAAAAAAA
4lT7mfrPAAAA7Yn8c7HxkX9uLeXHfNpb3dsy973lyDmvvsvOEZmUbVGGRrkd
33bv4aNg+7HzwYf9u0ofT93zz1nrfOflyvcoX5an39cdtWnV5m05FL5X6+6R
JWCpbHRZ2+v6LjXNSdJnbTlDn8xkHu2af1Zt56sj6/vUlRthjnP9wbPh/KXN
bRYnLl23fndZ2Tdx5SC1Tb59lZ1/btd5KGPNaX3lvV65MpbKrbr6aEX+2fdZ
B678s87FZe+bMmj/fbJqbzBw+rLznGy2s8O3gsU7jpRyLrH53Zz1YX75/LXb
mfabrlfzth4qfG5u5e+DOuSfI28u2Rqu/TsPHnrPue7xW7n/VKn3yEkdfh9l
5XouwBs1PR8AAAAAAAAAaJ5GVx/5ZwAAgDZV9/yz8q42VY+P/DOa5cWZq8Pa
pAu2Hg5zo7tOXAwGRtahMpJ67veX6w/UNrMFAADKoyz0O73bg5kbBoO+3ceD
TYe/C/advhzW8l2x72SYBS3r/ok89L2qo/31pqGgf++J8J4yPddC92fpN4xy
sHq9zHsOsCB4bcGmYMa6/eH8qtay/ntl98mL4Zwv2n4k+GzNvqbUngcAAAAA
AACAiYT8MwAAQPuqe/7Z1aoeH/lnAAAAAAAAAAAAAACA9tPR2RM0usg/AwAA
tCPyz8XGR/4ZAAAAAAAAAAAAAACg/aj2M/lnAACA9kT+udj4yD8DAAAAAAAA
AAAAAAC0n0ZXX9AxpafycQAAACA78s/Fxkf+GQAAAAAAAAAAAAAAoP10dPYE
jU7yzwAAAO2I/HOx8ZF/BgAAAAAAAAAAAAAAaD+Nrt6gMbWv8nEAAAAgO/LP
xcZH/hkAAAAAAAAAAAAAAKD9NDp7wxrQVY8DAAAA2ZF/LjY+8s8AAAAAAAAA
AAAAAADtJ6z/3Nlb+TgAAACQHfnnYuMj/wwAAAAAAAAAAAAAANB+lH1WBrrq
cQAAACA78s/Fxkf+GQAAAAAAAAAAAAAAoP10dPaQfwYAAGhT5J+LjY/8MwAA
AAAAAAAAAAAAQPtR9lkZ6KrHAQAAgOzIPxcbH/lnAAAAAAAAAAAAAACA9tPo
7KX+MwAAQJsi/1xsfOSfAQAAAAAAAAAAAAAA2k+Yf566tPJxAAAAIDvyz8XG
R/4ZAAAAAAAAAAAAAACg/Sj/3DGlu/JxAAAAIDvyz8XGR/4ZAAAAAAAAAAAA
AACg/YT1n0dUPQ4AAABkR/652PjIPwMAAAAAAAAAAAAAALSfRmcP+WcAAIA2
Rf652PjIP6Nq/+3D3lDV48DEpfX13Ac9mT+nz7A2gXyic/v//c43lY+l3WjO
JsPcsUYAAAAAAAAAACiu0dUbdEzJ/r+FAgAAoHrkn4uNj/wzqvS7xbuCb0/e
D/3LvG1jXntpztbgnZWHg3+etanycaJ9fbXnUri+vh64kulzL4ysu2ht/vLr
zZVvB9BOGh8tGz1+PlhztPLx1NHfdy4N3lg2GLy+9MCY+zP0zz1H74Rz9/bI
NbDqcbJGAAAAAAAAAACot8bUvjADXfU4AAAAkB3552LjI//cGn/oHgimbjgV
vLmMOTWl5Z//+7RVo39fNkI5sarHmsdPP18X/HX5wWD6jnPBksO3gkVDN4KP
N50Ofr9kD/UuW0Tznif//O+Ld7c8/6xzRKRjan/lc4exfj13W/De6iPBzN2X
gt6jd4K5+4eDD9YeC/9e9djqpmi2dTLMta4F0Rx9uPb46N//n799O/p38s/P
6HdA1/qTY86TU9YdD/7Utz/41ewt4bxVvU0AAAAAAAAAAFSh0UX+GQAAoF2R
fy42PvLPrdF77EktR9WirXosdZKWf/7J9DWjf5d/+M8Vhb/r8x3ngxk7LwT/
7yfF+/Kh3PMyYxvi5h+4Wsp2TSS/nrc9+HLXxeDtFYdK67Nd8s8vzd06Zn0o
01f1/qijZqwRF9Xjnbbtu9RjWfS6WcO3bjRfmreX529vyfflzT+3y1yXMZ/m
dn6y5czo36vKP7f6Gpl1jbzWM2BdF/Lp1rPBf/uwvP/7rvaF9rP2D/csAQAA
AAAAAADqqmNKd5iBrnocAAAAyI78c7HxkX9uDfLPydLyz/J6/4Ewj/XH3n2l
fFf0PX/oGWj6dikvZWayvjl0M/jPrWeCz7afC3qO3h79+7z9VyvfB3XyH8uH
wnlRvdey+myX/PPfjFqwecY7WTRjjdio5qyOX3Pf6LjV/vpy98Wg//i90b+/
v/ZY5fOTZubTc5LOQ634vjz553aa6zLm80efrgy37aMRZua4qvxzK6+RedaI
mX+ef+BamB+fO7I++k/cG7NmekbODf88a1MpY3x+5obRfvVciirXHAAAAAAA
AAAAaTo6e4JGZ33r9AAAACAd+edi4yP/3Brkn5PZ8s9lUj3IVmW7zNyscll/
6N475nXVkPxo46nwtZ9/ub7yfVAnyjROxvyz1kTfsbvjapkqB1n1PqmbZqwR
m4+NXLrW0s++GHv97ZjaH8zeeyVYfPBGqXVny6YccSvzz2aG1zf/3E5z3cz5
rCL/3MprZN41YuafX4jlm3WONrPz+ucy6jX/eu428s8AAAAAAAAAgNpT7Wfq
PwMAAABoFlv++cefrQ5+Mn3N6L//dMa64I3+weDV7r3j8o/K87w0d2vw1+UH
w+ywLR/5k+lrR1/X55QPUu3Uf12wI3jug7H3fyr7pP7e/PZg8PL88a/H6XX1
p3H+qXd/8PxXG5xZI9W3/O2ineHYf7twZzg2/Xta/llj0jb8w3+uSO1TeaR/
W7gj7FPz9fMvxueJVWNScxZ9z3urjoT9SlKeSRk7zUHY55I9wU8/H3+/QRrN
QZS3FX1v2ntt+T2NQfPxl2VDwWu9+8Ltss2v5lLbE71Hc62s2J+XHgj/Hn+/
+lPfqq0dzximrSHt8xdnbwnXyO9H5sVcs/G1Ec1v0joyX4/Gq79pzKr3rXlT
Fjh6T1I/mjvl3/7Utz/4S/9QmFFT7dik8UT7Y9bey6PrIVqHv1mwM/UY8s0/
ay7/1LcvPBZemrM1Vy7TzNhpm6J/Vg1012c1/l/P2x68qbUyss9t+1PzrfEq
36j9qO/VWitj21TL9pWRc4jm9Q/dA4nHYp73musmyxqJvifa19qfOtdm2S86
9qN9oby1ba7ix6e+O+0cI0/O+8nnt/i5W+c47S/tA/N90blNx4DWjWrexseh
40Jj6TnypO686iib81bGmtbrGofGqPs9NG9Za/sWmesi+9yca9Hxo+Puz0/n
M/7+LPMZv7arP41Laz++DsxtGpt/PjT6Ph232tc6D6ftkzzrLus1Ms/1v4w1
Yss/R+OaPTA8+p63VhxKXT/6naXrWPh7ZGS9xI9DvUf7Qa9H/ek4jOYlvj59
+gQAAAAAAAAAoFkanb2hqscBAAAAYGJKyz+buUdlahYNXR9XA1Y1MfVeZXH7
j499zrv+/XdGlioS1UhVNkt556UJtWX//Zs94Xs7158Y99o3h2+m5saUXY62
x7To4I0w/5P0maTvCDOMR5+NK55/nvu0vma8bq9yRsqn9Ry9ndjntG3fjckB
J70nMv/A1TF9v7vqSOL7NI9p+VqTmZmduTtfrW/V+1yWMAbN7/MzN4x7v8YV
rQutpxk7L4z77ILBa0/yWZ+vG5PPjkwZ2T9pa0jzr9y86lWPm5ddF8flTrUf
o9eT1qY5R1G+0Kz7mkT5Xr1P45/xNP8ap8ykcoHx74u2d+HIsfW3lO95Z9X4
Gquu/LOO14UJx+vSkX3xyje7M+3zT7acebINx57UNNbxp3+fs2849TOa949S
tmf+yP6OH4uam6hfk9aa1n2RbUsbh9as1mTe95p814goazl9+7nE980cWbO2
bG3adyrTmGWfztv/JIepOrRJr8dz+fHjTsex5mOpcc5Xn3qP7s+Yf+Ba6jlN
573496Qxc7R51rTy6/HrUrQGo3/2ybYWmeu8+9y8Tv5q5PjoOTr+uvbFrgtj
sr2+8xld23V8aX/Ejz0dv+b13zzHmPlnbZPOweP2ycg1Xeug6LrLeo3Mc/0v
a4248s/ywlcbx8yR+ZrWwJR1xxOvZfF1p99Htnn5YGTtZO0TAAAAAAAAAIBm
6ZjSQ/4ZAACg5p57d3Hw/LR+1ID2RdXrod2k5Z/NjKWNcpBprylDHM+gurKC
orxOlJVKklSrWrnjeObJzHUp4xTPmSlbNvZ77yfme+P55yinFc8/f7j2+Lj+
zBy1KEOs97qyXdN3nBvt93MjV6s+lRnuNfJwymO79rOZn07K4rrEs72az/hc
xTOiZlbOnmO7lpiDT8uTpa2h+Hji+6fs/LP2hXJ1ynknrX29bubd4sdCWl4x
vh3vrDycOs54/ln1cc28W/eR22Fu1OwzKZuYRNnKKOP6t6f3Ophr3Myymp+J
3yuhPsy5+GTz6dH3q873uLkz1oLGHdUqzbptqkdr9qvcZbcx57P3Xsn13jif
NaL3af/H93l83bvqC0eiWrLadldN/Li8+WdzO/ti49Z9Cpr7+Pb3xnK75jFp
y+vqtSjbm2dNm7Vxn+2L8TlQn2xrkbnOu899rpOiGsdZ59M8f8Rz1ZpX2zkm
7ZyedN2Mn5vKzj+b18g81/8y14hP/lm0bdH7zPGYeetwjeicGctlR/Ppyj+r
PnjWPgEAAAAAAAAAaJbG1L6g0Zntf18BAABAa/1iWn8wODSEGtC+qHo9tBvf
/LPq6arusjJJSXVSlSVSDlR5mnlP6yNLPGcaz3WpzqVyQKofbGaDwlzYyNhU
01F1K1Vj2szS6fn0UZ/65yinqcyimT8ys0JdG06O/v03C3aOyUbpmfD6uzJi
f+jea63/nJZ//u/TVoU5MOWqzXrI+nyUq4rq6Iq2SzWwo+95o38w/JtZ99R8
Xd+n/Fn0mrYneu3fFtozrWb9Ud8as0lzpbxclJnSXJl5WOXazHqk8azc4oM3
wlyx1om2NZ6ZU31sZV01j5+N/HP09482nkpdQ8qXvrlsaExtUzNfaOa78uSf
tT3qO8pAav9F+8jMQqpOstantiuaX33WrHn9+tIDiesonNcjt8MMpz4jZjav
L5adtuWfo4yh5lbZ4ujvyuBGeV7l4nz2u5ln1TrU3zQv0d+UGY5/5oOndWvD
9XD45uhxoG1SrW59d7SvNE9mjlYZ2mg7fzJ9Tbje31g2mHvbZhv3Zvzsi2f1
X7VGdL6LctVZ3xvnu0bMWvNzR7Ylyo9rHvQd0Wta+659E53vFj3Nq2ZRRv5Z
dF/Gz79cH25jtJ3KnSpD+5uR9RL9TXOnYz/6nJkH17k7+rvOUdG8meeRrPtd
fZo5z/dWHxntT9eGhQef5fN9sq1F5jrvPo/Ptc71mkdt2xSjz9lGHXbf+Yxf
2zV3Otb1+ejc5Zt/1v1P0fESr3MdXz951p3PNTLP9b/sNeKbfzavl+ZvBP3m
WGbs5+jvuvfFPN7MedG4Rvv6asO4ecnaJwAAAAAAAAAAzdAxpZv6zwAAADVH
/rk+yD9n55N/Nuu1jn7OyCIro2y+psxg9Nqb3459xrqZ6zKzbKI8W/SaslDK
wZqvv29kK83skJkHe2nO1nFj/c+tZ0azu9HfFho1auPjD7ffyE355p8lLVsc
jUHMDPMLRp70Dz0D4z4XjTOtLqyyZOE+2nLGup+jPJfywlnXiFnP958Tsl3T
tp4dfd2sR2pm5ZR9U+7Z/JxZ13rKuuNjXlOOK8pHK0+etobMdRD5g5FFi+oW
S578c2TWnsuj+yFpjqLccvzvP/p05WifH20aexxF60jZ0PjcxNeM1mPSOM1s
oplTV57PNi8al2u/f/p0vyq7b25bdM6I1x3X+oz2mT6TVB/aZB638Yx7XJ5t
i7KxPUdvO7c1y3vT2NaI5iYaX1JdfM2vWa/2J9PXpn6PWW9c+fqs4ywj/5xU
g1/M/OWY/dP9bP+Yx562O/q71nsZ+13nktHM6/qT4z5j1hV2ZVuLzHWRfW7O
9Z/69o/rO/pcfK255lPi9Z+Tzj0++Wez/nLS+hHzHJB33bmukXmu/2WuEfHN
P6s28+g5fWSO42vNNi/a5+bf31pxaLSv+G+lvH0CAAAAAAAAAFC2js4e8s8A
AAA1R/65Psg/Z+eTf056Rrqyv2HO8fi9ca+Z2SHVOzRfM3Nd8byomd36bPv4
bJWZSVa9yujvUd3VhSn1OZW3iz6nDJr5PQtSauGan8mSf45vj+oyvta7b3S+
4pldW7ZLY03LB0embjgVvj7HqAOaJBpz0v6yMcegeU56z08/f5Zb/9jI+JpZ
ubdXHh73uXdWPatDmZT3XJJSr9i2hqIxRzlcM0vXzPxz0jGgmtxmHeeZuy4m
bl/aOvrV7C2J85d2bJp1PZNyb2Zt2KScYHztRvVRZ8RqhOp+iKgfs66oxjK6
XtefcM5RdExoX7lqkufZNrMW7czdlxKz8pEs701jWyMvGvvyvVXjc7zy56UH
Rt/zyje7U79H6ztaO2kZVJsy8s8//2K913fpuNZ5W/dnRJ9VHXBzndnyunn2
u3muTVpX5mdc2dYic11kn7vOcWZdefPvWfPPSTXc4+9Jyz8nndPj+8z8bLPy
z1mv/2WvEfHNP+uer+h9v1+yJ/V9Wusvzd0avN5/YEye3HyPT/45a58AAAAA
AAAAAJSt0dU3gvwzAABAnZF/rg/yz9nlzT/PeFq7NylPqxqgabldV64rei0p
/2zWlf7XBc/yz+Zz7FXHNS56TVQj9CfT14z+u/LDSfOSN/+sbVKOTa8tM77X
ZGZrbdkusx62a9t6HLlc7d/ovWk1WpOYY4hn2U3Rtpo5bFdWTjms6PWk/PO8
/VcTc22uNWTuI81R9Ldm55+VQVPuVzWEk/Z7PNfnyj+b9xGYdazTjk2znnbS
Wuk7dvfZWuvea93vZt1d7VPluCNRzXEx67u/bmQ59XnX2oqOW9Umd703z7bp
ODf/Hq0l1SiPr5ss701jWyPmWn95/vbEz//8y/XP8rIJtY7Nc0z0vnmxGtw+
ysg/2+ZEa1Lnb/O8bHp7xaHEbUnK6+bZ79HfVFc9aXxZsq1F5rrIPnfNtXkP
Qtp4ffLPSdd223t88s+6/kXvedXI+DYr/5z1+l/2GhHf/LP2cdo1RtdlnU/N
5y3EmWvBJ/+ctU8AAAAAAAAAAMrWoP4zAABA7ZF/rg/yz9nlzT9/XpP8s1mf
2Ifq1Zp1atMyXHnyzxrL7H3DY75P+Srl0LqPPMvE+uafVavRd7uUubXt564N
J0ffq0yz7/owx6Dsa+o6OvpkHfUceTYOZ/55qT3/PLeE/HPf0bujf2tm/lnr
0cy767jQMfXB2mOjf8uafzbn79OtZ53H5tz9w4lrI8mrjvzztG3fefUz/8Cz
2tzvrznqlQGMH7eaW9c6zLttypCbtZ0j3xy+OW7NZXlvEtsaMedGNeGTPq9s
ZvQe5Vtt3xXlGZdmrOcuzcw/6x6JseelO+G1wqxXnCX/nHW/m/2lHVdZs615
57rIPnfN9d821Tf/bH5W9Y6LrjvfZyT40PW/GWvEN/9s5vk1l9HfNS7zN4Jo
7UfPd0haC678c54+AQAAAAAAAAAoW2Pq0qCjs6fycQAAAACYmNo9/yzKuIZZ
zMFrYZ7MRu836z93rj+ROC958s9mxu/L3RfD2p7Ra3/ofpaP8s0///iz1aOv
ad5s26Xspm0//9nIGqdtcxJzDGmfM/NkZnatyvxz9PrsgeHRv5n5Z63v+Gfy
5p9/9sW6oP/EvdHjQTWDlcsbPcaeZsOz5p+VmYzG844xf2nHpplZVsbdtl7M
8cXptaimqvLsOjfELTHqqkbZO2Udo78l5cvjohqsaXlIU9FtU55RecGep/tC
lhi1wfO+13eNvGbMTVptbPNc8PbKQ9bvMnOUPrW2TVEONW2b8uafzXPMoqEb
wcvzn52jzZxvlvxznv2+9Om6SqsrnjXbmneui+zzds4/6z6Z6D2/mr2l8Lpz
1X/Oev1vxhrxyT/rGh3dI9N/4tl+07o1a+rrGQLm9Vz7MWkt2PLPefsEAAAA
AAAAAKBsqv1M/WcAAAAAzTIR8s9R7lD1OW25zqTxLRi8lvierPlnbUuUgU3K
s/rkn5WbNT/jU6fSl5lj1jg7pqbXSjf3i/45ymwtGkrOir04e8to32ZGuqr8
80tzntWs1nuTxqnvHrePepL30Zg1duzuuM8pmxx9Tmt03DGWM//83uojo/2a
ee20Y9PMw6XlGn38dtHO0X7e6B9MfI9q7UbvieqCm3XVzXrVabTdafm9uLK2
TecH83uVXS/jva418sJXGxPXpOndVc/2tytna2bN540cJ65tNv9d9wTEM5im
nqc1Y7Pmn6N+dR7++86lY17zyT8nnfPz7PfovKHzVtJ5Lmu2Ne9cF9nnZeSf
k+ZTmp1/jtaBmDWO86472zVyzHHnef1vxhrxyT+bmWNzPfzKuC69v/aY9XNp
+ef49TNvnwAAAAAAAAAAlK3R1Uf+GQAAoGLPvbs4eH5aPyYA7cuq11PdTIT8
s5k/TcuZxZn1a806paJxmTU/ffLPetZ89H59Nt6fWcfUzNYqUxn9/W8JYzez
ZP/+zZ5C+/qjjc+ee68cnzJe8fcou9Vz9HbQteHkszHsfZYBfS2h/qaZEX3F
qPvbivyzWdMzmmtzzpTTjV4z635Pj60v1ZbtNer9xvPPZm1v7WvztU82n07d
DmUgo1rKaflnbV/8WNC+iWqUxr8z7dg0M2/K9efNtU3fcS51WyPKDEbvifaP
jvtoW0X1q+Of03qPxvX+mqOj750RO2ZEWUbts7zbpn2YlKs2c4Mvzd2a+b1p
bGtE2xLtT2UudT9CfH/3Ga+budE0mvfo+5RnTKvJrP7MetyfGeei+Ho1c7VZ
889RfrUvIf/9l2VDz84FK8bWtlYeVn9PqgucZ7+b2/Dh2uPjXn/b2Kc+2da8
c11kn+fNP7vmU8rKPyddr3Rdjl6P13XPu+5c18g81/+y14gt/6x1YOaNtSbM
zPXvl+wZfS1+X47WiNZ90lp4Y9ngs+vckrG/DfL2CQAAAAAAAABA2cg/AwAA
VO8X0/qDwaEhTADal1Wvp7qZCPln5YvMPLPGpjyrxqHM2TurDofbGWUp5TWj
pqe24U99+8JMlrLQc/Y9y8+Kb/3n0f5OqJbnjvB58xrz/APXxvRnZmvNOpM9
R++E+WFlJ6M5N7Nfysi9t+pImPlVfdWff7k++GTLmTBn5pNh0mfMTG33yHa8
vfJQOEZl9qZuODVa61nUf3wMonq/mldle5VVi/6u3LH5fa3IP2vfaTw//Xxd
OGdmFjv+Oa2TKBsomruX528Ps5nRcZC0j0R5cDP/qPE+P3NDmGN728jfKeOn
10T7ypzPtPxzlBXUMac1+m8Ld4x5Tbl183O/MTKGf+kfGvPaDCO3r4ybal5r
v2stqr71ooM3wnq2aWvkyRzdG/28bT2Zcx0dW2ZeWPvmz337w7WiLHSUOYzy
hjo+e4zM+czdl8LsoHLIyvprDvqMrGCWbdP8azu0v5WP1Pi0bcowa66jfrRG
s7zXNh+2NaLXVUs7el1Zex1z2lady8z97ZvJ1XnJXLM6b+k7NC/KY5p5bPM8
bdYcXjR0I9xHWnPm+5PWq+vcba4HnVd0HtN+17nc7Deef9Z+M88t+py2IfqO
rGvarHUfXoPWnwjPYTo/qC65+Vqz5zrvPi+Sf3bNZ1n552iNqG+tdeVxzfOr
mbkvsu5c18g81/+y14iZf9b5TftX+177yRybvN4/No9s1s3XNUvHjK7xWtvm
PTnxtWDW6dd6VD/aLu2LvH0CAAAAAAAAAFC2js6eoNFF/hkAAKBK5J8nDvLP
402E/LMog9VnZHuTxGtDzts/bH1/xCf/LGbdXJt4ttbMEI9m6E48mx8zU5pG
+8tnfysnvPDgdWtfyuwqm2Z+zsz4Juk+cntcfdNW5J/TKOcdr8Mpf7N8Vpm8
tH2kf0/6jLKcytotc4wnKdcXz8Ulj+l6mPVMm1f5k7GvlBU0tyNJWl1YUWbx
2T47lPo+MbOd0Xu1Zs0crOv7lX+M8tapa/tp3fMs2/bKN7vHZDGTqG531vfa
2NZI9J6Zuy5av0c5xix5RGVBXec91WU2jwXlhtPeq+vB0pR65a5zt84Zaf2a
dcHj+ee3U85v0TGYZ013rT9pfX/EN/+cd67z7vMi+WfXfJaZf06TVM8977oT
1zUyz/W/zDVi5p9tazSphry24ZvDN73GYq4F5b6TtllzlbdPAAAAAAAAAADK
ptrP5J8BAACqRf554iD/PF6Uf1bNQ/PvroyUatLqtUWxbKoUyT9H9VZVSzX+
mi3/LMpmqZZkPMuojNAHa4+Neea86Ps1HvP9+mf1oZxw9DfVhTQ/l5Z/1nab
tUqjXJe2RTU/o7/Fc8LKhc17mvV9No574Wei9yhTF68jLco4Kf+aJcOk96re
pVnbVpQZ/nL3xbCuc9LnlDGLcojKM4ZOPFk72vak/RH1nZR/jrK2yg7H9434
5J+V9es7end0rvX/z943HNa6TNoGZca+2DW23uiSsA724TBnnLaP5D+WD43L
OavOb7Qt8bqaGv9Lc7aG9UD179Nix1i0jlSjVWvEzAFH86rxJm2HWVM3fqxE
+zeejVOf+pzWdtraeH/kOIneb3ufmGv681jeUdsUr6mt9aJxxbdJ/SRlplXr
91cjay7vtqlfjWvp8XvjxqE6z+Yxk+W9NrY1ElGd3GitRHOk7Uk6Rnzo/KF7
L+LrT1lcraGkY+u3C3eOqQWvMc/aczlc99EamLbtu9TjLm0+9NllY/bLvfB8
qnq98wefnL9ei9UfV1/TYjV35Q/dA4XW9J+XHhj3/vkHrobnUtWq179rXzR7
rvPsc9dcv7/maPia7juJv+aaz7Lyz6o/HM92a5t07KfNX551F8276xqZ9fpf
5hpJyj/r3KE+9FtJ1+i0c7lo/S4YHHt917VdtaJ1j0i4xo6O39e6JsfXov69
SJ8AAAAAAAAAAJSp0dUXdExJ/7+RAwAAoPnIP08c5J8nDz3rXtko1Q71e//a
4PmZG0qphajv1Heb2Swfym8pB6bcUto4lKH6+Rfrg59/uT4xc5yV+lBWOCnv
a/uM8mhpGeNmS8oGRvvaljEzKev8/FcbMu8jfZ/2j+ZL+yv+mtaR5sV3HPHP
azzq22cdanu1ztMyl6L9pP6UP61iX0XHgs9aieZP7/eZvyzbpvfovRqHa26z
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
6O0AAAAAAAAAAAAAAJgls8/mnwEAAAAAAAAAAACATTBe//nQFYNvBwAAAAAA
AAAAAADALBccOT6egR56OwAAAAAAAACYz19+7cToH7938+hrP793LP/9X//1
xODbBQAAAHtp68gx888AAAAAAAAAGyIzz7ecfHr0zh8/HE0q/5bL5LJDby8A
AACs2qcPXWH+GQAAAAAAAGDNferzl4+u+fVjE2eeJ5XPyecOvf0AAACwKluH
jo4NvR0AAAAAAAAAdPvzi384euGNdzrnm+976sXRd3754Fj+u6t8br7G0D8H
AAAArELWfrb+MwAAAAAAAMB6ytzyO3/88JyZ52nzzPm39ix0voYZaAAAAA6C
rcNHx4beDgAAAAAAAAA+6VOfv/ycdZ//14k7en9+LtteBzpfc+ifCwAAAJax
degK888AAAAAAAAAa+iaex/7xPzyIus353Oa5WsO/XMBAADAMi44ctz8MwAA
TPHv/tu3Rj/9zROjH9xxcvBtAWD9fOFHt48fJ/76G9cOvi3AZnB8CQD09Zdf
O7Hwus9t7XWg87WH/vnON54/AgAArM6nrf8MAABT/Z9Hjo3PCb3x7h8H35Z5
ZK5m6G0AOB/k3PWycwjA8Pbz2GnTji///T9dMbron78/+HYA+8NzSVgvt558
5uy88n1Pvbj018vXqPK1h/75zjeePwIAAKzO1qGj5p8BANbEn33pu6M7Hnu2
0+2P/H70wzsfHl163V2j//uSqwbf1vPJpsyn/NXXrxkdv+2B8Xmst9//cLzN
b733x9EvT992vnr93eO5laG3kb3zP75/y+je370wuubXj40+9fnLB98e9sbf
H79x4uPELx56anTl7Q+MvvSTX7q/77N1O3+dY4VJt5NZ8ngx9PYPzf70/PF/
ffkHo188+NToudffHp3a3hnfj198853RTac/lvvRXs7/bcrxZfyny3509vo5
dvpYcy++x80PPT3eB/3d5df3unw9bzoo62dPenzP48tXfnr36G+/db3HdvZU
Hvt+fPcjo0eef3X04cenxvf350/vG2+4/8nxOqVDb9/5Lvve7BPm+Zzr7nv8
wOwj+dronT9+eHZe+c8v/uHSXy9fo8rX3stt/8y3bxj9+skXRq++/d5o5/Th
RI4pnnjpjdGJ08fa2fcMfd0OYd2ePwIAAGyyrSPHR1uHjw2+HQAAfG30n7/y
41HfHvz9y+NZhKG3+XywCfMpmXnc2Zl+m8m5pv/yv3+y8u/9F/9y9ejL19wx
vp6Gvh7OV//hC1d+4nf92Auvm9k7oP7lhnt6PUbknHJm+qzdtz/W7fz1y394
t/fxRLur7nx48O0fkv3p+ePym+8/O9Obtk8fSDX/f8os9F4cO8UmHF+WL/74
9rPXyQPPvNx5mRwL/sN3blr4e7z/4cfjr//SW+/2unx+L+mJF18f/PpZhb6P
74++8Np49nsvt+U/fvE7499njvGHvl7YezlWvOeJ52fe9vL3h3WfwV92P7TO
21b1PbbPa+YP0j7yfPeXXzvxifvjqr5us3yPvdj2u1v7lxxrtf929ZunXlz7
/cuqrdvzRwAAgE1m/WcAgPVR88+vvfP++Lxzydp0f/PN60aHr7ptvA70R6e2
x5fL2r7596G3+6Bb5/mUnCP67TMv/em80dMvjdfnqvcnz23nf179q/G2p9x2
Vj3Hk3XC0v97xc8Gvz7OV9/55YPnzCiY2TuYaj4q67o3HyfyepismXnxtXeO
Tj77ytlzyg+d/u+ht/l8sG7nr7Pvz22i7XNX3jTeznc/+Kjz372uyv70fJG1
BqusR9ic88zxePalr58+Hq85nay9u+ptWOfjy7Ycbz76/GujV/7wXuf8Xubx
UmZzF/0eNf+cvn3L/TMvf1DnnzNjmuP4yM+Y2fOr7np4PHde8/l//Ojj8fH9
Xm1Lfsfpe796aPDrhb2V/V3u1ynHjlkvOL//el1r9o25P368+/eH/J1i6G2e
ZBX7oXXetsr88/mpedyS9/ta1dfN16o+c8UNK9/uvJdKHUtlred6/U5ux/kb
Z9Y1r79v/uH9D86rGeh1e/4IAACwyS7I+s+HzD8DAKyDmn/OOchpl8tc09vv
f3h2Bm7o7T7o1nk+Je/PXmUN6EmXy3mkzEHm/d1XvR5snbcx/zyc9npQZvYO
rpqP+tlvn5x6uZwj394dgr70ursG3+6DblPOX2eeLuUYYuhtWVf2p+eH508f
D6VbTz4z8TI5XvrVo8+O56D34j0u1vn4ctGfZVXzzx9+fGrmazwP6vzztMf3
7J/yfi7Vv/7s13uyLXnNbTL/fPBlvfWUmfppaxNnDvq107e9Wx+evM8c2ir2
Q+u8bZX55/PT12+89+xtIK/VW9XXbb7uL99jldtct/v05WvunHi53FafefWt
0f1PvzT49byfNuX5IwAAwCbI2s/WfwYAWA9955/j0A9vHV8258CH3u6Dbl3n
U3KeqOYb93INuFluOfn0eBvMPw/rmnsfM7N3Hug7/xx1TvXGB343+HYfdJty
/tr8cz/2pwdbrcOZ9mKuua91Pb5cRO1blp1/ztzzPU++MP5adz7+3NTLn4/z
z5Hb72921+t8548frvx1jfHla+4Yf33zzwdbXh+Xcr/L88qht2dZq9gPrfO2
Veafz0+bOP9c7yXwwhtvD379raNNef4IAACwCbay/rP5ZwCAtTDP/HOdQ+t7
DiyXyXt3Z03QzAtMulzejzLnKf6ff/vpnpxPX0TWu/774zeOPnv053PPqeRz
//t3fzH6q69fs/DPM2k+JWsqZ7v+7vLrB3mfznueeH68XU+/8ubKr+/PfPuG
8fWW/551+cynpHnnn7OOWL7Hf7rsRwv9TnPd1/unzmMVt/G+96f9Zmbv4Jtn
/jnnUtOTL73R62tnrc3/79jPx/evafet3GdzmXW57ef+mG3JNi1yv150X9Q0
6fx1bde6zBUNOf+c21Sui6xfusjn57F4Px9z7U8PrjreTkNux14eX2Y/mGOd
HJtNWkc5XzvHe7lc9g2ruE5Xsf5zjvNObe/MPLacd/55v/ch85rn8T0/y0en
tseX7zOjPO+xfW3LPPPPuQ3k+s1xxJCvK6Cf7CPeeu+D8e/5J3c/stKvnftX
7ruruC3k+KnvMeci+6F57xtd6jhy2rHeKvaR8/ztp667PvvIPEbUY8Gi1wF7
L393qO576sWVfd37dl9Pkz5zxQ0r3eZ6LMn7kK3y6y7zd6Rl7u99/wZUl/vc
lTdNfS+LSc8f59nvAQAAcMbW4WPmnwEA1sQ888/5W3/K+r9d//70K2+N3v/w
o/F/Zw2vvKdts/Z5s5zfzhpizbK0cN6HMn+77/oeOX/3wUenps4y5VxHLvPA
My9PvEz+rp/L5P3Fmx+/7Kd3n7NNNSeSn2na9TPp58l7as57HrbmU2qt7bzX
dK6X3aWXz/byW++OZyraP1t+Dy+88U6v7/XES2+Mr4uc75h2ucyRVbMu20fO
y/zorkdGb56+bttlHuULP7r9nMvn/ZIzQ1czKpnDyLaXu594/pzvk/PheS/5
rDPW7OPTn3vi149N3cb8zt/74KNztq/5PUvXbXaR23jf+9OnDx0dXx/53n1m
iHJd57KrnjcIM3sH2zzzUV+9/sxlT3acc85+rXk/zfnX7cZOrT0rkfvuLx/5
fed9N+tQdp3bzTnffI97OvYFJeegp91vyx2PPTu+zMXX/um9k/M49pN7Hj27
D2r2u5ffmPr1ltkXdanz11/6yS/H+4B87fb+Kt/rFw8+dc7nfuX0Y11+tj6/
02x39j+5/CLze33mn5fdnswE5P9/48Z7z/6O8vjZLL+zR55/depMQMn7XbQ/
P+VxNa9t2sv7m/3pwZTbZe3uFr0NZU4st/ObH3p66uVyzJjLHbvtgXP+bZnj
y6Yzxygfj/87rwF58Pcvn7NfzP67+TnXnN7PtS/z2unj8GnXR75Pfpbm62Ou
uvPh8efVcVEeR9rHZH1f81Dzz/nv7Ifrfj7p8n3nn+fdh+z185tJ5nl8jxxD
1mNL17/Pe2wf2S/n8jVbndtI83dZx8IlM2i3PfzMOcfFdbvNc9tl76/sjbx3
UMrvelXz6rmv5e8Y7fLcPccW0z736tPHCnW/yz46x1W57zTL7TH7yfbnzrsf
WuS+0ZbZyewH2vvRfP4vHnrq7N9aVrmPrFY1/5xj8Gdf+8M510G26Yent3td
XgvPGbmdNFvV12226GsUJ8lrINK7p58TLXt7WvS52zL393n/pprXAD3/+tvn
fJ987ytuuf+cr9+cf553vwcAAMAnbR06Op6BHno7AACYb/455wjTpPeSzDn9
lNnYmqPIua/MkP3m6ZfOXi7nA/Lx6uU/vDu6/ZHfj+eE6+/7+fzv33HynO+R
c+Tp6K2/7dyG/A2/5unyd/tJ5zy+9YvfjC/TnJf9t92PpcyCXHff4+MZkxff
fOfsx6/pOM+R87ePPv/a2e3ONuY8Qr52zVVk7muetWJqPiXV1045l5nrKrOF
dR4mP+eXr/nTfF7O09R50ZxjnPZ96hxlLj9rri3nVlLNzCwj84Q151DXT+YV
c37pjcZ5opwnb95uchuL5jmo+lhkjqP5fTJjUl8v51Wz1lB+N5kdqdtJZha7
bif5/Vcnn3t1fHvMfEjORzVvuzlHFe1z3Ivexue5P2Ud7tTn/Wjfeu/M9ZD5
0L3Yl5jZO7jmmY+q233uZ+1/q/1a9pGZcah9T27PmWe+8vY/zepljrhus7mv
PvXym6NbTj49evz016/9W/avmXttfo/M66XsXyZtY85HVz+Ych/MPiM118Fq
rleW+3POfWc9+uzDqn/83s3nfK1l9kWT1Pnr7AeajweZjcncYfY7Vdbjbu7j
672h83mzvme9V31+B4vcfvrMPy+7PZl/Sjn/33wMyWP5rQ8/M76O6nrOdkyb
tajrNT13+uvd+MDvxre913ZnGXMdf+HHs+eUlmF/ejDl9phyXLnIawlyPJDa
c8Vt37zpvvHlutbRXeb4sqmOUXJ/rH1yXu+V/WH2ZVW2JT9rHb/nbpj9eI75
6ngonz9p/f/6Ps3XeV1118Pjj7/WmNdpHgtmlrjv9ducf87n1GvW8jyh6/J9
5p8X2Yfs5fObaeadf851VNvRXnd2kWP7+tnze2u+XrD5+8w+vC5704NPfWKf
mNcB5nZ77+9eOPu7zGPsurz/AZ+U+27KfWIVX+8XjdtDbj+5vWUf1Jw5zG1j
0v2l7qt57VRuS7WPyjFTbrevNV7D0HwtXP0sffdDi943mjIH2dw35+vn7xQ5
Fqr7ZL5WnoOuch9ZrWL++a+/ce3Zx4v8jrLfueH+J8eXree6mY0e+nbKJzX3
zX9+8Q+X/nr5Gs377aq3t/m3sNzHFv06iz53W/b+3vdvqtE83shjYP799tZz
wDzGdn1OXis6734PAACAT8raz+afAQDWQ5/55/xNP2vIVV+9vnstpfpbfcpM
Q9Ze6bpc1ohLOS/QXvsk3yt/d6/a/14zypPex7X5Hp113qDrcpkPa/5NP9+3
zpN0zZJmTiHnF7tmmGseLufx2mvljedgXzozB/LbZ17q3JYuzfmUlJmu9rxW
zu3U1862N9fRyrpo6bbGzECX+r3e8+QLM7cpa8CknEde9naXmZyU80dd67Tl
e0y7XdZtaNp7lDffYzm3l/ZsTeYr//D+mX+//OZPzrnk61bt9wbN77Rmeyad
v1/mNj7P/Sm339R+H/u2/Kwp6yAt+7ubxszewdRnPir3r5yXrbr2le39WmYc
ut4HOPeROtee2Y32PiLfq9aOy/pb7fXPa6Zu0us/nmuskZV5xK7LZD3TlBns
+li+Xso57677Yx47MjvYPg++zL5omuY572xT9qvt7539Vz22tV+/U+fgZ53b
Prn7ePn1G+9d6PbTZ/552e2p+efq16cf09rrPGdusebUJ83X1Nxoblft19NE
zd7l9rnXaxTanx48ua/XLEtui1m7fZ7PX/X8c5r3+LI0j1G6jnW+fcv9Z/+9
9m85tmt+rez/a83BrtcXNr9P1/tc1H560nOCPmpmtu7PmTFMmTPsWit+1vzz
ovuQvXp+M8u8889Rs1Ht19Mte2yf2e9Jt9uS6yePd3n8a98u8/uqdYC73veA
4WUuP31jweOJrttLyhxf+9/zWoDa3066fTePo+pyzbng3EfzHDllTrDra/TZ
Dy1738ia5/Wz5Dloe9+Uf8/25bU1zf3KKvaR1Srmn+s1N3n9YPvrZdY0x3fT
ZsAZxq0nnzl7O1jF34GaryXN196LbW7uH/I69dwX5vn8ZZ67LXt/7/s31exH
q6z/3v73HGPm89vHjKvY7wEAAHDG1pFjo61D869zAgDA6tX8c87D55x/yVxR
1g7K+iE1S5Zz+dPeB7H5t/rPHv1552Xq/H3O4f3NN6+b+LXyd/iU2bPm+bHM
1KWc++46D1efl7VPUtcapM1Z5zp/mHNuadZ8VlutWZnrpmuOL3J+/uPdNWCm
/cztz6m6fobmz1Ln+rOean285l3zfaedr8xa3unwVbfN3KZaD3nSjMo8sk3T
3u88/17XWdaKav97n/nnH+++R/ek9coj67SmrOncvJ5qfnzS+fKc281tqOt2
uOxtfJ77Uz6v7p+Tzo1FneeadltaFTN7B0/NR2Vu4U+PE3eOZ0uy/nHWbm6u
PTdp7ri5X8u+tmu2LK7d3dfka01any63/ZzPTr9uvX6jXl+Qx7D25+V7psw9
1/qAXbN9de66+RqHmk+bdy2xZfZF09T9OjPi087rX/bTu8eXyzxf8/qs179M
W8c0101+tTHp9zVL3/nnZban5p/zM1425f3ucwxRM0TtfWa+du1Pp82l1hq+
Xe8pvWr2pwdPZrua72GR99TIsXWf+/2q558XOb4sdYyS11V1HadFc/3BSa8X
++r1Zx5fXp4wY7Pf889R72PQta+fNv+8zD5kr57fzLLI/HPNWLfnu5c9tu8z
/5yfa9Lzrcjxcsr1sOhtgr3z/O7rz9rv3TGv3A5qP/rtKY/Fef1yyuN+ZoTb
/17HUfn37De7vkbmHuu4oWud+j77oWXvG0/uvh7l4edenfg16uvMu22zVKuY
f641ca3PvlnyGqlm7deGzyOf22za+7EsK3+zapb7Qd99zzLP3Za9v/f5G1Dz
eKPr+W7ze7U/tor9HgAAAGdsHTo6NvR2AADwp/nnPuU81qS5tqi/1U+bDas1
O2+dsS5xZrTqb/rtmetadyznHNqfl3m5nPOu+YTMlbQv8/fHbxz/W3P9x5p/
zntbznP91fzdrDmomh2+/OZ+81I1n/LmjHV9o+Zc2rNl9fuYNAtWsxb5mfuc
08waNmkVa3b1UevOHOmYzZ41/9x839NZM+d1m2yef6rrbtrn1nxMe+5wFbfx
5jbMmrWsc1jTLldrns679tGiJs3s5eP78f1ZrZqP6lPex3rSXENz7u4rE/ZL
uV/ULHVmrKdtV805pezz6+OZO0tda/zW2p45V1zrcHbNqdWsSfM8+bd255+z
L+x73S27L5qm7vv5mWZdNjOK6dLr7jr7scwP1XU96XdWs4mZd1v09tN3/nmZ
7an551tOPj1ze2rdufYM6U92Zx1m/X7/6Qe3zH07WIb96cGT+c3c/mq2JOV4
ILfBrtdjlFXOPy9zfBl9jpNqfqj9GpWmek1KZoG6/n2I+efmWqvt5z3T5p+X
3YfsxfObWRaZf84se+pac3eWacf2feaf+/1OzzzeTbsvMYw6HuqaRZ5HzTV2
3Q/aHt99vpa1p9v/VsdRs57HTzs+W8V+KCbdN+q11tknNY91+1i3+eeaWe/7
enDWR/tY9M8v/uHcXyOf02w/jmPzt6L6m01Vrzub9Dl7+dytTHss7PM3oDre
mPQ6+mlWsd8DAADgjK3Dx0YXHDk++HYAAPDJ+efm+s+Zkcp6Sjm/mPcorXMA
6eaHuueL6m/109ZxmTXb1JT15tJNrfcwrrVBM2fX/HjN857cXRspa8ml9jph
V9/z6Pjj7fXs6pxc1labtOZoW10vs86x533BU9/5gppPeaPHfEpzprB5/uNr
Pz/znphPv/Jm5+fV+qZ933f05IT13vZCrv9aw7Vr3nrW/HOtf511xmZ9r1pT
L2uE1cdqLnnaGnP37L6Hc/PzVnUbjz73p6hZmNwWu263md1JeY/5vf69NTXf
K7fZf/jClfu6HSyv5qOyT20+TuS1FVfe/sB4X5z3465yW/x6x/229lWZN5v0
vf7u8ut77/viid055eYMc+4HNbvW3jfXfiX7iNov39Z6rUJ9fn6O5j4153+r
799xstf2LbsvmqbOX/dZh60ue1Xrca/2Y5lT7Pq8zMykPjPWk/Sdf15me2r+
edLxSVPe7yBlxr358XqMy2zitM+vec1J71u9F+xPD6bcN/L6uOZ60Fkf8/ht
D3RefpXzz8scX8a0ueRS780+69i36jqGGWL+OfK41rXvnjb/vOw+ZK+e30yz
yPxzPVbN+34ws47tVzH/nHUqa4582RlbVq+OzfL3h2W+TtZBTs3XdE2S93pI
r3XMSvc9jqp117tem7CK/dC0+0bdL+58/Lm5v+66zT/Xa6kzf7rsbYD9lfcc
efHNP61LnP75xK96f3573ed8rf18H5M8H8vMcfN1Z5kd7loPei+fu8Wsx8I+
fwOq92HI60LnvS5Wsd8DAADgjMw/W/8ZAGA91PzzrDmezEBk3qtqz1DFrFmI
Oh/Wd43lnI8Ynz9rzShNOo/59d05i3ofx5ojaM/r5n0sU85tND+etUarbOOJ
Xz82njmYtH3186TMxU1Ts8iZ2+3zs88znxJd7yebcyv13ppd5xjrfcmzXlyf
71Frpf7oru65tGVkGzLvkOunZo+rrLnavvys+efMZdZ5q1m/m188dObnaq6B
c3L3vPrnrrxp4jbX7b35/qaruo33uT811Vq1XWsZ1Xm5rvvsXsn6Tu/88cNR
u5zr3K9tYHX6zkdlf1nzq137lj77tbrv3jNlvdCmWgOwPe9Va32113bOupDZ
x+S/s49Mua02L1OztCc73mc887XVa++8P94/TXv9y7L7omnmmX+uecj23GSt
F9o1m1wzeu058HnNM/+86PbMM/9c7+Pd/h61z8rs4rTfU80TZTtWeT+bxP70
4Mu+KDNutU57uvd35+4D93v+ObqOL6PPMUqtxT/rsaOO+9Zp/jnbUr+P5vvD
T5t/XnYfslfPb6ZZZP75/t2ZqFnvBzPvsf2888/5HeV1TDkOyHFw87W6qXl8
znqo2fRpz6/6qPtan/WQ61iv637e9ziqXoOUY432vy2yH5rnvpH9fXs/1Ne6
zT/n91X73Myh3vHYsxOfy7N+uo5Hc6wybS3o/Fsu0yyv+Vpk/ehVyOuG8njX
fLxo3+dW/dxt3sfCPsdX9XuY9Tr5LqvY7wEAAHDGeP75sPlnAIB10Hf+uWRN
6NQ1fzTrb/U16zlpPeJJ29Y1S1pr5TXXPqs1hWpmOedWU97rvi5T81M1/9aW
95it+YEq5++6/u6ftVDm7fGOc4Fd5p1PqfPJ7ffpvuXkmVm9E6012rImWmrP
/fX53S+y/lSX3H4ys5gZtGZZi6fWm0n/tsD8c81EzlNzPdfv/PLB8ccmnS+u
GaSs9dy8H6zyNj7P/HPWQk1d73n+3u78zrzvmbyoSbN649vnFTfsyzawWvPO
R9V57qwJ3fx4n/1a3Xcnrf87advuab2v+RW7+6vm2s61fnPmLepjT7385vhj
zfPH9ZqBSbMmmflqzinm8TD7xa61JpfdF00zz/xzzSE++vy5+7R6/Mh+rf1z
pq73jJ/HPPPPi27PPPPPWR+0qo8156PmaVX3sUnsT88vOZ6oWZrUfk3TEPPP
k44vVzn/nNelpHWaf46sLZtyjFavc5k0/7yqfchePb+ZZJH551oDtGtNyGWO
7fvOP2e+Ms9v6jWeKbOUL7317vjxvTL/vH7qtrzImqVl2jzzJHU/bz8X6nsc
Vc+nl5l/XvS+ked2KX+jmPe6WuX886z3uir1GrOu+efIfuz+xs+bsh70IvPd
7L8cl7bXga7y/O/K2x8ca888t+t6n6D9lGOKeq1s/p7TfA63iuduyzwWzjq+
WmQf2LSK/R4AAABnnJl/7vc3EwAA9ta8889R5+bb55Vn/a2+5pPa7zk/Sb3f
c9aea//b3btrjNb50/ztP+fB32zMc+RjmUvL9tbH6r03Z83wZp2WXKa5NkzO
kTRnM7K+W8psUs7Z99Fei3SSeedTai2Z9u/kb7553fjjmdVrfjxrAaec/+j7
e6/f3zOvvrX07S7X49OvvHX2us08c943tHn95tzZpPNCs+afr9tdGy+3tb6/
m5wjrs/Pbbiu0xsf+N0nzi199ujPz57Laq+pvMrb+Dzzz9m+2t7m+btaS7XP
+7euwrRZva73l2UzzDsfVXPGH7du1332a3VOtu965V+9/swaXe21UmtGrfka
jytvf2D8saz1Xx/LnFXKPqA+9vo7748/Nm39/9zn8rqDOndeta+jZfdF08wz
/5w5ypRz7u1/q9e2tK/DWld+2fPe884/L7I988w/13FPc7/bnCXIbaLv72pV
97Eu9qfnr3pf9Pax+RDzz5OOL8+H+efI63jS7bvXee0/ps0/L7MP2evnN22L
zD/Xc6P2LOmyx/Z95p8zW1mv68s+/NaHnxk/F2j+/h55/tXO2yzDq+OWq+95
dOGvUfuwaffbtrrNtF+ntl/zz8vcN+p12Vkfft7rahX7yHoPgBzb97n8katu
G1/+oWdfmXq57D9yjFz74JTZ0EXWs2V/ferzl4+uuXf+GeHHW8+Zhp6Bzv7j
1d3XeDUfA5d97rbsY+Gs46tF9oFN5p8BAABWZ+vQUfPPAABrYpH55/p7fuZ/
mx+f9bf6+l45z9Xn+9ScR9dauplfSzUfVe8ZnVnV5uXac7L1HrKZW+uzDTm/
kPeZrnP9zXmH+nn6znTNY575lFlrwDz3+tvnnLt4bXe+L/PRfbep1oxOy64l
XGtZ5eebNGO4zPxzzXPcPmNGaJqalazfcdYsy+x31bWO6ipv4/PMP0e9H3pz
pr3Pe7Kuilm9g2ve+ajsh6rmud4++7X6Xn3XHM4MTepaLzrzYqnmXZ7YnZ/N
Opl1mXqNSM2G1Pt2950NjOwPm2vZ/aCxBtgq9kWTzDP/XGuZ/aRj5ii/lzzG
Zf2zWt+vZpbnXUu0y7zzz4tszzzzz7VOf/u1PDWD2Vx3dSj2p+e3em1Uah7X
1TFD5qOnff6q5p+nHV+eL/PPmaHd2X0pZL5fPUZ0rW26in3Ifj2/KfM+vn99
dx3+9vufxLLH9rPmn5uvTTz57Cudt5cw/7y+6n0c3nrvg6W+Tt3X8rxr1mWn
7cf2a/55mfvGPWdfE3H33NfTKvaRdSz9hR/d3uvy9f4rzfdamSa/k6/9/N6z
M+o59mkep7O+Mqt+68lnJh6v1u8zl6m59noMqYaegf7KT8+8jvaJxmvXl33u
tuxjYZ/jq3osnPZa3UnMPwMAAKzOeP3nQ0cH3w4AABabf65zHO01lPr8rb5m
CPL+87O+z3d+eea8QP723v63ep/nWvvsxO5sV3smu86z/uiuRz6x7fOeV6vZ
qvbPt737A636PN088yk1GzFptixryKXf7L5Pdr0vbWag592uWoOq7znNabe5
rGc37XpbZv4579Oe8l7Yi2xjtuvd3fOwmZGr+ff8b/7/tHN1q7qNzzv/XPNS
mQmoj9VcT9+vsSizegfbvPNRdVv84KNTn/h4n/1a3XezHlef75XXIaSuma8b
7n9y/G+X3/yb8fxL7ptda6HnflKzXLW/nGctzFLrhWX9uvbPs+i+aJp55p9r
9vvS6+7q/PesGZrq/cdrfrLPPPEs884/L7I988w//3D3/Q/acw11W+o747NX
7E9pvoak+fj9D9+5afyxHANN+/xVzT9PO748X+afI9ufnnr5zfFsc+qaf17F
PmS/n9/M+/j+h/c/GF8+r69rfnwVx/az5p/rfQzyOtxp22j+eX3luVE9p1pk
nrfkPp/+59W/mnnZOg57s2Oftx/zz8veN+qYpf0aiD5WsY+s/dq0ddmbbnv4
mfHlr7qr3/u4lLy2pPZj876Og+Hl70ufueKG8d9IIv89aS3vdZqBruOq5jHR
Ms/dVvFY2Of4qp7XffHH8x9vmH8GAABYnfH8s/WfAQDWwrzzzzmXnHLusv1v
ff5WX5eZdQ4vcwi1DlDNP7VlzdyU9TtffPOd8fxae3ai5vCyBnLW6EztNR/7
qrVc8r6u9bHnd9dWbq65uwrzzKfUef6ab+66LjNHUWtp1nnU5hqlfWX+ImWO
sO96M+3fSc5ppmz3tM/rM//898dvnHj91RzyIudsaq6kOQ8yaZ25vbqNzzv/
HPW+svk91dxS14zOKpnVO/jmnY/KfTadbL33dZ/9WvM9fWed0625jtR1jr05
K3h49/24u9aJzus56vZ69+46e1lndd7rqTmzWOsWL7svmqbv+eu/u/z6qddT
5LUk6bnd+fA6r77I+623LTL/PO/29J1/zu+o1kxr73drfj2P9av8Pc3D/vTg
yn2v73tn1PHqR6e2z/kaKa9Fm/b5NbOy7PzztOPLdZh/rvX7n2ys2zivPvPP
2a46XqsZ3a5jq1XtQ/bz+c08j+/fP/28IeU5YPs1fqs4tq91Y6+6s3tuMmuI
pnyNPrdb88/rqe4nr8/xOtw6pip1/JP7x6zPfej0sWi6r2M/too5wFn7oWXv
G7Ufzf1u3tc3rGIfmceRlGOTafvJyH665ts/d+VNc3+veq+SvH5x6Nspe2sv
Z6DzHK69z5gka4+nvM9XfWyZ526reCzsc3yVvzMterxh/hkAAGB1tg4fHV1w
5Pjg2wEAwHzzzznXnferTb995qVz/n2eWYicy582B1LrnU0711bnDbIGWXp8
wpxnvW9rnW/9fsfcb362v/3W9VN//qwBk5rzVzVTN+vnmVfNp2QmZNq5znov
9DRpri1uevDMdfTtW+4fr6uaFnm/zKi5jKwBN2u2IOtyZf2b5izwF358+/jz
p61FlfO1tZ1d54Xy3u/p4mvvnPg16txOvs6s87Vttfbotzq+9yyruo0vMv9c
3zvn8Oq8WNazXdXtss2s3vlhnvmovCahZh+y7nLz3/rO3dVtd9Z994ndef9J
a6Hmc7P/iV8+8vvxZbvWjK9z1XksyWxstr/r+2Yfm/XpJm1PrduZc+bNz19m
XzRNfd1Za+zV6yImvUam5Dgg1T56nnnlaRaZf553e2r++eHnps8bXH3Po2cf
v9q/ixwHZN405Ta/qt9TX/anB1f2G3kdWvYtWcN21uXvf/qlzuOk5utDJh0b
HLvtgbOXmTb/vOzx5TrMP9cMcJ6bLPq76TP/HJf99O7x5erxrWv+eVX7kFU+
v5mlz+N7rps67q7v177MKo7tv7J7HWf92K7Pr3W4p61Dm/c4yH0tmX9eT9kH
1e8o96NZc4rX7t6+sz+pjzXnbKftU5v7sbxmrv3vq5gDnLUfWsV9o/5t0n2j
uS3zbFsfzf3aDye8NqHUawgnvUZn1rFM3cdnfR8Ohr2Ygc59uW7zef3ntMvm
mOON3cfR9uPKos/dVnF/73N8lft27QMnvbdPaX8d888AAACrk/nnTx/qt3Ya
AAB7q8/8c/6+nlnNmhHIeYKuc5V95zXrfVQzZ5b1Odv/XrO6adr7n9Y6eFXW
ZOu6XJ1Lm3b+s9Z2vvXhZzrnL2q9t5xnaP97rUX8wUenOt/zOudMch4vP1ff
30tzxiXXU9e53Vw3dd4ja6JN+3q1bne1zNp0f/2Na8+ug5e5wi9fc+c554Vy
HdU8RsrsYfP2VHWtDZV1qWvNnUnnhbKG6/jc0vOTzy1lG2qW7OU/vNs5i5z3
Mc+55MxcND9ea11l5n2ROfFV3MYXmX+OmiNKteb3or/raT71+cvN6p0nZs1H
5f6fc8yZj6p9UtdrZPrOPzfX2szafrmfNv89M3tP7q4HnO/X/vemzPxW7bVU
m1+vWdc8deY/so/P98vrSLq+zq+ffGH8+e01OJfZF01T569T1jdsXw/5vjUj
Put6im/trttdZR2+Vdx+Fp1/nmd7av45Zaag670BmscCk/a79VifJq1BmjmD
k8+9utJZdvvTgy37vtpnpaw537UfyH6m5kxzHNT1eo3sE1PmzJofz/29uU9I
0+af0zLHl+sw/5z7YB0vLrpWfd/556jX/6VJ762xin3IKp/fzDLp8T3blq+X
f6/Xf6Y8TnVt9yqO7es9G3K77Dp2zev5UvaV7dn9XL4egyvzz+srxzrbuzeI
rAPdNaeYY5ZayzsXvWzCc7V05e0PdNxe7j67H8scX9d2rGIOcNZ+aBX3jX/8
3s1n/z238/Z9MLf/e3Zv/82/RaxiHxnN/Vqus/b3z/2xebzd9fusvwv87uU3
Op9b53Pq97XIe7CwmVY9A53Z4jzfSNnHZN/QdfyQx7enX3lrfLlcvv2Ys+hz
t1Xc3/v+DajWSz+zDzz3fRH+4l+uHr9XXV5v0vxa5p8BAABWZ+vwsfEM9NDb
AQDAn+afc77pqZffPCvzW1kfsfn3+ZSPT1rTtu/f6jPfka+T8vVz7iHn3bPm
bp2vSFmncdb2Ny8/af3jzA5VmXPoukzOH9R52Mz0Zq4h5+kyu1DzY+mbN913
zufmnF/zMpktzs+SmZHMpzTnUfvOojbnU+pcYM4P/+bpl8Yz2nVdp8zqdc2M
tNV1ntrrss4rv8M6Z1S/x3z9/Lw5R9Ss63xMzYzn8zIHlHO5mZes9cByvqnW
LO06L1Tv9Z1yHvUndz8y/t7tOf6cS601y3M9Zi2erKuY8z5ZI7mu28x2ND8v
azVm1rH5O8jXKVlzL7/nbHvXbNoqbuOLzj+faJwL65pBXZX2+crKrN7BU/NR
uV82HydyH2ju36p7Tt8Xu+aj+s4/x2eP/vzseefMLZ989pXx/Tb7jtpP5D76
xR+f+5qTplqzM01b/7heA5O+0XHuPfvY3J+qzGdnH/Kjux4Z349f213HK/uK
vEak/fmL7oumac865mtkVij7mWxr7cNyfXW9NqfrZ6ztSF0/xyIWnX+eZ3ua
889Vfqd5bMk8aY5nqp/MOLaoNVfrtprPz9fJY2+t15aOXHXbyu5j9qfnh+as
St03sy/IbTX/27y9T3qdRV5zVmV/kdtrXnNVx7D5WvV+7rPmn5c5vlyH+ee4
Z3e90Y9232sk13E+pz0rOfl7959/zj6omjT/HKvYh6zq+c0s9fieMicVuT20
y0xyc/3dLsse2zd/7mxD1v3N7/St9/44ninL7aP25Xl8q8fPJ1564+ztP8fe
9Xhs/nm95fUdzdf95D6cfVmO1Zofz21v0jxsc13y3LdyH7v5oadHLzdm9qft
x1Y1BzhrP7SK+8b3G3OTub/XMWTe96LWZ+66rpbdR5Y8RlXvnj4Gzs+U2c9s
d/0cadIxVt4Tqvb1+TmeO72v+cWDT41/rjyHr5/t3t+9MPhtk/216hnoHOfk
eWOz3MfyGqbcX5rP+XLb/cy3b+j8Oos+d1v2/t73b0A5bsn9parjjRxz5bGw
7lPZHzZfA2v+GQAAYHUy+2z+GQBgPeT8wHZ7yHm3/E0/5xJz/iDnyyadGyhZ
y6xrfeRJMrPanDGtcg6ha827LrWObs7DTbpMzg3Uz5hzApMul5nazH90bVPO
x09bizoy59s1C5jrJOceJ82NT9rmnCPJOeCc88912/415XtNWhOuS62bljKf
u4rbT2b/cg6p6yaUj086X53bSL1HbrPMONxw/5Pjf89cSMr50q6vkXNj7dtu
zu22f7Z8raw//fHuueFmOU+ceeH2XHpm2uvce/Oc7qS61otd9jY+7/2pZHa7
mjWrsozm3E1lVu9g6potrXL/yPtc53xwZh6mrTFc+7W8ZqHP9631HJszgSn3
+zwu9XltQPYHVea8Jl3uqrsePnu53IcmXS638cx+t7cp5XUO09bfXGRfNM3x
2x4Yf26+Z17TUmtmV9k9ZkZv2s/TltnplMf+Vd1+Fp1/nmd76jaac/X5HTVf
h1O/q8zE9V1T8J9+cMvZGbp2+f2vem1C+9PzR247eZ3ChEPv8b9NmncteS1e
ex+Ur5dj3Oxnc7yectzX/txVHV/2OUbJ61hS1xx2Ux5DUtfXmvV9crzWfD1e
lWPJPr+PzBnl5+37+6vnHdPmn2PZfcgqn99MM+nxPfvrzHfl/VZyHN5eb7nL
Ko7tM2/WXgs/P2K9hif3jebrOavMbddrO/O98jmreq7D3sntKjO0r3XM3Od3
mNvgrGOY3Jaar3Gqcjvqej1bUx1Hdb1nRNOsOcBZ+6FV3Dfib791/fi23i7P
f3O81HU/XXYf2XTxtXeO90ldZbuyfdM+Pz9nZjObr++osp/P2rirfG8NNkd7
BnoVXzPHSs3XdDXLY2fm72c9ti3y3G3Z+/u8fwPK+tNd96ncV/P8tn35Ve33
AAAA2F3/+dB85/ABADi4cl4zf1fP+7LOO+u5VzLDl/mRvG/lPLNjkfPtmWvI
7NK8nztNzgdmZjazAdNmDCfJOqkpa9es+vrKtuWcZ7Yv8y59ty/XVc695BzQ
Ij9Tbi/5/C+c/tny/WedM82sz+HT3yufM20uotYNy/o4k75v5tmbazl2vcdp
2c/beK3tmPN0e30O+b7d9zrOjIFZPfZSZp4y/5T3NV6X2Yi8r3AeJ3K/nnfO
qu++aF7Z1+QxIha5nvJapzRrXnG/9N2emuHLuo/1scw05PeT2848c+VN2V/n
cS23vXydvbzt2Z+eX3KbzP4sc7K5/WZ/Ms/tK5fNesS5fWY/0mc+ddrXWub4
ch3kmCz303/83s1r9TPs5z5kXSx7bJ/rKK/ryfOWfJ2u/Xfevyj7yTzfWpfn
jiwnv+c8h4w8p5v3cTv7wNwesg8YavZ91n5o2ftGqefdOcbp+/rqVe4j83Pk
2DfPv3NfXeQYK5+Tr5GfYd7HPw6m5gz0Kr9uXoeZ45vc/rOPWPTvc/M+d1vV
/b2v7ANzn8rPOu/7hwEAALCYC44cH89AD70dAABwPsmagukrc77f7fnmH75z
0/h6yvXV5/I1szbpver3W9YhT4uuBTivzPN86vOXD/5zA8vJDFneUz3lHP8m
bU/X/PMmsj8FAAAAAABYb1tHjpl/BgCAfZS1YNJH+7Am8KarNZ37zjP/Znf+
+V9/9uvBtz3zgh98dGq8PfmdD709wOb44Z0Pj/cdT7z4+uDbMu/2HJT5ZwAA
AAAAANbbpw9dYf4ZAAD20dOvvDWeDfvZb58cfFvW3ffvODm+rm64f/Z19Vdf
v2Y8U74u66Vefc+j4215+a13B98WYHPkfcg//PjMayfyfuabtj3mnwEAAAAA
ANgPW4eOjg29HQAAcFBldiz/+x+/+J3R3U88P54Le/eDj85+nMlqrez01evv
nni5zNvlOk13Pv7cINuatbzL0Vt/O9rZObPdnz3688GvR2C9/dmXvjv+3//y
v38yev71t8f7jkeff20jt8f8MwAAAAAAAPshaz9b/xkAAPbOq2+/N2qWdTQ/
d+VNg2/Xprjxgd+dve5yXf747kdG37zpvvHa0Nfd9/johTfePvvvDz/36qDb
WTPP1fd+9dDg1x+w3vLamHbZ1130z9/fyO0x/wwAAAAAAMB+2Dp8dGzo7QAA
gIPqiRdfH73+zvujt977YHTHY8+O/vNXfjz4Nm2ar/z07tFLb717zkxe9exr
fxj9j+/fMug2Zhb77fc/HP+uH3jm5cG3B9gMeUx47vW3Tz9G/HG8n/vpb54Y
/ft/umJjt+dvvnnd6P0PPxpdefuDg1+3AAAAAAAAHFxbh64w/wwAAGyEP/vS
d0d/d/n1o//+3V+M/uE7N43+4l+uHv27//atwbcLAAAAAAAAANg/Fxw5bv4Z
AAAAAAAAAAAAANgIn7b+MwAAAAAAAAAAAACwIbYOHTX/DAAAAAAAAAAAAABs
hK0jx0dbh48Nvh0AAAAAAAAAAAAAALNY/xkAAAAAAAAAAAAA2BQXZP3nQ+af
AQAAAAAAAAAAAID1l7Wfrf8MAAAAAAAAAAAAAGyCraz/bP4ZAAAAAAAAAAAA
ANgAW4ePmX8GAAAAAAAAAAAAADbC1qGj4xnoobcDAAAAAAAAAAAAAGCWrP1s
/hkAAAAAAAAAAAAA2ARbR46Ntg5dMfh2AAAAAAAAAAAAAADMsnXo6NjQ2wEA
AAAAAAAAAAAAMMvW4WOjC44cH3w7AAAAAAAAAAAAAABmyfyz9Z8BAAAAAAAA
AAAAgE0wnn8+bP4ZAAAAAAAAAAAAAFh/Z+afjw2+HQAAAAAAAAAAAAAAs2wd
Omr+GQAAAAAAAAAAAADYCOP1nw8dHXw7AAAAAAAAAAAAAABmGc8/W/8ZAAAA
AAAAAAAAANgAW4ePji44cnzw7QAAAAAAAAAAAAAAmCXzz58+dMXg2wEAAAAA
AAAAAAAAMMvW4WPjGeihtwMAAAAAAAAAAAAAYJbMPpt/BgAAAAAAAAAAAAA2
wXj950NXDL4dAAAAAAAAAAAAAACzXHDk+EiSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmr69SpU0NvgiRJkiRJkiRJkiRJkiRJkiT1ant7e7Sz
szP0ZkiSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmS9rnt7e2hN0GSJEmSJEmSJEmSJEmSJEmSerezszP0JkiSJEmS
JEmSJEmSJEmSJEnSzKz/LEmSJEmSJEmSJEmSJEmSJGlTsvazJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEnSasv6z9aAliRJkiRJkiRJkiRJkiRJ
krQpmX+WJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEnSurazszP0JkiSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJB24tre3h94ESZIkSZIkSZIkSZIkSZIk
SZrZzs7OmCRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJklaX9Z8l
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIk6fxrZ2dn6E2QJEmSJEmSJEmSJEmSJEmSpN5tb28PvQmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSpH1uZ2dn
dOrUqaE3Q5IkSZIkSZIkSZIkSZIkSZJ6lRloSZIkSZIkSZIkSZIkSZIkSVr3
Mvts/lmSJEmSJEmSJEmSJEmSJEnSprS9vT30JkiSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS9rlTp04NvQmSJEmS
JEmSJEmSJEmSJEmS1Kvt7e3Rzs7O0JshSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSdrntre3h94ESZIkSZIkSZIk
SZIkSZIkSerdzs7O0JsgSZIkSZIkSZIkSZIkSZIkSTOz/rMkSZIkSZIkSZIk
SZIkSZKkTcnaz5IkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSast
6z9bA1qSJEmSJEmSJEmSJEmSJEnSpmT+WZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
Sevazs7O0JsgSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZJ04Nre
3h56EyRJkiRJkiRJkiRJkiRJkiRpZjs7O2OSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJElaXdZ/liRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkqTzr52dnaE3QZIkSZIkSZIkSZIkSZIk
SZJ6t729PfQmSJIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZL2uZ2dndGpU6eG3gxJkiRJkiRJkiRJkiRJkiRJ6lVm
oCVJkiRJkiRJkiRJkiRJkiRp3cvss/lnSZIkSZIkSZIkSZIkSZIkSZvS9vb2
0JsgSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSdrnTp06NfQmSJIkSZIkSZIkSZIkSZIkSVKvtre3Rzs7O0NvhiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRpn9ve3h56EyRJkiRJkiRJkiRJkiRJkiSpdzs7O0NvgiRJkiRJkiRJkiRJ
kiRJkiTNzPrPkiRJkiRJkiRJkiRJkiRJkjYlaz9LkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiSttqz/bA1oSZIkSZIkSZIkSZIkSZIkSZuS+WdJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiStazs7O0NvgiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJ0oFre3t76E2QJEmSJEmSJEmSJEmSJEmSpJnt7OyM
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkaXVZ/1mSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSzr92
dnaG3gRJkiRJkiRJkiRJkiRJkiRJ6t329vbQmyBJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ2ud2dnZGp06dGnoz
JEmSJEmSJEmSJEmSJEmSJKlXmYGWJEmSJEmSJEmSJEmSJEmSpHUvs8/mnyVJ
kiRJkiRJkiRJkiRJkiRtStvb20NvgiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRpnzt16tTQmyBJkiRJkiRJkiRJ
kiRJkiRJvdre3h7t7OwMvRmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSpH1ue3t76E2QJEmSJEmSJEmSJEmSJEmS
pN7t7OwMvQmSJEmSJEmSJEmSJEmSJEmSNDPrP0uSJEmSJEmSJEmSJEmSJEna
lKz9LEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmStNqy/rM1oCVJ
kiRJkiRJkiRJkiRJkiRtSuafJUmSJEmSJEmSJEmSJEmSJEmSJEn6/9m7Ex8p
qv394//qdWEJyhIQBGWJLMp+ERlQkE1AEJFVkVWWCyGMgICEMBBArhEIaxCC
YRnq93vab3nbtutzTlWd2mber+Tk5sr0qdPV1VXVdZ76FAAAAADAx+nTp6MZ
M2Z0bQsWLKh6eAAAAAAAAAAAAAAAAAAAAADwl6+//jr617/+1bW9/vrrVQ8P
AAAAAAAAAAAAAAAAqMSdO3eiDz74IBo6dGgrS/PGG29EY8eOjU6cOFH10AAA
AAY18s+D186dO6ORI0e2Pmd93sOHD4/mz58fPXnypOqhAQAAAAAAALX06tWr
qocAAACAEjx9+rTqIQCogUuXLiVmatRWrlxZ9RAxCOiY1ITrEf39/Rw/AQCl
Iv88OE2bNi3xc3/zzTejhw8fVj3EAYnzPAAAAAAAAAAAAKAeVBdKNaNU11W1
XFUvSnVdO+dO33777WjSpEnRsmXLops3b1Y9bAAl0n7Byj+rXb16tephYgBQ
dvjYsWPR7Nmzo/Hjx0dvvfXWP45J+v8jRoyIJkyYEM2dOzc6f/58JWP9/fff
o2+++SaaOnVqNGbMmGjYsGF/1V5sH6veg8Y6b9686PTp00HHoFyTarN3a2Vm
c+7du5c4Dqv+5LNnz4KP3+rTamSZUKYHDx5k2k7V9NoXL15U/RZQM+SfB599
+/Y5z88nT55c9TAbS+c2mzZtap3nWddJVHtb10l0nnf8+PGqhw0AAAAAAABP
mpMEAABAMymzpbm8cePGOedMk9ro0aOjrVu3tnJGAAYuZa189gnr16+veqho
KF1f2Lt3bytf8tprr2U6Jil7vGLFilZWpUg6fmpbV9456/FT2ZlZs2ZFvb29
ucbS19dnLkfrswy3b982x7FkyZLE1+pcIul1X3zxRabxWH36NOUEhw4d2rrv
6913321tV8rYN6H2+GChbX/z5s1RT09PNHPmzFb90wULFkRr166Nvv/+++i/
//1v1UM0KR+XZxvttk/Rdq91oXUQ+j4LNAP558FH9y/77B/g79q1a9HSpUtb
967l2Sfr/ryLFy9W/XYAAAAAAACQQHM+zPsAAAA0j87hNmzYkDlf1q2p5tHR
o0erfmsACnL27FmvfcGcOXOqHioaSDlAZZdDZgGV/wt9zUL96b6hzvrOeZvu
Q7p+/XqmMalesSvHWwadV1jj0D4kic4hkl6XNf9s9Zmn6dzpnXfeaW1fg61W
tD5DZYwnTpz4t6b9fln1EW7dutWqrTlkyBCvz0s14pcvXx799ttvpYwvDSun
Gqrp+69s5OHDh6t+uygJ+efBRzWJffYH3K/spvs9ffLkaZue/1HH4xAAAAAA
AAAAAADQNCdOnGg9s7WonIXqTOp53AAGFtXT9dkHfPrpp1UPFQ1y48aNVm3d
oo5Jqtt36dKlIGNVLVVlKYvMKv773//OlKlVHtfq96effgqyDrKOwVV3skn5
5/amLPSyZcuiJ0+eZBpjU+j+Nlc97aJrLet7sWjRolyf1+LFi6Pnz58XOs40
ysg/d+4Pf/zxx6rfNgpG/nnwmT59utc+gDo2yXSM0TGi6P3w559/zvNUAaBm
9u3b17rHubNdvXq16qEBAAAAKAnXzQAAAJpDzwQvI1+hnNPly5erfrsAAhs6
dKjz+88znuFr9+7dpeX+tKw8lMEta6z6nqWtEejKUSo3WiRlSq3lz5w503x9
U/PPcVMOuqenJ3r58mWmsdbR/fv3o6+++so7819k/lnZg1Cfp75fvb29hY01
jbLzz3HTvYovXryo+u2jIOSfB5/t27c7v/eqP4zurly50rp+UdY+eNSoUdHv
v/9e9dsGAPyfpOtcX375ZdVDAwAAAAAAAAD8H9UY0vPKy8xWKAukWpkABo5T
p06Z33vdYwH42LhxY+mZvw0bNmQaq2qalz1W5XDS1JtSjsbqT899KNIPP/xg
Lv/48ePm65uef46bMk0PHz7MNN6q6dkdqn2mGuSqE5z2vReVfz558mTrnDL0
Z6Wa1lWrKv+sNmbMmEy15lF/5J8HJ+sZDNqHpr2varAo6hjjajovu3PnTtVv
HwDw/+n8qNu+mvwzAAAAAAAAANTDs2fPzPnQpKbsy8SJE6PZs2dHn3zySet/
33333dZcXZp+bt++XfUqABDQhQsXWhm/9u+5cobffPNN1UNDQyxbtiz1MWnY
sGGtY9mMGTNazyefN29e9P7770dvv/12qn727NmTaqwLFy7MdPycNGlSNGfO
nNZYNWaNfciQIan60Tysvm++lGe0+isyZ6P6zlbuyvWs94GSf473h017BsZ3
332X+30XkX9WTc4iPyvl3qrkyj/rPoikFiKvp/2n67uJ5iH/PDippvvSpUv/
keHS7/lbt25VPbxayvocEu07tV4/+uij1nUSnZNOnjw5Gj16dKp9s85tAQDV
S9pPk38GAAAABodXr15VPQQAAAA4pMk+a85O13cfPXpk9qlcj+q8JtXIaJ8b
5PnawMCkzNSvv/5K/Uik8vnnn3sfk/Qc2p6enuiXX34x+7x37160atWqVo7E
6k+ZFG2zvtSn71h1b5De2927d80+f/rpp1Ye2jcfo7+7efOm13jXrVtn9pW1
/rUP67nxU6dOdb6+7PxzUp86Z1FOTLlz1Qdeu3ZtNGHChExZ0xMnTmQadxW2
bduWKQPW3kLnn3VsSXoWded3ROe6qtP+/fffR5s2bWrds2dtk+2tr68v6LjT
CJVT1b0NqrG+fv361n0habbX5cuXF/gOUQXyz9Bved9zh8Fq7969qY5xuq9t
165dzt89z58/b+Wqx48f7+xz7ty5Jb1bAEAS7deT9tPknwEAAIDBgzohAAAA
9bVmzRqv+TzlS7LkdH7//fdo+vTpXftU7uT+/fsFvCsAQBOdP3/eO2eSJaur
e7RXrlyZ2Gdvb693X1evXvUea5Z8ro6PeqaCT/+q6+xDGUirH2VEi3Dp0iVz
ucoYudQl/5xE29aZM2ei9957z3u7UAa1Kc/AqGP+WfcJuJapWqcWZdBc9+qN
HDky6LjTKCqnqu314MGDrVr0Pp/d9evXw70pVI78M2BTNtz3PpE89bN1H1XS
MUj5aGoLAUD1dH900jGA/DMAAAAAAAAAVMuVR4qb6jirTlEeyk53ziFq+QAA
iG8t13HjxrVyvHn89ttvrXrM7f1u2bLF+/W6z3vEiBHOsepv8uYGt2/f7nWs
Vh1iH3rugtVP3uN9N8uWLTOX+ezZM2cfdc8/t7t48aL3szVGjRrViHxT3fLP
6su1vAMHDnj1pTqoer6J1Vea/UNIZeRUdS+Ja11OmzYtyLJQD+SfgWQ6x9N9
L679ou7lPnz4cO7l6T6ozuXpHJXn5wBAPZw7dy7xWED+GQAAAAAAAACqo3zT
sGHDnPN6q1evDrbMK1eu/PWs8f379wfrFwDQfEnPCmhvqrEX6hlTT548+Svz
OH/+/FSv7enpcY5V2RU9AyEE5Wt88qWqSe3y+eefm32oJmxoVuZaNa59NCn/
HFu/fr3X57Z48eLcyyrajh07vN6L1ULmn5XHtZalDHoa2h9Y9zQoExrq+5xG
WTnV77//3lyfuoeR5/sNHOSfgWQ6JruOZzp/UD3QULR/1T3n6lvXS5rybAgA
GAwOHTqUeDwg/wwAAAAMDqph8/Lly6qHAQAAgA6ffvqpc15vxYoVwZerZ8Me
OXIkeL8AgOY6c+aM85ik54CHvr6ge4GU60xTf1e1Yl1jHTJkSHT37t2gY/32
22+dy50wYYKzH1fd3BkzZgQd98OHD83lbd261aufJuafZc+ePV7Z4J9//jnI
8qqkfHAZ+Wdlla3lfPDBB5n6Vd7M6vezzz4LMv40ysypvvfee+b7/89//hN0
eagO+WegOz2zwyf7rOeIFEHPzNI94wCA+rCeg0P+GQAAABg8mvAcTwAAgMHk
xYsXf9VhTmo85xoAUBbVALaOSUOHDm0du+pA9wa5sjF9fX2FLDuuDWg1n3qE
qk2d9HqdH4SkfLM1Xt+auk3NP4tP/e73338/2PKqUlb+2VWrWPfaZbVy5Upz
P1S2MnOqrtzfnDlzgi4P1dm+fTv5Z6ALn2eR/PLLL1UPEwBQojVr1pB/BgAA
AAY5ZZ/JPwMAANTLli1bzDk9zXurvmWTqd7k2bNno71797aeP6+afRs3bowO
HDjQqrH4+PHjqoeYSPWkNE5lcHQt/fz588Fyf3/88UfrmfA//PBDtHnz5mj5
8uWtjNfu3buj06dPB69XGppqPmr8+lw1B/H555+3skEHDx5s5Xaq8uzZs+jG
jRvRjz/+2FqXWqfa5jZs2NDKafX29tZ6mxuotL2fO3eutY0os7pv377ozp07
VQ+rNMrB6ruh/OmqVata3/evvvqq9d+0H3z69GnVQ2xx1SNWO3nyZNXDbNH1
DSszqzZ37tzClq/PzHX/ks/ylyxZYvYRMr89adKkxOWMGTPGu58m55/lww8/
dG7neXK7dVBW/ln1nYvK6Pb395vfMR1TylR2nV5lvJOWp+9yXvfu3Wudx+me
AP0e0XmczndVV0/Ph6lr3dP79+9HP/30U7Rr167WmHVMVYb46NGjrfdUFZ1/
Xrp0qfW7If69s2nTpr9+72h77kbnQ1Xln3Ucu3DhQmsM7b/R9u/f3/p+1e18
Wfs1/abU563zKP0207aq3x0hfp/dvHmzVVt93bp1rXPVOvyuKYLOn65du9aq
b7xz587Wd0jfJe0H9D3SeUfV97npu+w6TmvcA0mTr5nUgX5raZvW/iE+Nui5
MsePH6/dd7iK38V1vXbTjY6n2g/p2o3OSzRerSMdY0P8ZtZ3TdeKdA0uvk6k
Z8Toe1bl/HnTjslSxTnZ4sWLyT8DAAAASLzWCgAAgGpYdR/VlEFoImUmli5d
Gr311lvOuUu10aNHt66VF/H8Ws1rfPzxx/9omj/pRvMOPT090WuvvZY4Xn1u
p06dSj0WZZo1vzJu3Div9aLlLFq0qDUXE9qxY8e6rhfNtyTRXJTW54gRI5xj
HzJkSDR79uxSMq6as9N8i7Yjn/WqNmrUqNackm+903arV6/uuu7Uvv322wLe
YdTaJrstT/OBFs0PdXtdljyhcuXd+lq7dm3ia86cOdNa11a2R/XdOmlbS1rH
aiGyiZqn69a31lmI+w8uX74cTZ482ZmRjZvyp9oPKn9TFVcuVFnHurAyY2pa
75rrL5LusbDGoOOIMg4Wze9bfSxbtizIWHU9yDquaZ7dV9Pzz/pMdIyy1vv8
+fODLrNsZeWfrYyucoR5/fvf/07sf+bMmQHegb+y889W7VOd76Sl46pydOrX
97ikv9NzaJQfCyXtebkoQ6PzIJ9x6xxV2Vi936IpI6pjkXVvSfvxQOtS+bx2
WrdlblfKTynn+s4773ifm+g8L9R9mUnnpUmZNh27lKXy+e2h95T2vgi9r3nz
5jn71jFD9zSFynMl/Q5TK+K5FfrclQXVeam2K5/tderUqdGhQ4cqyQNa+341
XWMYCHV+qrhmovxr0ranLG4RtM9J+s2V5bd4TNdIdL7mOqeLj2c6b9B3L4Qy
fxdL067dZDnW6z71CRMmOMeqa2T6DZaG1oU+G9e9s9r3aT+prHgZqj4m1/mc
7MGDB61x6LxJ+XSNVXl4a3+p3yXWNaS4hdoPAAAAAAAAAACiVi7EdV2/aZRD
fffdd72u3Sc1zfmErH389ttvd11Ot6yXsi2+mZA08+ua19PcXJ71ormOkDno
pHllfX6dlD3Q3KyVnbOassmhPX/+vJUlt7JXPk3vSXV10syh67NI6k/bT+j5
eM0FWu/BymJYr0s7r5e0z9J77qR88sSJE70+A90P0MmV3VOdobysfdWCBQsy
96v9l88zu62mnHGofKIv1zpXU42nuhg7dqw5Vs2PlsF1H5Pqf7pY+zEdw0LQ
3LE1zjR5h6bnn0W11FzHBld2vc7Kyj9b5wUh7lOxatJ3O/YUqez8s1XfTvsM
X8pSTpkyJdcxSU2ZJOW98ko6L++WGVONRmUws4xX+xQ9Y6Uoypz5/mbobDp+
xRlX/Z4oY7t6+fJlKzeZ9Vxe7dNPP22df+eR1He3zK/uA86yjrV+Xb8ltY9U
FjLLerDyjb6sfO/48eNz9x+L7+vN891X1uzq1avBxuQzZtd2GuJ3QJWqvGai
++qsfkPX/tc+w1red999l7pP3WNq/R53tZEjR+a+rlLm72Jp2rWbNMd6HQd9
7wFobzoX8qlJoN+EPvd9dDYdI4r6LVCXY3Kdz8l87i3L2jQeAAAAAAAAAEAY
rjnXEHOrZdF1d9WLCXlNWtfzQ0i6pq+54HZWzqRb8322ip7BmGdeo7NpziFP
naRY0hya5p7aaX42y3xUZ1PNtBD03jVvm2UOy2qq8+ObW/7mm2/Mvjpr++X1
0UcfJS7LVQPSGmfaeV/rno12ykelyat0fhel6vyzagGmpe0nb8aks2m/WkYN
S1H+wBpLt/n1qmjO2LXuyspqKyNgjUN5BxfX/TGab85rzpw5if137vddBkL+
Wd9X135Kz25uqjLyz1qH1jJCse4PKOMZE7Gy88/W7wSf5Z08edL7eSNp2tmz
Z3O9r6Tz8s77jg4fPpw5X9zevv/++1zj7XT79m3vOo2upt8eyvEVvV1pW8h7
v2DctK/OUxczqd8jR4789TfKv+bN7OvepKTfSxq/T71Yq+n5PHlY+WdtXyHo
/quQv5d0vlNGzWXVqbfGoXqiTVWHayaqHe3aL4WkfbC1vDS/c/S3Iddflt97
sTJ/F0vTrt34Hutdv6N82oULF7qOQb+fXPfLupqutYT+LV6nY3Kdz8nIPwMA
AABIovlBAAAA1MewYcPMa7IhMq5l0LyCaugUcV1a17yLqmmiubOYru+nGZfe
r4vmh63cap6m+ZI8z72VpDm09rmArVu3Bh13nnqsypurZnfILHlnU81dH8pl
WP0osxSSNdek54BarHGGzD/Hzy1Xfbi0c2Pdnj/axPzzjBkzCvu+h6z9nmTW
rFnmOPQM9LrQ52+NNVR2yIfqr1tj8alRqzyh1YfuucjLmmfXc4nTGAj5Z1Ft
PGu9h84AlamM/LO17escNxSrnr713PfQys4/K9OWtDwrt3Ht2rVg+dxuTedh
SVkjH0nn5bq/T3S+FzofePr06czj7Vy3IfI/7c3aN4fYrrZv317INnD+/PlM
40nqU98vUR48bzY5btrWOnNrW7ZsCbYe1qxZk/lzKTL/rDmgos5Jy6gFrdyl
NQY9t6eJ6nTNZNSoUYl9hTx+y3vvvZe4LN3n4OvRo0eFrL9p06ZlyvWX+btY
mnbtxnWsf/LkSe5sctx0rNTxuZ1qSoc6Xoe8B7hux+Q6n5ORfwYAAACQRL9V
yrhHHwAAAG6av7Gux77//vtVD9HLL7/8EmyOOqnpmnye2pdJ1/RV71esfElS
c2UjNedVZPZETfM8eTKR1ry7uJ6Nm7VlqdV48+ZN5/0CoZrmDX3oO5rUh+ba
Qv326u3tNcf7+PFj8/XWa0Pmn1XbSt/TLPOM8Rxxu6bln0PUrrKabzY/D9VK
LGObDsG1vnfv3l3qeFw1Vn3uV7G+O5r/zUPHamt8+vc0Bkr+Wc+Nt9aLnq3e
VGXkn1UHN6n/kPU5t23blricMjPqZeefs9RsX7FiRaHHohCfb9J5ub5ves78
+PHjazXemOorhn72iKvl3a6KPjfJUnMyqS/97lCuPvR9jvpOxD777LPg60D7
wSyKyj/rGoPqlRb5uRddf1n9W8vXfqJp6nbNRM+nsvq6cuVKkPet+w+s5aim
rA+dR4eql9utKQOdVpm/i6VJ127EOtbrHNX1PU/b9Fssdvz48eDrIcT9dnU8
Jtf5nIz8MwAAAAAAAADUn+s5oK6arnWgmi1p5vE0/6Pr65rTVW4jTYZANYp0
P18W1jX9S5cuZbpe7npuo1XnqLNpnl9zAJqz0fu0MmCdTeuwiHl31Xspaq4h
S45T825plqF1qry0PuN4e/PNU2idatt2+eGHH8x+Tpw4keVj+QerhrhPLSJr
jCHzz6rjY2XCk5oyt900Kf9869Ytr/eqfZHq8anWrvbxmgP98MMPnftR7Tvv
37+f+/1aXPfkpKnPVgbrs1PT+ymTPlNrPD73VWhbsPZpWY+BovptSX1nqfM3
UPLPYuX+1eqU+0+jjPyzchHWfisU5TmSllNmrfey8886h0lanvIo3aSt0afv
nc6RtB61vDT5sqQalS5J5+XaZjSWNONP05Sjz0r3SqTNPuvYrvejdZo105tn
u7K2125jVc5o0aJFreO9a78YN/1d2mNTUl+q61rEM160DpXBzHK/q0+La2Sm
VUT+WZ9F2uyzPnv9/kzzeynUb5xudF+ntewy9/mh1PGaiescIdS9RdY1L70v
n7EqD5zm2KR1oGOh6ojruOa7/tLeO1nm72Jp0rUbsY71vseYtE3XNqzPJU/T
dzjPb4K6HpPrfE5G/hkAAAAAAAAA6s+VT9Czf+vO93q08n5nz579x+s1f6Ds
hG9WeOHChZnGmXRNX/MD1lyC5s5UM0xjVE5a/6u5QM2j6ZnvSdavX+/1fpR3
Vh0ZPaO4U19fn/PZv3FTXiBLLs6aQ7PahAkToqNHj/5VC+jFixetuSblOX3n
ZtI8nzf28ccfm30qw6c5oqRMr8apeU2fOkxLlixxjkfr3JpPnTlzZur32I01
Xp95Wut9hsw/T58+3VyW9nma51JtP+0PlAfVfJ5yo900Kf88a9Ysc6yasz9y
5IjZh/J9STXjT548mfetOu3Zs8d8D2vXri18DGlY34sq5jNddcZ0HHRRnsjq
I0/eyMpRar+Z1kDKP6vmn7Xes9RSq4My8s9iLSPLsb4bZZ+s/WtZysw/u2pm
6pjbjepNuvKLEydObD1/Pen5EdevX3ce09Wy1kdPOi93Nd0PpvMHbduiTKGO
j7q/wyezmaeeu6vGf9x0P+NXX33VtX6nxq79bZosY9btSr8jfPrXfVhJ24HO
m3fs2OHsQzVH08jy2Wu97tq1q5VDF23n+i2i9enzete5v/J9Oq/U906/T1X7
VuesvttqUr1WSxH5Z527+q4P5cG7PZtCv0v1+zQpR61tpkhatjX2pUuXFrr8
ItT1mon1OyjLvXHdWGPWfX8+fLK9ymnqN2YS3avq2o9rf5vm/skyfxdL067d
ZDnWa9+kY7rqpWu71312ypLrd6jPsdN1LqDzAN3DHn/O2i727t3rnR/X770s
6nxMrvM52Xfffde6BtjZrH51/Oz2ms62atWqVOsJAAAAQL3kqRUEAACAsJSt
ta7b1p3mIFzXtDWfYs1DtdP8kU8uVfMVaaW9pq96K5oHyeL8+fNe8zLffvut
V3+a+1G+2dXnggULUo817Rya5iiUibFo/t9njjdtfaW4727zXso+pXkeqc/z
c7UN+LBqM2t7zls3tLe319yONA/mYr3PkPnnpKb53yy1i5uUf7b2XdqW0uRi
9u/f/7ccqPIpZdC9Hdb67pbHqIrm4K2x+tRFD01zvtaYlCNy0f7CmtufM2dO
IWPLku8dSPnnDRs2mOvH93hdN2Xln61tVhnCUJKyFEXUXU5SZv7ZVSfQqpuX
9Hx13Zdl3b/n2097O3fuXOr3lva8XPu+OF+T5MaNG145riznIz6/edR8szQ6
J9B9dj59ZtmufGqlal0pj+Xj2rVrznWrPLKvNJ+9zq8OHz5s9qe8Vdra3HHT
bxbrOTo6z/a5FyBLbfHQ+Wf9tvJ5z/Pnz29lCn2sXr36b68t4/zK9d3Imj+s
Sp2vmbieR5b3GO66j8fnt5xPzdyenh7veU9XHfg0v//K/F0sTbt2k/ZYv2bN
GvPahrLKuhcm7TqPv2O6TmfZuHGjs58stbDrfkxu2jmZWPvAL7/8MlOfAAAA
AJqnqc/tBAAAGGhUUyfpmq2y0XXmytSo6Tq679xqTDW9XM+GzfLcyTTX9DVP
5JMpTeLKKmt+XnMWaWg+T3V7XGPXPEMaaebQNK+YZr275tGyPkdVNfXiPjTv
ofmNLPd5ak7INSdz6tQpZz/KhFp95H0+tJWvVs1SH9b4is4/u2oeW5qSf1Z2
1Bpnltyw8r3KfyTV9yyCq4Z1nv1iaMoqWWNNW/cqFOv4ZT3Pup1VizhrnVsr
E5W1VvZAyj8rc2RtT8pHN1FZ+Wcri7Jp06Ygy1A/1nspS1n5Z50/u/JtVvZE
++v275OOda4MVBLVh7TGkSUP6Xtersx7mvvblDGy9iNqqnudhs9vHrUs5yTK
FroyUVm2K9XHtfrUuUXaY7q2yaR6wGppagL7rE811Wp98OCBV5+6X9S337jp
eT2+XBno999/37uvWMj8s3KmRd1HrGdS6RxG22pSXdKQrN8+ammvL1Sp7tdM
tB+w6rTq3sg8rHy1z73G2qdb49O/uTKt3ej3qdWnb63jMn8XS9Ou3fge67Ut
+N6LqX2d67jZ2bT/1ut86BzB6kv72bTqfkxu0jlZjPwzAAAAAOo/AwAA1Id1
zVbPX6wzV51QzUm4aoIkUR7HVcNLzwdNw/eavjI8WZ5fHFPW1bWMtHnTmObh
XNlq3zxszHcOzVV3rRvlQKw+9YzaLDSPp6yN5vTyfFaimp7WGH2fr2zNwanW
Yh7WfsK3/lnI7THNPO/OnTuzvOW/NCX/bD2nO2tetQrW86mzZmSLcunSpaDH
iFCseWjf+fKDBw+a700Zr7SsZzrr+dtZDKT8s56Bba3zsmqwh1ZW/lnbUNIy
lGnJey3S59yqrFoPZeSftb5cOSSfZ4br2KT86JkzZ3KPyZU1SsvnvFzbTpZt
1FXbM+3zUly5JbU897qpPr8+p1DblSsvqPtvs97PpHNG6/Py5VqfamlqsMas
c7rOlvYc8urVq2Z/Wq9phcw/q/a46z3r/CIr7WPLug9u8uTJie8hS/awSk24
ZmJl+7Ns1+2s3xaLFi1yvt61P9+xY0fmsY0fPz7XepMyfxdL067d+BzrVfdB
x8E0fJ/JoJb2Hkadg+W5/6xTE47JTToni5F/BgAAAEDtZwAAgPqwrgNnzSOV
QXWfrGv4aocOHcq1DNechuYK05zb+lzTV5++NcaSWNk3NT1vOA9X5k/tt99+
8+7PNYemz/n06dOZx+t6PmnVXr58ac4b+9beVRY7qQ/NzWT9Hfbjjz8G6df6
DIrKP4fIKjYl/6x51aQ+xo4dm3uMZdFYk96Hb+3isrjykPv3769kXK46/T40
B271sXLlytTjsvZzJ0+eTN2fDKT8s/al1jrPksOrg7Lyz657ifTchqz0XAvX
OaeaMuxlKDr/rM/M5zn0aervhaD9jjWee/fuperPdV6uY47qm2ahc3mr7zS5
UtWLdOULQ/xmC7ldrVixwhzvuXPnco3Vygz6npe5tu+sv5eOHTvm7Fsty3M5
xPU7T78r0giVf1YdUNd2mvW5O1Wwzkfz5nHL1JRrJr29vWYfqlOfhe7dtvrV
PQUW5Uat7Vrn3HlY2VHf329l/i6Wpl27cR3rlX3Ocj+7vls+6z1rDvaTTz4x
+/W9B12acExuyjlZO/LPAAAAAAAAAFAPrvmgvM8aLZIrA6F5k7x88gZpsh8+
+WfNX+Vx4cIF5zLS5kO60RyBtYw5c+Z492XNoWn9K2+dh6sWWd68eQhaX0nj
8537VIbMep9Z6wJaz39O8zlbYysi/6zvWwhNyT9v3rzZ/B415T5ka85bmZ86
sZ6nrZY105uXVWdZzXdbsOrlpf0srHpuebbPgZR/Futza1JurF1Z+ef79++b
y1FGIUt9Sx1vXOeCcVNOugxF5Z+VX9y0aZPX+82aFcnDVSM9bY1p67xcNSaz
1kONWfeipHkug7L7rs8jxLl9yO3KygQtXLgw91itzKDv/TnW+kxzftuNq25n
1uyzWJ+TWtrnM4TKP1v34cXt1q1bad9uZazzUeUlm6JJ10ys86+s16Wsc3Wf
975u3brE1yvne+fOnUzjapd0XUX9+yjzd7E07dqNdazXv+V5ltf7779vjjVt
3ed2N2/eNPtOk69twjG5Kedk7cg/AwAAANC8VlPmXgEAAAYyzUFa19Q191BX
eua2Nfbdu3cHWY7rWYkzZszw7sun9kxerudjz5o1K/cyxPVs0jRzCCGfu9yN
5lutsZaVV7J88803QdaltY3NnDkz09iseZ00uWXrMygi/5ymJpKlKfnno0eP
muP84Ycfco+zDFb2IW+NtdCUE7TWeV9fXyXjUh1Qa1wPHz706ue7774z+0nz
nGg9Xzypnzy53oGWf7b2t9pPNFFZ+WeZNm2auSx9tr4ZWV23tJ6r0K256kiG
Eiqnqu+wnvGwfv16836Hbq2qcyc9+zxpTDt37kzVl3XO9Pnnn+ceq3Vvm77r
vqxzBLW8z3WJhdquVEcyqR/l+XT/bQiqBdltGapd7sNap2nPSzuNHDkyse+8
eVPdWxVy7KF+h7nujZ07d27at1op61xAtU6zOnXqVKt+dN6m76uPJl0zsbbF
rDW3rWObz35+3LhxhR4nxLpW4XNeUebvYmnatZsij/XW7xu1vMc7q2/fsTfl
mNyUc7J25J8BAAAACPlnAACA6uk5otY1deUh6shVtzpr/Y5ulA2xnhmrHIYv
V/45RK1QZaitZfz222+5lxFzPX/59u3bXv0UPYemGmvWOFUzu2quZ2X70nfW
mtdJ+ztMuahQ3zPr/YXOP4esE9yU/LO+29Y41Y4cOZJ7rEWz6sf5zp+Wxfq+
qZWVheykbcYal2+tOtVDs/pRPtpX0py42sGDB7O+1UGVf86Tt6pSmfnny5cv
O/eDasuXL0+s96f/vnbt2tYxzqev9uZ73pOXq/6rtuGkpm3MOq/1afv37y/l
fXZj5UqVv0uj6KzNZ599lti/b11PcX1evve0uITKP1v3DYS8jyPp3Mk3x2St
07z5Z+u8Lm/++fr16+bY0z7vJcTvsJcvXzr3G6G207IUdT6qc/E8+9+4+dzT
3LRrJq5rU/r3NFzv33U+/OLFC/P1oe5zVD9Jy9DzfVzK/F0sTbt2U+SxXueL
1ljzZout3wW+NdGbckxuyjlZO/LPAAAAAAAAAFAPymlY1+uVD6kj17xhnudM
dmPVClH79ddfvfqxrumrNlNerqya6h+FpPyLtTw9r9tH0XNorjrnIXLneSgb
5qqz6psZ0N9Z/aTNRHz00UeJfS1ZsiRVX9a4QuefVVstlKbkn8V1/4Oa8mF5
nvNbNKu2p2qw1cn27dvNdZ3n+fZ5qMaeNS49p9yXMrdJ/UydOtWrD9e5hvIl
WQ20/LOVHZoyZUqhyy5KmflncdU/b2/6rLVf0XmenpHgqpOpZmXi/vjjj6Dv
JYkr/1xkO3DgQCnvsVN/f3+r5qOVf07zTBYpOmuzZcsWc136UM7L6iNkTd1Q
+WfrXCTkPtT6febDWq9588/anyT1nTf/7Pq9p9qpaYT4HabastaYFi5cmOWt
Vqqo89HDhw8H2Rf75J+beM1E34+k1/vmPWPff/99Yl8+mWBru06zT3TRuUOe
91zm72Jp2rWbIo/1rms4efPP1v2j+r75aMoxuQnnZJ3IPwMAAAAAAABAPbhq
2tR1rtKac1G7du1a0OW5rpX7Pn+26Gv6rrmv0PW8XXNTvtm4oufQlJmxxhny
ebAW1efds2dP9PHHH7fyrprP8q3BmCaHYeUVlcdIw5rTSfvs2VDvT6xtPWv9
niRNyj+rjq7P9qR1tHTp0lrW4rNyD9qH1smhQ4fM9Xz06NFKxmU961stDev4
55v9UL4mqY+8Nb0HWv7Z+tyU622isvPPqkPqet5G1qbMjbWPKksV+WfVCS3j
fjHdn3HmzJnWOev06dNbGTXrO9ne0p4zFn1e7soe+li1apXZh45DoYTIP7vO
uUM+F2H16tWJy/G5z8saZ978s1VvM2/+2TV2ZT7TCPE7TL9tXPvOpinqfLTM
/HMTr5msXLky8fXDhg1LNR7rfHjTpk3O11vbdehn0iRdE/A59yvzd7E07dpN
kcf63t5ec6x5889jx45N7Fv3qbs06ZjchHOyTuSfAQAAAAAAAKA+rGvAabOS
ZZk2bVqpczyas7XW07Jly7z6Kfqa/jfffGOOM+9cfjfW8nxrWhc9h+YaZ1H5
54sXL7Y+V9UIy/us+TQZW6sOkeZoXr165dXPjz/+mNjPW2+9lXp9hNw2yT8n
W7FiRapta+LEia38lO92UTSr/mrI53SH4Ho+s76LVdA+J2lMaevVubZ/nxrX
EyZMSHz9rl27sr7NloGUf7bq/6l98skn5ut1zAnR7t69G/R9lZ1/Fj3T3squ
pW06dsbPT0iqCVrE+WeSsvPPet5DnjrtlsePH7fuDVOWT9m2PONUTiiNos/L
z507Z47Xh84BrD60/kIJkX/Wd88ab6j9lJqeZ5G0HN1z6GKNM+9vprVr1yb2
HSL/bGWuqsg/f/DBB+b6zJsBrIKVO8xzPlpm/rmJ10x0DmL1ceXKFa+xaJuz
+tG5iYu1/lTrNuT+LOlagc+zPwZa/lmsz65O+efLly8Xuu+zMvw++ecmHZOb
cE7WifwzAAAAgLrMqwIAAMC+Zqvr7XWkeZWkMRdRH9Q1b+D77Mmir+lb9ZLU
VP8lNOvZwL7z+02bQ7NoXkVzUcqJWMtM29JkbDXPZuWt4wyXi95HUh+q75OW
9f7IP4fLP4v13PWkpmOB8pWq614l1VOzxlgnv/zyi7lOQz9X3JfuT0gaU5bM
jpVJdz2XW7V4rXXkUw/MMpDyz8oGWOtqzZo1ia/VOUSo443qHYZURf5ZdCzU
cyjyrg+dCz969OivfpOO72Xun8rIP+sZFTqvfPDgQfDxK7Or2puq7RxyzAMx
/2xtwzoHDylE/lkZqKK3TZ/mc16Z9/UWHSuS+h6I+Wfr2TMh3m8V3n///cT3
lGd/X2b+uanXTKzsueu8M6bvQVIfui/Ph7Vdl9V8voPkn21FHuuVx7fGmjf/
bO2HfPLPTTomN+GcrBP5ZwAAAAAAAACoD6vWmrIPdWRluzRPVQTrWvnkyZO9
+ij6mv6CBQtKnfsSKxfnOzfctDm0TsqVq/a2coVFzRmlzdhaddh867pb8zn3
7t1LvZ7yzom1I/9s0zaZJ/en792xY8dyv68sXNltn3ptZXFtGx9++GEl47LG
lKV2+7p16xL7c+WatH9Neq3qVOc1kPLP+/btMz+7rVu3Jr5WmaJQx5uBkn+O
aRscNWpU6vWgbXv37t3/6C/p78usT19E/lnn/Kp1uX79+qivr6+Qcd+4ccOs
p5m3DcT8s5VfzLI/t4TIPx89erSwzzdN83k2gfV68s9/Nt/fYdZ3KcSxvgrK
F1vbSNbzUWWEd+zY4dVWrVqVuHyf/HNTr5ls27YtsQ9du/Jh1c3tdmzvxtqu
y2o+xzXyz7bBnH9u0jG5Cedkncg/AwAAAJAias8BAAAgvZEjR5rXgZ89e1b1
EP/Bypkq81f2Mn3zFkVf07cyr8pzFWH69Om55xGaNofW7tChQ2YNbN9mzZ2o
pc3YqsaztSzXM3l+/PHH3Nt7J+v9kX8Om3+OadvOk8vX9+/69eu5318aixYt
Msd05MiRUsfjYo21iNp6Lvq8XJ9pWq56flZ9WG2/Sa9T/de8BlL+2bXta7+X
hPyzm3IPS5YsMbPQ2l8qn3v+/PmufSi/W4fvu5VT1THw1KlTZjtz5kzrme36
bufN5vh48uSJ83zRp1nPtlAbiPlnK78YOlcaIv+8ffv2YPuiPI36z/5C/A6z
zjV9M691ozrD1jZSxvno1atXE5fvk39u6jUTPRvEWvfKnFp0XLNe73vcK/Le
Zt9G/ed/NvLPfzaf/HOTjslNOCfrRP4ZAAAAgObaXfPtAAAAKIertpFykHVj
XWdWvqIIVl5G/+aj6Gv6ml9O6r+ouoSuuWEfTZtDiy1dujTT/I+2l/nz50e7
du2KLl261JoXKyJja31PlI+2aD4t6bVbtmzJtL7yzom1I//s7+XLl9GKFSuc
uTGraQzKIpRBNdmssfT09JQyDl9WNk2t7GsfrnnurOvPOn5Z+wTVlE16nZWb
9jWQ8s/W897VlCFNQv45vRcvXkS3bt1qHYdv377t9Rpr/1TU+Wc3IXKqZbl2
7VqmDJnuLdN57Zo1a1rnaXfv3m31Z/1uGYj5Z2sfWsf888aNG4Pti/I05UZd
rNeTf/6z+f4Os8aj+3ObaM+ePeY2Usb5aN78c1OvmYh1XUPXHyz6DiS9Nk3u
23V/chlt0qRJznGSf7YN5vxzk47JTTgn60T+GQAAAAAAAADqQxlM6zrwypUr
qx7iP+i5p0nj1bNOi2Bl3CZMmODVR9HX9K1MiK7NF8Gq7ek739a0OTTlQPWZ
+873KLuieVplKZKykEVkbBcsWJDY38yZM83XWnM5WXOw1vsj/1xc/jmm+Vc9
T9rKJVhNubIynuN0//59cxxFPa87q9mzZ5vjVY3VMrlysFnv99AxKqnPpGyG
MqVJr0mTgbEMpPyzdY+C63nv5J/LYdXo3rBhQ2njaEr++Ycffki17WlfsnPn
TvPeiMGWf7bGqPPLkEJsV999912wfVGe9scffzjHar2e/POfzfd3mPXb3Ce/
WUePHj0yt5Eyzkfz5p+bes1EDh8+nNiP65xI7y3ptceOHfMeg7X+ymo6v3Mh
/2wbzPnnJh2Tm3BO1on8MwAAAACh/jMAAEA9uJ5rP3r06KqH+A8aU9J4Q9dC
i1m163zrWhV9TT9ELea0rOeZq3afj6bNoblqpsdtxowZrbqHPorI2Pb19SX2
Z+XhVfM96XV5MgzW+yP/XHz+uZ22y7lz56auCe2TtQjBVSu0rFrUPlzzyqoT
Xybtd63x+Mw/d/Prr7+a37lu13ismmOh7q0aKPlna5+m5qrTeOTIkVZuOUQL
ndkfSPlnnZOEOo7l0YT8s7XPaG/Kl+neHN+M0GDLP+t3TVmfdYjtSs8Xsd7z
xYsXC2+q6e7DGif55z+b7+8w6966MWPGZHmLteDKvxZ9Ppo3/9zUayaiey61
30nqK6merI4lSa/R9ybNnKS1Xeu8rIz92b1795zjJP9sG8z55yYdk5twTtaJ
/DMAAAAAAAAA1IsrL6UMQ51MnDgxcayha6HFrPWjOrs+ir6mb821qz1+/Dj3
MjpZuQzVf/LRpDm0kydPmn2pafvUfQVpFJWxtZ6bfurUqa6vsWp679u3L9M4
xHp/5J/LzT/HXrx40aq1OXLkSOd2Hbc1a9YUNp7YtGnTzDEoo1UXrnuIlAMp
i77T1ljyZq6s/Ynum+hkbde//fZbrrHEBkr+2TqvUduyZUshyy3DQMk/KzNl
ZbFevnxZ2liakH9W5tH63HWs/vbbb1P3O9jyz1b2SU3H8VBCbFe6f8Ia740b
N4KNNy9rnOSf/2y+v8Os432Z50Gh6Xk51nayadOmQpefN//c1GsmMesZK0n3
Fx48eDDxNeovDWu7njx5cqq+ikT+2TaY889NOiY34ZysE/lnAAAAAAAAAKiX
qVOnmteCQz8LPS/XXGTeeYZO1tyjmm8dy6Kv6StHYo3z6NGjuZfRycoC+c5/
NWUOTXWoXPcKrFu3LtP4isrYartK6jMpV5tUt0vzp3nyXdb7a3L+WZn4vKrK
P7dT/Vhlcqz3Grdbt24VOhYrg6Wmemx1YuVl1c6ePVvKOFRz3hrHhx9+mKv/
JUuWJPbdmWnRviLpb0Nkv2IDIf+s2n6u71zd7kNLY6Dkn3WuUMY27aPu+WfX
Ply5u5s3b2bqe7Dln1379V9++SX3OGMhtqsHDx6Y492+fXuw8eZljZP885/N
93eY9TwgNR0HmmjXrl3m+/K91zervPnnpl4ziZ0/fz7198jaFtVfGtb+t065
fvLPtsGcf27SMbkJ52SdyD8DAAAASPOcKQAAABRv9+7d5rVgXdcts66di+bO
rPEm1bXNSnUXreXt37/fq5+ir+nr+ZLWOJPqJGWlDKS1vDlz5nj105Q5tGPH
jpn9LF68OPP4iso/W7Vpu83bXrt2LfHvNZ+ch/X+mpx/1v4zrzrkn2Ou/ata
T09PoWNw1VRWS3rudRXmz59vjjXN876zevLkSWvbt8bRrUZzGlYNMT0jvp21
vwy5/QyE/POiRYvMz03Pr2+ygZJ/tjJVypiVqe75Z+uZAhrf7du3M/c92PLP
1n0namlzYJZQ25V1LEpbf7VI1nol//xn8/0d9tlnn5nr88CBA1neZuUePXpk
vi81/f4uSt78c1OvmbRLui9XrduxJOm7kSWvbN1HrFbEs7WyIP9sG8z5Z2nK
MbkJ52SdyD8DAAAAENVOAwAAQD3o3My6dqumec26cD3Hce7cuUGXN2HCBHN5
T58+9eqn6Gv6YtVjDl2fcNWqVeZ6OXz4sFc/TZlDU+3UpD5UFzqPovLPYj2D
XnN27ZYvX574tydOnMj1Hq33V+f8s1XHVm3t2rW5l1Gn/LNovs56z0XXuxM9
V9oaQ9qcW5FUm9caq1pfX1+hY9B2Yi0/1HPOrRxKe41i65nlOoaH0vT8s+u+
JbV9+/YFXWbZBkL+WccBKz/S29tb6njqnH921RrcunVrrv4HW/754MGDZh+f
fvpp7nHGQm1X1u8mrfO6sNYr+ec/m+/vMNe2rnO6pnLVYC9ym86bf27qNZN2
un87qb/OczJrO8xyn/KlS5fM91PEs7WyIP9sG+z556Yck5twTtaJ/DMAAAAA
AAAA1I+rvo2a6v3WhSuv/fDhwyDLcc17jRo1yruvMvLP1hyJmm8m2eXFixfO
z+DZs2defTVlDk01OJP6WLFiRa7xFZl/tmpxddYET6rZqM86L+v91Tn/7Bq7
arfmVbf8s0ydOjVxTCG2Bxfrmddx27t3b+Hj8KV9lTXWImv4Xr9+3bmuNm3a
FGRZCxYsSFzG6tWr//o73RPS7W9CPy+8yfln3XumHJz1ueW9t6YOBkL+2cqF
ht6m846n6vyz7pWyjs86f8xjsOWfXXnykM/oCbVdWdlftc5776pijZH885/N
93eYnvXpegZF0feBFcXKIMetqJxb3vyzNPGaSTvrHkPd49vOep7GL7/8kmn5
1r3ldcn1k3+2Dfb8c1OOyU04J+tk7V/XrVuXe8wAAAAAAAAAgPRc+RQ1ZfSK
onpAmzdvbs2f+rCyeWqalwlh0qRJ5nJ6enq8+yoj/+x67myoGi/r1683l9M5
H2lpyhyaVff02LFjucZXZP75yZMnif22ZzCsjE2IDK71/uqef7YyHdOnT8/V
t7J/1tx6Vfln5WdCzxGmlZTHj5vmHIt89vS2bdui+/fve/2t7i1xHUN37dpV
yDiV+bOWq+33jz/+CLIsa+443u9fu3attO25yflnV81utfZMeVM1Pf+s746V
bwhZf9dXnfPPO3fuTByb9ul5Dbb8s7jyizpWhRBqu1LO0BpviO0gBGuM5J//
bGl+h40fP95cp0VeRyia6x43nWfdvHkz+HJD5J+beM2kk/V7QOcYMT3rpNvf
5Hlujevecv0mrRr5Z9tgzz835ZjclHOydtb1wSw15wEAAAA0jzItoWpTAAAA
IJwPP/zQvCasNn/+/ODLffToUWteSv3Pnj3b6zWHDh1yjrV9PiwLn3pP+htf
ZeSfVcPJNea0c0addC7vymJs3LjRu7+mzKFZGdW8+WfX55Yn/yzvvfdeYt9x
XXfdf5D0NxcvXsy1fLHeX93zz0m1bNXy1P5UttbqW62q/LMrs+h7r0oeu3fv
du7PVE/Ot9a8L723+HnnOjb5ZoetOdBQ3+VOena5a5mq2RyStf/X/RbW8yTO
nDkTdCxNzT8rs+D63DSOLM+Kr5um55+V2bLGf+fOndLHVOf8s+rdJY0tRMYm
3jd3awM1/6wao1Y/IfK0YtVOTbtdJeUQ45bmd0JRrPGRf/6zpfkd5roHV03P
9mgiq6593HQ+f/v27aDLDZF/buI1k04bNmxI7De+/8OqE71q1arMy963b5/z
cw/9OyQt8s+2wZ5/liYck5tyTtbOej7cBx98kHvMAAAAAJqhjLlSAAAApKP6
r1bGM26fffZZsGXevXs3GjZsWKbr267nxuetueHKG6jOURpl5J/FlYfTdfo8
Nm3aZPaf9lncTZlDszJxa9euzTw2ZWBddW7zZiYPHjzoHHtS3TZ9P0Ow3l/d
88+umna9vb2p+1Su0bUPU0uTf7537160devWIL+3rTnCMvN1qinsWkfaT4S6
x7q/v/8f+359/j7rVNuBa6zaPq9fvx5krCtXrnQur4gMrZXd/fbbbxPngnVs
CK1p+ecXL144zy1C7ffroqr882+//ZY7k3Tq1Clz7FXVM61z/tnKQOYd2zff
fGN+HgM1/+yTvdTf5KFzQav/tJ+d6xkSOhbqN2CVrPGRf/7f+ZUvn/tj0zwf
qG58jt3Kwoa8JyZE/lmads2kk3UeER+HrXPivPsaV3Y09H2GaZF/tpF/bsYx
uSnnZO2mTJkyII93AAAAAPxp3pD8MwAAQD0dPnzYObcXX2/Pm6k6cuRI4jyp
np/tsn//fuc49+7dm2lsqhPk6ruvry9Vn2Xln5WBdI09a01Zn3yfav+l0ZQ5
NGvuWM8WzuLSpUvOrIBa3hycMp1J9zYoq6iMWNKyly5dmmvZMev91T3/bG2j
apr3T0Pzi3HN+1DfVf3GjrPC+kzjut5ZLVu2LHFMygGURTkSfaau9aT3rNpv
eVy7di1xPz1z5kyvPubMmeMcq77zeerwK2O0cOFCr+3n5MmTmZeTxMriTZgw
IfHffNdhGk3KP2/fvt1rf6/26aefZl5O3VSRf44zDtpX6bnfWSh35tr3VFW7
us75Z+t+K7WbN2+m7lPHNz1/xvW9Gaj5Z3E9K0L7ray5S5/fPFm2K1dmUJ9X
lXVTrbGRf/6zpf0dtmbNGue2pOdNZaV7tZWl1b5Zv3fL9PjxY69juP7mwIED
QZZp1dNPk39u2jWTbqzzS+1H9DyYbv8WIoPo8zwa/TatSp1+F9fp2k2M/POf
6n5MbtI5WUz3Plh9VvGMGAAAAADl0/w7AAAA6mn27NnOOR41zbVnqTem+UM9
D9DVv+ruufjUT92zZ0+q8fnM42WpY1RW/ll8Mniau0pzX6JP/TnN+aq+ZRpN
mUNTfSmrn2PHjnmPR+t99erVXt8ztRB1QJU3SOrfqteoGpohWO+v7vlnZQJc
n5Fv3uTixYveGUg13/xzZ15Z60G1oLNQLt8ak2rMl8lVs6q9rV+/PnX/+j76
7PdVW87ljz/+cObU4qY507T7S82zu+av46bjQBG0vnyeFdHZisiG1D3/rKyW
ns3u+5mp5X1GQ92UnX++cePG37ZP7QuV/UpD9w249tMhn4WSVp3zz8q5ubbv
NOeeyqEn5do620DOPy9fvtz5/rWfSZO1efToUev3jM+6zbJd+Ry7dS9Y1pqT
uhdo8+bN0dChQ6Np06alfr01LvLPf7a0v8N0DuRzfjB9+vTW36ahDGp733lr
Cmfx448/eh/L9bsx672I+u3l+m6myT9Lk66ZdGNlkK1nA+h4GYLPeZyekZWV
7sHU/dTqJ+1zYsg/28g//6nux+QmnZPFXM/OWLJkSe5xAwAAAAAAAACyU92P
YcOGec/v6Tq56j3dv3/f7Fd5knhex6f55Eldcw5xU95aGRyLMjNx/VSrac7Z
9V67KTP/rDlln89Qn52yJRbl1X0z8VlqjTZlDs2qwaWm+UXNq7goy+wzB93e
QuSf1UeaZappmw3FWk7d88+au/RZX5988kliH8oy+H6P2ptP/lnfu6TXa1tL
8728cOFCa97SGtPp06e9+wvF556ZuCm/qv2Ka9+mrIEyyL559J6eHq+x6t4d
37Eqy6M8uVUbT/PJmrPW/tC3X+U0iqzhlebziL+XRdwHX3b+WRnEJ0+e/KOp
pu358+ejQ4cOtXI4qs+ddj+vpmyo61ylDnSO0W09dGu3b98237O2fZ9+fChv
nnT/waJFi5x5O73euleo/ftVZV2HOuefxZV/VC1412ehz1z73DTfn4Gcf9b+
3OfeGu1rdU+blTFXX9qG0tyLlXW7Us7VZ8y6v8g3J6b7hnSvU+f409aYtcZE
/vnPluV3mO+zpPQefO5N0fnze++917WPtHndELLslzZu3Bg9fPjQ7Ff7PNXP
d91vG7e0+ecmXTPpRvsHn+fBdDbf8wcX3/U3bty41r2uvrTf6ty+02bGyT/b
yD//T52PyU06J4vpmohrfbqea1hlzW0AAAAAAAAAGAxU9yNNvcK4KTen+TDl
nJVv0ByeMrZpa0Xu27fPe6y7du3y7lfjUTZJeUDVOFXGWtfrlTny7SNr9q/M
/LMo2+f7nkaOHNmqX3L06NHWeunt7Y22b9/uXRdOzac2ajdNmUPT/LvPetA8
t7Zf1W5SPkr19ZSLU73nLN8ptRD5Z3HlWjtb1vxgN9Zy6p5/lsmTJ3utM839
ae5budoVK1a05ia1TVivsWpbuvLPyuv5ZJj02X/88cetOXnlads9ffq09RlM
mTLF2U+I50hnoe9Smvtn4qYsq9avsgXKimgeWf/ft0Zz3JSdTEPHlixj1bFI
25rGqOOVclJp8x56jStnk5cyOmnGpPdUhLLzz0U2bd+d38268q3HG7K59oXK
0+p809WPatIpi6BzOe0PlVnXtuKT5Yqbz71ORap7/lnr2LUONU49t0DnNzpP
0ravTJ0+jyz7erWBnH8W616nbutXxzxtK0eOHGnts/V7Z8aMGZkyhFm3K+Wn
fO8F0bmMspfK7/76669/Za90jqJtY8eOHa3sVtI5T9rfDNZYyD9nW6cxnTP5
blt6L3peher7an8Q75f1u9T1+1zbpfYfZVu8eHGmfZTOxfWe9Pta/6vv48SJ
EzPdL5Ul+9iUayZJfLKb7U3rNqTvvvvOe9laT7pnTvsS/VYT3Zdy79691nrR
8c9al2nOM8g/28g//0+dj8lNOyeL+fz20HrUtVXtS7XudF6m46SOCUVduwIA
AABQjqbM5wAAAAx2qvubZo4rVNP14LSUiyljbJr3y6rs/LOoLlYZ60XZwqya
NIeWNZPj06x7BELln/UMzjRjiudrQ7CW04T8s/IYRXzu2seq7k/Sv7syfydO
nMi0XK0nZYDT5qDS1nIKrax9fXtbunRpprGmyaqFajrO6NhdNNX6SjOutHks
XwMl/+xbW7wuqsg/u84HlCkoYxza51at7vnnNPffpW3WMWug558ly3MkQrQ8
25VyU2lqTedpaZ53YfVD/vnPlvV3mO5ZS3NPSZ6me/uq8OWXX1byXVTTb4es
v9GacM0kSdrz6r179wYfg7a3sj5jX+SfbeSf/66ux+QmnpNJiOutev4WAAAA
gGbSNTDrOXwAAACoD12z930Oa96mufU8uZJPP/200PGpZkceVeSfRXnyIteL
shh5zu+bNIemGtBZ6uZZTf2pfo6eAZ30N6Hyz6o34zsu1TAOyVpWE/LPkrbu
mKup7rpqKEnSPKQr/yzaPtLWM87StJ3WgeqpFf1e46b6g3mcOXMm9fMPsjZ9
Z+PtqQxJz6Pv1lSbtwhNzz8r3xK6PmIZ6ph/Fj17ocgxpM3cFKXu+WeZO3du
8PWv3yN6Pk1S7cLBkH/W+bZPfe20TedOygqqRmER29WdO3cy1bhN21RX15fV
D/ln//1uEt0n5fvslKxNdTf126wq+s4UvU13NtV1z1tbqO7XTCy+uU3t07QN
FkHZ7jI+66tXr3qNh/yzjfzzP9XxmNzEc7JY2mesFfH+AAAAAAAAAAB+9Kzw
IuuEqK5uiOfXfvvtt8HHpnmj3t7e3GOrKv8sqtlaxOe3bt263GNr2hyatoVQ
60/P5dVzcEWfUdLfhco/i7UdtrfQc9fWspqSf/7999+j4cOHB/nslV9on5dP
enaqT/5ZlHudOXNm8O943DZu3FjUas1Ec5g+z5vN2tT35cuXg4xVxzY947yo
sSqXVmTWJInvc8AnTJhQ2Biamn9W5kD7saaqa/5ZVGsu9H1K2ibS1LArWhPy
z8rp6rsfYv3r89T5fSzpvszBkH+OhTym6Pt88+bNVr+qRV/UdqX7YJSFKmof
ofsxlenyZfVF/jndftfyySefFPJ56/y4Ds8Y1XdnypQphW3XcdNxSNdjQqnz
NRPLwoULvcaiezmKpHO40OcacdNvzTTfY/LPNvLP3dXtmNzkc7K891+mPX8F
AAAAAAAAAOSja+SLFy8Oel1cc3lHjx4NOs7//ve/5lxB2uv2WZ8v26nK/LM8
efIkWrRoUZD1orkt5XVDaNocmuTNXipHsnv37r/1qfxq0t+HzD8rs+4zxtB1
ZK1lNSX/LNof5M1Ad6ujrG2929/65p9jv/zyS9DakKpnlDcHVKRt27YFv7dj
zZo1hTyz6uzZs8FrbekY9fjx4+Bj9WHts9rbli1bChtDk/LPw4YNi+bMmVOb
GsJ51Dn/LCHvOdA5SlH1y7NqQv5ZlPvJm31UNuf+/ft/61f7vW5/O5jyz6Lj
X97nC+jzaT/ebd26tfDt6vDhw8HuJVPTflV1wdOy+iT/nH6/a9F3Qc87CPF5
q59Tp04FGVdI2mZCvcf2ps96w4YNhWS963rNxKJ7E33Gk+eZYr4ePnwY9FkH
2jcoR5kW+Wcb+WdbXY7JTT8n870vOKnpmdkAAAAAmodzeQAAgGZTHQ/lw/LM
8SnPsH///kLrNp0/fz5T7TnNEyk/qDnBkKrOP8f0+alObJbMxLhx44LXQCxj
Ds3Ks+XJcW/evDnVetQctjLomi/tJqmOVMj8s5btGqfm2kKzltek/LOobvOK
FStS71cWLFgQ3bp1q2ufSc+cT5t/jul54Hpt1uexag5eNYXrUFvPRdlEZcrz
1LDS8WzTpk2tGt9FUs5M8/bKZmbNreneCx0zqnzme2z8+PHO8Ra5Tq19e+c9
JiH6dDV9pvrOjRw5snX+MX369FZWNU39sybQswuyrqOsLcv5gO45yLJf0Oeo
z065ljqy8s/K2deN9lVJNZutz/uHH37o2t/KlSu7vqZu+We9b2sbC0H3vyh/
l/Z4os/j9OnT/+hP5/hlbVc6bme9l0LvV+c4ndn4NKz+i8w/67dUXlZWLW02
uIzfYTHd86zvaZbPXK8rI9Oal75XOt/Pev6tpt8MOnbpfoS8+Ukfdbtm4uK6
l1C/t8ukGuC6tpL1fkztBw8ePJh5+QMx/xzy2k1V+Wet+7zz4En3e6ktXbo0
V9+dqj4mD4RzsqtXr0ZjxoxJvf50XvDs2bMgYwAAAABQviJqKQEAAKB8qrGn
HMasWbNac+m6bj1kyJDW9X7NAWnuQjkgzeHp+v0333wTvK6si64lq5aOsiy6
Hq05/DhnqmvdmkPWnKrGp1zaYLpfT3Pk8+fPb11z13qI5+20fjRvq0zg1KlT
W8/ILftzawpl+5QTVa5Z3wFtX1qPWodap1q3+n4MhJqf+DvVVFfGUnP/movX
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
N998s5XHVb3oMWPGJNbm7taOHTuWal2plrDPe9Z6mjp1arRkyZLoq6++itau
XRstWLCgNU7Xa5UD9jFQ8s9qyhBrnaXN+n700UfmMvUZ+Palz1XZ4YULF7bu
RfAdj2sM7W7duuXV59tvv92qEb18+fJo8+bNrcz0hx9+6ByTsuT3799P/dkA
AAAAAAAAAAAAAAAAAIBms/LPyiLGVHu229/MmjUr9TKVke3WV3t925UrVyaO
K2v+ua+vzyuPqfylMtrdvHjxopULd/WxbNkyrzE9fPgweu2118y+VNN3+/bt
iWO6fv16NH36dOeYlJdOY/fu3WZ/GvcXX3xhZr3v3LkTzZkzJ3dueSDln63P
Spnfjz/+ONq3b1906dKlqLe3tzW2CRMmRIcPH05cnk+uX3lh9attuJsnT56Y
446bxuRD+warH2X3jxw5YvahWurK+nd7vW92HgAAAAAAAAAAAACAPF6+fFn1
EAAAANDByj+rjm9MmeBuf/P666971zqOjR49OjF3HOvp6Qmaf1bNXVetZNXE
VUbah+pUu2ojK9vsI2ndzpw5M7p37573e0zqp72dO3fOuz/Vvrb6UjbVl9Zr
++c+duxY79fKQMo/JzV9fknZZItPrl+f5aNHj7z6O3jwoJnJb79PwaK8dVIf
ynnrO+lr//79rdrnIT9zAAAAAAAAAAAAAAB8KBejZ2gDAACgPqz884oVK/76
O9XxTfq7AwcOeC/P6kf/FluwYEHQ/PPSpUvNfKhq8qbNnv7xxx+JWe7OPLdF
y23Pdr777rutms5ZqGa39T7Vty8rA+v73jrt3LkzGjduXHT//v1UrxvI+Wfl
hPU9zEp1va3+VRs6LY1H9zYk9Xn+/Hnz9crGW2M6e/Zs6jE9f/48WrJkSeu7
CgAAAAAAAAAAAAAAAAAABi8r/6ysYbuknKVqy/pKqlHcWQ949uzZwfLPqjNr
ZXmVrc1Sd1d+/vnnxH5V49bXvn37WrngM2fOZBpHO1edax/Kdlt9PHjwIPc4
0xio+Wdtl1euXMk8bm0vVv95ssIrV65M7HfatGnma7U9J71W2ycAAAAAAAAA
AAAAAAAAAEBWVv554cKFf/vbbdu2Jf6tMsY+RowY0fX16rvdBx98ECz/rDrW
Vkb03LlzqfrrNH78+MS+f/rpp1x9Z2HlVtXu3bvn7EP1p/NmqEMaqPnnvNuH
MvNJfauu9JMnTzL3/ezZM7MGtPVsnw0bNiS+rvNeBwAAAAAAAAAAAAAA6qy/
v7/qIQAAAKCDlX9esGDB3/5WGeekv/3666+dy7p69Wri61VvuF3I/LNyoL4Z
7yysGtDKIpft0aNHZubWp8a0tV2o9fX1lfBO/mcg5p/1N3lcvnzZ7P/IkSO5
+hcrS3/hwoXE123evDnxdcpUW9lpAAAAAAAAAAAAAADqhnluAACAekmTf5Yp
U6Z0/dvRo0c7l7Vo0aKur1WfnULln1XbOamf1157LXr+/Ll3X5bhw4d3Xcak
SZOC9J/WkCFDEt/3zp07na/XvYtWtnbevHklvIv/GYj5599//z3XmJcvX57Y
9zvvvJOr75h1z8O6desSX3f06FHzvae9hwEAAAAAAAAAAAAAgKpQ/xkAAKB+
0uafjx07lvj3d+7cMZeVlMlVn51C5Z97enoS+3n33Xe9+3FRX92WodrTVRg5
cmTuvPCbb75pZlhD5I59DbT885IlS3KPecyYMYn9r127Nnf/MdVr7raMbvct
xFz1w9VC1KcGAAAAAAAAAAAAAKBo1H4GAACon7T5Z53TKdPb7e9XrFiRuJyf
fvopMR/c7TwxVP551KhRif188cUX3v24zJkzJ3E5ZdI9hzdu3DDzzzNmzPDq
6+OPP3ZmWKdOndrahoo2kPLPqjv+5MmTXON99uyZ+blcuXIlV//tRowY0XUZ
+m5ZrO9e+2enGtMAAAAAAAAAAAAAAAAAAAC+0uafZd68eV3/fvjw4YnLmT17
dtfXqK9uQuSflQW2spdXr1716sfH6tWrE5dTRL5T+dczZ85E69evj6ZPnx6N
Hj3aWa85bu+8847XMm7fvt3K6vr0qc/r2rVrwd9nbCDln33Xv+X48eOJ/Yeu
OT5hwoTU33c5ePCg17ajbWzp0qXRw4cPg44bAAAAAAAAAAAAAIAQVNePGtAA
AAD1kiX/3NfXl/iapAxsUs1o9dVNiPzznTt3zNzlxYsXgzVlcJOWE6I+8uPH
j6M9e/ZEs2bNMrPAPm3s2LHeyz158mSqvlV3evPmzcEz3+Sf/27r1q3mZxBy
29b2kjVnrZrwabafiRMnRocOHeJ3IwAAAAAAAAAAAACgVpjHBgAAqJcs+WdR
7ddur/nkk0/+8bc//fRT6vqxIfLPym7myQmHaj///LPXeDsp87xp06ZWbeeQ
40mTf5YdO3ZkWo7qUmd9753IP//dypUrK9+uVbfZx8yZM1P3rWy19iW3bt3K
va4AAAAAAAAAAAAAAAAAAMDAkjX/nJS/HDp06D/+du7cuV3/Vn0kCZF/Pnr0
aOUZUbWzZ896jTd248aNaNq0aYWNJ23+Wb744ovMyxsxYkT01VdfRf39/amX
GyP//HcLFy6sfLtW86HPferUqZmXofV17Nix3OsMAAAAAAAAAAAAAAAAAAAM
DFnzz3fv3k18XV9f39/+9s033+z6d/fu3UvsP0T+efv27ZXnQ9V8ayA/efKk
VTM57/JUl9f69yz5Z1Eue9y4cZnHpQxz1hwr+ee/s74fZTXf+s+x48ePt+6P
yLo8rbfr16/nXncAAAAAAAAAAAAAAAAAAKDZsuafRTnabq9TbdqYsr9ZMrgh
8s8bN26sPCOqdvXqVedYr127likbOmTIkGjy5Mmt/K7ypcqly6xZsxJfkzX/
HNu3b1+uHOuECROiX3/9NdUyyT//nT7zqrfr119/PfW4X758Ga1YscKZ0bfa
vHnzoqdPn+ZehwAAAAAAAAAAAAAA+Hj16lXVQwAAAECHPPnnpPrKyuTG1Ee3
v9FrLSHyz999913lGVG1P/74wxyn3k+a/iZNmhTt3LkzevDgQWKfReafY8pb
ayxZ1skbb7wR3blzx3tZ5J//bubMmZVv1yNGjMg8/ufPn0fbtm2LRo0alWnZ
2ob7+/tzr0cAAAAAAAAAAAAAAAAAANA8efLPyvUmvfbcuXOtv1EWutu/P3v2
zOw7RP75xIkTZoby4sWLhbdLly6ZY1QdZJ+8p/K/yosqN+qjjPxz7OHDh9HK
lStT14RWftaVDY+Rf/67xYsXJ/avz6GMbfvGjRu534eo9vncuXNT14TWNg4A
AAAAAAAAAAAAQBmo0QUAAFAvefLPMnXq1K6vnTNnTisj2e3f9BqXEPnny5cv
m/nJUPnNPMaMGWOOUZnQb7/9NnW/Zeaf2508eTJ67733vDOs7777rle/5J//
bu3atYn9q7Z2E7148aJV13zkyJHe248+NwAAAAAAAAAAAAAAivTq1atWAwAA
QH3kzT8fP348MYOZlAHVa1xC5J8fPHhgZie3b9/u1U9Rvv76a3N8w4cPj27e
vJmp76ryz7ErV65EEydO9Mqw+nwOVv55yZIlucfbtPyzcsLWOr17927uZVTp
yJEjrfrgPtvPrVu3qh4uAAAAAAAAAAAAAAAAAAAoUd78syjr7Fuv1bc2bYj8
s6h+clI/s2fP9u6nCFad29dffz26fft25r6rzj/HTvw/9u7EaYoiXf/+33rm
zBYTc2Ym4sQsZxkUQVA2FdllBwHZBVFA2WQA2UHOIDvI7iAgICJrv3H17y0i
++7MqqyqrF54vp+Iihl5qqtryVq68qq79u0rbBN//OMfC6eTl3/WstY1bPnn
EydO5K7TLVu21P6OQTBv3rzC9jN9+vR+zyYAAAAAAAAAAAAA4BVH/WcAAIDB
kiL/rPFi88+x00yVf/7LX/4SnM7vf//76OmkVlSbeu3atbWmPyj5Zzl69Ghu
Dl3D48ePc6eRVwv4r3/9a+15HLb8s+St0ylTpiT5jkGwbNmy3LZTZfsAAAAA
AAAAAAAAAAAAAIDhlSL/fPbs2ej8s8aNkSr/vHjx4iTzk1peXWTlWp8+fVpr
+oOUf5ZVq1blbocLFy7kfl41okOfVR3tuoYx//y3v/0t+B2/+tWvWk+ePEny
PYNg1KhRwWWNrSkPAAAAAAAAAAAAAAAAAABeDSnyz5JXnzcbNE6sVPnnS5cu
5c5TiuxsFRs2bGh0ngYt/3z37t3c7bBnz57cz//5z38OfvbXv/51rXlTTvgP
f/jD0OWfi+oiv/vuu0m+ZxB89tlnucsKAAAAAAAAAAAAAEBTXrx40e9ZAAAA
gJEq/7xgwYLC/LPGiZUq/yy//e1vc+dr+fLlpaaXwpIlSxrNP48ZM2ag8s+i
nHJonnbv3p372bz2oOFf//pXpXnSb5S8OsqDnH++detW4T53+vTpJN/Vb/fv
389dTn5rAgAAAAAAAAAAAACa9Pz5837PAgAAAByp8s/ff/99YRbz9u3b0dNL
mX8uqh37b//2b+0saS+tXr06OD+/+MUvak17zZo1ucsbm39WpvSjjz5qZ09T
qJPTnTdvXu7np0+fXmme8upkD3r+WcaPH58777///e+TfVdZOiasXbs2STb5
+PHjje0vAAAAAAAAAAAAAAAAAABguKTKP8t//ud/Bqelv5WRMv8sRTWglQl+
/Phx6elWtW3bttz5uX79eulpKmc6adKkwjxvbP55xowZ7fH//d//vXXw4MHS
8+M6fPhw7jw9ePAg9/OqD533ec1jmZzts2fPcmtkD0v++ebNm4XzP23atGTf
F0vb4k9/+lP7+//4xz+2bty4UWt6M2fODC6f9m0AAAAAAAAAAAAAAAAAADBy
pMw/b9y4MTgt/a2M1PnnohrQWc61ah1o5WlXrlzZ+vWvf9167bXXCsdXveO8
eVFmtEye9/z5860//OEPUXnemPzz/v37uz737rvvtn766afoecroM1ovofn5
3e9+VziNe/fuFS5XbHu9e/due/3GrKtBzz/LW2+9VbgMb7zxRruNVqH631On
Tm3XSV+1alXUZ2xeWZ9VLegqTp06lbtsEyZMqDRdAAAAAAAAAAAAAABiKL9R
tc8dAAAAzUiZf1b95NC0njx5UmpaqfPPogxoUU5UOc158+ZFz+/Tp09bS5cu
bdcfdqejfHORX/ziF7nzMnbs2NajR49yp/Hjjz+2pk+fHp3ljck/3759u2t5
skH/rpx3bDZbeXLlffPmR1nZGFk94bxB36V14qMc9ty5c4PLNqz5Z7WRovrm
GpRB37JlS/R01Q50DLDbv2jf8GXns0FZd/091v/93//lZuc1qLY4AAAAAAAA
AAAAAABNKlPDDgAAAM1LmX8WZXFVW9cd9G9lNZF/Vm5T+cuYzKtynpoH1Y2+
cuXKy8ynMrTffvtt6+OPP27nqUNZ2piMq+pEF82HMtLKBx89erRdA1nPE+r7
d+zY0Ro1alSpHG9s/ll/j5mvMWPGtPbs2dOV0VYmXPWop02bVjgd5c1VXzjG
ihUropdRtbDHjRvXzjtPnDix9de//rX9XXnbO5RHH/T8s1y8eDF63fzmN79p
TZo0qbVv377Wv/71r9bz58/b09B2UG5fef6//e1vwc9rnYbcuXMnKl+uTPN7
773XOnnyZNczstrHTpw40fr73/9eOB1l4gEAAAAAAAAAAAAAaJKyz+SfAQAA
Bkvq/HMqTeSfRVnmsvV/qw5FdW4vXLjQ2HfnZX3z8s/KnuZ9Nm/45S9/WXrd
Llu2LHrbKWfdxLbTNJUpD+W+hyH/LF988UVP2nVeZl2Z6qrT/NWvflW67cXU
WQcAAAAAAAAAAAAAoK6sthgAAAAGw0jLP4tq3sbWga4z/Nd//VfhvEyYMCH5
96rW8a1bt4LLWFT/WesnpgZ03WHs2LGlt53qbqecB2WfVataQvWGhyX/LAcP
HgzWsU45LFmyJDgPqlWuLHPT86C2AAAAAAAAAAAAAAAAAAAARp6RmH8W1RJW
PrmpbOZbb73VzhEX0ftR/vKXvyT5TtXO/eSTT15OWzlo33hF+eeMMq5NrR9t
36rvhnnttdeSzMN//Md/dGyjiRMnescbpvyzqMb5b3/720a2m7LV8+bNa+8/
eVRHXPn2ptrP8uXLG12HAAAAAAAAAAAAAAAAAABgcI3U/HNm586dSbOib7/9
drv2chlPnjxpvf/++7W+V1nu27dvd0xXGWzfuLH5Z7l//35r2rRp7Wx1ivWj
6WzYsKHU+rGUmx41alSt+Zg0aVLXu2nmzp3rHXfY8s/y7Nmzdn49VS1o1cle
uHBh6/Hjx6Xm49KlS8ny6hp+/etft06cONHQWgMAAAAAAAAAAAAAoJv64AEA
ADBYBjX/nJcfTZl/znz88cetP/zhD5UymcqYqnawzR+XpW0Rqtmcl6UNrQ/V
6a2bf878+OOP7empZnLV/OysWbPaeepUtmzZ0vrlL39Zaj7+93//N5ifXb9+
/SuTf86oDrPW+29+85vKeWPlqJXRr0NtW/uIpldlPn73u9+1tw+/KQEAAAAA
AAAAAAAAvab6alXfcQ0AAAD0gvK5ykKrZu2f/vSndm1o5ZuV31Xt4l/96lft
POyf//zn1pw5c1onT55MPg9Hjx5t19odM2ZMO5Odfb8G5Y//+7//u51Frpu3
rkrrSFlU1ehWllrrKJu/LOusf1POd/bs2a0jR4501VpORdPdt29fO1v7+9//
vp2v1XZy15cyzzNnzmz961//amQehoUyyIsWLWrXCle7cteV2pj+W+vrf/7n
f1rLly9vXb9+vZH5uHLlSrt9a7v88Y9/bGez7T6mvLP+/uGHH7bOnz/fyHwA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDe
a+qd1wAAAAAAAAAAAAAAAAAAAADQhBcvXvR7FgAAAAAAAAAAAAAAAAAAAACg
EPWfAQAAAAAAAAAAAAAAAAAAAAwLaj8DAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAACkpfrP1IAGAAAAAAAAAAAAAAAAAAAAMCzIPwMAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAGBQvXjxot+zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA8Mp5/vx5v2cBAAAAAAAAAAAAAAAAAAAAAAq9ePGiPQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAd6j8DAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMjz4sWLfs8C
AAAAAAAAAAAAAAAAAAAAAER7/vx5v2cBAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANBjL168aD179qzfswEAAAAA
AAAAAAAAAAAAAAAAUZSBBgAAAAAAAAAAAAAAAAAAAIBBp+wz+WcAAAAAAAAA
AAAAAAAAAAAAw+L58+f9ngUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAQI89e/as37MAAAAAAAAAAAAAAAAAAAAA
AFGeP3/eevHiRb9nAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAHhl3Llzp3Xo0KHWxx9/3Nq0aVNr//79rYcPH/Z7tpCY3gOn98Hl
efLkSev06dOtrVu3ttvDrl27WleuXOnRHAJAbzx9+rR1/vz51hdffNFat25d
a8eOHa0LFy70e7YAAAAAAAAARCrq7wAAAACAfhkzZkzr73//e3t4++23+z07
fXfq1KmX60PDwoUL+z1LAF4Byji/9957HccXd1AOFs3bvHlzx3r/5JNPguMq
w3z9+vXoaV+7dq01bdq0jvPqqFGjWuPHj29n/lzKAYbawgcffFB5+QD8P999
9107d4v++uqrr9rHQd+x7p133nk53s8//9z6/vvvezpvc+bM6Zifn376qaff
3wsjYRkBjvcAAAAAAPSG+kwAAAAAYNC4feLjxo3r9+z03T//+c+OdTJv3rx+
zxKAIffs2bPWG2+8Ecy7kknqHeWd3fWuuss+O3fubL322mvtcV5//fXWgQMH
cqebl2fWoO2fWbNmTe6469evT7rMwEiiOsPuMwirVq3q9yyNWEXHxUWLFrXH
07OG2b+9+eab7SxjL0yYMOGVPw+PhGXEyMXxvjrV7Lp9+3br7Nmz7ef3UuTH
1Qeu99xomnqfyaNHjxLMKQAAAABgUFD/GQAAYDCoD1Z9gNkwefLkStdq7777
bsd0sr5bYBiRf+5E/hlAaps2berKfSlbm+Vrqb3fOzH5Z+U3lHl2x1MmL0RZ
vbyMn1vT+ccff/T+ffTo0S//v3IoAKpRTWG7f927d6/fszXiKEtnj6P2WHf8
+PF2ftGOs2DBgp7M40jIBo+EZcTIxfG+HNXY/+ijj9rXtKFn9fT3MuvwwYMH
rbVr17bfdeKbpn7rzJgxo3XkyJHc6eh84N5j1XyUpfcNuNNwr/HPnTvX8be9
e/cGp2PvG7vDxIkTW1OnTm1f12u5z5w5M/S1z5RTP3bsWHt59JtV5+VhXyYA
AAAAzeC3AgAAwGDwvXde98jL0H15Ow1yS6jjH//4R2vr1q3tQXVyeo38cyfy
z8Dwun79+svj6Zdfftnv2XnJrU1ns12qk3bjxo3+zdwIE5N/fvLkiTfDEaJc
hx1348aN7SyBvm/WrFmtr7/+uj3uhg0burImt27dav9NeUHlM1BNv6+nkE/X
V9n20e+pprz11ltd++Pp06cb+75eG5Z2vnv37q4M3OXLl9t/0zsRdKzTc8hH
jx7t2l6TJk3qyTw2mQ1uor3//PPPL6ep4eHDh4WfIf+MV9mrfrxPRde1y5cv
L3xWzz1exxy3lJUdNWpU9HR1bA8943f48OGueSjbr646Fe40dJzMxL7/RXz3
jfMGrYMlS5a07t+/X2p+67h79267Doe7/vUbowzV/9Y2ydteGgcAAAAAAAAA
MFh897H1b2XMnj2b/DOSyup/VumzSIH8cyfyz8DwcrOlOrYOCttHnuId06gm
Nv9gM83z588PTtPWOM2rcad6ce64O3bsqLtI+P/1+3oK+dxckv5/Uz7//POO
fSyvdvswGpZ2vnLlyo7toLqSPsq3uTWhNezbt68n89hkNriJ9v7tt992zK/+
uwj5Z7zKXvXjfQp674gvJx4zrFq1yjtNHbf1bF+Vaep30MmTJ7umqedhbJba
N16Inqux36Xa1Jkm88/uoGd/mnLq1Kl2XWzdf/Z998KFC6OntWfPnqjsuq45
9L0AAAAAIPo9SA1oAACA/gvdx9b7/mLonrrvHjH5Z9ThtiXyz/1H/hkYXm5t
s0HJP6s+l3tMURYJ/RObf9A1n+qsKvd88ODB4H09Zdnd6amec57Jkyd3jP/d
d9/VXib8P/2+nkI+N6/TZP5ZlJlSnX3Vfoz9nTcshqWd22ycrq9DlM/TsVm1
LM+fP9+zeWwyG9xEe9d7BMg/A51e5eN9XbpGHTt2rPce6Pjx49vXuF988UX7
+RQdp9zna7Lh+++/75qufZYvG/Rd+pty6ZrmO++8452mhgsXLnRNd/r06R3j
qKZyLPsuAXuPtk7+Wc9Efvjhh62lS5e2pk2b1s7Z52WGQ8/71BVal2Xzz3p3
hO/zuhdo31mUDWXfmwgAAADg1UX+GQAAoP9C+Wf3vYh59u7d6/08+WdUpT7o
fucYyD93Iv8MDC/tr4OWf7b1GtVvjv4pk3+Iofd4u9NTvjmP8ibu+MpZo75B
uJ5CPjdT03T++VU1TO3crX+s4fr16/2epS5NZoObaO96Jof8M4BYa9as6bp3
qWPTjRs3vOMrPz516tSX4yobbV26dMl7T1TPCvoog21zzRomTpzYNa6936p5
jaUsd975sU7+Wcvsc/Xq1dakSZO86yP0mTpS5Z9t/Wgtg55Dyug8oey6O47e
00DGAQAAAAAAAAAGQyj/HFuLMfR58s+oSlmAfucYyD93Iv8MDC9liwc9/6wM
APondf657Pa1+WekMQjXU8j3+uuvk3+uaZjauc0/D2Kt+yazwU20988++4z8
M4Ao9+7d67pvqWPRzz//XPhZXSuvXr3a+zf7HhMd6y5evFg4TfcdPdlw5MiR
jnGePHnSNY6v/rSP3r/ifu727dtdy5Q6/5zZtGlT5XvMZaiutOpQZ4PNlcfk
n1XH2d7/C+Wa7Xscdu7cmXqRAAAAAAAAAAAVuPex3T5JDXfu3Mn9rK235X6+
bP5ZNVCUsfz0009bhw4daj148KDS8qhm4OnTp1t79uxpT+vLL79s1yCpUpdD
86R+C01j8+bNrW+++abd/zBotGxaZtXs1v131V0scuvWrdauXbva9WvUd1Fl
/Tx8+LC9TjSNbdu2VZ6OderUqdo5BvXtqO9I86V+cb0bWfMbq+n8c6r2bqlu
kfpv1N+0b9++9nZOoSj//Pjx49bhw4fb+4na4jDU7tQ8av/esWNHe7613n74
4Yda03z+/Hn7HeXaF3fv3j1wuZYm2p36i48dO9bez7QO7969G/3ZJtqrllH7
u7aB3jN8/Pjx3H1f60DHCq0T1deqOw+qE3XgwIF2m9K7p1OdM86dO9duU5pP
vcu4zLZTLbGq+eemzoOp8s9Vzn/KPuzfv7/dZrU/pDyva9qq9abtpPnR+UzH
hRAdI9TutA+oHaY6F/jomKc2qXnTd7n7hbbtMOefB+HYprao6yC1RdUjTXX8
17KdOHGifT2zZcuWdnuPbbMprqdi6TpA2yA7n2pfKGvQz6E+dbaP2AxWHXXO
x0Ve9d8N0ov214v8c93rW5sNdnOBg9TeM6tWraqdf065jFZTv/lC1I61/bWf
6TokVNO2iJ4rqLvP+1Q5TjU1L6Jzla6JtK21vtR+8q7b8tS9/zBItF20fdRu
9Vuq188INHW+mD17dse+/+abb9aeptaPzfmeOXMm+vPuc6oaxo4d2zWOPXco
t1xE90CL7mk1mX8W37rR754m6Xdy2fzz0qVLOz6j+Q6xGfoy9bgBAAAAAAAA
AM1x72PrfX6jRo16+d+qpZFH/cPZuPqcW/ckNv+sDJL6Hex98SxPHaqxYqlv
MlSLOhv0/seYXKb6iOfMmROcjuqoKKsU6oNRvkzrQ8Nbb71V+H1aV9n4eX0w
Wh/ZeMqaivpn3XcJZ4P6WS31I6leSegdkZoP9ZMUUTbA9hu7g3JM6ncoQ/1b
6pPRunXboNu+3EG1cixlb9RmfevD3XZqK0WK+opc6rNy503tLKRue9e8u9+V
9cdr/dl3drrT9bWHMmz+OetH0jFA68f3vfp3Ze183Las9ui+WzSP+iyzz2ka
VfJV2r9nzJgRbCO2rWVDXjtQX3doPeiz6rO09ZYy2nbu9/jee+ujvvlsf9GQ
V08pdbtTlkOUq/EdT0KfS9Ve169f711uvc84dHxTPsaldxkrxx+aB81jLJ0L
tA5tjS23X1SZ6CrLpD7/0HR1fgm1K+0r+l77XJOvjfv2pbrnwRCdgzRfvu3k
ztPcuXM7Plf3/Kft/cEHH3jXR7aNdDyLoWuNbF5UZ0x0frWZCrc9KUPiUk57
ypQpwXNx0fNnZWh92Hyxux2VQ1CuyP33UP7BbafahmfPnu34e+z2tUPeuFp/
9+/f985Pv45tritXrnQ8Y2CXQ+ebotyQr01pXpTH8K0fDWpv2fy6UlxPxdJ5
SMfW0DFK22DRokWF2cE651CX9il32YpyZ9n6zdqzMnY+KbeP/k37Y+x+Yq8J
Up2PY7JTr/rvhkyq9heiY7COU6NHjw5+R9YG3Wd43Han5fS1J1eq61u7rXSe
1+/nZcuW9by9h+j6I2adZoOtp5pyGUNS3eOIpXN56Pu0TGpPRe1Yx0Ddzwmt
A113hn7buVKcW1PNi7jXkHpGTXSdZXOn7qDcb4y69x90fMlrqyE6hrufU7Y+
E3u8d6/psn1P20r3MuwyuL9NmjrXShPni4zyunZ6ev62LrXF0LqqOl+2pvD2
7ds7/j5p0qTC6apdup+xv4Wl6fyz+Gpjp3yGwaqSf9Z9cPd4WWTBggUd36Fn
HQAAAACMXE3+xgEAAEA89z627tW77/Pz1R5xuX0T+px7778o/xzqW/ENur8f
yr6oj8TeU88b1GeSl5n09T+EBq0fX1+WO05MPRBNp6gP0E5XdU3z5lV9cS7l
BEK5LzsoBxXiZt6LBvXnxdaes++cLBrUbjNqS+q/C+UzfENRzs0dNy/3unLl
yo5xNQ83b97sGi9Ve7c5ZOUk7HufQ4Nq2VVlv1f7e+x+p7pNlu0/i8nhKJfg
9oGrPZelbECZduYOvu8rs10176qhW7RcGmLeaav+cfczvvqqTbU7zZ+2q286
7v7SVHv96KOPOvY5He9sXSzfoPcCiI5LoYyIO6iGaxHlJ0JZbjssWbIkWFPO
LpO2XShP6w4a15c/i1k+d1CGM5PiPBhiz3ehwV5DuH8re/5TPiaUkbKD+r+L
nqtwr32mTp3arq0Yyn+6Q1bnU/MTyvO42zWmlnWRdevWRS23PX+G8g9uO/Xt
I7Hbt+xg10W/j22Z2GsitT9dr4bYNqXjSiizbufJPtdX53qqDNXIjD3OaP9Q
jV4rxTnUZTNIRc9W2e8O5VdSbh8tc5ntY2v2pzof2/d4WK/y7wZ3W6RsfyFl
rj3dmpM2A5j3HEXK61v7vWpjoXx40+09xGbPigb7OyPlMlqpzk+xdJzTb4DY
deH7XSZl9lU9B5JXI7lX59aYeRF3fGXndR0Wc99A7Swk1f0He52m39gx7DnI
vf8Qe7x3r+my44B7L9Ad9CxTpqlzbVPni8yKFSs6plF0rzOGst923vJqB4fY
ZyJ1reGy793TUPRsmf196vu92Iv884ULF7rmvWpd+hhV8s/u78SYmuBqw/a4
AgAAAAAAAADoL/c+tvoy7P3i0H1t9Te44+lzbg4iL/+sPqpQbiBUH0rjW3p/
amwfiTuE6vNqer4Mk5Yr1Cfq60O0y1OkSv5ZdXRCuQTbl6O6Nr7x9PlQZiur
r+kK5c20bkKZJzdTl6dOjmHx4sWV2kFen5ldvth59tUdTdXexfZnlsk4ql+n
Kvu9ZQe7n9h3oRbV2BbVz3U/4/bDxlCtKTtfWvdqS6r/VZTzsX1h2q4xWQk7
+GovqS6tO476wovYbKzdZ5tsd6qJFlo+9/jaVHu1GczY6WqZNU+xmS7NQ96z
28qzhupOhurAKQMds0xl2tbMmTO7plc1/5zqPBiSIv9c5vxXJROmdpKXgXZz
U9n7HmKXSRn8Otu1jLz63UXDIOefB+HYJqFrD+0/ofYZyrnZNlUmT2X3v17k
n33vMy8a1HZcKc+hmV7kn+tun9T556rn47z886v+u0GaaH8hTeefU1/f2u/t
Z3sPSZ1/rrOMrpTnpxi6Vikz7xp8tWmVDyy7L+TV6q5zbk09L2K3Q5lpZ8+u
WanuP9h7arqmLMpzq453Xhuqkn/WoDx3aL51HMs0ca5t8nyRsft97Htf8qjO
uztNnSOrUF1ydzq+5671vIQ7jn23jMvmskPz1Yv8s9j3pGR12JvQi/yzzaOH
ft8DAAAAGDmKfssDAACgee59bN3rVdbL7UcLZQzd/hGNr8+5feJ5+WfdV7f9
F1u2bOm4PtQ71W29RvUvWG6+R/0Ees+j+nyyeijZu1Pt9/kyKKrrZfsJbL+K
6gVl/eXqU/axfWxFquSf7XzqHZmqo6J6bW7fubJstt9bfT9uX576pm0fnu++
v81Sqe6O29+l6Wg+svajOq+x1H+rerYa1Edn++yyv2WD29+iZXHHV70cbcts
GVUL1G7bvLZt17Uvm6t2YacX6g9P2d7zcsiq/aXlVH+XsmK++k1u32UZed+r
vlPNv6gN2n40Db4cqc3QFNU6VRbQHV+1hMqweQTbflXPze4H6i9TnUcN2pdc
vrqqOiZoXWhZHz161O7b82WF7HFF+21Rm3Op7biZy+wY7OpVu1N/pvZJ7W9a
3suXL0d9rk57tf317npQbS/Ng44pGzZsCH5/dnzWONq+qptmc+ga8mpAu+/K
zdr5iRMnOsbRMdFOU++oj10mbWflfLSO1QZVa9mX2bLT1HjZ8dJtK9m7te2Q
te9U58EQ1YDV99kabzovufOTHVMyoW2Yd/5T37TNBWn5NX6Wb9ayKU9tpztj
xozgMoTey61zuY5/yrLo2qMof6wcg+ZF+4BqA9s8iQa1zSp8+57Wheq0atl1
HLh48aJ32TVUzT/Hbl872DyS/btb03sQjm2avh1f+R73PKH1bLMqoQxGqE2p
fes9E+fOnWu3Z+VSbZu2mf8611MxdH3tq6euGpyqCS1aD3pmKTv/6TeBvQec
8hya6UX+ue720bJl697uJ5p/u33sPKU6H4fycCPhd4M00f5i5tW2US2/O5/u
+onNP6e+vh2k9h6iOqahdarvsdO171VJuYyulOenGL66z7q3o/1d+5e+V9eD
2b0QLYu9rtDf7TS0PytDqOO9pqFzu73m1aD3cfhUPU41MS8Smhedm1S3VfOi
azdf/jf03HzK+w82G3ro0KHc7W7nc+PGjbnrPzb/7A5z585tbw9dX2e/1zJN
nGubPF9k7DKWeX9NiF2H2teq0O9QO392vdp3KOlZ6BDb9kL53F7ln+15Wr+/
m1Il/2yfc4vhnhvef//9mnMNAAAAYJjp/ldeHSUAAAD0hnsfO6sL4tZU8tUe
ETd/lb0b1O0vD+Wf1edm7+373sUo6mdx7yv7+hvVp6z5Xr16dfAdkL5aTL57
+7aWlK+Wb0a5PPWN+7jTaDr/rP4y9QeF2BpK6lsK0Tp0x7XZQ7eeqDJktr88
o/WiGpdV2cxiTP/I8uXL2/0WNjPnUl+iO10tQ4g7ns2iql3aPIRyBT6p23uo
P1n98z72XaqhPtwivu9Ve1DGz8e+E1SD+ixdelbB/btyeCH67ehmOMvWVnrw
4EHHd+lY5ebpXLYP2tfOlaOwy6fcrY/6Lm0/sa/2ms1C2KyGS7kBd1zbr92r
dqf9Lk9T7dXXX6824avRFspAq3/at21t364y0T62Hrn2h9AxUVmNouXyLZPa
hC9npWO+zePkPdvgjlvUp5vqPFhEOUn3e5ThyVPl/GfzFlqfoWOWcsF2+mWy
kGo3vnlRfiN239Hnbe5Q+YUqbP1vXYuoXqCPcl42f1w1/5wpu33tNVrIoBzb
7DMIaj8hNgPty7T72pQ+58s7anvZcUPHnirXU0WUoXGnqXNzKKul63LVy7XP
ZzRxDpVe5p9TbB+7n+h4USTV+TiUhxsJvxuaan8x7DkhVFtWYvLPqa9vfd/b
z/Yew67T7DmMPE0sY+rzUxHVXLffp30yRPlge02n31f2eiF0faxx7TWi9mu1
QavKcaqpeRHfvCxbtsw7rn02Im/bpLr/oGeo3XH0TGgee81k31lSN//sq+fv
auJc2/T5wleLPtReyrDLlvduhTxq00XHD21ne7wPsc9GnDlzxjter/LPNrNf
dT3FqJJ/tvn7omdxNm/e3DF+nTr+AAAAAAAAAIA03PvYygaJ6qq693Pdeoqi
Wp3u37M6rG4/Xij/bGt86n2oeWwfVF4/cR5bg1M1bSx7Tz+m/9THnUaT+Wdt
r1DfkNi6RBo/1Ccuyqm429Dmldy/5WWH62oir5OxuWW3lpHLHcfNP6tvymaZ
VIMq9Gxn6vZu+zO1TdQvH2LfpVo1a2C/V+tA9eTy2AyN+kpdZfrwjh071jFu
Uc7Hsush7/3lNtfq6/9SbVh3nLx69+LLRNh31qof3v272kKI6j2549r6VU23
Ow0xdX+baq+2v15tK7Qvq5/czrvWX+h9VDrfueMqk+1jjyWqpZvHzXb72rpv
mXzvKciofpw7vq395iqTf051HixSN/9cdP5TvTr7maK+bFubLPT+Y5ubyp4B
87F98Bry3retGrqxx4EQX83xUO47E5t/6Hf+eRCObdu3b+8Yv6jmm60VrVqg
lm1TytPk1Yyw+Wu3fqYr9fWUva7UUKUGYxPnUOlV/jnV9kmVf65yPvZlj0bK
74am2l+M1Pnn1Ne3vu/tZ3uPkSL/nGIZe32Pw16Hln0fhygT7U5D+2noejpj
71v4roGqHKeamhex86LzeIi+0x03thZsnqL7D7qetcse+p2iZ9nccfWb3KqT
f445pzdxrm36fOE7jqdgc8ZVrtsz9hlIvW/Hsute74+x7Pv88u6x9Cr/rGef
i9ptKlXyz/od7X5Gv0tCz9ja5xWK1jEAAACAkYH6zwAAAP3nyz+LWwtw5syZ
HZ9xc3puvjcm/+z2/8TcJ7YZyaJ6NCG2T9/3bkpbx0x1svL6/UPcaTSZf7b1
dC2bgcrLXGXcXKWtY2Jzv2UzqLGazD/bPqpQFtMdx80/27qH2r559U9Tt/fY
/syMai7avpwqyn6v2OckfP3HelewO4591iKjGrzueEVZPsvu27t37w6Oq2kX
9QPafmzVYy5i6wrZmuH2e23d8Yz6w4tqYTfd7jTE5DSaaq+xGcyMrW2bV1tb
+SJ3XF8G1q6vomyn2OOxfX6g7DLt2LGjY/zQe42lTP451XmwSN38c9nzn33+
wsdXE9TX9x2TScsoE+KOW7Q/aru74+dlq0Ps8bKojqAMS/55EI5t9vmTmGOh
O9++fbVMm/LNQ+jaOPX1lH2fupYrlNHK08Q5VHqVf061fVLln1Odj0fK74am
2l+M1Pnn1Ne3sd/rarK9x0iRf06xjL28x2Hrfmso+9tI7HLlvYsnY88Dvt8r
Kc6tqeZF3HFi7s3YY0SV85wr5v6D8uHuOKH3Ktg6utu2besap2r+Wcsd01/b
xLm26fOFsrp2WVOwxx/9PqvKPmfhawM6brvj+N5doNx0zPaXXuWf9ay2+9kq
Ne9jVck/67euzZ/rWKG2mv0O1vucQu/1SfGcBAAAAAAAAACgnlD+ec2aNR33
dN0MkNsnpPEyRfln+95J1d+K4X5G9+hjqCaZ7lerX1j5bdtP47vnbmv0Zf2X
mzZtyq0zmTe/TeWfY/pV1W/ofiYv85dR3bDQfXxbp0qDsg779+9P+mxjyryO
+lpV40kZMtVpdtuoBvuu7oyvL9X2sWpaeX25TbT3snlS+y7Vqn19VfLPYvuR
tF+6bK3d0Dpyt1uoJmseW6dH7ywNsf1zdly7XWPr/djji+8ZDNvv6dtnldNx
x1G92Lz5a6LdxdaYa6q9ls0K63xU5lhYtH3tNlD7KqI+U/czV65cqbVMtia6
ciMhZfLPqc6DRerkn2P2Ofusiq/mro/2S/dzvneal81NlZl3u8/EZOst297z
3sueGYb886Ac29zrSfe6OY+eI8g+o+tuq2ybsnXCQ88DpM4/2+9VDqusJs+h
g5J/jt0+KfLPKc/HI+F3Q5PtL0bq/HPK69sy3+tqsr3H6EX+uWgZe3mPQ+w1
oH7jVmHPvTHPUmjfdZ/D9NXqrXKcampexJ1uzL0Zey5RVr2MKvcfbC330LNr
dj35rs2r5p/zjh+uJs61TZ8vbt682THtVDWmbbY9Lz9cxN430Xa07LOavsy/
/Q0Uer5cepV/1jsT3M8OWv1nsc+g5g3aVu72iv09AAAAAAAAAABoTij/bN8R
uWfPnva/29opGi9TlH++cOGCt1+jaIi9f63+APXdKx9ZdM861Pflew+o2w+l
vuMiZfvYquSfY6ar/rY661qDm1dV7SM3w2P7ALTuy76716dOXkf9Y+pT9PU1
+gZlmn1sv5LeLWo/W/S+7Cbae5Ucsjt+r/PPMe+LtjW2bEbafvfatWtLz799
V3BeLsHW1dJ2dNm2UNQOMvbdxr7MjW37vnfo2vpoV69e7fj7oLS7qp+Laa9l
s8L2WFiU6Sp6Z7BtI5rPovVr27n68+ssk81ipco/++alynmwSJ38c8z5b8qU
KR2fOXHiRNR82YyG3sdulc1Nudmcoqxd2fXiY899MfW7hyH/PCjHNnd7VpkH
3zM8ZduUzoPu+KF6g6nzz/ZYWuWdLE2eQwcl/xy7fVLkn1Oej0fC74Ym21+M
1PnnlNe3Zb7X1WR7j9GL/HPRMjZ9j8OyNWDz3gGSx57PYtl7F/a6OsW5NdW8
iPv3mGtI+yyc3k+TJ8X9Bx0v3c9qfdi603Z/13uUfKrmn4t+e2SaONc2fb7Q
+7rsdPPe4RXLLpv+uwr7DLAG+6xsxt7rvH//fsff3X1C7SgvP96r/LM9T7tt
Us8XxBwvY+8BVc0/y8aNGwv3X63/u3fvdmyHKs/nAwAAAHh1pKzzAAAAgOpC
+Wdx+wazenVu/SP93VWUf9b7OYvuJxcNc+fO7Zqu8n+hdxGGhry+L9vHaQdl
Or/55pvg58v2sTWVf9b2rLu+Hz582DFN9Q+rbz3vM6rxFFMzLqRqXkfj2bo5
RUNM/lm5xdB08/oJm2jvw5Z/tv3Hvve4FmUKVDvL/bv6fquw+4OvJqr632z/
u+17tts1VJ/Lx07bZr3tu7BtTSfNizsNX1/boLS7qp+Laa/9zj9rm9ddx3ae
Byn/LHXPg0Wazj/b/d19ViuPzRT5+swHOf+sc7b7+djtPQz550E4ttlnA6sM
vvY7LPlnu1/dunWr9DSaPIeSf673uZHwu6HJ9hcjdf5ZUl3flv3eDPnn5u5x
hNjr0K1bt0Z/NmPPZ2Xql9rr6gMHDnT8ve65NeW8iPv31PnnlPcf7DnJ/m62
zzCopq7PMOafpenzhZ2Wnoepa/ny5R3TrFqLXddTdv5srjnjvndBg/seIuVy
3b8V1aLvVf7ZtgH3e2xN69CQ91vXVSf/LNoWOsbanLmOHXo2PXuutOjeNwAA
AICRJXSfDQAAAL2Tl3+279TVvV63hqV7r12K7gHr/fN1+wYXL17cMU37rtBs
UB+v7verT0p1H23Nl6K+L933/uCDD7r6it1hxYoV3s+W7WNrKv9cti/ON4Su
2U+ePNnV32gHbZsqyuZ19M7h0Lwoo6d6Qbt3725dv369693eMfnnvEFt3mY9
Mk2092HLP9v+0TNnznSNo749dxzVfnK57VjTq0rv9LXHCOUX1H7Uzo8cOdK1
z6hf2LLbNbYvTmxNMF/dKdvn7vbxah7dv/nqQw9Ku6v6uZj22u/8s33XcZXB
ZhoGLf8sdc6DRZrOP9t9+cGDB1HzZXMAvjpug5x/VkbH/XxsjdJhyD8PwrFN
WcW68+B7V/mw5J/tfqVMZVlNnkPJP9f73Ej43dD0NVyRJvLPqa5vy35vhvxz
M+enPPY6NLTO89jzWZnfiDYHqdrHrrrn1pTzIu7fU+Wfm7j/YK/t7fMZ7rWS
rz50Zljzz5mmzhfa9jHboQy1t7Lty+fYsWMd08n7vabaD+64bh1wPQvh/m3f
vn2539ur/LPdp9ztF/ts4Zw5c6K+q27+2dK1rt3X7P2rMtcSAAAAAAAAAIBm
5OWf7bt+V65c2fHf+rurKP+sWpG2T0f3u8sMbl+z/tvmstRfphpMvppcVfom
NJ3PP//c+45nDTYDXuV7mso/23eIqm+xzLpW/Zgi6g9UDZpQZqJMv0imbF5n
0aJFXd+rfr7Lly93jVs3/6y+OOUBY/o7Urd3Gbb8s20X9piRUb+dO16WqVL7
cf9906ZNleY/o9pqMf1rGtS363tv0alTpzrGs3ntEPWTx/Rr7ty5M9gPqbbm
/s1X03ZQ2l3Vz8W0137nn23dre3bt5dex8+ePau1TL3IP2eqnAeLNJ1/tuc/
7bcx1Efufu7TTz/tGmeQ889it0+MYcg/D8qxzR6jys6DL4s/LPlnO596vrCs
Js+h5J/rfW4k/G5o+hquSBP5Z0lxfVvle4X8czPnpzz2XFz1WbQq1wuifK/7
OWV8XXXPrSnnxU47Vf65ifsP4tYa0PVjtq/aur55WdBhzz9nUp8vtM7cz2s7
12VzsBqq1JW2zzQU1ZF2s9xuO7EZZZ278vQi/6x90q6jGzdudIxz/Pjx9rM6
eUPsO0dS5599lCt3v8P3exEAAAAAAAAA0Ft5+WcJ1bn0ZVmK8s+2BrP6Huuw
/U7qiwnV4pWyfV+W7qXbdwz78nnu32NqLzaVf7Z9TeoLa4pqonz22Wdd7aRK
LZQyOQbVJLffuWvXruD4dfLPegemvk9tzNaA82WAUrd3Gab8c5msiPq8fNvc
PnMRW8M1ZMGCBd5tawftO6FjiX0uJHad2txHqD0oa+qO5x5L3XYX+vygtLuq
n4tZt/3OP9s+z7w6irEGOf/sij0PFmk6/2z39djaiDZHpRp01qDnn93sjIaY
Gr3DkH8elGObfR92infbDUv+WevHnZ7qzpbV5DnUZrLysqVC/rnTSPjd0PQ1
XJGm8s8prm+rfK+Qf27m/JRnz549Hd83bdq0StOx5zNfztfH/g62UpxbU82L
uH9PkX9u6v6D2Ous7LykfGXs8bnX+edU59qQVOcLrXc7jQsXLpSaho+9l+fW
Y46hXK+dr6Jnvm2b0r0orSf3N0fMMbYX+Wd7P1n7bN4zOHX1Iv88adKkju+o
knkHAAAA8OrQbxxb7wgAAAC9V5R/Vq0NX/+p/t0qyj9L1XfS+9i+y6KaIGX7
vnxUe8f2s9llsDWpi9h3caaaf/s+5CVLlhQvYE22v63KerY5hrx+GPt9M2bM
yJ121fyz2q1b1071Tt2/Kz/hq6+Tsr37lneQ88+2nzZ0TMi4mT1l4cTNxKmf
qQ71I7rzo3pSysWqjWpQH+Hy5cuj+vLsdlUWtYhte+oLDlE7tu3G5l31ru3Y
+etHu6v6uZj22u/8882bNzuml7XXOnqVf9b5qa6Y82CRpvPP9v3PMTXeVL/O
Hvt99RgHPf9s5y8mozoM+WcZhGObcmbuZ3zXw2X1Kv+cdz0Vw55HlYGqoqlz
qM2sFdV9t3nufuefi+o9SpPn45Hwu0GavobL00T+OeX1bZnvzTTZ3mPYdRqz
nE0sY+rzU55r1651Xa8U1eD1sb831q1bV/gZe29IuWWrynGqqXmRsseYovxz
U/cfxP7GyI417jwVXUs2nX9u6lxbpO75Qvdq7O8X3Quta+/evV37o61vnMfm
w7V9i+o2K2/rfkYZX/s8ud5PVKTp/LM97muo8t6gMprOP1+5cqVrewEAAABA
k895AgAAIE5R/lnXbLafIFSzIyb/bHNoM2fOrDzvZWpa2jo9VfPPopyZOy1b
H9LWXszLZdscrYaQsvOvejZ22levXo1f0Irs8pdl14n6DENsn7/6cPLY+mix
+Wdf/46tfbRs2bKucVK2dxmW/LPqD9kcQFGOxmYLLl68mLSvzN1eq1evrjUt
m7UoynCo1p5tU3n1aG2/nbKctu88r37fILS7qp+Laa/9zj+Lfc6lbvtsMv9s
6zWnuBdTdB4s0nT+Wcdsu88V1eb68MMPo9rfoOefP/jgg9LHfR2f3c8Mav55
EI5tWjd2/RblVIo0lTcscz0V4/Tp01371aFDh0pPp6lzqH23vc6dIfYaQ0Ov
88+3b9/uGC8mT97k+Xgk/G6Qpq/hynx3ivxzyuvbMt+babK9x7C52ZhnUppY
xtTnpzy6jrNtcvHixaWnY58d0PVv0fnM/v71XX9WOU41NS/ijpMi/9zU/Qff
cum60d7HKtrWTeefmzrXxqh7vtCzIHZ+Yt9lcfny5XbG3ree7HVs0XvpMl99
9VXX/MT+pnTvtWi92HYW8/1N5p+Vi7f3g0LPKKTUdP7Z/gZesWJF0ukDAAAA
GD66T0P+GQAAoP+K8s+ie8Yx95Bj8s++GiBFfUC6blSfqWX7P0J9l+p3seP6
+r4OHjzYfn+laqfkse87tPWWbJ+qMlU+O3fu7FoXef04ZfvuxNYpVN9MUT2q
e/futZ48edL178r3atnz6tnoc27Wq0rO3PZZ5L1DWO+adcddtGiRdzzlcW22
La/tueOMGzfOO44vX2ffuZyyvcug5J91rAi9d1fzb+s8qU0Utbv79+939Y+5
/+2rwxrLvpdaOYY6fNs11Pervnubd9FxJu/3sH3uZMqUKR114oveZzsI7a7q
52La6yDkn22dTLXxon7gn3/+ud3OUyxTmfyzzYfkvTM71XmwSNP5Z7HnPx1T
dH7zsTXTNOj98j6Dnn+2dck0rFmzJji+fbZCw6Dmnwfh2KbrHPtMgT6n64w8
ec/CNZU3LHM9FcvmwtSmlQkK0X5ks1pNnUNt+wzlK5Xztc92auh1/tlmGHWs
UM4tT9Pn41f9d4M0fQ2XJ3X+OfX1bez3upps7zHsOUzHgSJNLGPq81MR1Ue2
36c6tCG6RlVW3P09pfZtz2ezZs0Kns983+k7t1U5TjU1L+KOkyL/3NT9h4zN
V9tzW9Hvjabzz02ca3t1vlD7t5ncbBvmHddtjWf7W0rLZKep+cvbv+1vyewz
secXm3d2h4kTJ0ZNo4n8s+Zf7yHwzVfeb9BUquaf1TZ0jj5w4EBwHN9y3blz
J9WsAwAAABhiRX0DAAAAaF5M/tnmPEP3umPyz2LrDGpQf5zNhT179qxd/0QZ
OF9+0t6DV1+VW6dMfVXr16/33nu3/SXqm3D7U9TfpvePunQv3/a1+daZr59L
/Vjq11O/jeq82FpV7hBStu8uWwe2Tqm2k+bBun79enu5NY7NbCsT505D/cB2
e6nveOrUqV3btSz73lfbH6e+8qxvzJfzUp9ilsPQb45vvvmmK/9X1P/ojhPK
P4vtd1JOxErV3mVQ8s/ZoMyl2k1GxwZlde14Me8wlvfff9/7PXXfTWszF+r3
LFuv1vJtV/2bm6/Usxc216dBNTSL2OdOQvtDmfnrZbur+rmY9joI+WfxHVd0
bLT16lR/S/Os9RvKCDSZf1b21B3X1iTTPqx5TnkeLNKL/LPv/KftqXaZ3Y/S
erB9/xp0PREy6PlnsRlGDaoLnWWDtL2V+bb7RjYMav5ZBuHYdvjw4a550LWC
7/pYmZiszRw7dsw7vabyhmWup2JpfF+b0brOjis6Tpw7d66jHdq20sQ5VOvX
jqtjo+ZL86TrQV/ePxt6nX8Wm8OaP3/+y+yT/lfXua6mz8ev+u+GTNPXcCGp
889NXN8OUnuPsWXLlq726h6L1abts09NLWPK81MRXce4z0Zmg45xbuZS+4fq
k2Z/nzt3bsd0fOcz5VDd33e6drA1f7P92iflubXuvIg7Xor8c1P3HzJ6pjB0
noqZ/6bzz6nPtb08X4iOkb750vZSvlXzp22p/PbGjRu7jtsafPc6bbvJjkfK
Vu/fv7+9ftR2Pv300677mNmgdRErdH9Gg+49xqiTf9YxTOdDbW8dE3X80zrw
5cs1aL9NScdRfb8d7PMDmic7zt27d7umpcx46DiqY5Ct+6xBdesBAAAAAAAA
AIMhJv8suqetGiV5fZqx+Wf1J9h6zNmg++X6rO/vtnaHfd+x288Quu8e6juy
9WrdaamPVP0etiaRhu3bt3ctn+6n5323r6/F/e+Qsn1fGdsv7A6qh6m+fV9t
HrdfwNe/mm0v5afUr2DzEhqq9GOL2oCdltqE8kXZfIv62EJtKfTv7lA3/6w6
MXbd2f6mVO1dBi3/HDPoO4veX5zx1WDVEKrDWoavT9I9XriD2rv2e+U8Q1lZ
Xw1Qd7v69ofYbSa+99Br0HRj1me/213Vz8W010HJP/tqwLvzrnXsOxepD7zu
MpXJP/tqkmXHtqwNK9uW8jxYpBf5Z/HVVsuG0P6roW4mzdWP/PO1a9eCy+Y7
39thkPPPg3Bsk9BzbNlzDvYdBhpC7/1uMm8Yez1Vhm0HMfuV2p2rqXNo6HrV
N7hZFw39yD8vX77cu660fbJ91f2+XpyPX+XfDZmmr+FCUuefJfX17SC19xga
37f8qtOdtUM9r9qLZUx5fooR+t2UrdfQ+d7W7Pc9M1U0De1TodpGdc6tqedF
3HFT5J+buv/gCj2fpnxukabzz5LyXNvr84XYes5lBp07fMdu5Zt9z8zEDrGZ
ZVdon7BtNqRO/rnMEHofXh1axqrzY+/vffbZZ8E2GLoeUNvk/dYAAAAAAAAA
MDhi888xYvPPov6BmTNnlrpPrRpRVqhvyA6qe5TVKNNg+76UJ8zLc/iGvBom
ebVbs0H30tU/ZfNZIe44Zd/3qVoyMZkn917/+fPnX35e73XMq1ntG6pk4jJH
jhwpnH5WZ1A1XGLmR/3gtp+4bv5ZNA37XfZdp6na+6Dkn1VHNGYZ1F+pGlZl
2H7j2LxvEdWGL7MPuIOOk75+ddWmKtMXmNen6OPrD1Y7itXPdlf1czHtdVDy
z6J2leWrYgc9u1N3mcrkn8WXDbPbPfV5ME+v8s+i5ydCfdd2UG7BrTPoMwz5
Z1F9u5hjnuZv9+7dUceqQcg/S7+PbeKrhV406FjhO581mTcscz1VxtatW6OX
W+3Q11aaOIfGZppU09HWsu5H/lnroOj4tG/fvpfj9+p8/Cr/bsg0fQ3n00T+
OfX17SC191i+XLU72Px7k8uY6vwUS+f6vOe57KDzuGqdutQG3BrRRYPuqeSt
szrn1tTzIu74KfLP0sT9B5fOmb7pZe/xyNOL/HPKc22vzxcZzUeZfUeDstya
3xA9G2/fu1M06Pit6/AqfDWJfe8jC2k6/6znAU+cOFFp2YrUyT/b44COO6rT
Hft5rQt7HAUAAAAwcvH7AAAAYDCkzD+7ucWi/HNGNSeL6uSoDlCovov6GPLu
VWs+9P5iUb2c0D3vjHJx6rPI60fW/Prqd1rq78nrC1A+KFsH7t9C8u7Zx1B/
rPqW8vqdtWyqfxK6Xtf7LW2fsR30ntps2epQX2HedlD+L6P+q1DtIC3vypUr
X/bvu39LkX8Wu05C/dh127utN1s2T1qlzqPve5X70jYOvddX6zymPpWPtpU7
rarvtrXq5EM0KPMdoj7YvJrzWk+21lqM1atXd01L7xwuqx/trurnYtpr3fxz
0XvG3b7wmGOt9gdtq7z2pX1C79K173Ouukw2/2xrG1qqSeg+A2QHvVM6k/I8
GKL8hju9JvPPorqkvvdXZ4OWVdswpo5Xnfxz0bzb9ZJ33ImhbIDOyaHl1t+y
/J17DFO21Se2nZbdvmXzz5l+HdtcOrYXPV+gc4DymSFl25Tene6Or/WQp8z1
VBlqO3ntK1unRcuT+hyat7w6viu3Jcqiu39LlX8uu320HvOeo9HviUwvz8ev
8u8GV1PXcD4249fv/LMGe54ZpPZeRt7vblt/vulllLrnpzIeP37c3qfz9lXt
Z0XPd505c8b77gJ3f49Z9hTn1lTzIu7nYq4h33///Y7PhJ4RSn3/waXzk92e
OhbFiF3/dfLPkvpc28vzRUbzpucbiupZ65iV99yDpWUsuj7SeUf3Mas8g5Y5
fPhw13S1PLFs/jl0/S8x+eeszr3aVtVry1habzHnON8QOg7o2a+8tqBjUtn9
BAAAAMCrT7/9eT8MAAAAMj///HO7NsiGDRvag+4r6/3tsdeMqsOielHr169v
1+NTfc2bN2/WmiflhpTv0vxomupjU79hmetY3ZdX/4emoXlTn8KFCxdqzVcK
qsOjvjfNk961qXVftu9F62LXrl3tdaO+k6NHj+bWw6lCfVKqr6R5VF+O/lcZ
Il/9RP3GUL+Z3tutedI6P3To0EA+e1m3vQ8StRvtG6oX9Pnnn7eXow5lRN1+
JvXr1aVsgds/q/5I9cmpX3bnzp0vB2VgtD2UX7f9ueqDLnLv3r3WgQMH2tlv
TUftMUXt6lRepXY3qNQG1HeaHfP1/1MfF+tQbXq1e83bmjVr2u0+Lw+T4jw4
SHSeUI1SvXdB9QW1D8TU0ht2Og7peKR8WHYtUpSDGiaDcGxT29L1ndZtdh16
7ty5gTkHlLmeKkvLrmcNdQ2gZVdGSJnMslKeQ/U5neez7aHl1fNDg3rs0nzp
WkXXIZpf7ac6Voeemem1V/F3gzXo13A+vbq+Ta2p9q42qXaVTVP7v9pDP/X6
/KT7H/oO/S5TblvtoexvYeWpNc9ah3o2TL/Fyr7PJ5VBmhefYbr/0ISmzrW9
OF9Y2i91ntO+o/OH/ld1metcL2f3SbReVKdebXjbtm19Py4hn47byvfrd5P2
adVUH/TrAQAAAAAAAAAAAAwG9TW5uQz9/xT5ANVXc+v2qBZuEdUItvUA8+r0
AQAAAL3C9S0AAAAAAAAAAAAAAMBgWLZsWUceQ/9dl33nbpn3ar/77rsdn1Xt
XAAAAKCfuL4FAAAAAAAA+kvvhgIAAAAAQPROWzeLoeHu3bu1p3v+/PmOaW7e
vDnqc8qVuLWoR48eXXteAAAAgLq4vgUAAAAAAAD6L8V7jAEAAAAAw0fv31YG
Q7755pvWG2+80ZHjmD9/fpLvsfXxxowZ07p//37hZyZNmtTxuTlz5iSZHwAA
AKAOrm8BAAAAAACA/qL+MwAAAACMXJMnT+6q95wNykI/efIk2Xe9/fbbHdNX
rbtPPvmk9fDhw47xVG96/fr1rddff70rU6K8NgAAADAIuL4FAAAAAAAA+ofa
zwAAAAAwco0aNcqbfVY249KlS0m/68KFC8Hv07/bPIidn9u3byedHwAAAKAO
rm8BAAAAAAAAAAAAAAB668qVK94sxrRp07pq1qWijIjq3IVyIHZ47bXXWqtW
rWpsfgAAAIA6uL4FAAAAAAAA+kP1n6kBDQAAAAAjk2o879y5s7Vnz57WmTNn
Ws+ePevJ9546dao1Z86c9jvD33jjjZd18/T/J0+e3Jo3b15ry5YtradPn/Zk
fgAAAIA6uL4FAAAAAAAAeo/8MwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbVixcv
+j0LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr5znz5/3exYA
AAAAAAAAAAAAAAAAAAAAoNCLFy/aAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAANKh/jMAAAAAAAAAAAAAAAAAAAAAAAAAAM0YPXp06+9//3t7
eP311/s9Oz333XfftZ4+fdrv2cAQ2rx588t9R8Mnn3xSaTo7d+7smM6+ffsS
z+lgOnXqVMdyL1y4sN+zBAAAAAAAAAAAAAAAAAAAhsBrr732Mn84atSofs9O
z5w/f741ZsyYl8u+atWqfs8Shozyzm5+9+OPP640nY8++qhjOv/4xz8Sz+lg
+uc//9mx3PPmzev3LCX3ww8/tM6ePdt+zuLZs2f9np2+ePToUevcuXOtq1ev
th4/ftzv2Wk9f/68dfv27fZ2uXbtGs+/AAAAAAAAAAAAYMR78eJFv2cBAAAA
KG2k5p/feeedjuylhnv37vV7tjBEyD/X8yrmn5WlXbNmTWvcuHHt46k9xowd
O7a1YsWKdi66irVr17YmTJjwcpg2bVqpz//000/tY587DTtMnDixNX369Nai
RYvabVrbqSy14bfffrvj/OK+Z0Db+uLFi6WnW9X333/f3s/efPPNrvnR8MYb
b7T/3otzwPHjxzvWt763rK+++qpjGlWPPda3337b+vLLL1vr1q1rrV69urV3
7952Rpz7XQAAAAAAAAAAAK8+1RECAAAAhslIzT+/9dZbXRm406dP93u2METI
P3dSTnbr1q3tQRnPmPFfpfzznj172tleX77WDjruKltahjKovjzxpUuXoqdx
5cqVqPmzg3LD2q5FtZIvXLjgPbaGBrX9Ju+jPHnypLV8+fLo+dH6jWm7dRw+
fLjrO8vmi999992OaWjb1KG2G8qGZ9cGmzdvrvUdAAAAAAAAAAAAAAAAAJDS
SM0/f/755135PqAM8s+d3Eym/n+RVyn/bDOtscOMGTNaDx8+jPqOY8eOeaex
ZMmS6Pmsmn/OhqlTpwanffv2bW8+u2hQreyrV69GL0OsH3/8sVQW2x1WrVqV
fH4yynvb2uAnT56M/vyzZ8+65vfBgweV52fp0qXR60U1vWPbKwAAAAAAAAAA
AAAAAAA0aaTmn0WZswULFrRrZz569Kjfs4MhQ/65k7KRIzH//N1333XlWTXM
nj27tWXLlvb21DZ+5513vPng2Nq9mp4vk/rGG29Ez6vNP+uzyvpmw8qVK1vz
589v55zHjBnj/T4ti6VM7vjx47vGnTx5cns/Ua3r9evXt6ZNm9b+Tl8OPCXV
qR47dqx3/jWfWsYvvviitXbt2nZb9W2X77//Puk8uaZPn145w3706NGuTHIV
OuepTdrlVlvW80ChWuZqhwAAAAAAAAAAAHi16H2l6vMDAAAAhslIzj8DdZB/
7uTmZUdS/nnhwoUdy6HcaCg7++TJk3b2Nqaesks1g91jta1rfO7cuajp2Pyz
8q95NN0JEyZ0ZWCV+XYdOHCgaxzVqw7ZvHlzRwZbtZpTWrNmTdf8qH3euHHD
O76ywNoW2bjKRjdJeXA7b7Hc9qNhw4YNleZh0qRJXblnbRf3vpa2izLrdl1+
/fXXlb4TAAAAAAAAAAAAg0sZaAAAAGCYkH8GqiH/3MmtFzuS8s82i3z69OnC
zygbrJrHykPHOHz4cMd3nDp1quO/Fy1aFDWdsvln+fnnn7tqKX/55Zcd4yxd
urTj76tXry6crrLIytZevXo1at5j3bt3ryuvq/ao5SiifTpm3uvSdq9ab9rW
z759+3aleTh+/HhHZl9tI8TWq9Z2AwAAAAAAAAAAwKtD2WfyzwAAAINNeSvV
Xdy0aVM7T/bw4cPK01Lm6MiRI61t27a1Pvvss3Y9xDrTs/P51Vdftedz3759
rVu3btWa3p07d9p5NdW0vHz5csff3Mxi2fyzakOq7qdqRp48eTI6y1fk7Nmz
rR07drTX68GDB3PzXU+fPm3nKLdu3dr+zLffftuT63LVY7148WJ7ne7cuTNY
VzSFmzdvtjOxWsbz58+3v7uMJttqCtpe169ff9nmNa8PHjyoPD3tL7t27Wpv
m0uXLtVqD6qFqrb96aeftufLXW9uDduU+ec9e/Z0/F15zt27d7e3X15Gsd9s
3rSIzT+rrq0r9XEwZbvIaBo2x9qEmTNndmRVxc1dZ/9WpEr+WbZs2ZKbt7Y1
omMy4E2ZPXt2x7y8+eabjX6fctU6puoYcejQoehjl/YRdz6VvS6irLj7mXHj
xtWad2WgJ0+e3Lp7927ueDqH9HKdAgAAAAAAAAAAoPfK5hAAAACQnnJgyvFq
UDZXlPEZP358V05Ng2opbty4MWrajx8/bq1du7b9rnrftLLpFWW/9PdsHjVk
ueFvvvmm9fbbb3unq+VSXjCWcsHKE7r5ZndQ7dH79+931JKMyT8r76f6mLYG
ZTZo3WTrvezyK+sYWreqN6n179qwYUNH/Wp3UDa1zDzEZM9E+Xllv3zfqem8
9957letxupTPnDhxYnuavu9S9lG53JBUbfXEiRMd62nx4sW54+t73fHzavqq
jWoeQ8uotrtgwYKorLbGmTVrVrA9aL8qU2dW+1reMUPtQFnaJvLP+/fvb+8T
qqnr28+0vqZMmdJ+rsFSXWB3/SuXGkttpczntP20jvQ533p350OD2rPL5p+z
TK3aZKrjYOp2Yfnyz48ePao8PR9l8N19RFloWblyZenMcdX885kzZzo+Z7el
3V46lveDjpt2eyg73wSdf0LnQbXThQsXtveRkO3bt3d8ZtKkSYXfqeOl+5lV
q1alXKRcdlkBAAAAAAAAAAAAAAAApGWzQXPnzg3mP91hzpw57ZyZjzJM69ev
D2bofINq9YbY3N+1a9fadXljpqs6sEVUSzeU0XUHuzxF+WflLUO5RDssWbIk
+Hygb/mVqS6aZpal1XZSfrtofOXPYrdBXk5XVOt6+vTp0dtfNWar0DpTu439
HpuxS91Wjx492jHuBx98kDv/qoXqjq/2EhovL5tt26lqe4fouYFQzt8OyiwX
WbduXfR8uf+dKv+c93yB/X7VSncpj2vnK6ZmtLKz7mfU1ouorcW2sWx+XXYf
/PDDD9u1nmOmFXMcTN0uQsaOHdsxreXLl1eelo+eJ3Gnn9UHt1lfPStQpGr+
Wc9BuJ+zWV09a+P+Xfn5fjwfvmLFio750LZJTc+32HrXoUHHONXs9/npp5+6
xi96h4I9/9bJ7pdllzkv2w0AAAAAAAAAAAAAAACgvDJ5PDuEMn+qeVtleqF3
ytvcX0xWORtGjx6du/yXL1+uvPx5+efvvvvOW6dX/xbKsSoDHbP8sTlYDaor
qtqjsePfvHkzah7y8s/37t0rlSfO8n9VKFdYdpu59ZFTt9Wm8s++LLkyv6pr
7VvXyrv7qLarb3mUew1liA8fPhycfz0HUXX/SZV/LjvYfLNyxO7fi2p2i3L0
7mcOHjxY+JnU+ecyQ9FxMHW7yKN6zHZaykCnyofaZz3cOvhaD+6yFamaf1at
Y/dzyju79LyHXQea9g8//FBuYWuyGd28ZzuqCJ0Hi4Zjx455p2eP93l1s3Wc
t8fLXnLP073+bgAAAAAAAAAAADQrVCsQAAAAvRXKH82ePbudb1MmTXnWvXv3
emuDqhaxpcyTO87UqVNbX375ZfvfRXk0/bed1qJFi7zzmJf7Uy5U01LWSfMy
a9asrnE07yG+bLCW/cyZM+3asPfv329nrHyZ47z8s7JsNn+omqCunTt3dk3T
l3/LW37V6/7666/btTFV9zQvd6z5Vdbz4sWL7W36ySefeKcXsw3y8s++rO57
773Xnobak+qcqn7u5MmT23/TPKtWdllbtmzp+h5tJ62HLOOsNqF2Fcpspm6r
TeSfta3s9x86dKhrOaZNm/ayrT169Mj7XXYfVv4xW1bR9rGZcD1v4ONrl9qW
qg2sedZ2VltbunSptz2mzj9ruT/99NN2hl/77rlz57rq7Gqw2fBbt251/D0m
F+vmaLVfxdTu1TwdOXKkPShn6n6ncuzZ37JB+7WrqeNg6nZRRPPnWwZlRDdv
3lwrB63PunlbHWNctj2cPHkyd3pV8s++5z90rLXz6cuVZ8doTaMX7PfruJzS
lClTur5D9fpv3LjR/rueI7H7QtYWfO3AvvdB5+oQe9wOPV/UBHteiakPDwAA
AAAAAAAAgOGh/mH1/wIAAKC/fPnFUC1TZVRtZiuUP1I9T2Xozp49G/xuZTht
9ssnlPtTzVIfm7mytTczyjXbaW7cuNE7rp7fW7ZsWdT8Kn9rc4LKGPqcOnWq
cF5Dy6+srXXp0qVgNtSXVbcZaOWHfWLzz8oX2+9evXq1d1z5/PPP29MuSzlx
W1f03XffDa5nZUm3bdvm/VvKttpE/tm2U+V/Q5TnvHr1qvdvtmaxajeHaJsV
ZWdtHXa1ndu3b3unpyyyfYYgZf5Z+UJf5ltsLV4NbrZXsix+3r6VuXDhQvR6
DPn222+72m6Rpo6DqdtFDN82cc9ByqqG2lIeW8daeWqXjgMx6yRTNv+s4+/4
8eO7lsmXZ7bHfjsop593TKrLV4/8wYMHyaavtmGnv3//fu+4ek7CZsZXrFjR
NZ59FiTvWQX7HI6eaeoV+6xA6LoCAAAAAAAAAAAAAAAAQHU2d6Z6jHlstlfD
kydPKn+/zVNndXtdNven+VSeMkT57Zhsof1uWxfWx81ohTKwdrrKduVxc4q+
PJdv+ZWzC1EtWXf8cePGBeuJ2vxtbAY9lH+2y66axE1Q7t7m4Jp+x0xMW20i
/2wz6lVyw7YeqfLwqm0don3abeu2fqmvdvn169dz5yHFcojNP+flwTPaB9zP
qCa1y+Zm8+q1qj6vO66t0xwjRf45xXEwdbsow9eG7KC68cqbx8pqoGeDPe7p
GWz3uQktSx6bf1aGXxnebFC7Uc1xtadJkyZ5lyHv+Q9tP997FdxBx3M9A5Ga
nmey35WSXS49Z5Jnz549XfPjO2/Z89v58+e7xtF2dttpTE33VHzPIH3//fc9
+34AAAAAAAAAAAAAAABgpLDZriLKFdlck7J8Vdkajb48X2z2NqPawO74qsdp
/fjjj10ZpRs3bhTOb1H+2danjMkH2hygzfGWXX5lbt3xVWM5j63L68s/xsyD
aoeWzcRWZbPIX3zxRSPf44ppq03kn0+fPt0xjva/suvVtrGtW7cWfsbNmNt9
yLaxWbNmFU6vqfzzP/7xj8LPfPbZZ7lZYN9xLVRL3N1fquYqU+SfUxwHU7eL
snTM1XMneflfDVOnTm3ndfPYesbKyfrY7ztx4kRwmjb/XHbQMaPouYyffvqp
nQ0umpYy/DoWpGJzujqmpmLbngadc4vYc5Hq7ls6brjj+OpEqw5+mX0lJVv/
W++NAAAAAAAAAAAAwKvl+fPn/Z4FAAAAtMrnn8Xmx0LvtPdRvdHt27e3FixY
0HrnnXe63nm/d+/ers+Uzf0py1iU61LNVnecyZMnR81/Uf75yJEjpXO5p06d
6viMMneussuvPJg7flH+ecKECR3jaxtZMfNw7NixjnG0fZugPKH7PdoO2uap
VWmrTeSfbc3abFiyZElhJjSj+rTuZ2Pqka5aterl+LZOrubTnd7Zs2cLp9fP
/LOW1/3Mm2++2TWOrevs23dtHlZto4pe5J9jjoOp20VVN2/ebM2fPz83/1tU
71rtwB1/zZo13vFsneG8fbRq/lnretOmTaXWgerJr1u3rrAetI5JKWid2+No
KvY8GFsnfO3atR2f039bdl9WLtzSsdEd5/jx47WXKYY9xmlb5tVTBwAAAAAA
AAAAwPBqIqMAAACActysTmz+efHixR2fU+YnRNd8yon68qO+4csvv+yaRtnc
n10uX+7P5pRic4xF+ef169d3fbfqQeYNtpaxzZOXXX5bH7Mo/6zspTt+1fyz
/V5l0Jpw8eLFju+pW4M2k6KtNpF/FpsndIdJkya15zvvGVMtk11nRYP9nidP
nrycnl0/MRm/fuaftW7cz/hyuzZXqecCir47Jvft04v8sxQdB1O3i7oePXrU
2rBhQzADrGPu/fv3vZ997733uo6jWs920DazbSF0b8KXf9Y8ZINvHjdv3lxr
HWhelNFW/erQPq9nTVx670DMtnPzxFrXdrr6txSU43an66vR7KPjmPs5PWvl
o+cX3PFsmxg7dmzH9rLbt8r6KmLr9GvYsWNH9OcBAAAAAAAAAAAwPKj/DAAA
MBjcrE5s/tlmm0I517wcW5lMaRO5P03DHSe2VmdR/nnWrFmlltc32DznsOSf
7bJv3bo193ur2rZtW1RGroxUbbWp/LMcOHAgdx71t1Bt2NGjR9dul6pPK/pf
999jawD3M/8sNq/qy7yqDrw7zu3btzv+7uYufceVWIOSf07ZLlLS/QIdP3zP
IcyePbtrfOXv6yxDqD6wzT/7atrbWujKYaei+XKzvO62dO+p2Ox+aLDrzv79
/PnzSebbngt0zI5x6dKljs/5ajuLW4Ncg1ur/e7dux1/850fqq6vENXStm01
tuY1AAAAAAAAAAAAhg+1nwEAAAaDm9eJzT9/+OGHHZ9bvXp1x9+fPn3aVVfU
zTMtXbq0tXv37tb169fb/9/9e6/yz8o1uePEZnWL8s/KPNXNEx46dKjW8vcr
/2yXvanal1u2bKmUUfNJ3VabzD+Lcp7K/uXloFUP+tmzZx2fK5vt9g1Z3vKH
H37o+HdNO0Y/88/6/WmXx+err77qGEfrOqP9wv2bjoNVDUr+OWW7aILq+mo/
LNp22hfrLEPoGBKTfz537lzX9EJ56iq0fufOndv1HSdPnnw5zp07d6KWc86c
OR3T1jm/6JhWhT0X7Ny5M+pzdn0r++1z9erVjvGmTp368m86l7t/27dvX9fn
q64vnwcPHnS9w0HPSaSsiw4AAAAAAAAAAAAAAACgm5vZic0/T5s2reNzeme9
a9GiRV05ImX1Ll++3DWtfuWfbYZS/x2jKP9s61KqHq+yVmUGm10dlvyzXacr
VqzI/d6q7LwUZYbzpG6rTeefXUeOHOnadtmg+quuiRMndm3jMm1SNVVd9vti
9DP/rPqsNp/oo5y0mwl2j4l2v1JWs6pByT+nbhdNUA1u295u3LjRMU5oP4gd
dFz3PaMdk38WW+9Y7SblM9/KQLu1xzVs3ry5YxxlrnVMyBtu3brV8Rnle91p
qv55CvY86D5HkEc17t3Pvf/++8Fx3ey2zsXZ+lb9bXcaesbFp8r6sjTtt956
q6stqb40AAAAAAAAAAAAXl3qm6IGNAAAQP/ZzFaM8ePHd3xOtRgzqk9rs2W7
du0KTqtf+Wflkt1xYmsIF+WfVWvSnW5srjrPsOSf9+zZ0zGOcvJNePjwYcf3
xNYftppoqzb/rDqoeerknzPa/1Tz2S7LvXv3Xo4zf/78jr9pe9Zh65263xXS
z/zz4cOHOz7j1ou1li1b1jHupUuX2v8+YcKEl/8Wqksba1Dyz6nbRVPsOUc5
2Yzdh2KPBza3qryrFZt/Vg7c7n9q7yktWbKkY/oLFy6sPU1f3ewLFy7Unq6t
ox57ft2wYUPH51auXBkc1x6PT5w40c6J67xcZr+qSt9ls9aDvA8BAAAAAAAA
AAAgLfLPAAAA/efmdmLyzzYPpkE5oIzN6M2YMSN3ev3KP9tpKjMXc31alH+2
dWaV26trWPLP165d62obP/74Y7mFjeRuBw3Hjh0rPY0m2uq5c+c6xlF93TyP
Hj3qGL9qLWvtgzYD7eaCVSvW/ZuylHW4WWANthatTz/zz6oj635GGecQ1W61
68pmbFevXl1p3jM2/xzK1bqaOA6mbhcxfvjhh9LHBZtVPnPmzMu/7dy5s+Nv
RTXXM+vWrev4nK2ZLrH5Z7E1j3V+ePDggXfcJ0+eeI+zeezxZ82aNaU+76P6
xfZYqkxvXaqb7E5T36FlLmK3s54nCjl//nzHuMqDq6az+296zqkJulaw78EI
nRMAAAAAAAAAAAAAAAAANMPN7sTkn1XP1v3MuHHjOv6+adOmjr8X1cBcsGBB
YX6oidyf6tWWzS7Zz/jyz+LWn9TwxRdfFM5vnmHJPysTZtfp4sWLyy1sJJv1
te0wRhNtVXlHd5yiWrTKXLrjV80/i82BurVTVdPVbhu3bntZypgW7WOWrV/b
q/zz9evXu5Zd9aDzTJ48+eW4o0ePbn+H+3nlO+u4fft2x/SU+yzSxHEwdbso
cv/+/fb6VB5WtdJj2H1Kg/vMjTLJ7t98dZx9bty40XU8d6crZfLPyhJrf3fH
D2Wxs2NumX3A1sD++uuvoz+bZ/ny5V3rN+Z5Brl8+XLrzTff9O6DNlddtKw2
u6xB+0ked32rfdtjtN4VkJrOc/Y6qMw6AwAAAAAAAAAAAAAAAJCGzfBs3bo1
OO6OHTu6xrcZtl27dnX8fdGiRd5pKWf24Ycfdk2vV/lnsTVhlcsL5RqV87LZ
tlD+2dZU1XiXLl3KnV/Vl1U20GdY8s9ia6pq2Lt3b/C7tV5Ud1l1kMs4ffp0
1/eoPYVo3c6ZM6ddnznTRFsVO56vNrUydPPnz+8a15d/Vj1iPZugvHYe1YN1
p2UzibZeqfKUofq0GWX+fXVbfXXg8+rR2tq1ZbOfLpt/Vo3t0H6r5bO50ZiM
+VdffdXxGWU8s/8fk1UuYp8V0DHi8ePHuZ9p6jiYsl3kUT7Y1vfV8xHPnj0L
fkb7nrav+xn3WYeffvqpaz3aDHMe7Vfu5w8ePNjx9zL5Z9m9e3dXO7948WLH
ODrOuH/Xsxxan3n0LIOdbtn1H6Jjrz23ZcfDvHci6Ljujq/26fKdB3Xc9tH+
q/ZZtn3bvLM9LjRh5syZXd+l8x4AAAAAAAAAAAAAAACA3vLlhpRRO3ny5Msc
mWow+vKfqpFq+XKRyolmWS1N85tvvunKweVlSpvK/anOqf1+1axUbVhl9UTZ
U1sn2M1zhfiWb+3atS+nm1F9SuU5Na1QrnKY8s/avjZTqEH5V7eW582bN1sr
Vqx4+fe5c+fmzqPP7NmzvW3y22+/fTmOcs+qv53VIh07duzLdt1EWxU7vr5b
GWhlCZVz1PZQBtc3TZvN1Ty409P/V4bQ5hJjaqf+8MMPXbXJNW/K+lqqmZzV
pg7lym1uVoPq3WZZZLV1zZetz5sNqfLPbgYxy5Fm320zlRrOnDlT+B1av75M
qIaiOuGx7PSVh8+2q/5X7dPV1HEwdbsIsfPvzteqVavay6vtpmXXMUj7rZ5J
seO7tbs1jvs31eUtw+by9SyGq2z+Wez+7+7TOrbYdZ2dS7T9dd7NngXRdjl0
6JD3WFF23RfR9/q2jZZF20a1pjXvqhe+cePGrnOG79jlWxcatm/f3n7eR7S9
lTm3taL138q2Fwm1KQ1Fz4tU4TvnaF3o+K79Rfl3nRdCQ9268QAAAAAAAAAA
ABgMeXWEAAAA0Duh7FDMoJrIlq7zfJnDLOdWNM1e5p9FebfQvNhMli+zFqK6
xqHPaX6UFfPlK/fv3197+fuZfxZfFtddp6H16mtPeVSjNjQtbZtQfjXLxTXR
VmXPnj3R+5Dm0c142gxh3rRUp/e9997rqE2cDcrp+WzZsiU4PU1H0/St07t3
73ZN69q1a5X3HQ2p888xg2q3xlq2bJl3GkW1emMtX77cu95U3zhbf24GtMnj
YMp2kUfZ/Zh9KzQor+zS8w7u323N8yLKwtvjhluPukr++ezZs7nHijt37rRr
PlddB8oUN3E/xdZzLjPoGOY7b+SdB33Z9irbMXSsUX48pdDxoMywc+fOpPME
AAAAAAAAAAAAAAAAjGRVMjzKrynXFKKMW8x0VIvXZmV7nX9W/ck5c+ZEza+y
b6rR6Wbl8qi+tLKMZdat6pnWXf5+559F9UTz8m12UKbVzR3GUo3jiRMnRn+P
aha7+dXUbVWUTYzZ7qqTrSykW0fZV0NV3xPKcvsG5VUfP34cXGe+eqt5g777
/Pnz3mlpO8dMS/uKaqO6/5Yi/6zp+upQ+wZlZ8vkRlX73U5DbS0V1Sb31QJ2
h3379r0cv8njoKRsF3nUNlUnPPZ7smHhwoUd20+18+04ee0+xO5bbt3rKvln
sc/V6DuyuvKZ0HsF8oYpU6a0jxlNUZ3nMsftbJ/ImyddK/jeCeAbsvcvlOGr
yay8fmp61qTs9rLDrl27ks8XAAAAAAAAAAAA+iN77zQAAAD6x83mKLOpep55
eUL9Lea99MpRhTJPyvytXLny5fWg+zdfptTWkCyb+1MetIhyx6Hsn/79k08+
aY+nLLGbaSuivN7q1atzc4VaH8pmKg/pU3b5bf5ZNYTz2Kyer75tlW2gLKLG
y8t4qg7q9evXC6dVRFnCvIyw2uKR/6+9+3mJKgrDAPyft05XbUR3QhBuoqSk
IJhykSkRbQYxLHQjGLRpEdji/oj3gqKTOndynDPm88DB0OnM57lnjijv/ebz
50v/7zT36qlkHdNr+LrXUfKbsbq6evb5y/LPkbV88uTJtdnE1Jpr3ydHnufO
db/u2iQv+/r167Hzpc/qdf1s87XTTP35a/TmzZuxdV7mfP75dL2SWb1qbfL5
y/qq97G4uHhhrnH3Ekwq63JdVv7ly5dnj53FOTjNfTFOcq6j/ZsvG8kcp9f4
qI8fP/71uH8xev9LXo+nRvPPS0tLveZMHnj0+0iP7VG5R2bcemfk/ourzq9p
yz1Bz549G5tZzr599+5d7zkfP3587feZdfj169fE9WYfjc6V+qdtZWVl7F4d
N+SfAQAAAAAA/g/JgdzGe7YCADCZq/JxyVum322yuy9evGj39/cnvn8tj9/b
2+tyX8+fP+/m+fTp041zc7cpPV/fv3/frq+vdyMZu2nVm1xxeqxmHTJ3/n2b
vTznyffv37t1TT731atX7devX29lH2SNs8eyxhnZw33y+re1V3N9s4cyXzJ5
m5ubXc/qmzg5Oeky25kz65kc9uHhYZcx/BfHx8fdHNmTyZEPh8OzbPYk8vxZ
w2R2M1fyzdPItk/ix48f7WAw6J4/uf9ks2/i4cOHF87IPntpUvm9ODnbt2/f
dnsvtX/48OHK+yFmZVr7Ypzfv3932d5ky/Pz5nRPJ+89zz8rpil7IK+dnA/Z
AxlZj/Snz+u9lOTOcy1yTXJ+5WP6uN/kdZ19lRzw2tpad0bkOvvbEAAAAAAA
AAAAMKnz2b70ewSg7TL658/HR48elS4JAAAAAAAAgDmgxw8AQHnyzwB/W1hY
uHA+ppc4AAAAAAAAAAAAUJ78M8BF29vbzkYAAAAAAAAAAACYUzJ+wH338+fP
7mNVVe1gMLhwLmZsbW0VrhAAAAAAAACAedA0TekSAABo5Z+B+y2/mz548OCv
zPPpWF5eLl0iAAAAAAAAAHOkruvSJQAA3Hvyz8B99u3btyuzzwsLC+3JyUnp
EgEAAAAAAAAAAIBz5J+B+2xjY+PS7PPTp0+9bxEAAAAAAAAAAADMoS9fvrS7
u7vdODg4KF0OwEzlfYmGw2E7GAzanZ2d9ujoqHRJAAAAAAAAAMyp9NGqqqp0
GQAAAAAAAAAAAAAAvXgvYQAAAAAAAAAAAADgLkj2Wf4ZAAAAAAAAAAAAALgr
6rouXQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzVlVV6RIA
AAAAAAAAAAAAAHqp67ptmqZ0GQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAMxYXdelSwAAAAAAAAAAAAAA6K1pmtIlAAAAAAAAAAAAAACMpf8z
AAAAAAAAAAAAAHBX6P0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAMF3p/6wHNAAA
AAAAAAAAAABwV8g/AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAwr5qmKV0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAwH+nruvS
JQAAAAAAAAAAAAAAjNU0TTcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmB79nwEA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO6fpmlKlwAAAAAAAAAA
AAAA0Ftd16VLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYMaa
pmmrqipdBgAAAAAAAAAAAABAL8lAAwAAAAAAAAAAAADMu2Sf5Z8BAAAAAAAA
AAAAgLuiruvSJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBj
VVWVLgEAAAAAAAAAAAAAoJe6rtumaUqXAQAAAAAAAAAAAADQyx9dzqXN
    "], {{0, 700.}, {2880., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
b7PvdbBxmOAwx6He4VdHiiPbUeK43vG04xsnZ6d0p6+dmpyeOps585xLneud
77jQXUJdprvUulx1JbqyXfNdN7teckPdfN0kbjVuF91Rdz93qftm985RhFEB
o2Sjakfd8KB5cDxKPOo97o9mjo4bXTa6afTzMQ5jMsesGnN6zCdPX88Czx2e
t8cajx0/tmxsy9g/vdy8BF41Xle96d5R3vO9m71f+Lj7iHy2+Nz0ZfhO8P3a
t833o5+/n8Kvwa/b38E/23+T/w22CTuRvYx9JoAQEB4wP+BIwLtAv8DiwAOB
fwR5BOUH7Ql6Os55nGjcjnEPg+2C+cHbgtUhrJDskG9D1KG2ofzQ2tAHYfZh
wrCdYU84rpw8zl7O83DPcEX4ofA33EDuXG5rBBYRHVER0RFpHJkauTHyXpRd
lDiqPqo32jd6dnRrDCEmNmZVzA2eFU/Aq+P1jvcfP3d8eywtNjl2Y+yDOLc4
RVzLBHTC+AlrJtyJd4yXxTclgARewpqEu4nOidMTf5pInJg4sWbi46SxSXOS
Ticzkqcl70l+nRKesiLldqpLqiq1Lc0gLSutLu1NekT66nT1pDGT5k46n2GR
Ic1oziRlpmXuzOybHDl53eSuLN+s8qzrU5ynzJxydqrF1IKpR6cZTONPO5hN
yE7P3pP9gZ/Ar+X35fByNuX0CriC9YJnwjDhWmG3KFi0WvQkNzh3de5TcbB4
jbhbEiqpkvRIudKN0hd5MXlb897kJ+Tvyh8oSC/YV0guzC48LDOW5cvai6yL
ZhZ1yt3l5XL19MDp66b3KmIVO5WIcoqyudgEHt4vqFxUX6nul4SU1JS8nZE2
4+BMo5mymRdmuc1aOutJaVTpd7Px2YLZbXNs5yycc38uZ+62eci8nHlt8+3n
L57ftSB6we6F1IX5C38p8yxbXfZqUfqilsVWixcsfvhV9Ff15frlivIbXwd9
vXUJvkS6pGOp99INSz9VCCvOVXpWVlV+WCZYdu6bsd9UfzOwPHd5xwq/FVtW
ElfKVl5fFbpq92qj1aWrH66ZsKZxLWttxdpX66atO1vlU7V1PXW9ar26Oq66
eYPDhpUbPmyUbLxWE16zb5PlpqWb3mwWbr68JWxLw1arrZVb338r/fbmtuht
jbVOtVXbidtLtj/ekbbj9Hfs7+p2Wuys3Plxl2yXenfS7vY6/7q6PZZ7VtSj
9ar67r1Zey99H/F9c4NHw7Z9zH2V+8F+1f7ffsj+4fqB2ANtB9kHG350/HHT
IcahikakcVZjb5OkSd2c0dx5ePzhtpaglkM/jf5p1xHbIzVHTY+uOEY9tvjY
wPHS432t8taeE+ITD9umtd0+Oenk1faJ7R2nYk+d+Tnq55OnOaePnwk+c+Rs
4NnD59jnms77nW+84Hvh0C++vxzq8OtovOh/sflSwKWWznGdxy6HXj5xJeLK
z1d5V89fi7/WeT31+s0bWTfUN4U3n94quPXi15Jf+28vuEO4U3HX8G7VPct7
tf9w/cc+tZ/66P2I+xceJD+4/VDw8Nkj5aMPXYsf0x9XPbF5UvfU6+mR7qju
S79N/q3rmfxZf0/570a/b3ru8vzHP8L+uNA7qbfrheLFwJ/LXpq/3PXK51Vb
X2LfvdeFr/vfVLw1f7v7Hfvd6ffp75/0z/hA+lD90fVjy6fYT3cGCgcG5HwF
f/AogMGK5uYC8OcuAOgZADAuwfPDZO2db7Ag2nvqIAL/CWvvhYPFD4AG2GmO
69xWAPbD6rQAcsOqOaqnhAHU23u46ooy19tLy0WDNx7C24GBl1YAkFoA+KgY
GOjfPDDwEd5RsVsAtE7X3jU1hQjvBt8Ga9A1M+EC8EXR3kM/i/HLHmg88AFf
9v8EipGWcA==
      "], "RGB", "XYZ"], Interleaving -> True, MetaInformation -> 
    Association["XMP" -> Association[]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2880., 700.},
  PlotRange->{{0, 2880.}, {0, 700.}}]], "Text",
 CellChangeTimes->{3.798746458861261*^9, 3.798746545786663*^9},
 CellLabel->"In[81]:=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzs3Qmw79tVF/jDme5830ve4wVQkW7bAavLRkWtsqq7um2Hruq2um0pwBEi
gqBiEkCBBAiOOKIQBkcUUASNGoWoQUhEJWoUUcQoGEANEmcMRgFBT+/P3vu7
f+v/v+ece8+5971E7X/Vueee/++3pzWvtdde+2e/9JM+9qM//qWf9HEf9dIP
+Fmf8NKXf+zHfdQnfsDPfNkntK+O3uvg4NaPOzg4/KkfcOD/ZwcH+edKn5/k
n/c6+0//6T+9l/9dsfkDrQ+Ozv7zf/7PeXy1zj74PaKLn+Cf99J+W1Jb32PN
50ptfsq7ddgrtZno32D1vI+4AecJ0Mi14fsAjVyp9X9rkL5Smxd+oQ+M+ESl
x+NN5fFav5tw9//rknweSZd8T//v8dkP/MAPnH3/939//50Rj/1zePaud73r
StOoyHtX//9JH/fP/bk/d/a6173u7M/8mT9z9m/+zb8ZLxz2F270cf/23/7b
Z1/6pV969mVf9mVnX/3VX93/fuc73/mQ4c5b5gOTfeecxw/+4A+evfrVrz77
5E/+5LNP+qRPOvuO7/iOOo+bZ//xP/7HPkkPP+VTPuXs1/yaX9Nf/l2/63ed
fed3fuflU/mJ56zciL/hN/yGs0/7tE87e+UrX3n2j/7RPxovHM0R3/rWt559
+qd/en/J1F71qledfeqnfurZ533e51n9Iyz+qiOC9fd+7/f233/1r/7V9bKR
v+qrvuryET9oH9yPNvaN+cLXf/3Xd3ha8a//9b/+7N/9u3/3EPz++OsM8+//
/b8/++Iv/uIOSEO1ZT3aMBcTz52dUf3843/8j/vLbQ1n3/AN33D2tV/7tWff
9m3f5r2DW73NaX/2t/7W3zp705vedPaX/tJfSptObofYYm/AQYfH/TtM43f7
Oe1fH62vNbzZv7t59h/+w384+/t//++f/cW/+Bf7EG9/+9tXl32o9vJ490b/
Hmz+3t/7e31K0P/P//k/7/2d7g09hz8ZU23/m/Jj9n1wcv77x+d/faPMAJN9
67d+a5/tm9/85rN/9s/+We//qfmOJv/yX/7Ls7/21/5aX5V3CSfvnEzAeufb
v/3bz/7KX/krZ2984xvPvvEbvxFRH+4BSpMbs8n3fM/3nH3TN31TXzg6nMOe
1+Rkb7Zve9vbzr7u676ujwbFbaSJ4pvrnX/wD/5Bf0fX/+Sf/JP+XXt2c46O
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
ykFmrZzGrTLrhB9ngt9iA6QesoOvqjQv88qYppkeGsAi6TP2GBxL59yq0T2q
VzZGudutGXAVA84d7bmnoNa8mB5Z0FRjX5psVSdPVkkzowFUJYsXyiGLHVhr
c1VLlMyh8ciImKHkR5y2HM8NI1LUuT02celwFeRHRJobQ3CwyI1Vk8338176
Tn8SzlNJ2HxS7asedLyOR5bq9hEK5EwSCW1Puot9yKijLqOs+ewhHtl4Nm7W
0Yd20T41d5juZnHYNElaHm9kfR7IQezfXuaaGTLdmVbcMAZJzAFOoc8FrpmU
kLjhjMahFIeVZEh2sBWgRicOkkRoaHYXiUFDkI+8IxRdXLJUHwXk1PEKYiBc
zuo6mnY1b+xkXSerxTzEtqgeloMFWBO0Geu62Skkx1aJnNj2sNfmP3Z+j7uy
mwXWvVLF7L47dmtCBcRAhQiXVmhW6CF+lVFXGcvTnQAH+3aqvvjtxNh++Yx6
e8/cLZjrutMN/+KXdKngs6+lGTCBk7XvuWMHF9VQqMehUifBz5d8yZckGJlr
fNNsFlyNaZuR5r5W9EPNzUUCSiLW2qjRkoqu1HuSk9OeE5zbVssQVwEUM2ur
g7dVMTT5efJzPUOpuVTHnFSlrQdQI7qxM7HX/ZCNX5Ibb1ihjH2nLH7GvvSu
TplY1hWdMhq1xitjgHtnkP7ZCmA84JQ9eLJ2Xs48COtulyvZMmYYTaJ8wC8T
hi7HXTFO7grVK1/5Mr8sJfgeIixyEvRil2z3xD4W3xzTUa8qViNFsSWB7Npl
VlUPK1e/7C1veUv1y2rYpR50Jz7CCni/+mVQmMCXH371C37IaqQcBVK5BjsK
IMcCdGdIV7Hv+2XaYWt8eVL6jJokRTchNZhEnzEVahR+30OrfSKYlHs0FybO
o3hoJJJNz6h8HFBSWCu/IhRmZLAglpoNHpbTdnD4uh7a8Y6H1igiQ/Eb04Tj
tuVEP5pzFjaqzv1lzlly2gKVxi8DVm2K8u5Bf0rHqHC+QoYCDc3ZMwBc1ON5
Ptl+hSQAbxIrE92vomzr8jF8MvBK8MlEUcN5oSLPGKMX+WTiNUEp0ROmo/Tt
Kz1Jn6wxaqBBYkaWkP5V4XkWaqXEKrNirJxWin9fb6+t9Qy3Ms0nK+N63ki3
U4zD0mI4GrMx2QP1IHxPVm0X3g9GTuSb5VgLpiRkEkLYZNuuc9YwGkgR/r7y
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
PUOxmX3W6UUdE53EjkUAeqEgI4fTcvoeenF32Ggac8bUDIw947/v7aCC91na
aW7tReM5w+6jHIk04FnGZeu/lzfF9e42zbuxibgS1n6mswyBMejBkOIi8P/I
MiR3t3ESQF9ddNbHMvS/oxNXLOlrEYdC18xuf29K+EssY01HfYIaCT0bs+4Y
+Bb61IPmRdAcF7OVkNdkgeuDLvmLzZMC4NUUtYCDSe6qQEJnPusoab4ntUk+
hDIPG1uGx6vTUIkFg+nxneoTwXE6cXfJL3N5hKcl4+mQ7Ig86KCDjBWso5Fc
dQjivvTSS736cXVablLb5FmU8SSapdfoyH6iXsQbiZnYusjNJSxMt7xAr2E0
fE8LRZNYD/JHsR2F69q4lMM6q5IEUiNBOJrYB68W0XTyMKFZnqWUAZdbG9yI
GfI9VOMPYVFCkFQhiiyEeIgg5xG04yVhTBmV5qWL6+N4iXzIOVkW5uXv68yL
2oamODsrU8oQZiAh28cIrCTlRiyPOYvaHkX9Pd07idNQCYpRT62IMLxGkkC8
5kk039LSXgECrxH1xseiD5PEp7n21NmrvILkmu+Q0nHlo6mvXPUJK9ILxCCG
tmHDhic64yOi0Ad2Ii7r5Vbl0HNYivkqawJLEacgzG4aaVsnKcvKPOMS8TZq
XJvgxhP49OXucDhKLIt2bsdhB1rKFenvibTc0AwJ4dAWKhr/a5AcgqNIzpah
X8aERl/ukkOEBzoiFeHWlbKskhzIgHQREzYN+J8C57DaUUB5BRxLi99wiYBj
KQYkH6WiiXh0/Ixv79D56my9kUQQHEWanJxpGnA/WWZxMAFQkVvjgDwo5SjB
6MM+ifCjFko6jugKoQzaevkB4xz1K3XEiQT+eS31KdqMBUWZKjfdxBXl+0zz
PC3YVTfM04+YLHK872pPK0MIBDIYkylqzYYJHq/lllnH6giYp14lhuQHWpV2
RM9pV/eHumRF4j5pqFv3x6q3qaqpZBp5hw6z6Zui9AZJbkjp92k/1YUa4xWp
hOQqb1yEeqpjhshqMQtqYcEfWzoPos15A2/ijX4fT5Fo2SJ0B7Nhy4y2hTAM
iWnUuCw0LbZyvoGPMIHEDv182FxSzmSnymvEO7A7syMnqcIFHU+Vb0rKr4KA
lBe0/JPzYxDchtFZBESEAxy0c4hIlkRH4oMUg0u0oOAe/13pC8PD4rHjarp6
ZxwbitLzDZ05ID61WqCtGctyvxaMyndEHGUoi5hNdewKCIIhoa7Ju0zPMz14
k01WivhDzj67jWZppT4n7yEN72KJ6tuwVBFHoQXvAqmWz9/x1ywv5pc+zF/6
/WgkeGHSvdpLhkZGSzXNqMf9pYX38ptf4H7DOJt5Z3REylS3Q4TrhUbi5UmC
QQiNH6eyKqwQii1fjJTLwLW/DMZXfJPMOjUJZuasXS6nDZW+Izkz1L2Uit+T
NUAAca70Tgqp3K6Ud7Ivz4sFipKmmP2lL31ppx1BYJR8e0t1vvMLqcCSM9VI
hrEeMpCCBTeY2tR2NeR69913T5zGnz322CNpqvbC8TFVEfldEO1w8DWiQMLM
L3vZyzrD3m233ZL2jJdrE8n3+6pKO8agLX+6gp1EH3pMFWqxQlD152IjDATC
CqTS3Fg26TZhbtK5OC+6rErHjaGI4CZIGN7Vd+UYHIKKlJH5Te8KHQBgBPQi
sBVjjnsJpfI8cVF4BKtvVNosDAxjTREK8lLdojUepSXyHbzgxfU67w/OZ10z
pdv1QwGjeAXFwAHOCx2R6JYr5vthXv7yl6cWK9Lfy8tkGQp5SESLoYNTmAbr
/wx/HrYFNSJ6W4b3IAqmXEuhKyTAZvlej7guneMQpCzEB9gf1vg3Ar+xaFHU
4QWyR7R4svMbm4DAZyqpd1JHSYo8AFkN/onb4pVxQnY0j9VCqHn/fRkJb0Kw
Iw6BQpgZk56yYlDcr+vydpPJZ6auDIoH6sTbOMRmMDcCob3VDJeclhFdI4FH
ujgw37KAxcE/1Rp0zwnr3gvHbGBBYDmenK2hJo8XVGs12I3JR7Cm64dqzYxa
ikQCP7oTNhKnwLLGPTcUoOyV736Z1V9b7DiV5BcHT5eXxal2xE0+PJZQp0BY
R092IVHdDOKkkxrVV8dIjXp5V+RfSuOwvrhFWPnN3TLjZ4Cp0BaOCrLZ7DN3
OH6YR1PuMmN4dSAFOGo8EIE5cIiwjhaAqMiP79zoyFxUhnqVTjLw6zs7RUnk
IrkXUhyMbQDsRJsBQobg5Dvj4jBHAhwCcWhI9IN0OW3gesBUvAHCf9dhCGQa
sCfGwRFhzHFsMJx2S8QKWhR9zTjM3RR9MeugERbbRGxuiBCZR5AE9xoFZy/S
KW+8L9osvc9ksMADGJXUc60dVOcx7TyDdtCuGhUTxltxxHfYaBy4pnz6oZwO
ACWOCY/kkqo13Tv+YBZ0DZIU9wqjSIgJZCJZy+kwEsUS4KL4EFyk+1vqLRFc
MKA7B5k57byis+4aRgH+ohVERGxkXSxDWzGo2lFoVe8MlcqOoAYt4wccjayo
UANCxjoTBMDI1PfysEjc/yehQKmo7CPeEwj8R8jUjhiJY9bO/nVVsWhsuo0y
tounzOsWPRgLjOrGT9NQNROhKXfik12P02C4WDeGp701xGTxREyn5SVfWa0L
ego6cn7Ctm7SWHLMHEow3KBZP8p4IBMlGSo9xt4ApenWa21H4p2d3lUyELCn
vVaHtPBGP8Coc7sK0yJcL4ikk/bqEqsaIoHgtWt9VQX8NAw0ABCJVTTVoxOI
dfA3PL9leAWPHX300aVUGFcULaBuaa8ydGkfrLYZ+icHPtDhl3HhUK602Ma7
ZghYa784NLWvbzDFUHkV8nw3mIoFfXdah3AQQMeZS+KxUwQE4uHv8QQ3VdQz
PDnMMzrUbqqMAs1KzoN18HBbR3q1h1mqEkcY9o13torltF6gcLIBpBK0I4kU
Q9++caYVMQ3jqClPn6j7GtP07cPWTS4iZ982e/pDk7TvnUgiiJTHeUk7ihdZ
KeJq7HTZxvtnVZkrB8iq/F2ruzZtkputYYHpRFYljmh8or06STe+W1zEHICX
uG2SMdJa2pwSi+OI8jbFPRxPQTgdFrameztv9EIojTauirsqcbXibSPoUPYW
NAGYaDd3fYYIFOAMEQETwEU8c2PGN4uwFSemF9ZWR0WxqgTq2JKl1We1WME4
NqjXB0zYi1GvPvJqFO+4Ec55UQF3acQkHcHK8UIr9e23YYd1vL+HFakF1c+w
KWMl9Kor+ZZXdKTavSmf12SoMdKTfL8vsIYXZPv2hvHCSs5iU0HKsfHsktBZ
qXAkAUu30xNBEBBaTKdCUrFEFdaI+9oXQiXxUlqmTxzUpl9fCK7XuY8RTziH
qTiHTgs5LLAitQUy7FZyThZEH/NZM+29vfwIhiK8WG0hEnwRHiYZ6TmDjgDD
QiixpYEvuT/eM1NKh9ursTu7SyfKsKlLAMrEDcwRysTrHAGZ6JtyGn026e5a
di4D9vzYeDV59qttE5gDEMIy7K2zbufkZu37JgcupqDYHKCAw1E/7mSIX7OA
xBRMCLb0HjC0XWc+yzBamwUQYR8O6tmiWgBw5TXXXPP0oJrmQjns/NfOdlAO
C9RWA0+W2eigDYersXSZ8BLQcNvAQgsjn0xTHes/4M3b/JrIJcpwr/6bt4cN
gpaHWemwk8mAVnS0tEccRsbC75Q75r2RGhEVSdGhy/sscRt1ydeEB6p0aqbh
+fawiU0XLWm+ZIGwqy09u9pazDbT3R+NGY+XehFDI1aDYCYrld420g0KRAWF
3cY3NodE+JYwHQDMze9EWMG5TBU9Y90YiiQXw65TG6N8UKlCZmKzoI1I+ntm
pv/+9Haxu9GE9nKUeOjg4wFoabUQWObqCyzzIGARC35CVDG69mgQ4n3DhGBS
E4wOP5xV7BuaM1IaBx5jZxdefyjoAe+a9JHDG+fD5WmoylYwZELyRITW5oRi
Z88NbYhUtmcfZWKiEZzJxr1bjRgwiUWA1fmXdZQoxEs6eByjY1QSIQYDbhmz
+rHphWC8AumgTgS7RywdKQKYhPtpeCtGhdtfxEXDQm/xOD0ASjvjljrERIjz
Ai0gIolTFiGeA6Qzfmq1WeM49I/aTYZ2OGztlu/h4ThVbZFyhbTEl0R+mTWW
BYnELCGFXk2mbcS6YwJLsXf3nvEupMtSQQCDyLNu9lBpAtJI1pPMEauCQWIV
kA5rEwUXFUTx5pMC9+qKaHuthELoesYDCQAUPyGlmM7oAWDWiTGLdQlQwfnQ
RH0KmKhPTCGQQ8LX4uCxAt+hgLYwYWOI6aE/4uY2iEeodGPgXzzGxWPZHkOf
KMZL+cKZssk9jxOFcvrpp488LWhhlEipiXC+WVsd7KeaqpinVsUhJzcLU1Ll
INgg+aENcgI9WD4ia8Ak6No5HWWkvUqd/MQ2gbfnA5jKxaKzu1eprygKE/mj
io5QMRAc7aYKh5nu7tG+s+GWCm2qP/wfoc2JwIK6NZoUCAoX0Q3D7pBD6iSe
8SbUGa+dg+yt+E+XdCwVeFJvsBv5djxS3E2JUVSdjCne/bupIlDNHdPrSqYo
pRnPH+KXoCphTdIvsCrap7okhqa6AljVWzrHpTW97SlX0iBMV+ZaFRfSIroR
Ss/4jVA6FwempviistgCq+hq6jjgbXAIgcK5LDa2MtQ/sxsTMax3DTNYxE8m
g+3vXhnXSXEppUofqIDRpFgmUm0W9KMfnXElAnqFaupZKuPxA2bHEqSUuh93
ZhG8QDUj49AIGUFVIY/ADsbaqrU8ftFRB0ENE9ZSfOax5aLGpZpRscAPyhBQ
wdQZUPDW3ZHq2LbaAnh/0EP01eqhfFAg48cUI9OcN8C4GAtpYPAwlRXE05lX
pyBjrJxtRKhdaI7mUquR3KgBnTmoIw34l7QG35PiiOkqOZdnnXXWyKCAV+JD
Rpf3tcu3MvWHSWGanBcFmzEGUAOZNswBrODLOFYJMtS+7777NJJhY2CC/93L
xSc6RxWhSGk/6mLMDFko1JQURcS0wr7xuHSYusXNU0WQI/NiEHjPUmFhYqky
9vEkPQwh9Q4wHeexYURZEegENwn8jrahqi4MlmaDnWQadEyYYhIobDia4gm1
J0aC9uQQF7EeEwZKx9vukWCXlljtsiJ1jFnGFNM5vEXYjZMxESfUiqmp0Sg3
SlOhJmTKWU0h4hgZFH4nQ+j9j9LYGkEwGEAF7TMh7hnvYHhCIL4fTTgSI7F+
8VFZpIcDkCMqgtHY7JXiNTYNhAAaA0SZimcwR9vYQksSTux5ahB3fNfcC39n
hkRbx7NJmSt8QAWj/X7cm/IjmQGMSzR8lJi2wGplYQ+MH6uA0SO1guJGS7Ci
TMFriKLyQ1wopN86iMEgsBkcoPOu46U0rA6RM7g4H0mTxR1FiWigvDym1YmT
LRVWjkdUI6Jt5HS6nLaGwieRhZtLeBtlylghs28s6rhDwscaK6oMjN0eK9oy
PjALu+uldzqNh3QuJgqZAJ4oAoAGNZlTz5sqOq4P7W7R8eZpGkBW3HWoCHVg
RNrCmDAjv4NThDxUxm6oMV57gbFvQz6bFWMPA+ksZDQK4i+jz7/IDJkV7XeI
vqLEO04DOeueHztdsn7avwrDw2wwMioXBO9BjU7fTAfpFQBl4WVXxirm0B8Y
1oCbHoEXmXrb9UQJQVCQxXQ5BibexMt3hIFsyioPQNoZbQv3Hh+wWcodl1QH
F4mMYnbiSBgTtpKMuUmgX1AKHIU756gkoQWCi7itKvQfBmyOJ3hRrNZe3J09
NfaQhOsNEh1gDdQVueimfP6evxY6++Iefx3d+XWnEQeMpewfXE3OQGfSMgd4
AcPn1T0jMVQA5gU7yzoxRvpp22UAynyA/gZcFFVmHJDHD8mKsVDURzQGg6Lm
cN3KSIx3waUkH/VqEDOa1094r5EyRAhl0sNGyoA4aaU4G+SG7eCiPSuIWAM4
ulX2/QgZrFbftEA7olb53un8HW3gozj2YaFk6Q/GzrPR/YQW0Iw4iE5fpx1y
6Ie1x4hCt3hxKlWhgxJUtU3wlEdbscyvBVvtXR1xD3qBVKouxK52XbysYRF5
yEVAElSkpdDWdy916UQnWDqm2oToBLYOFdGeWTVR3EFkD7Gmam0yLDXoA+Sk
6riJnv4VANadbtkNapehPi1tY3Aw84QWeaFaFYlKwKygrlGVGGLGXLOozALG
UHuAsf11pJR54H40Bb9Plh0CtEUZUKNr75X8oqXRyJ62iyuNcNFIqd9B8SzC
02FsaUU/5cwHlt9PBIAkmUOXvjtTlwrHUjzXhRNtjQlUM4kRldDb2BC3gdGv
EoKN6JhNYS2/5jw4AAowVeIG+TQOLCsENPYQB23qSFWbgSKH8jPpuHbf6WSi
jI7MhlJIgHG9FAez797t2dbuEQ4m/AbgNYLF7ClfcU6bYd74cp0hF6+OU53W
WGRC4Ah9tEyYh4JJbQMRWQJAjlBI56i6PixQZY3vSYM1wr0+TBZnCEQmq8DQ
/fzfwhayp0B7I4zud9FtQY5BQfId8/3/d9Cp91K3DACKpxVCcTQcwGq50wst
SpgIg0iIjGsqtOVkmOASTa0bi6OexLp2z51+Q3piZKSn2lPQEfMiZRaVDwoJ
U2NCq71buGZKK6z1U8sJDlF9JA4mV7S2ShmyRuQBAObSLdpeE10t+iXOHcVn
IZgoPiO4BfSLVpz3sg7obq059Te61DjSjvWhpmepACL99Vlt6NIUq52rZ4lr
r4nbIrvYMO7bQQHlnVMZkEhsMMosTZwmeF8soD6GjRFhYcBQGzEeK5uVogmF
hQF78fzRCBClaFGSgAXMqI1Hw2ZDG6+pJUAxQ23IQ3IJuUcui1WeK12utM0D
yZeUsook0soNQOPloCA3OvEWIr7ynZ/xWrz65Yqex7QangtKv93p095J7IfU
1CgHHDssPMgcwdsqs0LbsDReWxFHzqs5Per/8i6JhfdBPx5HiFX4BldAHDxL
o4rehA6QezfTvaYJu0s4ebGQD1vdd/EvFi8WIcJPAuUR9C8V1ItVRV3rm+eB
yEfThPqobz/qA3kIAvOo1S3yRsGM6LKpQjnNAw4h3FoLKskC9irGGkDCZaAa
U9dbBfJDMsg/ER5HPbE1XIkjLJgHEDvDqUEb+YuuUcz9adO7ZArRRbPH5WSZ
xB6ynH4bYbH+cDxswMba0Ra/SrGAjGRgcJP8qpCOqvPNV0VCHg+AbCq0w/K1
0bWxUv7eaoPhgi6gunbFxCoQAEDTNL2ga1a87m7vTFd3tYvahtRQlEaYvF4T
KS7NWjMmHsFsRXcBCxO1mEAP4DNKq66lHg/0JyQStdOgYAulXWtFrROpMr0X
bUfMPq5TCMaV9Rw22MKkKZQSrUV9EhVjE1jtq9GMe9kVXhXSQntCB5AMaibS
jLHDxxR/L1U0DqDoBx90+BGNiTmPKgptGddgNtLK/XkxSedeC1Kk7f2t+R3a
A68aR2SIArHWg878gN6iUkI3ldAXVgM6MKY2XJYLQXT1YJRpZDPm/glP4YxF
y8iYUOH0F888AEW065JOcE90BG0ZjTUlyE1uM5J3WKhKpGSZmXpt0B1hjvwX
b7cQpNo8LJf7dB0160erdNSBMu5Kww0KphhzLR6MTTdl673EB5hbrTaWGkyR
TpQ1j9UXsEd7FEUGDYh+lZXow1NC9/Wya8eUKlE3dTyFJGsekRVw37HM/9nb
UazRzafleSDNaC+JA1EsZUb7gNNkaKf7IuJ7WRKqnaMDpw2rei9LyfNN070K
HNQRDSUgTOMJwS4vQE7SpMeREm0S0msgHwaIFo9H8ITR1xyi66OtRdv4HIYJ
nljuPtxNv7jCTfn8H/6q0p6zYleCUdgQKcuIjQmO4TVIWSJdYIw2E5cDVeL8
SAYtuabIOcfavhmVDKVYURkthJ1kv4jM1Dc20x9Lx5j1XuyhyqJiO1grFlsP
Gzvp6s0aO+lgSLEl2BN2WAg7AXX3yhfaFuwEi2CE+FCLEdlCZSP2+yXDToiO
Cp06iSEAijhNFp4iEW0m6Kvxk1UFaKGa4iYgJlqDJWSjdu1R/RCCFmJaktmE
BYhKanHQZyAQQn4RaNGu3WmYQ08CP5G5WfCLL764szm8izYysGXbF5FsJS76
ENCwkZIEBIfX64g6QJBcMS2e6e0WQkpP8XYARgS9fi9mimDWYlERdqLPaVBe
VYwPouQdNf2WGhUR5pXzI/rxnPg6mmDVpPZBIvVHbBSFFVGWQmrw5mMFEmEU
+qAdczGeK5BIIew6M4FsRxnDLgOnFoJEQp6zlI2ntTuTRvA6x+G5paqVEszW
ZZqJ5G354skD7gyMOHo8YQPsp4KJqCScWQrDP57AEUpXliYiCp3wvRTgiCRF
n4JCCbLDtSmfWeAofatbzVDm1JrWiAHhxSLLAGFExE9iUhLHfUocniGlKOWM
1ScaFY0h7VjT2N+gaIhYrtZZ/SH0KIkmoBftro5RDHi3roUcNhqCx7vopYsS
ozKdDw2JD4mIoaDbSNJUqX51oJAijbWCZG1qA7MUqKieg0pUOaxZtEMW6lq3
PkBESpZIZNQvjE/8rw0AMcoUDb4ARB/fqigL/1BHiUR+xNlAT+gd5IVqT0Hh
F5JpMeJFuKQ12pMFkXqkN+m4tFFgtu0aNiZSf9i4evhyBrA1i8VEiCfviKqC
8YK9aKG8yqCYCLU5H4uJZXFqxBKPJCYinFFvmkbkVH+j5acIjbVcCBOxE7IP
wyhtua2329QxkZcIzOoPUwm2EyZCZGWiYlgHMxg3sQ+KiSi0q/mU9WYTK1Xw
Mg8kP+gvrod2KEc5AqMiC+3+qryRjP6UhKGSDtrNVIF69vLEvpCBWibVF2Wu
wruPB1ik9cK3RafF/oSJibdt63MYNiyqdQBzBc5w80RTPm9MT4yM9CTc7gwT
BQPEBLErk9RCiwojMYka31AQGxcV7N7nTGB3osM+KA6i/7mYLsZh+0LeLJbu
7V0qHITw9CkUlHm8umNQHASO7GZnphJDUQMgOw/TqUYojg1hisw+bBwED/Th
IOhOBHFlWIsZLz/tw0EyoigASlLrgCvrRo2G8A3Gpy+dgZLmFiIZFXgZBV9n
Veu7mzFuKIYYY+edKNUmGBXo3F2LfE4hON/xdQowzXRLdHA1ONR8qTCPNgdH
nSPR4QTUQTGP9m0SeK2hPOOlaAAWXizmIT5Ws5P2yVFz8mhhHkFjZQPruCV0
jgcLwXa1je3DPCRN6wONmAdsQotNHfNoHthQXOuZEGKh6lSmQEdEwz99Kh67
hhp4QqDzfJhH64E9E7bUe7Gfeq/WA/xQv1fYCFdFckQBjCpZpULlNiljwjuh
Uz027c2Iez5rmwwP6J71xyPmIcXo5Zeddrybg/yf7HN4JDAPa0+xV1M+jnnS
/+8JT9d16mge3ZslCSUirtSS2jkK7nAiGqWPAgQEiJgOCnJEBYxJ97iHzNlo
lvZCtxwkoV0NwvDiokYaNsiBfnVqjv4JjmEhxEGDghwBhLod46ZF3kefj1l3
i8gfxYfZpKMlkdAPG+v0TQUSwkY4soNinSf6VDBOZPxIuodTCXg18XfCz4I7
zLqOaUAFhf7ErUBF+H+mKilA7pB/1XoTlhL+iKFbSBPtDu269iSfPutVLenD
FEwf1KrLUP/Q4Y7SCWxMqOs8mSZmiBa612lQuIMKRs1FFaxIFvtmFwt3QIl+
EPxIdAGBT3g8YvpHC+6wbRQUW28TZV9bVGqDwh0kpW99JbyPFbhD+qnOLkB3
bYxRiAdNUEdroQuKGA90sXCHegEdHBUj+9qiITmiJFtwLPZHeM5oW+QIPqtr
OqELsL5VplNlZ3U0xxixeG8SqVlVM8XINGJPi8cj3KEsqJZHZaGwBJse3AGy
1JU5cKxOTtWFLNjMtT05JgxLXEVGXXMFVFLVcDytZxC4g4MoOBY1ugo9pPkB
47VjClWIhUSNNOz7CeJWvU5imugq6jQu1WCYZyqpC7H+Wt+Zilrmfh/dXUzf
fkxDx4SxW7m9rfuRATuaA+w2KNjRhVhEikE1fs1vrK6Gvyi0EdhBCqlWq/fF
oZnMYhZe5QyH+rQLJEfFLwI7nECjs+QiVMVCQxrdW8vwamkFZbCVdzTwvSrJ
I79goQnuynIOC/EoWRA0SWc5mAPxrsUiHt1kmU9Qb9sJKehChkERD/1x+2pd
CMJecdY2HqX6aCAe3DgVkkX9Jy07KOJRf7hd2uUQS+N1SfxjBfH06UklS2kh
xMN46/fKMh5//PFFdgdFPNQy1GpDSCYWDhFsUUFVbMdYOI06ohTVSMd5QBcS
UVKn2Lsa4dEXMfusBbpqt8+d5+whre/jCfWAIWqZRDZ4L8G2TQL1jPSUQCux
hTLrSxwxUbJkup4XRSawVCesiG1EpdwX5fVI5aJBEAUa2tYTlY/220go+qKe
2pffLCEIgnGIYLdKNG+ipy0LQmyqvTdhYRwUz5iuY2d7+7HvKAMJL8kmN6wd
IUdBoPweDSwUD6BaCAvpdB+ipdAW46jj3LV7XLiSNUZIeELuJEZnvm1sAkZE
u/uUOvzGVkcZd/hSd03JaOPC+I3MZX2IRWLwa+VF9oYyfIEjjLHfxtVZR8YM
CFgqcISx64Bz7481472SQ4o4yV6wOWk6/Z23NXKmENE2yddCIErXABB01KlP
sR2nO9JuUBC1TaAfuqNdj/FyhThxVVs7idajhaMg4drKP0QUlCddLI5CFPz8
zw6O4nYJEoNbpLRpLtIXW+rZTR1bsWS1eYgFOcJWXiwyqx0F8TEIPCi2ipeo
xXbgI9SpxMZ3Q3f8p1j8rnmgTmtx1WFr+DxSz+TQtf8s0o/4dhOwFVEt7SYa
dTbXfAk427o/ISw7LIO0P55Ovhfp8Zpr8YX0kJT9GFE8hBKGebL9xgWftPWM
2et65qg0CNpweKZwF1mOOmzJqAkMsV1ZjOuH5swSGB1psFjchb6vw69wBEGp
JuAuYi59VQxwWRSY4d7kPZ5wodtf+s1DXKkfk8lmCPg2DBk5xGSj0/mg12zh
I+VrBMYGvXpmdN09/zAfBlivEPyIum6aRzb19nAQmM4YgSORGeYH8mQMfq5m
uVpE5CXkaHISj0nCC6xJpV3PYmaqmGomYGowL6BJOaVYaqklwoozlUhScgTK
ecX3EkTMLVoS1OCFn7VTRaQaNggDnHcPRO+e+SEW0lVUHNc/nf5uPX9jr0WD
MKyJtsBF1tDdUoOCsG19lLCaJ9SLsOUTpaeTWQA1oAgQStS9bsLg80hvY5Oi
Q/zq6H48qGGxqIznOsURW7I8Psj65Zs6DEOX9G1LkY6J19wDpWLFBe2UWlgs
DOOMtD5rxvgiDPNTKGZZM862iVYF+EtpYRwfi8fJnlEBYPXQd7U3jZfcHgKd
BawOn4M/YHITKPM685qzZnhwnFz4eMRg1HX1HeADj0KnLQKdoHtbJbMJhsLu
CAtTb1SFWYnLgullxdCatSFnEBAY7Som7tNoLKiK5xYLycguQ+C4sdnhWIfB
AC59+wEZXxSeYUEyHT1JTgkQ7oc0t6GbbComkzlDcxBfwCSjJW1CfSBMC6xz
3SJMhgY6aUgWlFxGnRJkLvVpRpsqCNP5dPACcXYs9Rq/TEaXRq/xewfwWdnn
S6pTlpxwTV+VBiiAXJ141wuhOu0QLJAPLYTAoG/3uolusano1HfaA/1jiKIC
JhZSGyYhl3jM0bARGLkSyVZUJMg06y3+wYi4QjKl2dIPdHnaaacNjMC29FFS
G0BlCbEh8vUgVSqJMEzIMY6q3o1vgtJt93S2IVzyNAuhNeYHL0wkDJ3n7H5O
qasDibJHBJ7W3aiJsn7LMPME4UFnQv04NRToz3Rr9pcatBE97Ft+RJt9YhK7
QUEbgJSQYGHjLZ0TWDPlxB8roC2eVhPbqaxVoA0iqAxVshvPClDoHB6d70wm
0QUA05ciQndFWXPgMGu+cphjmWxfTAzdxCLn9+bLHRykFqCAjBsjdc6p6lyD
+ERfYN9gnCqtH48IDRurxegQRodusyt/k4dkugS4Vt86f2uhKBkvjVEyv45x
lplc6ijZXFBrqaJkK7xXTAvQBl0ZroqdcEQhieJrv2O+9zYZrS21liReal/e
NwkU8uGWqQA/tkM4qPXd1NGYEC3CB1IARdlcpgIQg1wYTUJalDfq0ALyvX1K
EEWLyCkfiUVUfjdyDiLWBCAGKeHa+qRyjEEUO0IuDD8e0erHs6YWykeSXELB
x6IQ7TqjiGOpgBjhIOVBY/k3AJ1493ig3zCAmGrs0OWMkcSTSWq63XzUt/Ey
bvpAOrALRALGXCXipIU9FcW7pbBsPkAmtGJg2eTPLIv1hS7mxg1AIJJLQgeQ
j1Op+aBxaGN2wfrK8QzZnLUlGjHZEVld0T7Tnkn5SIA0MGyd4pVyBNcsFqSp
zhXW2DqwhupwHyv4DFUwSFAt3iUcI5MKWi0P64EIU4Yzkf4eT34U/oPT6+HE
2lRBIsn0TRmzbKJibdEmcphhfT4dmiK+l2WvlTXj4MwG3BSRK8banhTGx3fc
s/p4RG2wsqzHk8Ja4IqjnR9dwNZ/fNTdoZ/a8on+nFP/m97OS2Jn0QJ3E3AQ
yxwVU5ZFg6dl0WQxBsVqHCdEzHahSrK+2Dj0oTKpWQKspvwb4AXLwPPwhefe
0rymw7rUoCye1xfXD1Ue1RO0q49dmgmhGvW3qYIyZX5BROy18wqxSTeMNIWs
qDOuzCMHZsPVCb3gjHq1aI7WpIVwGUFMD3zM4iaz3+XEX/BX7Uns7Vd+R2oS
0fBzo2cFi/FMIheDD+ricyB3E4zWsHCZggBUU9T9SdPhjGt8BBx5Hk037fqO
5zCgp5566sC47AluU6jH011QjmH87udl6T2MnXVAy+tADwIJ9n3EOiwXHSoT
HSFZbOdQKRePZfy3LL0DTudfGqEdcFt4p2mFzVwwiZ0RwyNGCLRjerVgPhK4
C6PE8/VZZXI2F5vRZF46iy+em8by8+xK7yEYy46gE3N+LOGzeBNsFEWJrPAZ
ikgiK/rRv9+529m3QW7CvF97xxve8Ab7DkOtgMV84GyuejSeByRJnAASfbX+
rAeVFfFeINayD2AYji7tOIzYcWqHBuBRE93Sjti1aBp5TSpgVfp7qgOkBETo
jwMuHo8Ajl3Ydf0g7SRTolsEb2vDBYyPPsjrK1ZDw/RBIriG4mlBO4xVfSY6
PyPJcaUJy6smJLYj1hI11HzQjroYUQEvCbtf75TEXWkCtEMK+46NQ1M3SwDt
Vru+ALKwAoQtCYKw0szBYZFLdwamYcV74ZIi34T2kPjojtFOGy/jcTU1oBGs
ihyyqcI+3eSHBAYIq4tWpQhQANyFSMLNhHpb7518dB/fK3wm2Ie81HubeA7K
me0vsA/g2ZfTr6np+whnUUl5xxhLqWdPO5xv7MBSwT7y5XV/2l6SIw25HTki
dBq38Eynv/PhlThxXJEyKOxTsAEY6YWFGe6lDPdYWEyoi5Ym0gHisl5i3BNw
08wB+DZL7aaKoWKCdEdsk67Yp7SZkwtMSV+ALIiNIoSHAHF+c+G8IvlIAD6M
sIoahrFBE3XKGKPKYK4kpjkRbWVa4PG04MQiYf417UG1rKffurBozDdXpeZS
Yz6c4z5NrnbCfExZQYmIA3Q+tOQL0mO5IGFCP85uNQaq8R4FU8IjsX/t35DW
xGvtcz+ZKzejxRxq5waKoF1x26bC+tT6AL2ks/40PoIjvtzeLu8/IFPI1h2j
z0oXf0iFGosQkiHCSQYAFoR9fo3sowr7eOcgsA9JHQT2wRZ920CJGZGBXuW0
A5B4JGJWCQfbWjbl+B7uTh8I5HQGjqEUCMQU1Pdv+JEVHa1Fznau7cRQa6HT
wWB/Ig+iB+5Z3+lg9dGrOqI1rj39KQe8WBDoUZs5QeATXIEAYHTvO+YT083x
CvAIvI0bGZOv8B08K1EG2dTxO6kyzjxe5rzjx4t3eAcLyDERwwJ7xPLjiWvD
BXuZpjIDAge0Y77wLUAQGbaxqgQAEZ+v2lJIDwzeV0VFDhsPWEhv9g0Z7b2p
mdBN8SB1I280viCsqGEx0jpxow57s3xLhfTwB/russSKsZtQO+4WQnB5qXOF
IkFDx2qZY5eV4kTd7a4ItmMw2RTtjXdcHpGdLhPtQ3ZPzFAxAyFsknaCbO40
YVQIFwqckCtbWolz8C4EyTyuzoVHGI4oEINCN/r3q9jnhW4xpxknqbOAFnua
GKtQryKC6Wf8dW4H03b5uIoPd4MCMLAvntWH22qIvDG4re9sjTV+hjKgQLgN
JumTFp3YJUMOrkJxQJcYs61xGriovtebcehkLyk8pK8Pz2LQMPiaB1Jb00V1
yVGLsPFKhUSRfvAl5REaH0Iy16l8xI5We6+AAOeX9Ic2GEwScQsBNEow4lwX
AmgrQ3997R4uSCNKVMvQXCCtDyDUII1cQW3Q4+6z1S5xwWdIf9wvnnLSDoLN
wBjgiVpNDDcsB6qqEdnefjMZzCBEFmuD+hBPPJS+L0MIesB37kNkUWlhetqM
5lhCSoMcSo8yqi9hYfEINEQluBAimw7jA8nEa4cZH8osnkZM+K5GN8oJRmUE
g3HYWY20+Y4aHiEv6Le2cgT598gjjxwK8tLaEqAZNvLSXEGpoOhW6PLN4rQF
SpkQPcWbLlRMKcRFeKF70HR7IDVDFOJC7vp0JeAYMsdziPpIQwSYunq1I9Ja
20yWV7pc+mPYiAu91XcDJraBErPFIa68d0Ln62cMsyI9x3csCQ4OuIIYAzkV
YpvQO2U629e7j96BIwy1mQNzRU3BtPP1Svw9kTgY+MC/jvA8e5u5j6Gh8nUU
WkwMxDGh3mMtw6AwjCpGor3RdPXBMCQXckZNwHwwU/FoukFhGCxap3f8QNfU
QtLG5lMdrTYaxlc7BYPCMFVzLwTDOP6vD4bheFC5uFgYRn+dqx10FA9xXE1a
u45Rp33qHrzOWVgRi/FdjcXIpUYsBtZRkEbY3XOGqcUgB96j2uL5dO4cl8VD
TnRgtPQGOVL8k3L/oSZNBEQv18YmojB1LBch1q1Ail6h92tAptue5gNke/ml
27iIiwVkuKZ9p/ejiAyELRqQqfx7EEDWd+47HHfKKad0TsivD+zRpjXoIkBG
tKEGZDb/xQAyzGTtpS/57gXo1YfPYH5s+H/ydhiQPgMEHYisidERiL5DO+vK
tD58xntZKwyQiAIeqi9v90P/OlqF9cRhiWdiAeoRlPjeufCZjrxWfzyH0Yro
mPkrKC18BnCoNzXGVKPeizz03TQseYhnqtVOpQISJNukAB4ORouyz1EI4Fut
27AxGloZhqzxss6/1YGmcwE0bcgSQKNcru/CIniIJJ8AGtHmPoCGFYqVvWBI
+Kj2fqBfvHqcCGmtd3gvSVYMwVICtL6NdCqCGRSgaX2RN/g5GipFSSmPyPp9
IrUjiqsk8kypecvjVDCnD43FccLrZ599tvWY/yarQDSdpDOyZqjK2ttoJgKz
oUxQ+lpMNF/NHLRj0KQiFoJkKI8o1Lr6sN49L0Mo5gA5+DakQiwYsFY6g0Iy
oJacx8hEPNsEA0zI3RezWAnmgYJVX3PBMZ2EqrFB5Jp2gk+xHeW8tcAwBgST
UufFXrcIfWsFu5dfaYfn83RvhyKtFRjPAbcjEsOTQpEgqNO+cvSHwEQa+y1q
sxQExpsoqgQBeKsTZ6OBAqo3Afbi2Nc7QIUUUZwSaICVeCXOF0UXqyh8W8Ks
diBDYH68nRWlE2PwSrWwHn1AbDzwMplQ3qv5zgfEEPyVgS59Bgq+Zd0WAmJE
qGKOQHcjRAPPzzocM1atIff1uqk0PlYPotwjsECRIjOtDE0mfoxAjL4MKS8E
xL72ta8VUuDM9l0DomsdhhMZQ8P3IS9QKUkPIS9KWOsyR9opZ6hRw7D13TCM
Dpc7CkpEXpFxUHowdrzTrS89ADNhSfVewvn1/lLtRYghkT7kpdPkCG3G6xVh
piigjE/pFCEvv65vFv3qHCn+dk1nBBaB4ugCCTIM5mf6zApbY5SGgbzkOXDl
+VIhLxR6t0yiTeKhWOUKz5WM9DuCCvKCr+o0gkpB4VMZ675dpfQHnaO/jicG
D9WKlTWhwkf0I90gF7yO9MJXS4W85kpGQj/WbbHIi1y6FFzUJhicFsTk4y+U
UprR/ufBQRdDxPFqFdRkIjVKiqESgPaK8XihJmYertDeYLisphKz4mAVpH4+
yMXP+GAxKhQDgxEigTGjlIINVZExn7YZFHIhzX5Q6kgMpOhAjeg3chhRCaQE
c0uR0nywi/FBh3g5LHt4+7hRe5fVLu6iizBOVxEtFnaxPnXUj3XDetBCUj9X
MpLxxWQkZhqaAj2nw2mlwIlIZ6xLXU4NXXSWutaNaojOIRg+N/+UYk6ksc/v
ga5RmskraadcbIdWygfN5HbY7PrKLDR6fUEs/r5cg1qam6aZF3YJZmJN+mBX
5FN3I8p7CUj2wUxQAEnV+WCXAvZoJfVH1ZvaxeSwAohaXxKNqJBafpFBPDbx
Fa5LzS/KPwH3tL74+3VRIOrGD3Up/NJ3IUr09zWPeJFD5CtdhTXsyrG5tg+w
NsT5hMaoya1dSJ3SB0qI1Xv1xcT0hbWP9IhobCLQjQrGSA9QTT3PGU8gc6GG
1oGiElmvyHdCT31oLM4DKw4fi09wC2p+on8FJeNGcGK5UebRwejqWGXnVrkj
89AAu1G75YrJLQ/tcG/qmA0xhUjTh4PQYlUbFW/QIAZmh4nQWNv66FOek/mW
rvbLlGa9l/E1AaGBcGsdoppyiimE0Eg2zlcuFosQ5rr1GUuwLKxHjdShky7T
0boNG6Fhh2qEpqq7eN3foAgNV7XvYDr0GdXC8eA73HjalrKy/GrtaFkIoenU
2mnvEhFBxTrQjeVfstwxTwiWjNULaCOCYdHKwPlISdSSEa1FXwStAtqQtOM7
zBd1nApjqVMVM15fzbVCGh+chHabC62pP1LDfb4h2oPgjbQgK19zOhwj37UP
rYmmlNopGxBvfBOajMuJ5Qb5iC6+bbGXk2J/g6I1rJY0SlwPUAQ+lTRAX8l/
zGooik71DCwU26m0jZyq6IeVU/BL8/XbcToaGU0ODeosjnLXkliCN6QhYzuk
Q+h+PLSDVvU97fAQkq3xIV1rq2Ak7VSP34fCoqOE9YIPxH+zUViuFAERIV/G
x1pi/KO+k1EAmSxdHxCLpAEAwKqRNIDWmJBSPI1N+novAKlP2RJ6QZmJZRAl
AEV9GD9kaDVKBtB9sfDa4YpALC4JADKeRgqp3WnozBftxvjUbuOCYX0Hc9Cb
M9PIU7wd5+3Uo0ahwIQEkeKoicDGfeMoCly9mN7pg18zXrhPcYioyt4TKZ74
Xp6N12EjsPW+bKXvYsYiwq+YjkFJRS7CjepTyNAFU7zcxUKrROkVLgbHeGns
uLx1bZPmyOYEcQRKpL6ldk041kr9obzrtWKMpDxxCTYGhkVhJsBZBwaHCcOA
B32nvgNz4hWdKEPZdx2rRZCsz2ApixDvuuyjqdwsQTNo13dUR502l3sX28E3
uGPtOcf9adCZUE65VNAMt7xvzybhFNZosdCM8fbpBZ0nKhwFICHb5+s+aM1+
HzTTq/FwWKaIrWTLW1s0XsQOtrbljg5sHf4Fkmi/dx80i4E5NnyS2I5gG26o
HWLgS8zPsO9BYDbaCewTGkNgll19BG8qivWhMxSDfPuxarHaSOxUVFYykenV
HLQQN/vVyIx2CECssoNMOnxiIowN35v6ELWjULKOE8T04GKRGYDcTyXr+IT4
p9EvRrCpnWH+4qy5DuUQWhOqI70nqBEjwrw3ml6Ymu+iEYPuxA5japFxSOGp
P9ZLqE5jpkKvTylImNQfXkDfxgFghL279If34em2WZkGUosxxiG0ploC6ESs
AvrFmInQmtrhGehoBq0RNVn1UQpRMvugWuQ1RIGYjtrB74oRxltk4Cviczb+
eJVifX82Syk9rS55rE7GQT6dCa8lJryiM8zVDoCus7H70FrUEuh52HJZWBIl
saKW4DswweLR2vxhs77Db+ORUAqbEU72azc748d5Be9ElOtIvCN+sEUsDo24
bTIAe9gWG2naLXJ9LW28Gm7hDL94eEPIv6SmqqqMe0P7ImjiGvrFYcC3sP5i
kJxua51MsB8dv9w7RgC8eDFxDzNEAKIdoFZF6b2I22Fq6gPi7qQ6qME7cWVB
QRI6lITfzt4RYsZAYdrGoDlti5yp8vEEtqw/rdCwgR2mDcARmSjGHbXiCCnv
QM6NE4TtsLx92E4VMcJ26IL6eFxmDkVooZQaq9wXWtaxbtpQ3bcp1lMpHbNT
B0C0wZY01LBxnc7EQDj8PKiOEIF3Kb9dHK6bSvqyb6M84UoBMHQZnBLLlnlm
vvPU+gCdSpLRC/UxdzPukRPcGg9SyFpoqygSiZeO/oxSqCR2lGjpT9E3ojvB
GPpkvQypddKVbp47ph79ji+i/mJIOK4D0QJ8OY0PE45PjNce4VMN7dCj+Iet
dz9epBXIY3NRU6QKNFKjFhUm9SG8+GrMHC6PpsyxMiqdn/JXQ0KUG0rPTMZE
oDbB8Zkq5oLSMGBXqLMQyBN1tM+5tjJwpSmZkpInjIqEM50jjzxSDEcUrK54
gbG0aUc4L+YUo9FD3cZjkojKgcEizpPCiRsrEQgYMQqEroiLOAoBYdh1JQvA
ArCgFcDB7oKA8bIJk7I0w/1xPxPDjptzoKzOKOqDesGCThQhh04wFi6LlFrE
fROBCaEBoMFAk/onAM7jEUfQVAHCPugXIR1TwxobM8dN78CQyIdSw6hRg0py
9VhQFsoT3lEpabOsBgBGBXTVEVSUDfsL1A4AqE2/UaqoK49+SQSAE5X0RalC
Sn0HUCfwpXrv5YHmfQAQRQLQaspnfgBIP/BVlAXepwzEU4IIy6eIdyTjvmIw
DQPk7SrphpiEXvxI+SD14yUmiHtoI+qDgzH7zHJbc/9ueTm8CdPLW5FkVCJh
OzLQBDTjlTcohFZJ5BGjn8B+5oWOO18AD2EhxzdR1gkUxcDk7Lzr6g48YsJM
kBFSIsso+EAUIBijdPbTa0BlxEXb+M/yUsGsbnUeKOyCTWntXY6dcNQpyQfd
iTXSVvNE8fZdl7NgRV2L2LfNCnOm8Ktk7+HvNF2dFL2H74p2YX3QfNQGMgbC
tqgC3ovXbRpUm6KGfRwIqqJWpjMeqQV1GVrUpTEoU/gCwMOI9VoOIZCNQX76
cpKAEXKSOlKERavBKn1qRXRHAzZGd8FHfVT7/khD31F86C3eO+1zQE/UsJ75
2EotGQjF/tUhMLgFwI6MLRaEhr0nhYNUJSnQyBg0Nr3TAWhqodslBwWhHFZX
74uBs9HPuUWmDFWXXlZe9IIyk2S5Lr744rJmADj6jHCGZ1VT0wdG+3QPz7CG
JCEoq/aDxdKYEQMAgO8JiSzEEoNlY8W+SCHFSdeof9jetKVUPXobHQAXQnlg
6GSYgeBqDG/4dW6dtAlUgfNkqBmCrjqY6V4P5h5a6TLC1TyrVbOIAvPTHefy
EMlg2BSWoaYQwBZlZ4JGL04MBvHR0h4MTAVo/Ozp2Kh1WUtw3+JgbY5gUEfp
ZwNG2qMUIZwRRm4OaJUEJT27e5r+z7lW4uq+a7riVfNP9TdrHX0/cXwzSwMi
vO2228a8NSTAGXN8pNZMnSgJrGYdirtxeeuDWOMWeZ1N73endqRZDoLsF1jP
rxcskMKPC06VLIbGxELkS30jY2T4GMTrA72jgQ2QJd9SUXQk3Eq3GGFQB1X2
wAdwvY1U4GNW4jrj6FUdSwfroJ/wpPyQvhSQAzfIUs+E2Cfvr+vnZqezu+xP
H9gh+oNdhUewJ2BUcCkYdyI8WwcxFG1jztqfTEwXHWdiNZIOTar9uqhRqH/u
nngzXlgW5W+TFrdgS+DYutIAdEigQvOenf6eLfZkf9B5MKTvH07jRtdTgxX1
rdbE1EmnYoc5om5GU11MTszV9loJQfOujadyO6FTemrK5+/4a04sDg8QPK1L
BJgD5/irWoR1c0BYDmsQ7oRfWSsS1jAgtITnXZPGGAFf8TqbZky7d3F4bgqa
xac3Kyworh54KZNHQ2E1GBhNUWzx5lR+3xJ8RYHymA2MLOKPQQeYENDbK19N
Ee0hTUhQi61m70hZnYwU83fZKXIrA4a6R4Ogkfzc04jFpcOoWRBRQJrdcMF0
mT3dY10YNeTWWWC8Auel9nP5rj1/e+5dWwwViBB3vek+n9iOaVCXsDhAvjwC
8iLm9IWKYK5tWfayslK8n1VkvjzLzyZOSwXIsV3dHQXTWq3EMEgw0gizYRqx
RjCTD7dT2gBsAYnKLmJHGH6NbCHFCSecUNA5WqaWdsgJmIDBhc5VBR5tHGyk
anEtDyhxbU99FF50jACBEGvvnnno2CxpwWEjdDQQyxvRMuykCt1BEXo8rsvP
VO2MDymkxarwXt0BX2ci0foLXU8rlK6jotmT1lelLq9KN9XhCcCfrcZtRVvV
+YiyNCr8gH6sRXtNODZO2qlvhw3PdXc9LE9teB/8gwjyPujDzzUC4GeejzWV
8B59tNYgn5SoDKhUEzwG4rDv0qHTUz04XfwCuGWebUQzWxhoz/jw4ijtIH0A
GvKEVgRaOtwDx26ZM23A6kXrME3fYDQaRi+KYL8YNW/A1NjAhdRpgpuDGVBv
EbIowMCAcbv5uTye16zelbIQUteljSB1ZNGtql9DzqouKwYNXoFO/N+z07yz
rhGkGELVN3RbH57N63V3wNP99YgVQ/X9yOPOSYwGrQP31BjAz8osDp24nFhj
yHSinOc6s53tVBJY7EStGHkOqBI3CwKBGFKrGFeUV8tuIqwwExCVn51YMZLu
RwF10h5dxD5RIu5K1rY2YKqYavgXOfWKE3h8pA+yx2g61PSk7mi7zpPJNom9
kEnsSTgPQVQDuIm9Zm8CWpUsKUPyoOAsDhZgYQioj7ZkdiKpXNw51HMXHSwr
U6ZvqRRHMTXg4dexild7wuKiySdgpkg84VIWDYojnz77iC+ZARIf4rx9u4d4
Uif+xDhvn050aNLRibRjBGQkZGdV5pHTHTaXFJSYSrHkrPG0v63F5q/JiHyk
57CdO71bota1GRX4RzqiOw3LzuQMcF6uyeJbOfrpLsV4UdoY5fvuu092ZDYm
z5fqova0m7Lo6TF3BOkL8Y/BWtxUv2V2ZMAhySsCm5XauBUReBeADVMAAb3G
uai60azZMy+FhzrxH+1ZVjksskj6EwHQoQsRRvswR0bDdKWOahYkdhw0HNCo
fbztEhaKkIQgB5op6mKvqfBVbhaBuFfMQtyq+aB+gyE65BiLqyhdQFpj2DBb
Ism7RY/AQuPl5f4nLhfvp0BMcJrsN2I6EwK7yAmwHBqo4kIyUVsXHVYlOA2s
72aO8tkTupgjbksAgtRJOrGTFBprVqc9dCorweKlgtN4bXUSwHVCSvo9w9sN
CqfhSV1XGftDPUTeBb5pm0gcnzY7LxZOz3X0g9JLoy62JE2JKGB+5xLbbKNm
i23kL9YhS03+O0DpwpYYHo7gwGT7u1p9E/qeCQcgMWYpflUew0NgKde+E9Vw
M2nWpLMno8pb6zH9KkQhIC3ljXZAM8aA92AKrK0LYUPRcu+1RtCsKkaVej24
OVJipD1V1bufdDgEb+E+EwwjJA+URTfVfNVZr4ibgWgYPE1zIdysomUUhW7f
HtAwjnotAuk/GWXJF/LWd/gYuoiSlt/y1xLIA+jSVsiyj09Go+3TLwhQWgey
H9AL2sVEHLoA0BTP7WHXAXJQ6widSCsoSxDZQ/gDc0hcXrgE5Gzvi9n0Gh1r
EwvIiBUoDDnu/eO2qFBX7vFsSJyPZaWMiAol7Fftq/TyjJQexTnihQCG2/UY
T3aL/qO71LdWEwHaQz+2FvLBHfYbNDtQIDwb1YHOA4wbEYjls3TVhs7FrAgk
LnHVFb2nFqHUGLQnoFqxXYCOXjHUOY8FNVEaL6PxpA8yXoLYlI9j3fT/e7wf
KjwkTFEFYSSQ4ac5hSjtUObb3rHSZy5cwNpZ83hOdvecyIlywzIbZ7W7dDLM
EO3S7gYdT2k7lKjfoao3ykkAAdx8880rfR37wKkf1JbuYcZAubLv3HkMDYnf
xJGj10yHGV2NEqvCGss6m8TEyh3FsKJA1Efdo4j6LghULGJxwHK6F1gyFz4k
O+Fmt1QdKuu8Ywn7sO9QlmGhD5vvyuC6MA30DUNgoYUjscWepO5gbulM4cjI
qlFmlMARvhGGjwV3Mx5+jBswUEU6qihug8XatsohlxT13eCHCxsPux02joQm
XU2T20FD4keLxZGYYU+SzMomNAFHznVzICF3wtWLxZGY0rU9ZxUSTGhZfzwl
uEAzvqarw1R0Z/S0L0wfNPSixpTj5P/i/unwStiCsnxJJfCCJcdsTAdWVY1b
fZJaBHuyHZCfiJ/fGr4yoAPUHDVbK/yBGsdp/yUIGi/HEUYa9orwSp3vPhqE
DFPvQ18RsAtf+fXJg8I08Qc+IW9CbqT1VEntuzO2WKBLv2q1sCYsQ/iq7TKv
J6KDNZPoADn6TsvT+ScxYwDsqRNiHhQuWgj7zrB5l/1+OhCIdSE5YewU859d
5DRVticnW2kKRcLdgpA2tUcNy1iYSRc8ZeDtpa7J+sHNPrIRrZ24jho4A7Hi
mAoupX8hlO8LTz4zMsjQVwQZpF1OSedh6Xg5zFT9Svw546hVTjuwEMeSgoVs
lNHuCuPcfffdGmAfxnEHMYWBoWGfJCKhsaoZPCPEsHkQodkoxrPpNsyYTRee
Ibej2FisJEApobxyMH0i7RPVtRAKOkwFDSCYgZJq7wrMvKLK3+whJuCl8xrT
h9oXnvMiFLELBHW86tOeSIUfEBvwI/Za5sNQ4QlDJwbJjgKdl0lKSxlaRRCN
rVSrg9yAnZzLpqoVx2ibf6lT0HFaeELqx+mxPKw8UAMAZ6IgFwYzoQtXx9x4
86RufpCOpQwE1stHo+Z2ylLhrgn5MII999zTZTu3AwmprEDH47FVNkBloThx
OlFxSUQUVN3FHoGPwt16ndQ+e0GkFZEc9yBLOx01B/BR8BIUQ1veo5NllwWG
4jvGxXSI7G0V+q/3HLJsOiF1W2+HjdB5ALHkHMVEdEclqGgGWe8oABTrDXJP
PMtCdCweVqO9fdHzre82GBb6EWqg5KjepyWvF/Q4KPpZqGwU2km4KcmswTdj
9Y2Ei0Y+CnrUyEfHzE84S6P8eIcKAPzikyiALBW2wdhgpT/lhzh1dIC5QQrL
sXAMFDsohqwVAUQyjbm5qw0ipnzl78/sO5leAuthIwkyAkzD5ckRFK30l4OZ
KYb2G21nqVflqeCs9tSLVSkusscee5Q56VpXP384YVhwIlyqfuNOUsYCpje7
qZJA9BRZIW8eE+DAkDPOOKPwOsDJ080dVYUqbXlpIlWREuXWG1tZb+0kDqnJ
uVgm3khRHzFCsvwZ3jUGn0chUJ9d0vfwAsF4iZV2p0d1hhgA8rCz0sbYL4hs
hC1aW1eztX7cRFpQ6lZcw/eOAxHgpip2nsS8FbYw13Rk+4gICZ3zYTHZRe7B
x6ilu6UaeVcfi6edENpjC3gUo+sIVkfDHUbXM5DLpqc6eKUGZEJVbMtRCwLZ
oBeoV9lQVb9R5GOTlfOCuiIB4T3W78cdt2WWoJEiACV5fXi0E7wOIERJcEzP
+tbYsMDLEvrTBx3CkWie66vNPl+hoo0XpoLWkXyqUN369aRpZg0MMrRr+iBY
W9DoXrx/uulTOAIXMJ7NAAEJ2dHi6a4y0VegMl5Hvhm4RDtFOfiXn/kexY1B
A1uAITbzKZFqIjAEt/GHii2TqIwNVqRIJ3Rl1upOXYOq/ei45d4bug65AhLw
ax/NqKtFnmIwiAG6GKfDREHKnx99HLZg/D2m0+ECi69KiBWJ5C3zzRmawHRU
RunmX2r8qZoHQvI8Wrrqw95DPnwifaeSeIxmPBeYn4liGe3KWEHu2qOhOeEb
wHT2u9IOeqOxYFZJA+sISXz+o6njMV1S5UKYiUxTwLKWjO5sGcd9hqBJOKKm
DD+zJnkMeXQoAkxrpDizwoDAJVLz9ImZi7MgogDIJkA07UPDiMGlqv3qrP9U
WRyGQRNUGmqTLrSLHJRJvLyObeE2oZaF7lCJKgKWPvScc2oRS/VwiWJmqS8/
3Xc9GboICrNQQjyEG2s0hqrg2bg9eNjori+HIx8X3f7MwJgPd2c6csnOdC07
y+m7+juoDann2EAh8kHRXd8pR4xBm7My7ZalNcM8EDTB8wJ1BHbuUydwLTqh
uOWTCXxJRiQn5jtowVXZb6rNBkPFy7JZWgRGJaLFBE1WtvCeERvQJwLP2Drj
Wl6exrCQRkXfoNPR1558HOmDgqt9+hxaghZFRIIW1cjyYMeT+YUr4GSjmEAu
P7JomjZvNDnN016ZQvvErVhDiNenOOkZmGI4My/JRBJL/EiW1JuWVJfWgWwH
S0kiVuJCCBq7XetJ2TJdkotpRbEhHkQLwrxH6vWG5Kw3yVyb+K8H7uoUTSkB
5Y5havafnSFhMSJLwCfw/nx2hN8DXsE38cA0bIjbzo5WhHSR7aEdWYuoPYmr
IvpEWFQtiQpi3wqOpr1zLqZkSJAI0214WexONACqaN2hso1Eqp7O0Q02QGf3
idKrTIOZDTcNUymEB5xVl0wUHWJ87zpzVQrb0AZ+6WHU9DOLhe4GeLRe8lTi
Q4gi8AHh0NPoUG2bg3AwCnjWF2gWM2BmWBxMVChfYk8fkpBpbg3nkG4/CgFV
K+nmUVwgRgdL92gdPc3A2FJ84403ahmQrQiosNQ2d2kdps0Thk3m1TrIPtbV
BqOqYPAi4oTPTXILagFNPMYRd1lC8AMPPNAWqpU4fFCOemzK5x9SxyMjPZV8
dwXxxQmLIX1pdqxxFqfpxF2IFAAQccO7AMGjg9kahIpDxOMZejyDd8p3o+nv
7kDGgjVAWcMJnB0CpAMC8r3RRHFVaVgcIJiNsBaSxIKg5wnzgP4IhcRC4noI
EZYLU9EvxhANgFFiavhsDImpgfi2cgWrcfAupBmrJHKg1XE5gHVOjugG1kMB
4+iErM0D1fg+tvM2gWqTqT9vl/74/+d73exulqXvMHcwAosJNfG4UQ/WZSLQ
eM9wV1bvgepxWnqPYuhQDI8f5jn55JNHE6aZSKKCmmdRaQJS1MU4REvqI+Dj
SbFCirGqLSJKkAUaScyAORA6ie1QEfFGKhYcjVcfZYGf1E4pH+LcubB1pD1e
jr1Nw0aKCligznhHRNCq9kFmF4cU+4/QV3KmadoaLgSsPv+J8RIFx2wuFi3i
v9dF0PysQgEJPuyEzuYQBPKF1NyjJ4gbI2ywLr+HBdV3n+BH3SPBR8ega0B7
nLuJECPMrDWZCOb16z4axoHQw28oHywjeloC7/pK4XT0CSHWmHeJaHCzSq+R
7mRpo2qFlABldAlIQvkJplcLv3034SOlSx5BW8NVqEnylVAPA8VISzp0eXk7
sglRmRiCyYJD2PbNc6sxJ66rsek0QmlrZoVSZxi4hFo0aWvdXM1wVSoWBZ7s
IQmI/+J9o4OYHvCEKYliWjj6EcWkp/qMkVMtjHsyqt9CWZvbyjAteS+8ikXi
1UBFhsKrpcdEsrBYvUZIqpg2qEj0IXwFzMTARFU8h4GYbVZXlKHibYA0sE2I
DUNlpXmV9SOWCgtbJl7K/ZaXtcQ9ZnCsI/EcfB8G2J6fujw9KpsioWIy1C/5
W4tQ8Sra4hvAqtgfgQCE0g1DDLcMKtewNMPl1RoChEDe28xhPryBfnmVznaM
hT9Ez9loNhHYhjE0TdMLtmbF/bSvmWhoV4HmSCRKHjBqHQsFRNZMfezivwAG
953mC0gk+i1j5yWMvritRkL510e5+/1FHX+GOO+a6uwltFEmWW4Ho8pAqx0y
qfdK9lhfv3d5lkGNm6SGZSijgdZR8zE0pPCtDCWGZRBDCeqUfqpLWWGQeOeU
30rX0WM6MnlQQykFAh6rzy1mHPJDX+XtYGxPDfRanEO8HcyLzx7pAt09rVR4
CLnuMKHuPMUoEFaMcaMBT13tc0YkHyhVHTJel6zCAya0q13KyTcRBPFbQjsi
Qv9MJVYSa3cSVXFic8wRfZiaKmFfTNXaznlr3Wu64/VtOF1x86vOQ4z70FX8
Vx9lgOfI0SgaCyzdd1mfrssetohoHrAk+i2yAv0RFCOs/pSw4qh988Rtbjaj
kXwRSY3f+sQG3QpnRLMOW9ZnuDOHOgKqIzegleJAgx58DvuyvnXhC2kD+tsr
rOV8V/Ed6u1Qvbr9OK45qhs/Q2uJceW9BqMyf/9WDzMsUmzSt/d5P2CzLmBv
K90ImdvElXXGBBNqIKFJpIajr1Jfu3pfVLrUZ8xqUyqNFXVEpwH0VTAGY5bM
WS5WgqcjH2lIhpG8m/FkWoiedI7hyE3raxwwx/WNi0xDJwqK3PjsdRkIP4Mu
m2CthiU6qtvHmhKiY4zh4CPF7M8///xyUAmKmUXefffd884Bl5S1VSVElB4p
f6ZbgwbIRRAJA2BD0iIgoDNVmaocUnOayiUNCwmQFgsKqmCjWizCmzRanAzl
ECjQzvOxkeOYOJvfBMuA1hQ1eLU7arhrhXTlZTwsoV+c/KaWPmymKjlkE3xW
GFjBZQwqKJKqmClnFHph+REIhqg8yxo//oBqpo6U4R52VcdE4XkkFrFAzetE
Z0XL/Qh0jQWqwa6Eo7ToeBzdo60mSr0jwXp5sQr0o8mpsPLD21LPcRmItcLm
EsNZNeYaDCFUkVLMSufyedWp31TqMxuOLKooIsv2sk5MDmHDEyQcsrZ7kKWq
CcwpKYfbCuwy5BXzyCGKssvhE0XDYclQV/DIaIJQmRSAYVMbeTtKfWA6RF5I
IrsX4U4l5EbHeFGgdky34EqsJNCJS4OK57ogUgC7NpnabkqDsfHcoXFROivS
I9BQxkGywL/oKIYixPc0nwYGLOi/+aU2/f9+HyBxYq1W3DVHLxCLASI4ZqtH
0074yWS2kT+0o86fmOkeesuTLMdZzlS8hSgPkW2ihiS8XucjQOeiUIu8ZXlY
mcwrfA2ExG0HzRJsgcb8jNCRLKguL4YOdeUg0SU/gs5nmY9j4RWYIcaEc0PX
vAIHhlkjam9729u6e6WQM6x1TF733cIJP8Aj1C7JA3CNOEtOdeT7MGyrkvDA
8OTr2JrBNGQjkWMUksPHMK/xUukKQQzxaFsWvAh6pU7H1mh5j0gLObDEKm6L
KoIV4kSMUXSzfYcW1oHrcZMrGob6KMWv5pJi2uGbT/D3qE8R5xf4gLr0aG5c
NVV6w5Z7DyjFM+nvXL2Mz0hAipgLzpKZrB28G0I2vLXvtEewMYtG6E8chjSg
yXiOboml+LHcEeqRRcVl6Eg6r/cFH1DSH/BRwtOsY7spbrxUgjJa8+ZG/dwS
j4fU1eU6UAFsfqarUeaEtAMkYQn2nmDBYUwj9WudiVBYBEz9nI38/nywDL2y
XmTNWAwdLMf3e/dcvAIbh5M/iMJh9dtdaG23fE93DNALfVV4WnasMWgSFui2
eIuln59b+IJ2KruQNBM4r+MXa9a0V25sjDRHdcp3ucyGv8fLBQQO+mMlIN0i
BYZonu4sg30jAk36xjdoaCdRhwqS5s0DZbVZtNYRXiYYj/GH08l1K9sUhbc+
FTYHrvKhrrzaJ5j+73WYU4HpsO5IwpoB5XaNMycChnOkGfMK9BMzszWW/GJM
YIH2kNllaaR0KTaCHUCuAASb1ag7wTKVtStOd7jEHdkl3OW13/PI7kARHnmu
xKJ9/0undlbAQVu9IjXhOupwz/Q+0G5o1OjW65RD8t8y1KgeNMNc7xL4jef0
InUcN6gSU5S0nz82bx9TgS+xR/HGc+x+vZ9UVoYz9rSDjChpXRiHtBJBbzYS
O2/h8iA2YRnNOjwziBzMR8CdtDeqXCXO43OK3Hg5GNTPXFoZKAnjcTeVkrRR
vLYMo+E1IE6b/cyA4rK3vx0QjJJwBzHSws+7GdkxNMVn6FQuz7+UkBhWBdMn
HpZ+kliIX+mTdUMj95u0h3xixOSRZaNDLlheFfwIuoLV8I7xIM7yh7DEdZBd
sIcsU2b3iRIRdUDjoLQ7T6QYirEwcrPBkgAc+a8zOp5XNfMMChWNGRVvEfKq
8aMi4SAibb1hQDMz/cejbSxP592wU6mdFpBJaHMmu1r/W3ou51hhK4gLZ/o2
p0IY+hRzSx4DQfNqTbi6iF4OnE/+3F6mTdmR0zcrqHXUfX+kHu1F7sxYa+2i
eL57/mnkBvJWtNjR25H/gtXMgI70HTo13cN5pPSAAYlnf8u5HY1NjSNYlD/E
g1ARHOc2i9v7VH/Gc9lFJ1aBCyTA5pipgDanVNbsDInGZu5GzvZpAaYUDIvY
E0ElA/l6fxl+Mq4gSErgTBsmCkKcKsvvrJdYA9ahKxXQ0xVuCFgUtkEWbQjB
FVnW6UfnrOPSgGFt3uJeuiLGZqDT4US+ShPvjBaSGlxMwY7R0A7pgqslNYBb
tgbFdmFnbZEaQoi77757yvstp91o+99CFrAqHIhrxwCIniMOv+OMoN0UKGsi
//zL9khjZN8FtjpNEHNHdJDB0qcDzkQ7xALx5D0wEmjcdJhOmcXaOomNQW1w
aTq+9XitH1vIGiGWhD9gwr9cpAShvvviXnhEtHiOzxd+JcbHOLU7wtd+pHfx
eRl/wKzwoy9+EgLtZeJngof6A4FbKXrT3FL0S+dGtDXiyAugpHPdeAoq59Nt
GCgKHb+ZdNe5PnHKgWpDQnuwNuN4g8sOC0/KC51MqIUFhEDoSOPC0fSqSUHy
tMbUdhKJtTXIPLx5CochNmh6RIdR8TYsJ7ysf9UN0s6yokwvuugi5acw3KRr
KfNUsaOnq1MLKWteBzfGUl2gNK+Pl+EQeYJ2dTtEJIoMoQG+p6x5WWq3LCkj
+sP4EUAhcIthpADQOP/lTj+GAieD20gxoi3R9rjOZtif4m/Ao4bEvGFF9QYE
mz9AFrqgDNFo++pFsjqOgoenO6wOnWmxi68Vz1H3gwXUWoUVn7VWKvmFACEK
7J+0O31W7ip9xoMYIPuEyqCeYUhbDfYdjifSkUFDTm31z/e5oH7IWcftG8xZ
yCtnLqaTd8CYQP8kN7HGoAZgKq/ilUgCKn5rf4YAB9CX1/J6rEz9DKtHGD3N
4yWLWojxlDxDHB1+Rt8bfYcb+vthLEyd8TMWxlCPBUhYYGn7OaIm94+dI8Gd
MCzrphpkeACEI02zYcApyadFNcIzGWDk80V5DvVftFb7uWVuprjSmULldYyW
f8GbqYG2zam8IQ4NNu2Gv/K+c5wpOuIPzmM1nA31INrPZf42EBQBEzOmNsEj
jjjCviPGjcST4e979s9yt30KfNDPs+Ye2Zyf7fmrn7gDfHYYxhs3Zsrb1Z1t
3FAW9bRP/lFaserEjkU+PRzqP2uYXcxKrw76mcUDG9PZw1mRlhEejdcu6pml
WP5FPTM8oRkqyyzq6aEQfsnf+Oiqp18ZlCE8/SitnYnVRgy/fXqTMS3D44Zf
mZY5P49lDfcrWzLQM5uGQC/qmU3FoGycTv2VQWk2Hf57TBuUR50lHocK7zFk
Wh7hZzYNgV7UM78yKI9dg9Jy3Tcuuar56nd/zB/rgv8N+Nd2/PVrzTcvvbql
wPPf9fHm/3njwfyxzvjfgH9tx1+/1rzgHz/RdvbSf/10s+vbDuOPdcb/Bvxr
O/76NZ5vO/vT/Te2syPbzl52wFHDG9lLhzky+2ET6mz/Tw9zNTfZaXY62/+I
YdJsI0d2wFCnuXSruZGdHXDUMMVpiNN82RIy7ZIvwB7p5/Fmp33XNc95q/2x
f3feb/1z09dj/Df9apf91o+MNs99O4di7bLfYbnZvutHtkntJsp3dKH2Pyxd
r89dvzV1vY1/bU3K19ZkeXgjX1mPc8/5tXl+f7r/EYPNb6L5f9/3+WbmQ8c2
e3/gmOYP//ETDHJkl/S76WZHe90fvftTzV8cdFzz7s+f3hx26vn254Jm/2O/
2fztISeywKkNk/r19MxUGj397P3BY1K//+PAzzW//46PM5ORy1Kbyeb33v6x
Zs/3frZZ++HjUrsXvecIpra1/5ofeZQ/r/j3zyY62aynnD4vtl+v+eCxzQve
dXh621y0+F/OhQcsuNav0Njt5+tuTond5iFDM8efc1mzhw3ASD+yky8DS7Dn
ez/XnHLhFeU83ZvuuLu59c5fNL+4P1WqNd+96obmHUed2uz01nVOl2XNs/c5
tPm7Q09sHngww6QbbruzOfSr5zXPe+fhTPCSsMp/YOQ690c/LYeqf/OSqxO5
IOGvO43gK5ZEnyt/flvz9qO+vsxp9MGTvtPcfd/9zd8cfELz7LccuhCNXtrh
l14dsofT6F2fO635R/vzhXPzOZoXX/Nz45FPNrsaW+6Y2qxudnIeOPdHKave
nHTB5c1rD/tS88r3H53W+68+ckLzz0d/o/n5hnSGWKKDTXyr9PjyRIM/3f/I
5p9sfv963BnNxVffkJp95JRzEuvAbpc4WXnVfkd+rXnPMd9oPvvt76V2l/3k
RuObzxhrHrqVN9vZyAUnHviFbzcf+NJZzY2332Ur8VDzb8d/q9n+LYdMuDA8
1ya73pj8vgcebP5h3ReNdIfMLWui3cJaTrSDd/77mz6avj/14ivLpHbc51Cn
3WbNDsYnf3nQ8c2Gu++FCZL8PevNhzAZ2jGktKJ/v+7E5tqbb2/u/MV9aWbw
qGaLVNCG5171gaObH/705uYua4ccWz+XFqKsb7a3Jqa9moO/nK7naT5x+oXN
7xn/GX+1vR2W3rzjPuua/2lSD3F+fMOtSfptRuOBduu+dl5z7/0PNq8ZlHYL
2/vNOgo3KYKRJ4fvTNmmuUtNMlraoYQ3V7vcxlchC9AORs+/+sjxze13/aL5
0Q23JDncRa8bT6pg59wN5JyqvvaRrKgGx0Amy0Da78acRize3370C7Zo9zcn
nHtZ8xxb+PEi0eub3zWH4LPf/n5zv7Hm/seegXIdD3NIb7WfnqA52Kq887On
pYX71DcuMj37MX6ffj3Ki0dR5/vNouB6p2C2NaKOPbksTHOndpqrA20Tza2H
ZT4G9D868ie3bGhuufOeZrd/O4rfP0mzsp547Liz89UqyKrx3LjzVg/TlDHZ
v9NlmGVR6XEL/9rNYf73bYf9RWgdVmRFD7esrL6DJs/IZEPL5tUTM27bs8q/
MwhDJLM+Mj6L/oeN7NXPZn1MvHXd5b59XfZPaapnOCvjq2sqhRHtl7r4n+Fr
VJAvkMREHfggVvSv12Q1LUi8ZRATrUor9d8cBMfcGUzydiY59sd+4u/xZjtT
s89680fTeK37cR8Y/IbUbPemg1uxnnJl+dEEKV70nk8lWvEztJbooyl5C2+z
brQE6HO+3rGIsvTvIel3GKw/NvuIfsl6fN1E0L80gSS8FTOaHntz+m5ZMId6
sbT/H/3TJ5vn22AZFIp2yhXMDqajv2CKBdv/T587Pf1ulb+O5eN1SOwL7Xle
h+p/Vn5dHvyK9Bqa8gpGxc+JFjYMzABd2P/HXMBZO0aFvX/JvxyRsJ5ZijFB
gX3z2rBwL7Zfv8CaQQYGLg0JeX70s1ua62+9I+Gc333DR0bTMk6lZWS8QMKv
mcV88JcPNQccj2I81OBRXjyz36k75vMn//ypNHheAUdN+CppNaIF4NXAjCvs
1T8zNMbwbEibh4n9wTs/nsAu6IIYiiH5mXmZ7uC0eIzIetfLn+M0aLlpqjAh
b+DFMKbzQpHaZ7UcNyIGFs/wvdF2oqz7oSmaBJlZOFsNo499W/MaMBQi/fE/
f7LAkcBraVb2Ff9CU/5lZeG1JE7G5ZNBtTPTT3/zYkPLvzREdzr0k7GQvKDu
RHJGAQi8616zfwau4QajypizXrQGf2dI47df/+G0DC/8p08UTjXemhL221fj
X5c4FaaGEM7Qm4WFBH2+/4tnNa80b8et6BqJ177ry1Rf6EzMlBGz7TtstKKI
IOSAaxHu7d1k5Ten/4951/yKwTzHB4pssDq7+mLb97M4dJe0zK2+fFbmp9Iu
aAOXgKDVYLL91gtR8FqtN07TrrmZ2Iu3McLnpsYtHuCN22UhF/fs4HIPt0If
/oXR+d4GOSEV+ZYFVeSKSiYQnNGOzj4k9WqrMrUIhbSTmOgJiWgQM4/102mt
dkzjzDZQygqKJA7yBcqsn6V0zyDkrjJtlDaAjOQSXyCpEy7NIhvtoTYMm7Rc
WLi8mFldyyDyM+/fpcCEzRMRAXJ/amOnn0QNN5LbO++9xDWG1CMs/d+z2BYb
5DxB9zxCV4l3IrXyyNUrGu55RjV4ZpfUSdsVbehOah7qJnO2z6GTRRzzIGjG
2xCmXZxY9ppXF5x7WHrr2g8d17zhE6cktW0/rwysxhOQgCVixXdJ404KTy/b
ed9oO49Isr+jy37QKPRGk6Ty7EVZIpNQF6NvAxr19ZC1IggiTS0tw7jpgoFl
ZHGo4/qxIh8779uaHGl4hLwFNl/IwKaKTVZR0ztcnhg57gK+9onn/XC0+eJ5
HPtg/01ewiFfOS8Zedbj2fscIicDP+3tn/l68/kzL3HiSqOsSOvB/N96xFdT
r+f/+Prm0utubL7+vSuTF56M3FuLWfk9m+t/nHhmaorT3s55IpHwk6dflPT4
6z9+Mq91hWQiawOHk95tTv6x37msOfMH1zbfv/bnyaE95juXNq/+6AmsllaJ
lXixsfsnTruwOe37VzWX2IguvuaG5ssX/Sj5x/gUxgN57acTO+z+b5+xni9t
/spcZUISJ1/4oxR2Oc/e8KXzf2gEODWBhEkfLaTc/5h0P7UBiR8nXbTSX8/K
vWbdl5rDT7so5XcuuupnzXev/llzxqXXNB/9yrnNbgccBVHy5J6ZhHyvDxzT
fOmCy63ZDWm0dPmhk85OrPi/P3Zyc8Q3vptoyWt3Tc5UxjBHfPO7zQVXXt/8
8Pqbm7N+eF3zpk9+xV2k9UnsXvm+o1MY41uXXdNc9pObrO3PbDqXpzgFoucq
vHnj4ac0t9x1T3PVjbc1x5x1SXPiuT8YhS9MfzCUH//s1jTTnxqievkBR6bu
pRCIGtElUZXvX3tjmvGHTj47iYjxqpaXWf6LQR9GjLDDRZNBhPk9XJOcuk9/
rXUKsqZDO73vxDNLDIu3EWrEbO0dsMyrDz6hOf6cWex9tM2JQAzgizjDDmKW
iaSr/+LDxzXHGd/teeDnknwV9t4vz/H/GHngs7Ov+EnzAyMj5IRX4ZqiIzOC
gaLwGCwO5jARHu0AxE83nzTXml8DHnbZz389XXyfN33yy83RJmu8hGleaOsL
gfFnE+GNchIM+ABVdfAp5ybuRii+Z3+gJNy/53s/YyNwLbcyzfVvD/lC85lv
fa9Z88FjEgfTFBY678c/TaR625Ep0Nia64mkP6HcvQ882FxkjNy6h5PFsQUN
nWCEh6tshFpaJgUe/cFPb2o23HNvs/bDx7bEny4I7W4DcO8wHfO+L57ZnG4S
e6Hx6bdNyBFJYkSIl0ATahlYf/hpFzRf//6VSV6Qm69890cp7PSKvCirgkVi
IXiFePgtJibo5L19GDAfK0M47ytGRtQY4sK/p5gmMM5Lqg/eyEPfOg0j8c3Z
lyYtQeCSIX/YeB9gBhMjBzznwSJ7z6HNe0/4dlKNr3z/5xMPIbYM/4xLr05B
l1cZnjUF1ic3z3O5GQ0qE3pDwX+3bs2UjIiycBJBSxjt741z4BSGwLDREsSi
kYSccGhB/R5G2WNtSnASrM5qvPETX261+HjS4p8yhcRMikuQOeEPjReZHPK2
O5Gb1nRiRl572ElpSSVH59i/XzCe29doBc2KH2im4u2HpRcw/lcfXJkKm9vh
xt3wG6KJqVgWpIh4J8vCs6YDElt/zgzcB770nWYfs1QvzZFG56inugY+2jXw
z4oGZinBDAwb+v/Zf3yuaGBUw/Pe9XHT0t9pvnP5dSkmigj9xxfOTG4/HHrU
Gd8rrHSacSq5DpaX8R191qWpjVFt92KHDkvoizzFJ4wTvnrRj5MNusj+ELNf
/7XzUzB9p8KFGcy+4B8PNwVwTnJoLzENjL35otmsd332NAWIRsMagaUOspm9
x4xp5qhCdDIF9PSxr1+QPDrwR350iySq/3LMGYnHL7fJ8paPW7vsJn8yLQj2
mHX9tqkuOORvDGzsYSroyDMuTmK8s7TdCsWDmjcbL37xvMuTCNHl6ZdcZfx8
vpmZYCSnUrjj4C+fmzjm8utvac65/CdpOY0XHVlNK+iY4vxIMVoNvcPyHGdc
hwL10N5IBHTAgY9//cL0TLLV0Nuk8f0m9S9I6mz9XxcVvq7Z/7hvNrfd/Yuk
TP7aQIx1Oe0jwOS+wRjyc2d+P9EJRkKQKAuBBm6xwgh+I604q8rqCqygD8SA
hKl2KfpjXfOWT30l2dik6g3UmKku5pwVh8kwCcmdsfavMmiBIBC4Lzp9s2YH
Q664zp+0ZfqGMdf3TH2hipCpt5o4JtfTQ3rIzKeN/9EnO+/bhp/zcL6apB2e
7sbcTnBo+q9HzRNz2xB8AmYJY/IhYo3Gvsf+PKALDKaTo480EfZ9bk7dZO/X
APTJF/woPfrn2az6KFemNs839gHe3nZXXrcbbr8rxWke8hqj801yeW6HfdYp
MvI8E+KbNqSzOKHpaOrzaY6+1qdco/JzJ577wxKUAqoCC1jyu9zk3HzH3c2F
xlg/vSUfgE62A2ZkeXZ1Gv/lQccl/cHnvgceaq42JEa7Bx7KF6Scb8yM5O5S
wger0nPkAPkod8Pnuls2NNffmvaoNneY0SXPmmL5BblPJg8YBcPnmptuT2tr
5ml5cNzp/t9P+BapxUz//ztlJjHj+pxjUsts6Q1wseeBn02GkA8xMLKfUIFa
LkQL9XTXvfeZijvOnf2knpLd58PvYOo77RmMMcgDCmEgoIbaXGv9Xm6YN1Pr
QYPrVyhm3Lzon49orr1pg58WunnKCgLhsSLPySnzJCxHfvPiAgquvvH25krv
/0EbLMKbNNC+62RscfW+Y1rnHlv0l+5/ZMjN5MgISYurf35b6gJMtXMEsOuT
SJpIj+hurAvMLvz5f2QAu1dwDcFRfKCYBMCEYUQSAM8x8w+a8pPCS3bdeImw
Ip9/WP8lqBsk4LAUWkLjs4LiSZTjL+7LPAx0/1/23E6C7JMJrcAWN3pa9WjT
aqbhMkGelJQd3qQ+HzHsxZtkHXEAMPZkcfiQgYQHCM0mGTT+eN3HTiozYP32
NiVlzl3JhN9w+502ypvTs3wYMYTeKUgBARhysOJkKHS/8QRSoNluMH39vhPP
SiCj1Q05Q8/zaDBUAVlNtCJtpiuECybl85IU1+0gXJLQ9zghkRj7tWiP2Tzk
q+c2Dz70UApIE9m810Z4rY30ljsyZfj+3Z//BmuoxyAuRQlYAz73u0q4yjgM
GM4HLzg7heuUrIGDDjolpV6LqwT/v858SAJMr3LxRl7h7++Yxjf5yU2fnsza
7W7a7n/wQXNBrk4wTooKPgc0Yln5oHCu/HkWGyYG2MI28R3gJifU1idO0jNX
uozcbkvK/wnO8gFAgad36oocNokVfZmLnH5H17vbDNDk+CTPf9fhBfsyO+AG
n/facoB5d/UYqZL6cG7EvnAGHhSfn1uf2EOG+G/HA3JLBAPXlUQ/6nz7bCI7
Gdd9jvhKYiSWm9kUCLMyETHVCrg43bjh7uYa0zvXeoUIbwNNZh51yLYqYTIm
yQeMJUspkZkxLpEaO8ncxO3edLCD4UwksIE+ttTlQuaHzPax1tAdH74Vi6dl
VW7rBxjmU1S5rTezg+AojLvvfSA5Bzs4gVkwwPL9zqFwLyJ4vIFx1MG3fnBN
+v6Oe+5LoQYZrB+aWENRPri/LPRuskSuHt5p7uE1N94mPXiTyc5td91TpgYw
xKV9jrMqkkA25tSLr/Qpr04WRPU4vPooc4Ofn6p+8ivwK152wJFJiyBcDLl4
ML+TYP0VpnqhBphRr9rhLYcmr1mGkVn/xF7DkHA1kIq8wL9IhuZmV4g/MTiA
oUFyCPaovwRYzLXAG5TyhGkI8khavm/vIAmhTAEe6oO2ovRF0OBWAzoEDczs
Cx7DV3yF/eQDFrrKBPUeRzHo4w+ffE6QsuyfU53DAvFh8a8w+A0D0A9KgsAJ
BWt/JStm0yCEdrvrbIAqugb9E+EFiARIf/Md90jdo0MxTA/4zga0HaHFXYvT
+5tJ3yK8eEV80IYoUMzE3fY8hpOQyR/b4iGhQHSJHEoXqiOd8OjZV1yXFhsV
uXsCQOsS8H2LvZPP2446NaTcN096jAihoAfjhBw/d/lkhVk1fCKUDlUKKK//
bWbOlFIs28A94vOOo75ehXQLbu4UXFch3Yybt+qEnPi82bwDQtxoaYiO/cZF
pjwoYer77k9tdg7AGfeL38nwxWGikOApmOWdn/26rYI5xKbr6BcfiQ+eyotS
9mO9YppCpnTL4ziGDEneM10fZLyGKkURgRlBt/x+B8cVWEmUDP2QvPjjd38q
SSSOEp8zzMn0IoSUmPmB8+gJ5uz82YGf82j/Ec1uB3wmKU4Tw6ke4MwannTh
5QmMETTmFTZT2DINDy/z2QVMTaUh4sTftCGXfP0y6ayvwGuud7dPqwLgwn+D
1x588JfNx8wv4x1gR7QC1gEngQ8+M/oWEwF+4EMYdjdTRi9+z6cTpCWwIPfl
JjMdOCA5HbEurTQkvM1E7m8+ekLzR0ZKyP2CXICZijFvd+1EiIz2muvaDx3b
nHjeD5J7tLNrE+KCkB8/9K8NNu92wFG28gb0R7ZOmo850Lc01rP3OSR50Fmr
bUg6nOWCE+Eq6Xb8UKIVsl/Yi29ddm3SVoxpZwXlc0L7TWZa4B4UG1jppSle
hfcqtLM+iahxUMHVvMoD7I52tkwk+IDhaqZErAzVIAHZwxiZ8CBKGlF9wN71
EdNKMmlMkdpCPvhsJXiZuQiYgU5GGR5w3BnJ5NA9qAll27jCZCV3KtGUyaRl
CLpLQHB6dhC2fmqOMxx7RtoEA4MhPy22Xp/4mwpRrNlrTbnA5xAc4r7dNAqz
QCH+QQ6qJStH0I3PmT+81pjv+CQff2KMBRWgDiEjd2witMYhQVfiFsEn8Cmv
I6qL1cNCYQbe+IlTQnAgFyeyEOjw+13MCQ0SyKuhNSCP3zOkAq1NWO3XhE2g
AL8+54qfNi/M6T0n5JOThSKpkm36vUnMXmHEf0nSGDkaCf8AQ8ikgA21rqh8
UYXZQwnQPVODzT9t7yaZkKieMJz8ucOSKJupcr4bT9bz9da/15D9eWr6u2mG
uPZXm5WRMSR4sZs5zbAgkR94iDAhH8KU4IydPQMMezfOAFATiSIMSYQJquP8
0uf/OLBF2zAPMS8+WCZC90kZ2rQI7xL6haTfM+kmILNzkEZyVGiZ3bI0RrRN
XB1jSZSiRdtbJYrKD+RVEW2zenyYohYb6jF12J4YDEGxqLB2SW9s4TbgFihF
Vq+F209MHrUMMf4dYdMCyWwMYBCeJf5A0hH5gCv+xEhI8hESEUxrg5ybFXAB
qGB859my7Jawy7pit/C8IT2/B4Zh7Nsym99NY/h3A91oGwL8LzJ1ADftbUD9
X0yxEmaEm1k6lvv5ablbv1mAHd85GoAD3QCwdHCzgLfk+9jvXJIRxWdOTZyP
LD/f6AkLYYTwaCS8sB0Ci6OmfXZvybBgN/cB6BZUca/DQ0woagcNh9f5l2Z/
Tv9+Ttjhx/2ZCQRLT9zs5AuuSN8nUG7L8idejfZ2GwqBKd6IGScnEIE37ECk
myG2uuQZSSJAtQyX/KOWGXwnLYueIg79Erdr4DTIzNiwf6lqxSSA/Bd27aF0
7uUvU2l76zSsT0kHfneH2dI3f+qraSw8i3KAnam1NYMwkmphTYcRFqAfcCoQ
BiNlFiBzw7aJcz7ixdCoyn2sS4Txxe/JXcIhqFeAGXEbDQX4QNQK1bnOdBhR
jxd5KQhZXbQ7w2TVbNhrFUd1+Qe03+5o4aobb03CUTZ//HYi+B/liJRrzvuS
ZaSIAjlkgYnlYdSJkQKGXvW+oz0seFiyG5K9r1of8BXExfQBDT9jhDr2rEuT
PDMbmIcPmhoNyyLxDrS1IlA4hK8IIByYykcgXAU5TI9233UHAKeXn6HqS+zP
6z5+UvL0CDgg88gIyVtARioseOuhHYhLwBzqE2OcA4nPt1txg2xZhcRRI6ZR
x7xIVgFVlD8zJg3J6JD4HhCeFdLq5IkzOWI//JpAzs4OerXWlPSTOUjCb8h1
Jz2+VRJIMle3mqd8tuk73ow5KgJk8/+GPfqA6TMyfbiwRPKTrt1vfUq7EDdV
cVP2DbG/ubruZ7fdldjr5b5zZ73Rks+p37vSfMLDcjAn+xQhWOmqcnX67u8d
h4Oz6cJrjUs6HN8JjI7se+JOMRsM5MeNswBg5CfAb6S2/yBHUEqVoPVCLA0m
hwmgkf0mr8xTEznh08ON18k+IZVsWcDy8/mbvJBlUDt79B9+xVkVEGepsGWA
869+90fuz7RLBb3JtCC1h5vUQ+NkYvN2J1lh/dk+seb5STmg23779QflCk4z
q6mGLITPd/XE7qvef0yKTkCItSmW5t3n6BOrdPYVOcdAmGYeGD4R9Mkf2kTw
VACbqCRSChgj84rK9gbv6VM2L3OKBMbR5V4jMfJKFzmBccbIvIz5cyrbWOp1
Jp70DllZsUTWuQD4b6b8K3gf64aWcIqWlcJdZ68Qn88bYNohF6JlctnviJSC
Dc81mhBpThkCB1FoRySCaiZYD9fKtNaIJAv9jKQA9Hdq69u9inBdQklYVrTd
9sHbJc/5e+/4WGnb/qsCuRZ2Z3/lfG3oK23/P/beA97K6sr7v8PlgoAFjXGc
JJOZeT9v5j/zft6ZSWxRQI2xgV1j7D1qYqyxRAVNYgfsjY6KIkjvvYsiiiiC
ihQFBAuKDVREwee/vqvs5znnnnu5CpnMzJvz+dzL5ZznPM/ea6/yW2WvDd9D
Ku6HFj7kpj6u0bbJfirX4n7xgn3gxpeWr45nNG8Y8sZYo/MxlOHmU7CQx4Z2
VvkHXcPPJD29uLVA/Z7qAPPiHmHo+V68P/DpBbqKrUv1RCjY4madS4Vh3/vk
0xLAzXY0k4PeJxYmRh4DNxQXmolpGRJD3zV5JQS0AIbYxSjqwwAal41JiaIY
TTfxjgFsgKhyrI1i5TMxgo08LRQfAYbAeKbgnikGtsuQdtXmofbO3xhqF/Ur
YZGfaP102p4TxWyVUHYU3PMIoBpyAsEQz0DaZnwe1YAnTIRtc16ttJrVvqbc
so8oCmYPCF8v6vvcrsNTlgFGIl7FI7Fra0VvR7Vg0wKVANkYNERLRKLKiP+v
ifhQCMi16etNyqiqxOX+TDf2D4EGi8pdI+oCgl4XkSdOWwTZgJZnxHkmaH+c
x39be70rQOkL12h7Fe4XlUVzPbXrsbeqY0qiSYOUrJ9vsKSnj6MqeBaBiUoh
zcZolYGJONH7o/Jts/ZMmTuqDHuHlHiRQl0oO4L+lUB2a4/T8miWw8IYeVKH
jCPv93tqfuyBSdNWfPnS6/p5gGyMFcgXtxQgjdaGfK43qkJ+Crt8FY8uFTz3
1gdrS7CEcZa7ijvrpXjGpFXIU1BYUm4QiFPdN/ZZVcxzhNnD5eJzMD6yU8LA
Napr8R7xCInZYspOTKbMZrq3h+FylLpNHkobNjMBcVApYUd5v3nBGmIikAPq
WkR1WSUj9SztrSB9kKgxlCzQhuu5bV8PH08QoGFxJftOUWeFwiXSN+PVZaZt
MFfX9iwQu7nGhzH9eRlARQAe+Hu/6x7KuowzkEveFN+zVUFd8i8i5opNb7eF
+Lu+XZ114W/WUihl0QIjTKsOPRWBmTUzb6ZSADyCdIwOn4zX+BeXeK7ICbGL
5mhBJMg96SICEoHGYA2gA7gdtYgQ4PyrbKtO6KsFBwS4r33csg0E7uSRUTxu
QNhmGlVTLD0Ijdgf3IRqYZRUlmCvL7bM/3ZO3qL+/9OA6dgJD5/soFoFgIMs
4JTC6GEzWD6NJ8uSUUI6XYj2ju+mQgACWTO82LhNfNpLOuwRzQpbAnvqxmpu
CxPzuqjXaA2ZGzF30uso7UZhJ0TtdXlr13+hQqB7agumDQ/18y+sHsKiNL7J
o6XSGGLg0FBIS4T+DtGtlFKi0wmA8Ij9nGuwoNCflwyxxrkGolD9BHeMe3Gx
or46EHNVcWsUmUhiRHgleOvULxB3Ff5uWYDMqFYsoXBHQOYZgpSO9vj1yRUg
MxnkPdOWj2bJs2ZSsWWkDC5XNSosFyPjRT28lom1T/zcxgdOFg6S4tDv45sx
j+74uOoomO4W4WPwDjnL2DiDwYBbmDACDVRgA1fy1kqVdvCzbU55WGu68EFj
6xqInIAzSyjfC34OYMwIse55JWRL59uHNFLKi70gqVhTfg76Ux9N8LMUMBV/
q0oiKBwKuU5gHIuLneXJMESPSXNVplloIFKbPF5aafN6VCcwGOqPSFp+KNxO
IghDhRnAzgEF2A/Ayn03MYsVX6A/P/5sfTALeSPw4N4Fo6S5J+ErbCHlnfn+
3hbkUZWZQBm80PxIwYE3PKJRYdRwKR61qkqC7qR86YRQC/2KHWW1hb7pOSxr
IBA0IA55iM03x707fivci0CQPoEj8TGb1QN2o9ZiH6+XJLdH+RDmDe0egHfP
q7tpBAbuf2bRKrefpk+hBfAJLxlThsYnI6S7ueW7sDalTwsFsV3jlpV6zT0L
222LqBY7BtsETeF9VBFIADY54jZtcqLz6e80uLj3GCx3oht0oND4wwKSRSYw
ojjOeDP83drlhM+7q6ezSR3PH1/RJZnq3QXegaJ5XV2CYk1BRZUD24T4Xuys
Yow/E7UZu9oJF6r2EBdQ1i+mx2WwIC90mm9/qicsvFOdiJUsGAkV2Eyn1yHf
NXO9J1Soc93tSt0fGdse4QYqYUCPotsaeY04i4iRnLpgmRMqBCrXFtwZgYPZ
X131XqA77tjVgwx4Mj+9JvaWYBx7adgJ1MdALzM9lPRVqzRRqzGDIHgZOP19
ps1jcMcXbOdevjcUnQ7Io9wXdAB7gMzDQeDfq2T5IpVMQcpve6idiJ38kPEE
jfT3zbcd274LGIxY4tzX39Gyl3Y3PaYT+Mxd6VaRwLWoGwFO0h187Ngh1Eqb
DjZ9gBO+en2R36L94pZL3lmjquWcB4hUdi/umtzXU3t/OcAZ5KIguO+M+Uln
ta4MNhslEeqlGd9Qyzi7xip/q0aYtVz8jpWaWAWiOXpEJyk7AdeS9YEDQRrI
AOrqUlkxDBSjhEO5Ft7n87y0Zdvkx2A2o0EOS4czjmxBMFQmIQThoSYqHNVJ
c+ybEnOlqPOGgaWok+uZnlFlZkKd/Hv5w5YP11CdMNeN3o/oTwOmllTbMnUC
rdREUvZ8jFUoNnM2gMOZBS8iE6ffO1Sr3fM8X0ulQF1Ik9Sq74tI7HSdR+2J
5fz75Q829T30rQv2ZsSchVrG1Eir7Jqbdy4oCrGA6/b16EJXZxeLz/YM/ceo
ERFkgSIz5LZ+pNlMUQZ4WhMDwugyMoU/eAIX9ND68qqAmxby6aVVsJtyuEml
FGzBfE6qB24GV/MZoWNe9FJiZhUgZ+Jqdi8JREIBkocQjVuVthGJUQDnebBX
2wsIh5zX1Up/cLaPEKYn+mO603x5ikJ4tZclgQs+Xf+lprGwezXOzFZG1FMb
8oTD9+ziVfo+ERRC90R42EJQYOZWFZi5CDmZcKu0PXAH1VXdJsxRc9ZtwvOp
tkBLggVG8H7/p+ZrJuQKj8my0Zbt6ZvBm2El9vWPEUmqc/HGiKhTaQ7v50xd
GXTGTkZmChICESF/WBMogTV5WtjLdzomsS6E7bYLDOpRc1SqaKHgIGpTueM+
1/ZyDqr2cECRkAZ74RTyq7zwOVlTlBaKhro8N9ZVRSNBgJG0DOVddWFP2lPE
cxg6lHhx2dtad6Ve+V8Ae4LTYPk9EvbcuRL2TN8Bsz/5qtXHdh72VHbvKKu7
CexJ3ucGb87Uvu9kxmFq6DvpNtgDgn0frFufPf3aCo3AvfHuRxqgZvf8nh7P
4LbAPPQN1pz9K3gkuZKtDEVDvFDiRPRBRSjpPa7WPjTCBuM0tU/gQ9M3pnWN
yrtqzLUuJDpfa1FyJMpnOEbrvtigKQzr89RNTWEbtxekNwpo9GiXKEbCgqFX
qJPAcqZsYNMUoWGC4GjcMNvY17OqGCw6V3QHr7EvLEmdAeoGoz+sB4z2UTAK
oYtglFkg7B9/+oX6pGD7vd0Uxd5qVKejUX0fq0jRMpr5VtG4e0X3jcYlCFSs
XiBQRh4pMO6WtwixJe4nHAo7qJ7/feiLbVJdMdLH8hNH2SAwArghM/iFI89o
UAFGxqFm7zEhApKQGD/MCzsxL7KdJcotsXfulZWrlbll0tsnvZE3Vgsjt7dH
2WBqYlJ7yIwArAChOUvfdv/JBKG16v3uOhxeGE7Cx3tdk8eBmRGRjIaDzl4K
uDCybMLScGe0eqrZGmCzvn5/DYpu7qQfAzgjZ4241AE4jfl09+ojao0wASxr
ut0/pxggdMJiOPBQMKiZMPkKZVDcnr1OGEf8W+h4+3DT74QwAOvo3JUfrPWO
kz3T4/f1mAxlWlTBr/X6VDZGUZTJmoEIUUCw1H1jZ9dgbYVFqRqHEOweapV3
l6gbd7bUJwPweIEs0La8R/AptDiIjBlQBANMJm4IkYS48Qi+0qH/ZNV8pMJh
PhO1vzMlfr3VtPNC9+AUg8xQAhCUncgNxZ18Drpg7QAvD4x7tsoosLMW8ZJT
CeMAg4rfqaL8mIg0xKZCsfdkq8fAULKIe2svlUdVJUBY39GcbGd72xoHbCaw
+vN6QGixBQgVKNhVdCN6ERXcSWwYZKINgcjsjoEi3DxTWF4Ie7LqWiBekl6p
D4f2Un1maz2trtBnGHiMOMvOnAl+7ZX6CeyirDBk9isafyTeGOnAOzxIRp0c
yBl2QLse7fWA6DXUIiCTtQKOofwPN8MQMaUoz6M+jODuh75pBTyDjKAk6IqA
ZSTm1HPyXFvmRnCSkAZfxuPODUClLXWNCSwBNEaJ7EclM3Mi2MyiYDIRXoQW
fnx11fuqx+U+zRoCTFta1xDBtIgtWMNaWfXIJry4RHEvTkKIewVgmqIgogli
2yI7fHAvkT9exKAfTExvYk8Eiop1WdBia02QDwUCH6z9LDgK+0DtUN7nYdsU
AAH/UbpJadu52lyge8KhYEAvgy6HoWCezcHQ5P6LmZru5f3nmdH8dgW2/zkI
dE/5O0pKQDHU/EDrQKB7+/LGRktMXtfxcxrr0uyidX3oJJaIxgFt3Fh0GT9H
3XS2dSOi5IPJpEJg/t/RDTX6EL1EmRGVcRSa7nNtz82D0V21fCuoQ1xsXys7
U5EJa4kqRl2HKkbrUw/RADQau/fgYYhPaBQCYvaw6dohUL5OK4RaYNQqPfga
I6cqFnhQ3ARFkRjJPNGcjViMIgJFH4byZsRQoW4E2uKbIFBHNxYhBvmwWYuQ
2tOL3lSQRq0D1gAkVUSgUTDIfoeLrK1I1WYgKJIwwx0bzeekplZmsnEIARkg
JSvjCNVg7Ix9ZFMVTjvsCf/cO9ZaPxzn94kGs+hiSCAmQ4aV6aYyFhklFhtb
qWmC31iK7xaMWGTsB856RcdDYpOxQw5Is/jtD5oou39X2Zw4TlQKIS2Eh3kR
/8eUU0Wi3RhllZC2huHNGp12IBU6ehAILO7n3DKwWe8hEp8E5cvAJiEZ7y9o
cUJtX0e4ZkctwaLIhBgjNcrlOfWTy1Bn5ICp2aP45qepz2kOO0E7m4qwU6Zm
/ubXajJZFZaAqBIijW5m2zFZ8CM9sUuci9evu41K1a4EQWjkFVuW0dkk4Nnj
CxSN4hlSgsg4dkw8mRpsiQwSQ8kjMfyi3BoGOy1UyYv6fIAAo2MW73y0VsWS
WupI5BC9o9jVmmz1LnpqLAYEpY0VSKhF6D+IK4RFlb668n01LkgnUvu6lvfb
5peGQk6ewxCoRpKFbayT/67WR36iRUqGoDDUbFWDRuydoRoozjZgJrG/8dq+
k72D36Naqv/FV1/pVoGiu62wUz4nbsCaVIKdR5fAzhbab5udEkwPkdjT2h5q
Yh8yUf0dMe7AnrHLQut5vtwYSAEwjKeCYjrB7WQRe3I50y2wf7IYJwjQJh0B
QiI5Ep0/68ShPbWUy3DoLBVuW+QfKQ6lTc2X2ixeE3lKNXQXmxFoMsCsMYRI
zwXaF6unKpyFgkoA7kAFNmmBylACgf0YKhBhidfss7hIAVGgwxT3me4DWhE9
5v4UW9rq1+jq68ZcoeyEeUtY4aTD68WiWo06UZkR2w+EUMdPxsqmXEzFUdYj
MDtA5k8GkPlTJSWQpIFYFD6J9COz1sIpoQQdxeA37rqHdxKpB4siSdf4zl/6
ICoWfcCwKAsm0lAVugCJQkVR3rXbVV139AAGtwD5vp8KVasVz5yvSfoeXgS9
vQcqLPHOI+Z4eeDkl97QLV6M/s8ASCliAv5jO1q1/y8ASL9TEZBGJ2WmgV1B
u3KPOEohAdJrckAqytkXZxe1R9yT57HhLUIX9OAiPsn3IQeoFHbCwwOIEcEi
coX2ZXUiVK1mviFo1NJ4rAbDnvjiUsCw19lZJ1nIhXedtLQMk+gGw1hT2NRV
BxpNWA82puiaelQADgKGAGp/AW96ErWmgUUB3D0nzVUOoGFg6w7FDfm9VV1i
40RJ1MKiMKBi0cUrtWppa2LRqOBhzpTUE3ViDoAu9C8ChOlh3ESdAofS/A/6
4fiJbt4sDO2qiVHuYg1AI8ZotUO/86wk6nn3Qi0c1ZMoEBgPu0hVMIxEOM37
0Ze3qsCh/fjT9dHVAE8UKaWaBJ8KP4D9oMIDJUqClD1waOfkrdquDquv6q+8
Bp+wzogEKo3YBxkyUZqhmkjIwF4MVpCWcV9LEeA+uur08gTtf+bF3OyPw4jW
tf2qg+HTIjw9xRHNlK0OTxsQC817HnijG42s6JZd73fA7vzzBbJSkfjm+5+k
VdVtQddV7nlQTMNHXMll0Y1ZU7X/YOal73yoG5/gDGRVVIx8X8ywqB7UGaoJ
0wIPA3VPvnuwViXT2TYanxOZwMhS0QEsRT1x9AZriYMDabFF+2rSrWeR+riF
LB5N+AR+yPBOv3eIfMZUSKl/4bug9iyopc2FRsnW8OoufrwF4S2Ax8tsuqVd
0PBU56BZsfmFlvFw6vBnF3pt3kylnKUO/9YKpdsbVdjnRbsuoC5suqaB2JTP
YBwMOnaPGLFAImEUpt9Mw53kRqzycEb2H1d0EWC6OBkQYEmUHUbrKt2KNe1F
hV6ML8qa2SJXKzc/UP0Lyrd+9oe6w6Kp55ZH3MChKGdSFlEBj69BQfY6P0Nn
r2u6xxEkFqGyziEyulAPSJN7Md5MPIeoKCYmwSZbRIBd7UjoOeILd5SFiH5b
7MlDxbfymuyAqHhhIsW5BNhHeDq04s9T9v+sdGID0/uash+iBCCLDDuyHRNM
Qo4KdgIqIkkYYP4GZftZD2lXO/eP9zDKaEq4n9YegDekCcciJThl2DwPq4LV
w90XV6raJQAWaP/4JKUr3rsIfANQ6o7KekyZXmtkRPg/i8B70dYqzllqda2Y
iofNVMDKbgLS+TV1QNUidIJzAe1Q8WBvah777OhEAx4goh6Z7Lpy+nzv9pEm
pFRDkACKnD67klmhU+9J1EEtIkC8sFA0itrJceve3riS0pXgOYRUC1fkihML
hpJFpxIbjI4rHCeQsaWKZ3i7/a2NX6k/nOlhJEqqywOqx3TsV45fiUfQXQtV
U4JfZYTn/xkDqlyPd8eLiqGo5SniV8bH82g1w4sOiKL6TJnvon5lbLzjzDqk
CttGByMy1noKgdyCRcC2gC1OEtCz+hOSTlbehUtM4hU78+j0l8Btm4ewVrgH
G1GQMc+7qaTWPi2TLkenAr7LdflV9SPYYN64DTV8xBPoOUwtYLRq+n1pHBW4
DrPxomVSXnlrk1ni572cfHdpaMEy+SP0e2Ty9yjL5M94uTJ2JSzUEOya6tqc
GxEA1Au9EumeRx+wjSKP9ztuhTK0XAXX0rI5P2xns8AV7iPanPfH2F6nh2Up
Alctdr/hEe0fwQtgR3k62tG3pv3CFwFtRP51g/drQ3HyNTgtKru0BSYdlpsq
s83zVj68gI7e/VM8OSNEmHHqn2hKtszb/aGu0b+E56M/H34an/s5flWhqSDC
A+Nma5QCy5aHR3dQcwBgQgf3EsXITmtYDBkEVB/f0JS+LDpICdYkypL2jpTC
2Mseqg1jGdLnWw/Gxl5YjB9rtUJ+1DyIKEdTSbo9gNv290LqfROMXaTgPZpU
Vdq5RHHcQcWdS7aNiDAFVoW0Js4vygglt9HcBojcKLNuS+wVYZ1o96OA+/G8
VCWUErxwoDeuwXyroD4xtXhqkGELpoakOn6wqg/1TrurImAhCd7+NKVoS+Er
u3Q4ETsaGZMG53Xz4CfVAtKCIrxgtiwXGzkBtlAwC1etKRRS2nFHkIlnwyz5
aQ67ZsU99pbk7J7OSWEPAEyM1uH/9eFXgo8EVHCAYDqItQ894awvHkf1UZW6
VrHiqOzHV3TVlALK4+z7hxX415YPpRYQLWq8o7YdY7Bf7r+jlzrI0uHvjBGG
2e8P+SYmrCcI+RahXr5JxShCKotGvBRp7pOOB7Im2Fe7aCHiVlnTO6KsSDf1
CB7FjzakrMcFtr/So6w/yKzh7SxVbeieYH9S6azTp6k/5Bplce92mtYiTiyl
Yde+hboS/j3VcyiUJHmLnijVYklwOeh8yK3jFCCcaV4UIPuhT4pcaINJkAP3
ApeZXq1+VJFGL2GbF15/R7tMc+/HplvsG8nmOtO6vfNqfhslBIL2NAbS1q8m
CIQdgXr479jm/ZK+L0WxoFNUU6BYmB+1tUn1wTMJ1QAFAVPYiSAeKBbNjV7B
zHmPo82h2KRAPVcQBCP9u9/1vfPjWkyBYlaIoQFEikBWW6P8vltAAbwKqnRh
dWI5e1zVXRmIYDVcgwch2iHow90Jz6om6jtJC3+L1SVYGBrYy5OC99BpADfk
+kQnl+btxKLfKQMEv0TPUtylu0QPRbmMym5lOFurTrU+PIskcUBDccMLrjzk
hyjRKiekkprAEywNnqIT0Jw0AJ4DaUw7J9rnQ9m7x7DwnfY06L5VQK1uaRTQ
ShQO3Y3S192T19cGtXv+3mwL70GvxNm7arYC35k+bug5po8qxZbD7Wwd8j7l
+khOqwG/49yEHQ98oUXQqi4+jo23xWxZndUCHkCB8VnpE0qq0urQ9PLIWa+t
1CRItG2vA93qYtjW8WYmaO2tboJV+D+X3p9AGU53m0JsFqGPrlnEhtoU8C3P
gpJQ9MHxzzKmqjw00UNPAOBFM6XSbVNrstkCHNmkk/ce3NYBYp/snQ/X6cZL
EpBReVkB4xYPQst3UvVKh1T922UPah4Jx53Aj2YB5YdyHpiLCIn2+Egn/nwL
qLttRajLMPB60KLIMHLnitv2Rtn5X7praZ1l/2Ff/m+LmM7OjFrX6HdqwOkN
L4ryQxx3tOyEfJPSB8i+xjt408KCpaUZc/Sh142TwplYGAKu3iPJAc8uGqCK
DjQ32VmHSTD39QLhvT3UDXswPFAWbHuU91ItolywYFLCpqMpAMf+IcvaeODq
HuUgl5HhshWN/+5yV0LeX2gdl1VsbAbkVu5Pu30eq3WQC9rkpGKqcSiPYgdi
dJiDF4/Sat3uUTwXGJcXWx5OuGNgUqxayNU5GkxuVOXXWoN8CM8PlT6mlA2N
2nEo5spFx8iLRVEFniYES/SHptYviFhHpxM2kkSN2cyFxpwoZnj6ed9sfJh1
mTErz+N3SDNnqIgHMB2WIbQaW/u1HY7oUBJs9C62g3p65a54h7xPLTWyR0f/
qzbWIMI5DK5Y57gR9o/mINQoxQnBKS4io0RUQATEQHJn2aokoQALcoc6pz1S
z0soTXu9VnGcsXwC3kECMGEYbKhrbagGKQQeIDiKrG5r6w4REYRp2nBsU/aA
yJqdhGfUYGFxUt98z9AfFhcGp6kU2ABd/lMClXaOxT6CYW4d/GQ4BY38kCii
7fQYxMMGJJvmY8A7WxMs0Yxx0IZr2mR3g1Xw/o+14x/S6Ph8lLOi7j2PqHyT
bG/VZoNUt1AiTjKidZz8arthAFBT0vEPjbWTNrrGOeQE5/eI6VKLimiQMoD/
IRmed2gxQoS+b7xk83IAYlYFWBnN1LTeW4w6qh0wRNRJxCzJikP41AGfLvlx
PscUHCNhTrb9e8t7i2ZNnqtBHwqb8F2jWif2t0NkXGiCwejMkXOsmyEgZDc7
mbRcVqLjNJfRm6LY44ywNeAAh4fXJSq6PZOsBDSmQI9zOgj+7RNtpSzUgVHE
4qDXTtFjtrprZB1Yw5KXIVyqami9iDnwRgQNxMet/YhIlg1h0pMA2pfsfQ2x
pm4p6pPIvqBd8D9wyfdJrPsdlWOgHyBguafqomHSvX5myMMCACJCEG1tiJXQ
Kh1tpudoiZCkFhSunsjLyX0j8EtnHPW0OkQ9jO3iZiE5pSyiRcvf/0hdIVHK
jfKtvU3qD/5uu1mwTPoXm8hi7gN4hAD/rKyHFwv7smOt2IpDvQf5ysR5r8e5
yl6IJgv8yDj9DH1Ap6h4VJTrBz9dQQONzWBmhodyZZEos9/9qq66PmZU/6MW
bmYclL3o4kx9MTmNlXCzHkwsYrPgzXezDQInKGwr6h9yVuSlQLXc333aVKQH
I2NbgiaMHzdxroDoSDRFAzyeB82wSZEB3Tx6bq5jhPEQd0zfMR37JfRsBuIx
87PNPpAlQJHTIfIkq/nS27NEAZyV0a4t2AeLmB2T+mW30U1pzBTqPuftC1E2
bUrDw9FnDb84Dw+brEIcXosdO+0dRvT7OiDQOAaR4g8/tSOhaKo1PvtiQ9Zb
1B2eauwjaq3Yc5BaJgzq/n4cFSMlthMoOmIWeZa5Omsn6kJ33aYZbqv3xdrR
HwH8yeaWUKftPKa1QSH2kxj5xk6YyC0QF0WSHFFX52z57WB15PjRKYqaCujm
GFcKUa+JFuQF6zM8P4K4eOItHDzC2zug3TsOe5JNFa6KmhtKmjAnhf8/+XyD
RiHJ8NlW9u55qwbL2LGXAUqxdyOOf2/jDU4Olq9EIxj2f7d2TQizs6WndYHw
XA+eg7gsmu+ELMHW4Hvbw+bMXaPHxpuX8HoEkB0YtYwDTpMniWOLDuL2Gle4
1s+Pdh3E+0BY+In3a2Ht2zbfkODIWmW7DJj3mDB+HTr5BO3//ZriL6xT8VDZ
ItjGaiGi2pxbvkd9JHsEiLbC8bgNgA2irbAUBHzKw76YNN0FdI2ZXIAAR7Xo
wU3+LDQb0Yc4Qo0Qs2sP/Vxbu4rGREPdrV1CuyuA4DXY2zrayYOPab4FdEzu
JZyvOBCC7+MXg5wxqXyP1eAlBshzLzuVIG1ebwmooZG2NjW+yZoax3YOnrWf
O2qglAhz7XF192L4FFJ9pYGn+RroblxQsAS6EQMkbo+rYg9Zu1R1h3LlbBb2
8bFEegi4TDfaFkZuFp5meCD/dV98kY18/jXN3WkXe5mqKiyV5sGKciA3+pGa
T/ic0BqawQzUC96kpadWfIPtyNoQ6o0Tv0mHoPwhD8FcO8D6YTV2D/kOCMD3
NdoM2w6GBDbEYS1EuClEKgfdLBNjQ5MwJubEM4/37ALsFporwYwOpmgHe3s8
xZnte8a2oH3a28mz9C77mrYMBrwNX70SnrZFA39cUu9L6gnJxHwhN0wce4RF
tZarHygvh+MYwPtrP6oCP/Y80Vtt/ZBwcCS7jJApov+UTcOf8C/yMTbOiRDj
5AflqHPJjlfU+ckcE9c+741JQW00bUfJpfqgHyiwYKsGL9ZtL92QaSUCI4X2
ODWUGTAlnB/aUtLIvXUH6+v9M9/0yQtnhw5rKjZCyAc8NELJoXs4NS49OfY2
ZEjQjp4ALBmzRO3G4c7UoO573UO69CN8uypZBHHnQnr2dFwOQUn6stOjgcgb
KAGtWQcKXtra6bv28d+pUmZZSELht/zS4wkRD9CjON5crY74Yd60no3gLDkv
MgBxJiFLAj1xNngcsix0Ef6Ub8ksOP2V17QFy6J+qiqYM2I82uB5Y0LeZh/6
FZB384Smn/ODKhj6jQOnpXOFfb94Si7UB75/2iDwzQs+nyqW7STV/48p0eio
SeQZBE4IrXVBiKPLBlF0wranyYqDZvm+Qg8hkFb3iAzgXFJHx30vp+OzoFPq
TnFv6irFCKgB4xHIYaEQfJQYClIWq6oSCv/xFV20eQvz4ZyMsDF1ofB9PbNB
zxlk9T0ZM3bA9MCjag/j9AAVMLkWEs9Zuko3GGEHixkqQttxOhvP93OSko3j
+YgyXUlbNwiF/3OKen7tpUmMizETEmcc6IzrioZDPo+4Mw5+eAEoWYIEMDxb
L/gbcYq2UehAbDprbifR9lPW4nudfZc3GOEQO/I7LzPung4+wia0Smcp/rtC
kWhHwNkatkn8UdUxkJlkKuTA7U6nozoQx0PHnrKU7DgBQDM9hjXJzzGgS2S0
FMJeHq+H2L2rSwN7wT5MD9WO7SQCimeMzoR83I+afOwXbEFZrrBYOh5EVjaO
06ACgPwXagIK8yiQD+HIYzr21/fO6zZC5PVjWiGIWpAHi4yj+X9mGdi02nUD
9JYVAXqU6Kz+eJ2QzI53RK2ziQbOGP/CkggGHO0gHBWNxY4zadmLE7Vr0TmJ
BceNi4rBVxCYWx5TUGstGpopdFX0Qjm0rARWhamDNPgsL4rZR4UMZUMEnBeA
npY+ekyGCE30ruTkdt0ZJSgCQYTqrNolAmBZMUjCqgG8eLEbMLRwEaVv0FM/
1yo5WH0t7OlgvbMCnKL4wlWFkTHcbLuGU6PkZZDvAESrI7QEf3SZhdG7+I78
N0TIBPkU4uIjHat32nzxR9OK/Rz2uia6ERLg3EXlnM20lFMwHMI3IRRwwQQ/
vhc9ga4ii0hMBplUDKGHHs9Jrd7QsW+s9hMUm6mxgVn29i1NBAi+dgp5+WGK
GnOrD/02VFbucVXs0/y+qmyMvQUb3tYVYajIKy/UB/gvjjKE2h0en5wnVzvY
EUlxSBj9QVBJcUxidJNpk7rTlMJ1sHKcRZK2Uzg+ennFaj0QbW/vm4v+QD0q
zIrUloGKqFNd8s6Hhhrap4/jGAq15iks2dvE5l9UjADUjwpbRkII8UCM4hBE
ev1ap84eyhR48ziVX/tA2SQN+2q/bjvuXonDeaJURfAi/wg7rvNTOOELE8/o
OdxTqyRio+v85asRI1vvlvqVdeJWrxaFcX73kcrpeg7yzJfSmZBUOK/wo6q0
NdRrKyMQHuE7rL3ms2UUKAIsOrqQryHIV3qjK1SrKIXwejDo13r1KSE3UtfR
9gWDhOERBysFyCEMJTR6yvd1vevqTSY+V5VuVqn6pxTyJM1M1C2d3udRPSbM
fuavNpnjRd2kMeRaLZI4znaFZDcPmpH20LB+S9/9ICFbmPpC2/esbIGq4YVq
2i0JRRNLg9w7WB0oXj0mPp+lk223VzZARngRt2KWUGCWazjcZWSGgBQvhiOQ
JPVkxaW7Z1BCa1/4KWD0aI5lPN+0RRKZYukIbXlimRE3Ekh2kmGm1T7He3AZ
MQFvovC8jVLx7Hecaj6mblr0acMwek1J1NV6XkcRy7ZqRmLrKEbYHEszEwBt
LF4oleVxGmy1pmoBznk7tBbKVRSZ4Y7FRCFSiAc6xhJEPRMub+X+L01Lvswj
4s87LkclnpgMag89UI4Xkk6EwNMtVcUemO1usoNE2JZzdLFGeZ8ExllGhNwb
8ZWAcQ3ULMjPkse1iuNG9XwQQUrFvtjpmPINFu4uat0op2KbBksLeMTGYTiC
HdCcAHTP2ek9ia5G0AQosqdjCaZEK6D4Hi1jUGo4srBL67TFagcFlIwJpYWX
iVZnbtjufa6NDiUVQXnq2ojHdY8IfShZaEYLZD3O1duikvLey3EEDI3dJwpR
KA0nYBEHgwODcmNmu1iIvOuOBoEgrdo3BJP/SFe6vfdx7+GbaFhCYAaBynge
Uy7aBdDib7qPTEUTbBdBt230E3DJBPB/nok8sBTs4cN55cUUkd63P8rlgnMl
2xS68yL57C1CyUOO1gmQt9DnUsIWBzXwoqQmFA++Gd2FgTrhRDNX2Ie9VcTE
6KQRPg7QLQSMYPuv/OwJFBxBKxKJYZzNctiRm8TwWvsudrGNfmRzEw3+xJHN
AHUKTPYNVbJzZh0FHsoeEPweUgHHQ+KvnDMJP7KtkNQBycEwuTwasiJZl2ny
pNe3xePKuNf11tHFcWYwJlVGxHUZCh6yCEF0qYNHo/sJBgnHUkYQJ2OyLh29
HSy8gKPUOhqhb6OkAkUjaXA+O+Hj2BEZrHnC/1v/C5oglczrY4dW77sAEXW1
qKlxH8B4KseAOXeyqpxe+pnP6QV32SIaBdSL0wvuE8F8y+3PCj1n+RO9H2du
EP+ZH0hkR2XYD9aZQABOo04SRsGpB2niyWHGYkWDCRjSrUNnFHD3KMfdHTff
2qLOPmpxBkrs3qAolRdJ5iggtl1CT2p2Fm+FPTRoWhaaKvT9IiGpB0hPVLHA
HcfmEPzqLpqac4wjzNDKk2nEdAmt7Gca0KtwGusQCZBdYU3aAzowPNUqouw4
/Cy2kp/5wDCFEkQ9MHmE6YY882o02ah2/80CFo+rD0XfJr1U7AzBFt3+mRq6
7FhSdo3yIT2Bz4YOR3+jTJ4QW3HSnbnd4h6DnnlZAwR7Xp2XcLfxigGUobWC
y9tbR98GeIG1Bu0LN1tQ/B90GMT1sLaUp2AWeTzBS3IClLEYUc2cYj7wxNGb
OAOYOVpcUtJ0htba5gtKnArTBqLlnuS3abrGFr38dIFdlOMhwYQXl6o00TAL
iWaBcIi4P9Q+2XcmRbNUIgTUOs3zbuuMC0zqzbZityBgizYTUBdLSYgYfQVv
IQmoUcLEZ1kleEoltLdNTk8IVYihCrLyPZfV+nSM8KT5r1NvojgGVqMgB31W
3+ESjZ3ydh6miUJfzXfn+6Jxv2iVg0NPvSllfpwPANY5xsvTcOjJYxJ9etZX
DfeSo/aOLpzjGfWlCP/1/aZ4g5k8zE8GkFVhJU83VzAPyVghJoCSJAyXclve
I1oLb8PjBMrpjKFlIx2KNVHNsjjHijItJJVhIkYsKBuJ8xb9OyYYjR66aeB0
VZ88B3MRDETPX+IWe/tOOJYBU0FpC50zonv8vl70xF4xpna49vXu3bQgFvXA
aJrq46rAvjiv+xT6bjBDNiLAM8SyGQVICyrhqkIFRAm2J8FN/Iyt6YQ50yYt
671JKy52LD2tQv9+9pQoDSYcZ8EUQ9oQkrZ5hWISzhv0beUlDaZjdzGVSDT9
K/oO7FbBNpIAPNTOe7ZJf0c/Rvmy1ChUTUS0z8/CZEIkunBskT3Iiuy9JD/I
HvgNiJk7Ct9R4WMJWCJmQTADvYK8EpRgzwTBQUw2eyeA1bAHDRepRNGmZxaN
T9uU0C1sl+H5xNh5hlFynsdzwEdrVCK5hsVg424eA26aIDMSBcvBA+A0NmMV
W+JXgMxx1FqEoFFReuCD2yJuZy0wrZABQ81QsFvcrlgxCGk5rIFIn2/uS59B
LlIDGCInX4PgMrVor75pHgCHYUTMlmeh1DjTHKUG67/iqh4yFbs58ex7R89W
9YonguVAPaOSKaWG77F2hANQ+xRwIJ3YY6A9iXs9TtUKOhwuG/TSMkQ8Wxn7
uYId5ZmGzJrr4+FAQAu3UC4R1E5IGj3oQdVGgSg62DEIPJ3QMZ0kiTmCDmBM
VoWv/qbHqBQRA0mQpSX3FVuidWZzmNli3XjGNTAZGSzqt9ifwiHyzA5/kaE4
RdNZfm08XQR8hUrPufRjyAhQHOpZV7iDNB2A+8NPP2+ENGifJCNq8YDub4qU
Y5HxwRDxKfOX5cN2Pj/IEsRHFTSC5nn9fGvCNuLxbpuAdPe0yzUUSpv8yCBo
CobBMQKOo4dauHqLGAZ6BiyzcOX7ynEDRL1hnvIddc29VPchpT2SEjCLf4lT
kWEXTrPL/1GZDllEARNAw8EAWfMVlpzz36PAm0fh05GvJL6E4cdFv0pPsMtj
V7onUZgcmhI86jdzge4hYgnpF3GLsIwJb6/aUekGNH7bDDreQW+M1gAK8LIz
BpxnvXxTKzs72N8sMk0yRNqdB5uqRMIIKDcYBh72Q6T8GuuiBGPlWwAb29G3
nD1hh3bFpVrlJ4/MGwc2TVurQTqkAKDJ7rZjL+lWljPQDKF9lta7fLspalGr
acZ/XN4ldSvAiOrRzfqd0MeNfejdNESyX5ywWa0z9K+mgtU26mdY5SY2/ADT
x40LRPCt9KkDyd6+5YJFYATaTcRnlrdN7J39+MoummChxRxpaHpi/+SKLkrU
HNVaRxO2FpCPYjFaOzXbFIbJQuLSHKoJFbtGvtNITzGo1sl6QjMtQJxFQ0qK
r8Ut8tnbyV+7F3glkrvW8qFnNFwLArJeTteEcONYlLlvvJ0QLqcWUV3Aoyqd
OFyKcGu0oRouCS44dpzNZHG8NMPYzdc7nEAwmIbbQsPbokDYn/miBAvkW8qt
BJz38nYy1nIJKjHT1Gxk27QGcVppuIoIAFzKGkCk3e12iaH9a8gjo6DZjZ/7
kxi6vAeGyWtXld185F0LQKY63RfCNPX3GNpudpRsw/peVCt2CqI0cXPUyrmv
mHcP+QpOD87cK7FLrzijmK8HBx1mpieJcJTeQzC0e7GvBfEg1TzX9khOEEOI
03fwt/N9ldWeUuhR2EJlldM6JAv+xBbMOGdiD29GGNau5Jw0QaYmIN1TKU4I
SJvrosXzjklAgjLc81BPlVt/hbyX+p4uQGi7fb2yoHXB8O/n9zBW821GSJT8
HwfGOhG9kP3LJffpe74KQWluTcCSuM2y1bY5g0KHvKS1TiAamuunrvaZvXaJ
0Rl1LwDN+tX+TyurffoY1dfTIhRdFD2DcniRp2RWOZEKyvV6Y7lo1WR7tmxR
giXpUwx6Yzo/FrMQbBzHSYYJimDNITeaFmRqv0iKtUfqFY8b8XMbT7n+zzfo
2AlXUGQv362Gl8MQizXadk23VOWxp/MW18Jvu9uU4pzaPd0yUSZH3E1ndIXN
KEWdcmFr7ZuqmJT3YXO1YEEMvobq8fhGIkIbTyNAPDCQoOawIAUV0ABYWVMJ
ViaV3cbjbwyFTABumXWD6JaXi1tCl7hF9JMhbykj27bAScRjIwjec9Lznqu0
Dp48XbfgCgdwpFtNGCTNpPdw1s2Bxm4FLYVGUh2bzPo2qbyfpY2WwRDRwUXj
whpArIj4Yb0xmXTJqS48LlYfwhUsRYKy5W3adv991xJdG7KZMORox5Cd+hd3
/FXEkDvUwpBE5wpHPKuSAOrgSpI3JsgLsfdJucrqFEvIAUO8ZwUr3y9/L3Uy
rE41+PkWgGa1kFzo1TaF7+/iupJriV8t8tg9rjMLF3Y4qj6pTAfJ4xDsHYdQ
5EMqIj2mQriEtgYQ3ttCNK1rFo3yYvJE420KQCjI0KKMXG30uHAnw3Wmj+8b
O7uQU880FOdTObXAV4GPCHzv7me6tikUgOBhofbJDHAgAXvtmlSgeK3V0j0W
tUmTr1bvWqtVoVVX5dWq9mRr5CoDeyiWiUr90sOsdqjATc3L5tEmtQy26y6U
uW/4MgcQUcVPwC0aujLmi/1cNFzCIzQu1TP1DuL5ZE74jHNxW5lODC+1HCQg
0o2MFQxGhlQZhQJU9kolXI0r0D1saJx5jwXYn64u+TPZ5YGOfXzm/EIDANtV
wl5DPuOn84ins1btC/UyFY19kwrE/YETqNw6B0RCH2JxKYuj4piIEHEH2hKJ
2ii/ZVGsWnv6HN+X0KvvwY895oktbSTH+0Cs02kf7Y3N1Pi21zakrG3IN1CR
Mn7xn4Kxoz8tA9kurVBNgTDMlJAds/At9OVD8grU5hUWrbpw6QFuLF976/3N
75CvbBiLzkbhyccWDCFjjB08o+YuKjeEAL1Ivj02Y54bQgsmgUWXvrNGNYc3
7FKr5MpIYQ+RzegxlE7SKRW2ZhUWuVQoexZODShdgwhVV+g9ajC3wIu5RRvj
Fq0BOcPaFo34LzFigqWE8kgbkOjjRU775iEzAvNUHeyUrGCBXC+aH0QoZaXn
9Dk4i2wHOpcA5aPTX9TSjdgU6TGebdMaWqEOpQOEl7XNaYde7QoEBPdNmr+0
qrgJgnXx/Wyn6aW2+5g0Lh39kEVa4rKsnIBAuJMAFfoVGSWTgAI8xCdYqb9i
2CIkkH5bNw6cJkOQu8moCc7fNHiGJuh40QxNCGMfV2u9AqE52OMnSd/11BQK
c4jCn7l+bhDscWqBntRNkpzltWDFexqL52RnEq39ZOjr1n+hPj90dkegPl38
Q4e4rd2qcqjyB2uto1nu6PXWrtXUapHpFGRdVKdR8UH+yzfLl6vT3uKCMShX
pz/yZYG1yXds2rRJHY+rHp2gS9JH+IIU7vtex0bWPVqd7VDQkcRTSVqTN9Wy
nPa9zvRbszKw5RKv+EXbkAe6qNdorfB57Ml5avJhmP7eU/bvnU7g7GGzFyqq
sWqfXlXfK5gchk1Z3HNL3ipqr2eXmKqppL1oe296xs7sPrlM04/x0nGGKWwe
EqD9sLqO0CJYXrcOncHttvdJogqgH2xL2g7dyC7P87uOUtzDyea8bP+NHrxQ
9W8FDVje0jhXIxNMjRzdgJLfmqRG2M6GmpDhCBuLUAsEwwHnIFM6CFDPSpni
/toJp1eSsEoq5AdObyjAlMhvvPeJn4FUo7el3LW79meS27V3o+X0BohSHgv+
ps3U4Y4ILW00zrqUi+Yhz7u/FWKms5QQEdLUVBWBAVAMG/VnkyoB0CIqidIc
+e6hm9UTjTVoziwgtja/lXsJRdd7helX+j97j3pZhIz1+ImPuo0jd2qqGNEs
MWrUdAKmT49HyMxo/UUebe3nG4JQZFiIbtCmxHfQJ4+vbn3QxFww0Wyv+4ki
JMFTpVlj9ajYf25dKXsVj6DHtySYj5LfIxnqXBdwmlLsWki6wI5ppqsu4II5
BsUZGL0mSWzhsXhJRsu4q2eVyAmTOvANqmf5OCnAO7bTE5pkej+O0GqsAkMB
lrFP7x/68KNhNK1hDrBYaML4mFoqT3/dbWTqX4Q/waYP8rKazi2TetTdJzLV
OADo5EQK25QWp85z/mTbmx9LUi+cFG3oeJHTlq8EwodSDFz436PDjVU1k0Dj
xGhZpn//JkJe1tSxDCus86eSSGUgF/UcLf/jd2MtMqW0E4EW9m9bkOcLe5o8
3zhohsqz6dbmyqYIJ6sP1KDNAjLPToTo/CDr17Iw1wjCH15gJJ7I06nVcNRw
RsHxAjVcqENkoDXqqlO0DNt6+LmqKLcUrlBB10lwfFFuuRfRMmRXRtjMZ0+d
dIQJdysoQd6jnB5eAEKc6ZOOODD8g1dNwxHSmOQcrZJMI1o7lMklZ2dQdVqU
yzZuj2nqAGyj/q9NHj7cu0CvEErEg3wXuN86xUekurGSHGSt3Zo79PpRgYaA
jwvTYteodOHrR/QQ5fOdgnBEpOucAm4laohAoSrobEeVGXqB+xC4+ccCAPIN
IMYp2najuQ8SfqIYiEnIYkdXWeaFjudmotZOcQrpget0fBYZx7oDhFLNlelS
vKSZ3oMYw3SEekkRXG+mRgfKsI8bOAeDckvbrKEbJKv+oyBipE3Z188xwVsg
YlAB7rT4rv22jt0WMGpX4A8KD4GIuOaUmf/QpxfB1QjWE+7a03b/VJ1d4Oq8
e2OvswqP36vs8YRy/aSG9HiGQ8UYyXXrzdGr6u8KjOO3phu93iO4nyt2K/Ap
w4KJzi6szF6eD4ih+8alqugij1milAw39MA/PvyPhdvBg0S0I8DB0L0tScrv
xBRZ7P+vwLsx7UYxba/ZZGodCsMrUnZPpyzPPKqgrnyDS4prxb343ykFGAKy
DHRKlYdta4gzJ5qmis07BIps8gJmgPHP/viQk6OptyXsHhkD/du7G1X9OLRx
+166nYUiIfRYq5LGvs6gR97Wtx4G1V+H+nwQO9wuWj7qB/v7ByTF7QzCh6oW
+3vRoYH//VPwSCHioze41enFyDtpJMW2pBCEhEq++y462kUcA8gY9bycecmW
r1bX9jzMHwMSOMgCQ4VZTKwIbCvNt21dw92/wgeL67p4QMkHvahOcRdvB+0S
Q+knXyAVtKflUSw1dJVlmQGZUYIOloujO46o64Elaqd0VftVuLLSr12SMFu7
CdpJ2Ji3yT4WqEOVBCUZbJXG/lz+yAT1cifMWxp+OMEwmqKquar1gGYVtWJD
h/e3YRa8Hw31oeJiRBATalEx9eXGTSk+TLXp5bZ5oLSIRH81D2rV14ukzl+G
FXaIuI1aqdFeuWUbHr7WzQxgTsA+eztA4wB4qy2u9YQWFYWyoQMyXZwf1IER
Rg7BSjcMmKZ1jKAQIBgtZfe9rncFomznROlUXzPEOn+FK93agYHhOFOoZZe2
DInsvzmJbMCv3YKzCkt5ZINHXdfNCiTgtL6tNrKGr+l/ys2+lTTWcbN6q7L+
oiMrWc2tSrMt5bNvp3/quFm9kZst47MtXM2tyhr1Zm63jM+27Gb1h87+kiPb
qjdrAHD8ljSz1JXlUTIzUA37tRu/GNlj+c2Ou2NQdsANj/EjN+OvBv7ajV9/
w/fzm5364Njs8NuH8SM3468G/tqNX3+TnfLg2Pxmpzw4Jjus81B+5Gb81cBf
u/Hrb7KT7x+19W5WMrKT7x+9ZTfrUpzmA1s4sgdGF0c2agtvNqYwsi5jt+LN
tnQBijc7+YEtXICtObKTiwuw5au5Naf5YMlqbs2RbaEEbF2aPfjn4rMtHdlW
nubYP5cEbOnIumxFtb11R1bCGltIs1KDsnVHtqWmbvR/iwX4q0X/xjTb4pGV
mrr/hhZ9F32zOmvXaUjWtuNg+Rmymef93Tcb7Xf1zZqsXech2S/uHZ2d2WNy
dmrXiTxwMw/a1fmygWreHtQ4O+S2QdnVQ57PBr38Ydbr2be++WRqUeuToJG8
eUjHIfxUnaq/odvQdPEMH8HBtw7K/jR6fjZl5VfZ4Fc/atgIHqwPG8YIjr1r
eHZBz3HZb3uNqzpFf1fr/4+T97niHH7rYjYtrqv88L/t+N2It5qVfcpi1Nin
8t/tS6/Tv3bxZWRufxz1UjZpxYZsoFCYd/WCbQpEiltWekx1umWL9FfT9Jff
ICafX7xrhYubptk2qfCgSu+1KHlQp0oP2qH09sUbyP922DwJy96rtBD5XRLV
ZCzt/Bs7V3juThW+kd+v1lh0qew9H4f+r2mF93ZNRGxW4dOcLpV495FKqqBc
pX6cbjs0u7DX+GzRotdEet5YuljeW7J4UXbJQ+OZftVefh0cduAtA0SOBwtn
mUQdKpqJ9w6+dSCTi7cZ1kHy1kG3DOTvar8Dbx0ob8m3/A7VqhXsroOqqgsT
tbvGe431PW7HT9u4ZVPUot7yiDuGZUfdNULXSy/p6Bwta8Agee+ou0Zmx8gP
E9H38hGm4aQhpkk202fI/7Mj7xyeHXXnCJ0s/4+h8yy7tok+n/sznmPuHqkU
l2c18uEe4l/jI374P5fnQml6Um9x+7Ds6LtGNFIytIiVTz+IY8zkyDuGa1BB
RyO3alyB4NWJ4LJkNw8ovLe9zobvcv1hft+iMuH/vH+EPOdQoYYNeWhjJxC3
ZH2Ou2eUDkO5IdbL/k6P4qsMl9lzLd+FaMwa4vIZfweluIf8bQTcRm9tbw1K
tzpK1oW/ZR0aJxoO1gEL/aBjkN9oZqvHR3zb7+ZyGSydBl5TZOlbEjljvQ+5
dZCOJXjjILt7kT0PUvYcrg/MiRcs0zQJC1TQ8d4xrExKmioC4D5pTncMsykX
7lPXNbmya6LP4r2jZahco0Yhn43yk9CG4fJ1nU3Hwc0LI4V8MeEj/RLI19gX
iM9Y118IL8AT/D9GJrcPOUtUvmVgVeMCifXWrOldI6pdJ7g4ukUza8dlzBMu
MqYs0KqTqYTDTX70OlMJg5NKaOviz5Jxj5h4USVs4zNSdAEnymfMmJkb++l1
jQu049GJdvbI6lr8M6CoEg9xycvVnzEN74eYGAQc4osNxbYJC1OqDVwfJfbc
JunsQ13PcClq0hVHCLBO0bUWQnxIRxO+0Jz56HZIiwoZGB0jC90UpII0R4um
DWEONnSrxe2aZMfKg7ggqWPjkAQPXA/J8GXWByqf+CWhNGoKPBcz09U2to3V
DNXT1oWPkcEYfA2hgzhcztdhmvi6PX1gJQPbyw1sve5s0cBe0HN8Nv+VV8XA
LnztNXnv5VcXZhf1NgO7p153lo7nxrELsm7PvJldNfA5HQOU/e2jT+p7nSa+
lh0b/CA/J94/Nrtj8qLswZnLFMEbThmqTNp50mtZ16dXZBc//nS6z3XDX8x6
Prsqu27EiyFQ+tlZgvx7PLMyu3ncKyoQgRTP6DYpu2/GG9m901/PTu8+KfEc
/57Va0p219Sl2cPPv5P1mftu1vu5t7M7pi4WL2JS4gTufcGjM7P7n1yWPfrC
6uwx+eHv8x+ekd0xZXF29/Sl2YkPjE3cw3vdZr2Z/e6J2b42Q7KTHhyf3TNt
afaoPIPn8P1L+s3SueBEnNN7asJocONNY17WMfE8/v3tY0/pZ6zr7554Vu6/
UsfB58z5+hHzhONH51h1N7u887CsgzwC0j485219dJenlqtR/KWQHVYKUiAI
fxw1P+s5e1X2sJDhIfm5Z4aQrNtE1TNKDrnu6LtHZJ1lubrIslwowzrU78HQ
rpTl7vXcW9lFfZ9K5IAElw94Vpe+8+TXSgzzxOVfZMNe+0SH/5CMr7d8t4c8
/w8jXzK93mmIqYDmOkQo2nP2yuzxee/p5TcKlaDsXdOWKNWFewx8f0+N6R9H
v6QzhkhcfsXAZ5W4MNWjc1dnj8hnjIrbXiEjf1Aoc6UzLI+DUe8Rprly0HPZ
3bJ4j/jiPTBzuTJOUlAtVZIv7f+MTv6Rue/ohJVfEWfhxRvGLMi6yzrx9Udk
PR+UW+BEKp/GJJvoVy4WtoC2TOiX947JtezuStLj7x+T3SvcjFTwRDNMQ7Kr
Bz+fdRWu4+k8hclc+sQz5u50yrmdCT3yvE2Epb5p7MvZCcoKNmkk8Jbxr6ok
cA3cd59wK0t95O1iouSas3tN1eFxzaM+Iwh0cpfxSY+e03tadqdcAxs9+kJ+
DesF0qxxyvHcE0R6+CxxtKzxGSKBId3XDntBuRz2gI3vE7Y87+HpzH2bgiU8
XqjFdCANZHj4+bezB2ToEFqUifmRovoxD9fIewwJVkKZdJBHMC04HgUCN/P4
C4WTkZi7RUmQGLOV+hcl1bF3j8punbAw6yNDhlRdn35T+Qd+Cb4KbxPhbj90
rk4BcnB9+2EvKjqGeU4TKbtblkaFHkUk0+w8eXH2KyHjYXJNSNK5Mu37ZizT
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
1GYFkaXqf7CWr2zUJLG6myKyPZ9daU3qppjIxknYVPJru1/xtouDtb1ZmUJF
F9VAvQQb2AovqyeqTbhHvkJilOOaqLFmZG6mtyt8hSfht1eSzCcq2N+Ty0+7
/p8vmQcEuWgYbycpu91poRSl2IWCL3TsOd6hnKng/ZDiJtGLzt3W7xOgCS9i
Z/dPwlnj/sQbMERH+7GpMrmflnzVHJDtCgJIsTxlVJRgHXzboCSAFkgdrTzH
595db6eCWBBi8yOb9ylgYoezVd8tvHe4EUDYi7LZah2sV3pU/UP5CJMBMs5F
KKi6wVrQZUM8l6Y+97Yen6lj7t8zgCx/tXC5JEhK2A8nwIKrRlA6vYHZCXHL
eyFMfsSv/q84JGI7YAkOmDveWiHEwbd+RHj6YWieDeZWLSvcuR7TdkqX+vYh
/c8XoPaJ3Yb6GcEj8zBqdfKIAA9XFjgTXjjSjs1tGm97PJmPDus0pL/fgf8S
RSH1tXf5XVO0xGqOjrHjk6v+b0Frw3HGzMMqLePsv+pBlrGDCaKMsEPQuBAF
albhvX7pG/tX+PT/ppUaWkrKOshfEmQtzxz/zyd/JdLkv96rSKT/51TNNydS
rcbWfyXSXzmpwUSqt9j3r0T6q7h9O07q8lfrtnmd9FdO+qtO2jpE+stat4U5
kZb+ZxFJ/axGtj+/XadyZK5EeLjeS/7OSRTFkFYjVfu6g9Jd9NNGdTX8OrWi
hP/F1uXnsi5zl62uyT79gsrk+W++/5+zLgf6DHkIO9Llh66Jtw0u7KI5rHNU
ypnvFNc14XcEdxnGwd7RhrPfjuPUkntHZb+Un1/cM1JcZkI+wxppJ9/qYrFA
1fb83tkfWvygurDm8dDGFa7bKSbRMZ9Etf8+xMtADyu4jIcWrov7RWsx218k
7+1QgTL5w8uqEcpuWl1hkHE/PRar1nVDa02meL9m/nTtTaPpT2WqbeuhT3Hx
NHLXJE00J0iTugiSnOsKky/eOQ8x1h5BUDQtcdkK6XUt6lmS4tJF1PmQ23Lq
7VSBejX1ULk4oL93wrTdHNsSjPMz7/zoP4/pWbLK2skM0Ws4hpvvHH+P3SO+
z739utKlqLVGZeyWeDjvkZUHFI1X9VpUgT+8ESOXj4/TCNUI37fqHNNp6A71
rGuRjNvUtV4NkKhK5K6kgb9nGrj+Iyb/XBq4aS0NbLX5E7KL+0yV5130yBS5
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
dpr/5v8B6f8/BA==\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"1af6d8a6-9e37-472c-acf6-9ebdfc012c82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"resource", " ", "object"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"resObj", " ", "=", " ", 
   RowBox[{
   "ResourceObject", "[", 
    "\"\<Coronavirus COVID-19 Pandemic Government Measures\>\"", 
    "]"}]}]}]], "Code",
 CellChangeTimes->{{3.798727682053714*^9, 3.798727694374593*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"55b94054-18b9-43c6-96b9-516a50b84042"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ResourceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.011111111111111112`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
                 7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                 3.266}, {3.789, 3.266}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129,
                  54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
                 15.57}, {14.129, 15.57}}}]}, {
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]]}, StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129,
                  41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                 38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191,
                  31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
                 42.191, 15.569999999999997`}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 51.223000000000006`, 46.875}, {56.973000000000006`, 
                 46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254,
                  37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
                 15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, {
                FaceForm[
                 RGBColor[0.274612, 0.618881, 0.810913, 1.]]}, StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                 75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                 56.547}, {9.879000000000001, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
                 13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121,
                  9.097999999999999}, {9.871, 9.097999999999999}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                 80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                  66.54700000000001}, {45., 82.418}, {78.398, 
                  66.54700000000001}}, {{45., 86.73400000000001}, {
                  2.2230000000000003`, 66.54700000000001}, {
                  2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                  66.54700000000001}}}]}, {
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]]}, StripOnInput -> 
               False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
             Frame -> None, FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}, ImageSizeCache -> {45., {0., 9.}}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "\"Coronavirus COVID-19 Pandemic Government Measures\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/\
Coronavirus-COVID-19-Pandemic-Government-Measures"}, "HyperlinkURL"]}, 
                   "RowDefault"], "SummaryItem"]}], 
               TagBox["\"\"", "SummaryItem"]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               TagBox[
                DynamicModuleBox[{ResourceSystemClient`Private`len$$ = 1}, 
                 RowBox[{
                   TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    ButtonBox[
                    DynamicBox[
                    ToBoxes[
                    Replace[
                    ResourceSystemClient`Private`snipDots[
                    "Measures taken by governments from different countries \
to fight the coronavirus COVID-19 pandemic caused by the SARS-CoV-2", 
                    ResourceSystemClient`Private`len$$], Except[
                    Blank[String]] -> 
                    Snippet[
                    "Measures taken by governments from different countries \
to fight the coronavirus COVID-19 pandemic caused by the SARS-CoV-2", 
                    ResourceSystemClient`Private`len$$], {0}], StandardForm]],
                     ButtonFunction :> (ResourceSystemClient`Private`len$$ = 
                    Ceiling[ResourceSystemClient`Private`len$$ 1.5]), 
                    Appearance -> None, BaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], "SummaryItem"]}], 
                 DynamicModuleValues :> {}], "SummaryItem"], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.011111111111111112`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
                 7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                 3.266}, {3.789, 3.266}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129,
                  54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
                 15.57}, {14.129, 15.57}}}]}, {
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]]}, StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129,
                  41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                 38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191,
                  31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
                 42.191, 15.569999999999997`}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 51.223000000000006`, 46.875}, {56.973000000000006`, 
                 46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254,
                  37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
                 15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, {
                FaceForm[
                 RGBColor[0.274612, 0.618881, 0.810913, 1.]]}, StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                 75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                 56.547}, {9.879000000000001, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
                 13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121,
                  9.097999999999999}, {9.871, 9.097999999999999}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                 80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                  66.54700000000001}, {45., 82.418}, {78.398, 
                  66.54700000000001}}, {{45., 86.73400000000001}, {
                  2.2230000000000003`, 66.54700000000001}, {
                  2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                  66.54700000000001}}}]}, {
                FaceForm[
                 RGBColor[0.648987, 0.648987, 0.648987, 1.]]}, StripOnInput -> 
               False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
             Frame -> None, FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}, ImageSizeCache -> {45., {0., 9.}}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "\"Coronavirus COVID-19 Pandemic Government Measures\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://datarepository.wolframcloud.com/resources/\
Coronavirus-COVID-19-Pandemic-Government-Measures"}, "HyperlinkURL"]}, 
                   "RowDefault"], "SummaryItem"]}], 
               TagBox["\"\"", "SummaryItem"]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               TagBox[
                DynamicModuleBox[{ResourceSystemClient`Private`len$$ = 1}, 
                 RowBox[{
                   TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    ButtonBox[
                    DynamicBox[
                    ToBoxes[
                    Replace[
                    ResourceSystemClient`Private`snipDots[
                    "Measures taken by governments from different countries \
to fight the coronavirus COVID-19 pandemic caused by the SARS-CoV-2", 
                    ResourceSystemClient`Private`len$$], Except[
                    Blank[String]] -> 
                    Snippet[
                    "Measures taken by governments from different countries \
to fight the coronavirus COVID-19 pandemic caused by the SARS-CoV-2", 
                    ResourceSystemClient`Private`len$$], {0}], StandardForm]],
                     ButtonFunction :> (ResourceSystemClient`Private`len$$ = 
                    Ceiling[ResourceSystemClient`Private`len$$ 1.5]), 
                    Appearance -> None, BaseStyle -> {}, Evaluator -> 
                    Automatic, Method -> "Preemptive"], "SummaryItem"]}], 
                 DynamicModuleValues :> {}], "SummaryItem"], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"Demographics\"", "\"Economics\"", 
                    "\"Geography\"", "\"Government\"", "\"Health\"", 
                    "\"Healthcare\"", "\"Medicine\"", "\"Politics\"", 
                    "\"Statistics\""}, "RowWithSeparators"], Short], 
                  "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"ContentTypes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"Entity Store\"", "\"Numerical Data\"", 
                    "\"Text\"", "\"Time Series\""}, "RowWithSeparators"], 
                   Short], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Keywords: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"COVID-19\"", "\"Coronavirus\"", 
                    "\"Government\""}, "RowWithSeparators"], Short], 
                  "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Documentation: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "\"https://datarepository.wolframcloud.com/resources/\
Coronavirus-COVID-19-Pandemic-Government-Measures\"", 
                    "https://datarepository.wolframcloud.com/resources/\
Coronavirus-COVID-19-Pandemic-Government-Measures"}, "HyperlinkURL"], 
                  "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Data Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  DynamicModuleBox[{
                   ResourceSystemClient`Private`typesetstorage$$ = 
                    ResourceSystemClient`Private`typesetstorageLocation, 
                    ResourceSystemClient`Private`info$$}, 
                   DynamicBox[
                    ToBoxes[
                    ResourceSystemClient`Private`info$$ = 
                    ResourceSystemClient`Private`resourceInfo[
                    "51d1545a-614f-4b18-8a81-ca72189a986f"]; If[
                    AssociationQ[ResourceSystemClient`Private`info$$], 
                    ResourceSystemClient`Private`typesetstorage$$[
                    Lookup[
                    ResourceSystemClient`Private`info$$, 
                    "ContentElementLocations", None]], 
                    Missing["NotAvailable"]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"51d1545a-614f-4b18-8a81-ca72189a986f\"", "SummaryItem"]}],
                ""}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.0.0\"", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"\[LeftAssociation]", 
                    RowBox[{"\"Dataset\"", "\[Rule]", "11177800"}], 
                    "\[RightAssociation]"}], "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{",", "\",\"", "\"Dataset\""}, 
                    "RowWithSeparators"], Short[#, 2]& ], "SummaryItem"]}], 
               ""}}, GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ResourceObject[
   Association[
   "Name" -> "Coronavirus COVID-19 Pandemic Government Measures", "UUID" -> 
    "51d1545a-614f-4b18-8a81-ca72189a986f", "ResourceType" -> "DataResource", 
    "Version" -> "1.0.0", "Description" -> 
    "Measures taken by governments from different countries to fight the \
coronavirus COVID-19 pandemic caused by the SARS-CoV-2", "RepositoryLocation" -> 
    URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
    "WolframLanguageVersionRequired" -> "10.0", "ContentSize" -> 
    Association["Dataset" -> 11177800], "ContentElements" -> {"Dataset"}], 
   ResourceSystemBase -> Automatic],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.798727617476224*^9, 3.798727707111074*^9, 
  3.798737121830369*^9, 3.7987373293736687`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"8c25fa16-54b9-402d-99c0-ae49b415315b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"get", " ", "resource", " ", "data"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"resObjData", " ", "=", " ", 
   RowBox[{"ResourceData", "@", "resObj"}]}]}]], "Code",
 CellChangeTimes->{{3.7987277953200893`*^9, 3.7987278598714323`*^9}, {
  3.7987279691585197`*^9, 3.798727970419702*^9}, {3.798728079687549*^9, 
  3.798728080380674*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"3bb6b93a-6332-45d5-8593-0954f4b7f01a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
       Association[
        "InitialData" -> 
         TypeSystem`CacheKey[
          9905156598872827277708971330687343797419829284063409459208], 
         "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
           
           Association[{All, "ID"} -> 1, {All, "Country"} -> 
            1, {All, "UNCode"} -> 1, {All, "AdministrativeDivision"} -> 
            1, {All, "PCode"} -> 1, {All, "Region"} -> 1, {All, "Continent"} -> 
            1, {All, "Category"} -> 1, {All, "Measure"} -> 
            1, {All, "TargetedPopulationGroup"} -> 1, {All, "Comments"} -> 
            1, {All, "NonCompliance"} -> 1, {All, "ImplementationDate"} -> 
            1, {All, "Source"} -> 1, {All, "SourceType"} -> 1, {All, "Link"} -> 
            1, {All, "EntryDate"} -> 1, {All, "AlternativeSource"} -> 1], 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[
               Association[
               "ID" -> TypeSystem`PackageScope`AtomShape[34], "Country" -> 
                TypeSystem`PackageScope`AtomShape[90], "UNCode" -> 
                TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                "AdministrativeDivision" -> 
                TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                "PCode" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Region" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Continent" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Category" -> TypeSystem`PackageScope`AtomShape[252.], 
                "Measure" -> 
                TypeSystem`PackageScope`AtomShape[480.00000000000006`], 
                "TargetedPopulationGroup" -> 
                TypeSystem`PackageScope`AtomShape[36], "Comments" -> 
                TypeSystem`PackageScope`AtomShape[480.00000000000006`], 
                "NonCompliance" -> 
                TypeSystem`PackageScope`UnknownShape[False], 
                "ImplementationDate" -> TypeSystem`PackageScope`AtomShape[75],
                 "Source" -> 
                TypeSystem`PackageScope`AtomShape[259.20000000000005`], 
                "SourceType" -> TypeSystem`PackageScope`AtomShape[171.], 
                "Link" -> TypeSystem`PackageScope`AtomShape[60], "EntryDate" -> 
                TypeSystem`PackageScope`AtomShape[75], "AlternativeSource" -> 
                TypeSystem`PackageScope`UnknownShape[False]]], 
              DirectedInfinity[1], 10, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "ID", "Country", "UNCode", "AdministrativeDivision", "PCode", 
             "Region", "Continent", "Category", "Measure", 
             "TargetedPopulationGroup", "Comments", "NonCompliance", 
             "ImplementationDate", "Source", "SourceType", "Link", 
             "EntryDate", "AlternativeSource"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              Entity["Country"]], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], TypeSystem`UnknownType, 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "Lockdown", "Movement restrictions", "Public health measures", 
               "Social and economic measures", "Social distancing"]], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[TypeSystem`Boolean], 
             TypeSystem`Atom[String], TypeSystem`UnknownType, 
             TypeSystem`Atom[DateObject], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "Government", "Media", "Other", "Other organisations", 
               "Social media", "UN"]], 
             TypeSystem`Atom[URL], 
             TypeSystem`Atom[DateObject], TypeSystem`UnknownType}], 2532], 
         "Meta" -> Association["ID" -> 225846757189241], "RowTarget" -> 20, 
         "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
           
           Association[{All, "ID"} -> 1, {All, "Country"} -> 
            1, {All, "UNCode"} -> 1, {All, "AdministrativeDivision"} -> 
            1, {All, "PCode"} -> 1, {All, "Region"} -> 1, {All, "Continent"} -> 
            1, {All, "Category"} -> 1, {All, "Measure"} -> 
            1, {All, "TargetedPopulationGroup"} -> 1, {All, "Comments"} -> 
            1, {All, "NonCompliance"} -> 1, {All, "ImplementationDate"} -> 
            1, {All, "Source"} -> 1, {All, "SourceType"} -> 1, {All, "Link"} -> 
            1, {All, "EntryDate"} -> 1, {All, "AlternativeSource"} -> 1], 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[
               Association[
               "ID" -> TypeSystem`PackageScope`AtomShape[34], "Country" -> 
                TypeSystem`PackageScope`AtomShape[90], "UNCode" -> 
                TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                "AdministrativeDivision" -> 
                TypeSystem`PackageScope`AtomShape[28.800000000000004`], 
                "PCode" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Region" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Continent" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Category" -> TypeSystem`PackageScope`AtomShape[252.], 
                "Measure" -> 
                TypeSystem`PackageScope`AtomShape[480.00000000000006`], 
                "TargetedPopulationGroup" -> 
                TypeSystem`PackageScope`AtomShape[36], "Comments" -> 
                TypeSystem`PackageScope`AtomShape[480.00000000000006`], 
                "NonCompliance" -> 
                TypeSystem`PackageScope`UnknownShape[False], 
                "ImplementationDate" -> TypeSystem`PackageScope`AtomShape[75],
                 "Source" -> 
                TypeSystem`PackageScope`AtomShape[259.20000000000005`], 
                "SourceType" -> TypeSystem`PackageScope`AtomShape[171.], 
                "Link" -> TypeSystem`PackageScope`AtomShape[60], "EntryDate" -> 
                TypeSystem`PackageScope`AtomShape[75], "AlternativeSource" -> 
                TypeSystem`PackageScope`UnknownShape[False]]], 
              DirectedInfinity[1], 10, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "ID", "Country", "UNCode", "AdministrativeDivision", "PCode", 
             "Region", "Continent", "Category", "Measure", 
             "TargetedPopulationGroup", "Comments", "NonCompliance", 
             "ImplementationDate", "Source", "SourceType", "Link", 
             "EntryDate", "AlternativeSource"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              Entity["Country"]], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[String], TypeSystem`UnknownType, 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "Lockdown", "Movement restrictions", "Public health measures", 
               "Social and economic measures", "Social distancing"]], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[TypeSystem`Boolean], 
             TypeSystem`Atom[String], TypeSystem`UnknownType, 
             TypeSystem`Atom[DateObject], 
             TypeSystem`Atom[String], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "Government", "Media", "Other", "Other organisations", 
               "Social media", "UN"]], 
             TypeSystem`Atom[URL], 
             TypeSystem`Atom[DateObject], TypeSystem`UnknownType}], 2532], 
         "Path" -> {}, "BaseIndices" -> {}, "DisplayedRowCount" -> 20, 
         "DisplayedColumnCount" -> 10, "DataRowCount" -> 2532, 
         "DataColumnCount" -> 18, "SortPaths" -> {}, "SortDirections" -> {}, 
         "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["ID", 
                    Style[
                    "ID", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "ID"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "ID"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Country", 
                    Style[
                    "Country", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Country"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Country"}, "ColumnHeader", True], "Mouse"], " ", 
                    ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["UNCode", 
                    Style[
                    "UNCode", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "UNCode"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "UNCode"}, "ColumnHeader", True], "Mouse"], " ", 
                    ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["AdministrativeDivision", 
                    Style[
                    "AdministrativeDivision", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "AdministrativeDivision"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "AdministrativeDivision"}, "ColumnHeader", True], 
                    "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["PCode", 
                    Style[
                    "PCode", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PCode"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PCode"}, "ColumnHeader", True], "Mouse"], " ", ""}],
                   ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Region", 
                    Style[
                    "Region", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Region"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Region"}, "ColumnHeader", True], "Mouse"], " ", 
                    ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Continent", 
                    Style[
                    "Continent", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Continent"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Continent"}, "ColumnHeader", True], "Mouse"], " ", 
                    ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Category", 
                    Style[
                    "Category", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Category"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Category"}, "ColumnHeader", True], "Mouse"], " ", 
                    ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["Measure", 
                    Style[
                    "Measure", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Measure"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Measure"}, "ColumnHeader", True], "Mouse"], " ", 
                    ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Row[{
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["TargetedPopulationGroup", 
                    Style[
                    "TargetedPopulationGroup", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "TargetedPopulationGroup"}, 1]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "TargetedPopulationGroup"}, "ColumnHeader", True], 
                    "Mouse"], " ", ""}], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Public health measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                  "Health screenings in airports and border crossings", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Kabul", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Public health measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Introduction of quarantine policies", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Public health measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Awareness campaigns", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social and economic measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                  "Emergency administrative structures activated or \
established", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["5"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social distancing", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Limit public gatherings", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["6"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Movement restrictions", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Border closure", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["8"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Herat", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social distancing", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Schools closure", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["10"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Herat", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social distancing", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Limit public gatherings", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["12"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Public health measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Strengthening the public health system", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["17"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social and economic measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Limit product imports/exports", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["23"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Afghanistan\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["AFG", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Asia\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Movement restrictions", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Border checks", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["27"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Movement restrictions", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["International flights suspension", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["28"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Tirana and Durres", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Movement restrictions", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Domestic travel restrictions", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["29"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social distancing", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Schools closure", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["30"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social distancing", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Limit public gatherings", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["31"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Movement restrictions", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Checkpoints within the country", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["32"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Public health measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Introduction of quarantine policies", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["True"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["34"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Social and economic measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Economic measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["35"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Public health measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Awareness campaigns", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["925"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["ID"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Albania\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Country"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{90, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["ALB", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["UNCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["AdministrativeDivision"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   Style["-", 
                    GrayLevel[0.85]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PCode"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Region"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["\"Europe\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Continent"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Public health measures", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Category"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{252., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                  "Health screenings in airports and border crossings", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Measure"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["False"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["TargetedPopulationGroup"]}, "Item", False], "Mouse"],
                   ImageSize -> {{36, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 2532, 1], {1, 2532 - -20 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 2532, 1], {1, 2532 - -20 + 1}], Appearance -> 
                    None], " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[2532, FontColor -> GrayLevel[0], FontWeight -> 
                    "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    2532, FontColor -> GrayLevel[0], FontWeight -> "Medium"]},
                     BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 2532, 1], {1, 2532 - 20 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 2532, 1], {1, 2532 - 20 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                    Graphics[{
                    RGBColor[
                    0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                    Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ - 10 
                    If[True, 18, 1], {1, 18 - -10 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ - 10 
                    If[False, 18, 1], {1, 18 - -10 + 1}], Appearance -> None],
                     " ", 
                    Style[
                    Mouseover[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[
                    18, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[
                    18, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 18, 1], {1, 18 - 10 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 18, 1], {1, 18 - 10 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                    Graphics[{
                    RGBColor[
                    0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                    Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                    Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
                 Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[
                   TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
                "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
              Left, Dividers -> All, FrameStyle -> 
              GrayLevel[0.7490196078431373], 
              BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
             LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
             False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             If[GeneralUtilities`$DebugMode, 
              Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
                TypeSystem`NestedGrid`PackagePrivate`formatState[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
          TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
           TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
          TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
          TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
          TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
         ImageSizeCache -> {1503., {300.134033203125, 305.865966796875}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[], 
       ImageSizeCache -> {1503., {300.134033203125, 305.865966796875}}], 
      BaseStyle -> {LineBreakWithin -> False}, DynamicModuleValues :> {}, 
      Initialization :> 
      Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
        Needs["Dataset`"]; 
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]], 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 9905156598872827277708971330687343797419829284063409459208,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.798727808699213*^9, 3.798727860668612*^9}, 
   3.798727977014801*^9, 3.798728081813178*^9, 3.798728338148131*^9, 
   3.7987290958406076`*^9, 3.798737123804989*^9, 3.798737329673499*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"2dcd9516-0be0-4c4d-861f-933ecf411eb9"]
}, Open  ]],

Cell["\<\
Each enacted measure is categorised and contains 18 a total of properties \
including its implementation data and the source of the information.\
\>", "Text",
 CellChangeTimes->{{3.798727992566537*^9, 3.798727995748787*^9}, {
  3.7987280417567043`*^9, 3.7987280639320374`*^9}, {3.798728236182741*^9, 
  3.798728237464336*^9}, {3.798729776825437*^9, 
  3.798729801534679*^9}},ExpressionUUID->"256cdcdd-7726-4d63-bfc5-\
94fa15a5c787"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"resObjData", "[", 
    RowBox[{
     RowBox[{"GroupBy", "@", "\"\<Category\>\""}], ",", " ", ";;", ",", " ", 
     "\"\<Measure\>\""}], "]"}], "[", 
   RowBox[{";;", ",", " ", "Tally"}], "]"}], "[", 
  RowBox[{";;", ",", " ", 
   RowBox[{"ReverseSortBy", "[", "Last", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.798733385772469*^9, 3.798733436555954*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"28fe6a11-8b37-4fc5-a63a-039cb982db90"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "Public health measures" -> {{
         "Introduction of quarantine policies", 292}, {
         "Health screenings in airports and border crossings", 148}, {
         "Strengthening the public health system", 145}, {
         "General recommendations", 126}, {"Awareness campaigns", 102}, {
         "Testing policy", 11}, {
         "Psychological assistance and medical social work", 6}, {
         "Mass population testing", 3}, {
         "Amendments to funeral and burial regulations", 3}, {
         "Obligatory medical tests not related to COVID-19", 1}}, 
       "Social and economic measures" -> {{"Economic measures", 149}, {
         "Emergency administrative structures activated or established", 
          71}, {"State of emergency declared", 62}, {
         "Military deployment", 16}, {"Limit product imports/exports", 7}, {
         "Schools closure", 1}}, 
       "Social distancing" -> {{"Limit public gatherings", 285}, {
         "Schools closure", 149}, {"Public services closure", 120}, {
         "Changes in prison-related policies", 14}, {
         "Introduction of quarantine policies", 1}, {"Border checks", 1}}, 
       "Movement restrictions" -> {{"Visa restrictions", 189}, {
         "International flights suspension", 189}, {"Border closure", 176}, {
         "Domestic travel restrictions", 51}, {"Curfews", 45}, {
         "Additional health/documents requirements upon arrival", 40}, {
         "Surveillance and monitoring", 28}, {"Border checks", 24}, {
         "Checkpoints within the country", 7}, {
         "Lockdown of refugee/idp camps or other minorities", 3}, {
         "Complete border closure", 1}}, 
       "Lockdown" -> {{"Partial lockdown", 57}, {"Full lockdown", 6}}, 
       Missing["NotAvailable"] -> {{"State of emergency declared", 1}, {
         "Schools closure", 1}, {"Limit public gatherings", 1}}], 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`RowShape[{
              TypeSystem`PackageScope`UnknownShape[False], 
              TypeSystem`PackageScope`UnknownShape[False]}], 
            DirectedInfinity[1], 2, {All, All}]], 4, 
          DirectedInfinity[1], {All}]]], 5, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Vector[
        TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType}], 
        TypeSystem`AnyLength], 6], "Meta" -> 
     Association["ID" -> 67121950119619], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`RowShape[{
              TypeSystem`PackageScope`UnknownShape[False], 
              TypeSystem`PackageScope`UnknownShape[False]}], 
            DirectedInfinity[1], 2, {All, All}]], 4, 
          DirectedInfinity[1], {All}]]], 5, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Vector[
        TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType}], 
        TypeSystem`AnyLength], 6], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     6, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Public health measures", 
                  Style[
                  "Public health measures", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Public health measures"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Introduction of quarantine policies", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 1, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["292"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 1, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Health screenings in airports and border crossings", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 2, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["148"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 2, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Strengthening the public health system", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 3, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{364.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["145"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 3, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["General recommendations", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 4, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["126"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 4, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["10 total \:203a ", ""], 
                  Style[
                   Superscript["10 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Public health measures"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Social and economic measures", 
                  Style[
                  "Social and economic measures", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social and economic measures"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Economic measures", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 1, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{163.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["149"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 1, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
              "Emergency administrative structures activated or established", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 2, 1}, "Item", False], 
               "Mouse"], ImageSize -> {{576.0000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 2, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["State of emergency declared", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 3, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{259.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["62"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 3, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Military deployment", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 4, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["16"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 4, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social and economic measures"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Social distancing", 
                  Style[
                  "Social distancing", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social distancing"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Limit public gatherings", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 1, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["285"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 1, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Schools closure", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{144.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["149"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Public services closure", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 3, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["120"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 3, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Changes in prison-related policies", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 4, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{326.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 4, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social distancing"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Movement restrictions", 
                  Style[
                  "Movement restrictions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Movement restrictions"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"]}, "RowHeader", False], "Mouse"],
               ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Visa restrictions", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 1, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{163.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["189"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 1, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["International flights suspension", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 2, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{307.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["189"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 2, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Border closure", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 3, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["176"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 3, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Domestic travel restrictions", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 4, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 4, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["11 total \:203a ", ""], 
                  Style[
                   Superscript["11 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Movement restrictions"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Lockdown", 
                  Style[
                  "Lockdown", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Lockdown"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Partial lockdown", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 1, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["57"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 1, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Full lockdown", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[True, 6, 1], {1, 6 - -5 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[False, 6, 1], {1, 6 - -5 + 1}], Appearance -> None], 
                    " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    6, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    6, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[False, 6, 1], {1, 6 - 5 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[True, 6, 1], {1, 6 - 5 + 1}], Appearance -> None]}], 
                  ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{941., {290.634033203125, 296.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{941., {290.634033203125, 296.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.798733381434188*^9, 3.798733436923662*^9}, 
   3.798737330984255*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"966dd986-d94b-42d3-b8af-57ac22cc4dc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "groupings", " ", "of", " ", "categories", " ", "and", " ", "measures"}], 
   " ", "*)"}], "\n", 
  RowBox[{"GraphPlot", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{"Thread", "/@", 
      RowBox[{"(", 
       RowBox[{"Normal", "@", 
        RowBox[{"Normal", "@", 
         RowBox[{
          RowBox[{"resObjData", "[", 
           RowBox[{
            RowBox[{"GroupBy", "@", "\"\<Category\>\""}], ",", " ", ";;", ",",
             " ", "\"\<Measure\>\""}], "]"}], "[", 
          RowBox[{";;", ",", " ", "DeleteDuplicates"}], "]"}]}]}], ")"}]}], 
     "]"}], ",", " ", "\n", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", " ", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<BalloonEmbedding\>\""}], ",", " ", 
    RowBox[{"ImageSize", "\[Rule]", "800"}], ",", " ", 
    RowBox[{"DirectedEdges", "\[Rule]", "True"}], ",", " ", 
    RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "\n", "]"}]}]], "Code",
 CellChangeTimes->{{3.798729076523864*^9, 3.7987292609686317`*^9}, {
  3.798729406848563*^9, 3.798729449204339*^9}, {3.798729481475336*^9, 
  3.798729608700527*^9}, {3.798729692657238*^9, 3.798729701759202*^9}, {
  3.798729755682414*^9, 3.798729766803227*^9}, {3.798735507579101*^9, 
  3.798735510623901*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"1502f7a9-807c-4ef4-ab61-f3d1be624930"],

Cell[BoxData[
 GraphicsBox[{
   {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.019224843019121078`], 
    ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGBQA2ImKFbjU74j+5HBQWCXknr6zS/7BWTjup9sZXA4UPFF
6EjV3/3o8lONArNX8TM7vDXwlfycxHgAXb5R+bbtbjVWhwn/I/5uPvsNQ3+i
XwrLPd+f9g52+wUynnzFkD8obDR7+iImh4YZMZunnn6JIV+34rHik9j/9g55
H592amLK179n+X6pk9lhzeJfXUyHfmPan2rRHfH7t31DuVjrHk1Meb1ZetqZ
p1kcOv7n3vF5/wFDPuXZjt3iS37Zv9jK2qai9GH/fUfntoKoj/ZrT0yPb9QV
PlBzP5HZNvmj/f239S+i8kUOoMsXZE/h4vT4Yh9RfW72FXUhDHmZyJ/nzPa+
seewMJmZpYUp76J65Yqt+Df7XRuyeR6dwDT/yKwnZj2q3+yvHZt14V6fMIY8
NNzsvZpvvuedLHxAhenp+7uz2B247H+nMWoIHECPX3R5dPvR5W8o2zjXW3yw
P2muvqClmg9DfkfsYhHvIywOLfuN5h2/LI4hv5b95OpzOwUdMrjnBJ3QYMOQ
v9axfNHffiEHMTGR1uM8IgdCJHnSY16JOiw1bn6p/1uUoHx431ZH+wARhyz9
2H1LTTDly37a/AzdLezQfOXEoiNfxDDkDW50/3gtLe6wT+dM5voXwhjyi6Rz
Cn5piTm4KC/68jNaAkOemTkoPshRwsFz3e/ztysxzV+ifywvbbKwA+NOLuaW
GlEMeVbxNbH7Voo6sLmk3EudhWl/eVTP1TM7RBx6rKwyN/Bi2m9keftKkqSE
w/FJtgazGTHND1iS1FPZIu7wwHylyK6D4gcmx527saVbzkFh+49PR6b82Q/j
T4iuqUzyYsMpD8ufyzlSlbmv/LI/McN+p1OKGEb6QZdHT7/o8ujpCwBRejDP

     "], 0.05267692673029968]}, 
   {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
    0.7]}], {DiskBox[{2.1177327345083254, -1.303076889871253}, 
      0.05267692673029968], 
     InsetBox["\<\"Public health measures\"\>", {2.190941465331571, -1.2941771928899928},
       ImageScaled[{-0.2445188126069241, 0.40949178117775303}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.0888148201080483, -1.8424721470287722}, 0.05267692673029968], 
     InsetBox["\<\"Health screenings in airports and border crossings\"\>", {2.0848667479978875, -1.9161140888942725},
       ImageScaled[{0.5401511394404647, 1.2489244861811053}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.3826492675928628, -2.1733152367288455}, 0.05267692673029968], 
     InsetBox["\<\"Introduction of quarantine policies\"\>", {2.3120981580525304, -2.1947922900122157},
       ImageScaled[{1.217491311656379, 0.718417530655414}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.6439118225575275, -1.4252204796211778}, 0.05267692673029968], 
     InsetBox["\<\"Awareness campaigns\"\>", {2.715749402326319, -1.4418963606495139},
       ImageScaled[{-0.2305744682167491, 0.6695905256487349}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.5815105601840502, -1.3682633070165053}, 0.05267692673029968], 
     InsetBox["\<\"Strengthening the public health system\"\>", {1.5083018293608041, -1.3771630039977656},
       ImageScaled[{1.2445188126069242, 0.590508218822247}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.3293907284409845, -0.8061016562612764}, 0.05267692673029968], 
     InsetBox["\<\"General recommendations\"\>", {2.358287730180852, -0.7382511870988983},
       ImageScaled[{0.20612301044788583, -0.19002631472414633}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.960422642116583, -0.7863206378055523}, 0.05267692673029968], 
     InsetBox["\<\"Testing policy\"\>", {1.9389455888332128, -0.7157695282652196},
       ImageScaled[{0.7184175306554148, -0.2174913116563788}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.442296914899941, -1.7348657063359765}, 0.05267692673029968], 
     InsetBox["\<\"Psychological assistance and medical social work\"\>", {2.486608643983319, -1.7938164785170942},
       ImageScaled[{0.04935817694519046, 1.0995180959018982}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.7488637388508652, -1.697689552187029}, 0.05267692673029968], 
     InsetBox["\<\"Mass population testing\"\>", {1.6985032123654433, -1.751564780699026},
       ImageScaled[{1.012156937561335, 1.0479007860076446}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.5993216870877154, -1.0584229097875966}, 0.05267692673029968], 
     InsetBox["\<\"Amendments to funeral and burial regulations\"\>", {2.6650715155823357, -1.0250210695982185},
       ImageScaled[{-0.16866320026927673, 0.16030966365578025}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.6650616963292117, -1.0083356127973904}, 0.05267692673029968], 
     InsetBox["\<\"Obligatory medical tests not related to COVID-19\"\>", {1.603259939944752, -0.9680955111212681},
       ImageScaled[{1.1285120608288135, 0.09076585016311522}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.0845799679410602, -4.794438832892564}, 0.05267692673029968], 
     InsetBox["\<\"Social and economic measures\"\>", {1.041640932177735, -4.854396835551297},
       ImageScaled[{0.9366817941180039, 1.109761437519528}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.086728108608411, -5.108745224769762}, 0.05267692673029968], 
     InsetBox["\<\"Emergency administrative structures activated or \
established\"\>", {1.0872321286735236, -5.182491199838797}, ImageScaled[{0.4948742121849695, 1.2499824839949767}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.2675867474815412, -4.538896975019121}, 0.05267692673029968], 
     InsetBox["\<\"Limit product imports/exports\"\>", {1.3105257832448665, -4.478938972360388},
       ImageScaled[{0.06331820588199621, -0.10976143751952816}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{0.8980974237881898, -4.541422265827357}, 0.05267692673029968], 
     InsetBox["\<\"Economic measures\"\>", {0.8543428664285008, -4.482056774290889},
       ImageScaled[{0.9449754930218421, -0.103735712551418}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.3806742013569684, -5.196174806664368}, 0.05267692673029968], 
     InsetBox["\<\"Schools closure\"\>", {1.3213087098205005, -5.239929364024057},
       ImageScaled[{1.1037357125514178, 0.9449754930218427}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.384166922021607, -4.889521846243687}, 0.05267692673029968], 
     InsetBox["\<\"State of emergency declared\"\>", {1.4340684979810152, -4.835221242270285},
       ImageScaled[{-0.00748949835250623, -0.05222677322085856}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{0.7863206378055523, -4.8936078526028925}, 0.05267692673029968], 
     InsetBox["\<\"Military deployment\"\>", {0.7163397984312325, -4.916875963733244},
       ImageScaled[{1.2116917729662442, 0.7366322469406146}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.9506186239016348, -4.039067849240164}, 0.05267692673029968], 
     InsetBox["\<\"Social distancing\"\>", {2.9815392994378453, -4.106020330146349},
       ImageScaled[{0.18554263437779056, 1.1808939456376009}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.013793242107786, -3.810311557003818}, 0.05267692673029968], 
     InsetBox["\<\"Limit public gatherings\"\>", {0.9558330897520019, -3.7647117366751917},
       ImageScaled[{1.0894436814460196, 0.03625853495361947}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{2.595846329913652, -5.956816169593257}, 0.05267692673029968], 
     InsetBox["\<\"Public services closure\"\>", {2.5824310578099556, -6.0293334320174035},
       ImageScaled[{0.6364307555277438, 1.2374867110301913}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{4.431452449936768, -2.7699133352156657}, 0.05267692673029968], 
     InsetBox["\<\"Changes in prison-related policies\"\>", {4.487448335334999, -2.7219218391608764},
       ImageScaled[{-0.06946746158214834, 0.011935649530531223}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{4.640615979648109, -5.012479857779473}, 0.05267692673029968], 
     InsetBox["\<\"Border checks\"\>", {4.603807617820388, -5.076385001349207},
       ImageScaled[{0.8743340109002276, 1.1499031068423573}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{5.478868112672291, -5.495299957878989}, 0.05267692673029968], 
     InsetBox["\<\"Movement restrictions\"\>", {5.533622720433714, -5.445896964002084},
       ImageScaled[{-0.056843905048928, -0.0024190137821822333}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{5.078366305071163, -5.051413511693548}, 0.05267692673029968], 
     InsetBox["\<\"Border closure\"\>", {5.028963311194258, -4.996658903932126},
       ImageScaled[{1.0024190137821822, -0.056843905048928}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{4.932945150705896, -5.739031356342028}, 0.05267692673029968], 
     InsetBox["\<\"International flights suspension\"\>", {4.865604059516245, -5.769096291274534},
       ImageScaled[{1.1848460380118182, 0.8057546470938999}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{5.777267344985418, -4.977231648527946}, 0.05267692673029968], 
     InsetBox["\<\"Domestic travel restrictions\"\>", {5.814075706813139, -4.913326504958212},
       ImageScaled[{0.1256659890997731, -0.14990310684235753}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{5.54197097453917, -6.0898206924401315}, 0.05267692673029968], 
     InsetBox["\<\"Checkpoints within the country\"\>", {5.549754885221365, -6.163156451859397},
       ImageScaled[{0.42083911476982516, 1.2458106691711879}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{6.063790788059808, -5.61900258039129}, 0.05267692673029968], 
     InsetBox["\<\"Curfews\"\>", {6.135942600616448, -5.634261637370675}, 
      ImageScaled[{-0.23377015566359616, 0.6551816956261975}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{4.893945437284774, -5.371597335366688}, 0.05267692673029968], 
     InsetBox["\<\"Visa restrictions\"\>", {4.821793624728134, -5.356338278387303},
       ImageScaled[{1.2337701556635965, 0.3448183043738038}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{5.4157652508054115, -4.900779223317846}, 0.05267692673029968], 
     InsetBox["\<\"Surveillance and monitoring\"\>", {5.407981340123217, -4.827443463898581},
       ImageScaled[{0.5791608852301762, -0.24581066917118777}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{5.180468880359164, -6.013368267230032}, 0.05267692673029968], 
     InsetBox["\<\"Additional health/documents requirements upon \
arrival\"\>", {5.143660518531442, -6.077273410799766}, ImageScaled[{0.8743340109002281, 1.1499031068423569}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{6.024791074638687, -5.25156855941595}, 0.05267692673029968], 
     InsetBox["\<\"Lockdown of refugee/idp camps or other minorities\"\>", 
      {6.092132165828338, -5.221503624483444}, ImageScaled[{-0.1848460380118182, 0.1942453529061}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{5.879369920273419, -5.939186404064429}, 0.05267692673029968], 
     InsetBox["\<\"Complete border closure\"\>", {5.928772914150324, -5.993941011825852},
       ImageScaled[{-0.002419013782181567, 1.0568439050489284}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{7.636432063670912, -1.7863206378055523}, 0.05267692673029968], 
     InsetBox["\<\"Lockdown\"\>", {7.562684366248493, -1.7863206378055523}, 
      ImageScaled[{1.25, 0.49999999999999983}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{7.636432063670912, -2.7863206378055523}, 0.05267692673029968], 
     InsetBox["\<\"Partial lockdown\"\>", {7.636432063670912, -2.8600683352279717},
       ImageScaled[{0.5000000000000002, 1.25}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{7.636432063670912, -0.7863206378055523}, 0.05267692673029968], 
     InsetBox["\<\"Full lockdown\"\>", {7.636432063670912, -0.7125729403831328},
       ImageScaled[{0.4999999999999999, -0.25}],
      BaseStyle->"Graphics"]}, {
     DiskBox[{1.6767684347728762, -5.597910780436173}, 0.05267692673029968], 
     InsetBox[
      InterpretationBox[
       TooltipBox["\[LongDash]",
        "(not available)"],
       Missing["NotAvailable"]], {1.7118107232959205, -5.662801156380349}, 
      ImageScaled[{0.14362661736075577, 1.1599227319514482}],
      BaseStyle->"Graphics"]}}},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->800]], "Output",
 CellChangeTimes->{{3.7987290840032387`*^9, 3.798729261504712*^9}, {
   3.798729407168762*^9, 3.798729449457411*^9}, {3.7987295204083233`*^9, 
   3.798729609066063*^9}, {3.798729692944357*^9, 3.798729702015328*^9}, 
   3.798729767498177*^9, 3.798729803374107*^9, 3.798737125123088*^9, 
   3.798737331465952*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"1be0abf6-fcd3-47f3-9510-863a15b86a09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"category", "-", 
    RowBox[{"measure", " ", "tally", " ", "data"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"cmTallies", " ", "=", " ", 
    RowBox[{"Normal", "@", 
     RowBox[{"Echo", "[", 
      RowBox[{"Tally", "/@", 
       RowBox[{"resObjData", "[", 
        RowBox[{
         RowBox[{"GroupBy", "@", "\"\<Category\>\""}], ",", " ", ";;", ",", 
         " ", "\"\<Measure\>\""}], "]"}]}], "]"}]}]}], ";"}]}]], "Code",
 CellChangeTimes->{{3.798734596478086*^9, 3.798734754186817*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"d4240925-4ebb-4554-8dc3-3e6ebad5cc14"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "Public health measures" -> {{
         "Health screenings in airports and border crossings", 148}, {
         "Introduction of quarantine policies", 292}, {
         "Awareness campaigns", 102}, {
         "Strengthening the public health system", 145}, {
         "General recommendations", 126}, {"Testing policy", 11}, {
         "Psychological assistance and medical social work", 6}, {
         "Mass population testing", 3}, {
         "Amendments to funeral and burial regulations", 3}, {
         "Obligatory medical tests not related to COVID-19", 1}}, 
       "Social and economic measures" -> {{
         "Emergency administrative structures activated or established", 
          71}, {"Limit product imports/exports", 7}, {
         "Economic measures", 149}, {"Schools closure", 1}, {
         "State of emergency declared", 62}, {"Military deployment", 16}}, 
       "Social distancing" -> {{"Limit public gatherings", 285}, {
         "Schools closure", 149}, {"Public services closure", 120}, {
         "Changes in prison-related policies", 14}, {
         "Introduction of quarantine policies", 1}, {"Border checks", 1}}, 
       "Movement restrictions" -> {{"Border closure", 176}, {
         "Border checks", 24}, {"International flights suspension", 189}, {
         "Domestic travel restrictions", 51}, {
         "Checkpoints within the country", 7}, {"Curfews", 45}, {
         "Visa restrictions", 189}, {"Surveillance and monitoring", 28}, {
         "Additional health/documents requirements upon arrival", 40}, {
         "Lockdown of refugee/idp camps or other minorities", 3}, {
         "Complete border closure", 1}}, 
       "Lockdown" -> {{"Partial lockdown", 57}, {"Full lockdown", 6}}, 
       Missing["NotAvailable"] -> {{"State of emergency declared", 1}, {
         "Schools closure", 1}, {"Limit public gatherings", 1}}], 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`RowShape[{
              TypeSystem`PackageScope`UnknownShape[False], 
              TypeSystem`PackageScope`UnknownShape[False]}], 
            DirectedInfinity[1], 2, {All, All}]], 4, 
          DirectedInfinity[1], {All}]]], 5, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Vector[
        TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType}], 
        TypeSystem`AnyLength], 6], "Meta" -> 
     Association["ID" -> 67139129988804], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[268.80000000000007`], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`RowShape[{
              TypeSystem`PackageScope`UnknownShape[False], 
              TypeSystem`PackageScope`UnknownShape[False]}], 
            DirectedInfinity[1], 2, {All, All}]], 4, 
          DirectedInfinity[1], {All}]]], 5, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Vector[
        TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType}], 
        TypeSystem`AnyLength], 6], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     6, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Public health measures", 
                  Style[
                  "Public health measures", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Public health measures"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Health screenings in airports and border crossings", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 1, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{480.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["148"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 1, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Introduction of quarantine policies", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 2, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{336.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["292"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 2, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Awareness campaigns", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 3, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["102"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 3, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Strengthening the public health system", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 4, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{364.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["145"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"], 4, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["10 total \:203a ", ""], 
                  Style[
                   Superscript["10 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Public health measures"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Public health measures"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Social and economic measures", 
                  Style[
                  "Social and economic measures", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social and economic measures"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "Emergency administrative structures activated or established", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 1, 1}, "Item", False], 
               "Mouse"], ImageSize -> {{576.0000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["71"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 1, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Limit product imports/exports", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 2, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{278.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 2, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Economic measures", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 3, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{163.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["149"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 3, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Schools closure", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 4, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{144.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"], 4, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social and economic measures"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social and economic measures"]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Social distancing", 
                  Style[
                  "Social distancing", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social distancing"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Limit public gatherings", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 1, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["285"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 1, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Schools closure", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{144.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["149"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Public services closure", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 3, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{220.80000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["120"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 3, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Changes in prison-related policies", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 4, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{326.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"], 4, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Social distancing"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Social distancing"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Movement restrictions", 
                  Style[
                  "Movement restrictions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Movement restrictions"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"]}, "RowHeader", False], "Mouse"],
               ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Border closure", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 1, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["176"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 1, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Border checks", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 2, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 2, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["International flights suspension", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 3, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{307.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["189"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 3, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Domestic travel restrictions", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 4, 1}, "Item", False], 
               "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"], 4, 2}, "Item", False], 
               "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["11 total \:203a ", ""], 
                  Style[
                   Superscript["11 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Movement restrictions"]}, 2]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Movement restrictions"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All}]], MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All}]], MenuEvaluator -> Automatic]}}, Alignment -> {Left, Baseline}, 
             Background -> GrayLevel[0.98]], SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Lockdown", 
                  Style[
                  "Lockdown", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key["Lockdown"]}, 1]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{268.80000000000007`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Partial lockdown", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 1, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["57"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 1, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation["Full lockdown", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Lockdown"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[True, 6, 1], {1, 6 - -5 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 5 
                    If[False, 6, 1], {1, 6 - -5 + 1}], Appearance -> None], 
                    " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    6, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    6, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[False, 6, 1], {1, 6 - 5 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    5 If[True, 6, 1], {1, 6 - 5 + 1}], Appearance -> None]}], 
                  ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{941., {290.8544921875, 296.1455078125}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{941., {290.8544921875, 296.1455078125}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Echo",
 CellChangeTimes->{
  3.798737331755868*^9},ExpressionUUID->"833befe6-a0fc-4bd2-8a97-\
49ef20529e6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "breakdown", " ", "of", " ", "categories", " ", "and", " ", "measures"}], 
   " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"cat", " ", "=", " ", 
         RowBox[{
         "cmTallies", "\[LeftDoubleBracket]", "i", 
          "\[RightDoubleBracket]"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"PieChart", "[", 
        RowBox[{
         RowBox[{"Association", "[", 
          RowBox[{"Rule", "@@@", "cat"}], "]"}], ",", "\n", 
         RowBox[{"ChartLabels", "\[Rule]", 
          RowBox[{"Callout", "@", "Automatic"}]}], ",", " ", 
         RowBox[{"PlotRange", "\[Rule]", "Full"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", " ", "200"}], "}"}]}], ",", " ", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{
           RowBox[{"Keys", "[", "cmTallies", "]"}], "\[LeftDoubleBracket]", 
           "i", "\[RightDoubleBracket]"}]}]}], "]"}]}], "\[IndentingNewLine]",
       "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", 
       RowBox[{"Range", "@", 
        RowBox[{"Length", "@", "cmTallies"}]}]}], "}"}]}], "]"}], " ", "//", 
   " ", "\n", 
   RowBox[{
    RowBox[{"Multicolumn", "[", 
     RowBox[{"#", ",", " ", "2", ",", " ", 
      RowBox[{"ItemSize", "\[Rule]", "Full"}], ",", " ", 
      RowBox[{"Alignment", "\[Rule]", "Center"}], ",", " ", 
      RowBox[{"Frame", "\[Rule]", "All"}], ",", " ", 
      RowBox[{"FrameStyle", "\[Rule]", "LightGray"}]}], "]"}], 
    "&"}]}]}]], "Code",
 CellChangeTimes->{{3.798734878992518*^9, 3.798735024592558*^9}, {
   3.798735065055545*^9, 3.798735197733192*^9}, {3.798735232794351*^9, 
   3.798735442236517*^9}, {3.798735477623872*^9, 3.798735557397612*^9}, 
   3.798736268252783*^9},
 CellLabel->"In[87]:=",ExpressionUUID->"5b61a357-80ea-4ed7-b5d0-6a9f36ea40af"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[{{}, {}, 
       DynamicModuleBox[{DynamicChart`click$327747$329452 = False, 
        DynamicChart`click$327751$329452 = False, 
        DynamicChart`click$327755$329452 = False, 
        DynamicChart`click$327759$329452 = False, 
        DynamicChart`click$327763$329452 = False, 
        DynamicChart`click$327767$329452 = False, 
        DynamicChart`click$327771$329452 = False, 
        DynamicChart`click$327775$329452 = False, 
        DynamicChart`click$327779$329452 = False, 
        DynamicChart`click$327783$329452 = False}, {
         {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[
          0.5]}], {{{}, {
             {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {2.0305873662987795`, 
                    3.141592653589793}]},
                    
                    ImageSizeCache->{{248.84274034439534`, 
                    331.036050924164}, {-71.92179308147624, 
                    2.029097017395543}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 148]& ,
                    TagBoxNote->"148"],
                   StyleBox["148", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[148, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327747$329452, 
                    FEPrivate`Not[DynamicChart`click$327747$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327747$329452, {{{1., 0.}, {0., 
                   1.}}, {-0.1699270936431309, 0.10547408613492998`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327747$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.99048, 0.6546373333333334, 0.2701484444444444], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.16139603835646454`, 
                    2.0305873662987795`}]},
                    
                    ImageSizeCache->{{292.98859504615103`, 
                    410.4009343791864}, {-80.1642135623731, 
                    14.782736810880564`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 292]& ,
                    TagBoxNote->"292"],
                   StyleBox["292", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[292, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327751$329452, 
                    FEPrivate`Not[DynamicChart`click$327751$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327751$329452, {{{1., 0.}, {0., 1.}}, {
                   0.11882874124405447`, 0.16087178203262856`}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327751$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.998096, 0.5661274666666667, 0.2140296888888889], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-0.9270888714894605, -0.16139603835646454`}]},
                    
                    ImageSizeCache->{{328.2076237994178, 
                    409.3695009812585}, {-0.79933010735067, 
                    65.51117642964302}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 102]& ,
                    TagBoxNote->"102"],
                   StyleBox["102", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[102, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327755$329452, 
                    FEPrivate`Not[DynamicChart`click$327755$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327755$329452, {{{1., 0.}, {0., 1.}}, {
                   0.17110395408947943`, -0.10355402886872789`}}, {{1, 0}, {0,
                   1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327755$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.928, 0.5210666666666667, 0.2], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.0155737813353864`, -0.9270888714894605}]},
                    
                    ImageSizeCache->{{294.06032731825377`, 
                    378.66808131681466`}, {-0.79933010735067, 
                    81.39398047241798}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 145]& ,
                    TagBoxNote->"145"],
                   StyleBox["145", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[145, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327759$329452, 
                    FEPrivate`Not[DynamicChart`click$327759$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327759$329452, {{{1., 0.}, {0., 1.}}, {
                   0.019860215107394375`, -0.19901148674357474`}}, {{1, 0}, {
                  0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327759$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.8320000000000001, 0.49048888888888886`, 0.2], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.9614296340290878`, -2.0155737813353864`}]},
                    
                    ImageSizeCache->{{250.12730111056908`, 
                    331.036050924164}, {-0.79933010735067, 
                    73.67228838166112}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 126]& ,
                    TagBoxNote->"126"],
                   StyleBox["126", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[126, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327763$329452, 
                    FEPrivate`Not[DynamicChart`click$327763$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327763$329452, {{{1., 0.}, {0., 
                   1.}}, {-0.15884188004310235`, -0.12152883256401621`}}, {{1,
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327763$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[
              0.7598801777777778, 0.4773333333333333, 0.3161064888888889], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.044004351327744, -2.9614296340290878`}]},
                    
                    ImageSizeCache->{{249.22035532839448`, 
                    331.036050924164}, {-0.7993301073506736, 
                    16.250487056155958`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 11]& ,
                    TagBoxNote->"11"],
                   StyleBox["11", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[11, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327767$329452, 
                    FEPrivate`Not[DynamicChart`click$327767$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327767$329452, {{{1., 0.}, {0., 
                   1.}}, {-0.19807445281459285`, -0.027685937625437924`}}, {{
                  1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327767$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.0890451062179203`, -3.044004351327744}]},
                    
                    ImageSizeCache->{{248.95228806685952`, 
                    331.036050924164}, {-0.79933010735067, 
                    9.761893750517636}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 6]& ,
                    TagBoxNote->"6"],
                   StyleBox["6", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[6, {}], "Tooltip"]& ],
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327771$329452, 
                    FEPrivate`Not[DynamicChart`click$327771$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327771$329452, {{{1., 0.}, {0., 
                   1.}}, {-0.19943674524503094`, -0.014999488193556319`}}, {{
                  1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327771$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[
              0.6558762666666667, 0.4926222222222222, 0.7345293333333333], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.111565483663008, -3.0890451062179203`}]},
                    
                    ImageSizeCache->{{248.87851657318532`, 
                    331.036050924164}, {-0.7993301073506718, 
                    6.197607992404354}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 3]& ,
                    TagBoxNote->"3"],
                   StyleBox["3", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[3, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327775$329452, 
                    FEPrivate`Not[DynamicChart`click$327775$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327775$329452, {{{1., 0.}, {0., 
                   1.}}, {-0.1998295596153497, -0.00825512591880957}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327775$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[
              0.5775381333333334, 0.5239111111111111, 0.7827298666666667], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.1340858611080966`, -3.111565483663008}]},
                    
                    ImageSizeCache->{{248.84497651620617`, 
                    331.036050924164}, {-0.7993301073506718, 
                    4.411841762056198}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 3]& ,
                    TagBoxNote->"3"],
                   StyleBox["3", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[3, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327779$329452, 
                    FEPrivate`Not[DynamicChart`click$327779$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327779$329452, {{{1., 0.}, {0., 
                   1.}}, {-0.1999647810753404, -0.003753175920629254}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327779$329452}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
              Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.1340858611080966`}]},
                    
                    ImageSizeCache->{{248.84274034439534`, 
                    331.036050924164}, {-0.7993301073506718, 
                    2.6248671323233426`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$327783$329452, 
                    FEPrivate`Not[DynamicChart`click$327783$329452]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$327783$329452, {{{1., 0.}, {0., 
                   1.}}, {-0.19999859120331986`, -0.0007506774855781257}}, {{
                  1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$327783$329452}]],
               "DelayedClickEffect"]}}}, {}}, {}}, {{{
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 148]& ,
                  TagBoxNote->"148"],
                 StyleBox["148", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[148, {}], "Tooltip"]& ],
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327747$329452, 
                   FEPrivate`Not[DynamicChart`click$327747$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327747$329452, {{{1., 0.}, {0., 
                 1.}}, {-0.1699270936431309, 0.10547408613492998`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327747$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 292]& ,
                  TagBoxNote->"292"],
                 StyleBox["292", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[292, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327751$329452, 
                   FEPrivate`Not[DynamicChart`click$327751$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327751$329452, {{{1., 0.}, {0., 1.}}, {
                 0.11882874124405447`, 0.16087178203262856`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327751$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 102]& ,
                  TagBoxNote->"102"],
                 StyleBox["102", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[102, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327755$329452, 
                   FEPrivate`Not[DynamicChart`click$327755$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327755$329452, {{{1., 0.}, {0., 1.}}, {
                 0.17110395408947943`, -0.10355402886872789`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327755$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 145]& ,
                  TagBoxNote->"145"],
                 StyleBox["145", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[145, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327759$329452, 
                   FEPrivate`Not[DynamicChart`click$327759$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327759$329452, {{{1., 0.}, {0., 1.}}, {
                 0.019860215107394375`, -0.19901148674357474`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327759$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 126]& ,
                  TagBoxNote->"126"],
                 StyleBox["126", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[126, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327763$329452, 
                   FEPrivate`Not[DynamicChart`click$327763$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327763$329452, {{{1., 0.}, {0., 
                 1.}}, {-0.15884188004310235`, -0.12152883256401621`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327763$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 11]& ,
                  TagBoxNote->"11"],
                 StyleBox["11", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[11, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327767$329452, 
                   FEPrivate`Not[DynamicChart`click$327767$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327767$329452, {{{1., 0.}, {0., 
                 1.}}, {-0.19807445281459285`, -0.027685937625437924`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327767$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 6]& ,
                  TagBoxNote->"6"],
                 StyleBox["6", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[6, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327771$329452, 
                   FEPrivate`Not[DynamicChart`click$327771$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327771$329452, {{{1., 0.}, {0., 
                 1.}}, {-0.19943674524503094`, -0.014999488193556319`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327771$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 3]& ,
                  TagBoxNote->"3"],
                 StyleBox["3", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[3, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327775$329452, 
                   FEPrivate`Not[DynamicChart`click$327775$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327775$329452, {{{1., 0.}, {0., 
                 1.}}, {-0.1998295596153497, -0.00825512591880957}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327775$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 3]& ,
                  TagBoxNote->"3"],
                 StyleBox["3", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[3, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327779$329452, 
                   FEPrivate`Not[DynamicChart`click$327779$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327779$329452, {{{1., 0.}, {0., 
                 1.}}, {-0.1999647810753404, -0.003753175920629254}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327779$329452}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$327783$329452, 
                   FEPrivate`Not[DynamicChart`click$327783$329452]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$327783$329452, {{{1., 0.}, {0., 
                 1.}}, {-0.19999859120331986`, -0.0007506774855781257}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$327783$329452}]],
             "DelayedClickEffect"]}, {}}, {}}, {{GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.8666281775799676, 0.5379178392881429}], 
                  Offset[{0, 0}, {-0.8666281775799676, 0.5379178392881429}], 
                  Offset[{0., 0.}, {-0.8666281775799676, 0.5379178392881429}],
                   Offset[{0., 0.}, {-0.8666281775799676, 
                   0.5379178392881429}], 
                  Offset[{0., 0.}, {-0.8666281775799676, 0.5379178392881429}],
                   Offset[{0, 0}, {-0.9374525444811002, 0.5818787860390837}], 
                  Offset[{-5, 0}, {-0.9374525444811002, 0.5818787860390837}], 
                  Offset[{-10, 0}, {-0.9374525444811002, 0.5818787860390837}],
                   Offset[{-10, 0}, {-0.9374525444811002, 
                   0.5818787860390837}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.8666281775799676, 0.5379178392881429}], 
                  Offset[{0, 0}, {-0.8666281775799676, 0.5379178392881429}], 
                  Offset[{0., 0.}, {-0.8666281775799676, 0.5379178392881429}],
                   Offset[{0., 0.}, {-0.8666281775799676, 
                   0.5379178392881429}], 
                  Offset[{0., 0.}, {-0.8666281775799676, 0.5379178392881429}],
                   Offset[{0, 0}, {-0.9374525444811002, 0.5818787860390837}], 
                  Offset[{-5, 0}, {-0.9374525444811002, 0.5818787860390837}], 
                  Offset[{-10, 0}, {-0.9374525444811002, 0.5818787860390837}],
                   Offset[{-10, 0}, {-0.9374525444811002, 
                   0.5818787860390837}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 7.500000000000025}, {-0.9374525444811002, 
                   0.5818787860390837}], 
                  Offset[{-10., -7.499999999999975}, {-0.9374525444811002, 
                   0.5818787860390837}], 
                  Offset[{-238., -7.500000000000025}, {-0.9374525444811002, 
                   0.5818787860390837}], 
                  Offset[{-238., 7.499999999999975}, {-0.9374525444811002, 
                   0.5818787860390837}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 
                 RotationBox["\<\"Health screenings in airports and border \
crossings\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-124., 0.}, \
{-0.9374525444811002, 0.5818787860390837}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327747$329452, 
                 FEPrivate`Not[DynamicChart`click$327747$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327747$329452, {{{1., 0.}, {0., 
               1.}}, {-0.1699270936431309, 0.10547408613492998`}}, {{1, 0}, {
              0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327747$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0, 0}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0., 0.}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0., 0.}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0., 0.}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0, 0}, {0.6555534141487496, 0.8874964314055673}], 
                  Offset[{5, 0}, {0.6555534141487496, 0.8874964314055673}], 
                  Offset[{10, 0}, {0.6555534141487496, 0.8874964314055673}], 
                  Offset[{10, 0}, {0.6555534141487496, 
                   0.8874964314055673}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0, 0}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0., 0.}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0., 0.}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0., 0.}, {0.6060265803446778, 0.8204460883664056}], 
                  Offset[{0, 0}, {0.6555534141487496, 0.8874964314055673}], 
                  Offset[{5, 0}, {0.6555534141487496, 0.8874964314055673}], 
                  Offset[{10, 0}, {0.6555534141487496, 0.8874964314055673}], 
                  Offset[{10, 0}, {0.6555534141487496, 
                   0.8874964314055673}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{165., 7.500000000000017}, {0.6555534141487496, 
                   0.8874964314055673}], 
                  Offset[{165., -7.499999999999983}, {0.6555534141487496, 
                   0.8874964314055673}], 
                  Offset[{10., -7.500000000000017}, {0.6555534141487496, 
                   0.8874964314055673}], 
                  Offset[{10., 7.499999999999983}, {0.6555534141487496, 
                   0.8874964314055673}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Introduction of quarantine policies\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{87.5, 0.}, {0.6555534141487496, 0.8874964314055673}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327751$329452, 
                 FEPrivate`Not[DynamicChart`click$327751$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327751$329452, {{{1., 0.}, {0., 1.}}, {
               0.11882874124405447`, 0.16087178203262856`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327751$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0, 0}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0., 0.}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0., 0.}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0., 0.}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0, 0}, {0.9439452353359064, -0.5712859065273925}], 
                  Offset[{5, 0}, {0.9439452353359064, -0.5712859065273925}], 
                  Offset[{10, 0}, {0.9439452353359064, -0.5712859065273925}], 
                  Offset[{10, 0}, {
                   0.9439452353359064, -0.5712859065273925}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0, 0}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0., 0.}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0., 0.}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0., 0.}, {0.872630165856345, -0.5281255472305122}], 
                  Offset[{0, 0}, {0.9439452353359064, -0.5712859065273925}], 
                  Offset[{5, 0}, {0.9439452353359064, -0.5712859065273925}], 
                  Offset[{10, 0}, {0.9439452353359064, -0.5712859065273925}], 
                  Offset[{10, 0}, {
                   0.9439452353359064, -0.5712859065273925}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{116., 7.5000000000000115`}, {
                   0.9439452353359064, -0.5712859065273925}], 
                  Offset[{116., -7.4999999999999885`}, {
                   0.9439452353359064, -0.5712859065273925}], 
                  Offset[{10., -7.5000000000000115`}, {
                   0.9439452353359064, -0.5712859065273925}], 
                  Offset[{10., 7.4999999999999885`}, {
                   0.9439452353359064, -0.5712859065273925}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Awareness campaigns\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{63., 0.}, {0.9439452353359064, -0.5712859065273925}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327755$329452, 
                 FEPrivate`Not[DynamicChart`click$327755$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327755$329452, {{{1., 0.}, {0., 1.}}, {
               0.17110395408947943`, -0.10355402886872789`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327755$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.10128709704771131`, -1.0149585823922311`}],
                   Offset[{0, 0}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0., 0.}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0., 0.}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0., 0.}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{5, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{10, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{10, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.10128709704771131`, -1.0149585823922311`}],
                   Offset[{0, 0}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0., 0.}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0., 0.}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0., 0.}, {
                   0.10128709704771131`, -1.0149585823922311`}], 
                  Offset[{0, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{5, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{10, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{10, 0}, {
                   0.10956465498328118`, -1.0979051786091092`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{188., 7.5000000000000195`}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{188., -7.4999999999999805`}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{10., -7.5000000000000195`}, {
                   0.10956465498328118`, -1.0979051786091092`}], 
                  Offset[{10., 7.4999999999999805`}, {
                   0.10956465498328118`, -1.0979051786091092`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Strengthening the public health system\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{99., 0.}, {0.10956465498328118, -1.0979051786091092}],
                 ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327759$329452, 
                 FEPrivate`Not[DynamicChart`click$327759$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327759$329452, {{{1., 0.}, {0., 1.}}, {
               0.019860215107394375`, -0.19901148674357474`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327759$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0, 0}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0., 
                   0.}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0., 
                   0.}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0., 
                   0.}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0, 0}, {-0.8762977141067935, -0.6704494844411417}], 
                  Offset[{-5, 0}, {-0.8762977141067935, -0.6704494844411417}],
                   Offset[{-10, 
                   0}, {-0.8762977141067935, -0.6704494844411417}], 
                  Offset[{-10, 
                   0}, {-0.8762977141067935, -0.6704494844411417}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0, 0}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0., 
                   0.}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0., 
                   0.}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0., 
                   0.}, {-0.8100935882198219, -0.6197970460764827}], 
                  Offset[{0, 0}, {-0.8762977141067935, -0.6704494844411417}], 
                  Offset[{-5, 0}, {-0.8762977141067935, -0.6704494844411417}],
                   Offset[{-10, 
                   0}, {-0.8762977141067935, -0.6704494844411417}], 
                  Offset[{-10, 
                   0}, {-0.8762977141067935, -0.6704494844411417}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   6.500000000000013}, {-0.8762977141067935, \
-0.6704494844411417}], 
                  Offset[{-10., -6.499999999999987}, {-0.8762977141067935, \
-0.6704494844411417}], 
                  Offset[{-133., -6.500000000000013}, {-0.8762977141067935, \
-0.6704494844411417}], 
                  Offset[{-133., 
                   6.499999999999987}, {-0.8762977141067935, \
-0.6704494844411417}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"General recommendations\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-71.5, 0.}, \
{-0.8762977141067935, -0.6704494844411417}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327763$329452, 
                 FEPrivate`Not[DynamicChart`click$327763$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327763$329452, {{{1., 0.}, {0., 
               1.}}, {-0.15884188004310235`, -0.12152883256401621`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327763$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0, 0}, {-1.0101797093544236`, -0.1411982818897334}],
                   Offset[{0., 
                   0.}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0., 
                   0.}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0., 
                   0.}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0, 0}, {-1.1704882749629564`, -0.353603001699163}], 
                  Offset[{-5, 0}, {-1.1704882749629564`, -0.353603001699163}],
                   Offset[{-10, 
                   0}, {-1.1704882749629564`, -0.353603001699163}], 
                  Offset[{-10, 
                   0}, {-1.1704882749629564`, -0.353603001699163}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0, 0}, {-1.0101797093544236`, -0.1411982818897334}],
                   Offset[{0., 
                   0.}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0., 
                   0.}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0., 
                   0.}, {-1.0101797093544236`, -0.1411982818897334}], 
                  Offset[{0, 0}, {-1.1704882749629564`, -0.353603001699163}], 
                  Offset[{-5, 0}, {-1.1704882749629564`, -0.353603001699163}],
                   Offset[{-10, 
                   0}, {-1.1704882749629564`, -0.353603001699163}], 
                  Offset[{-10, 
                   0}, {-1.1704882749629564`, -0.353603001699163}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000007}, {-1.1704882749629564`, \
-0.353603001699163}], 
                  Offset[{-10., -7.499999999999993}, {-1.1704882749629564`, \
-0.353603001699163}], 
                  Offset[{-77., -7.500000000000007}, {-1.1704882749629564`, \
-0.353603001699163}], 
                  Offset[{-77., 
                   7.499999999999993}, {-1.1704882749629564`, \
-0.353603001699163}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Testing policy\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-43.5, 0.}, \
{-1.1704882749629564, -0.353603001699163}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327767$329452, 
                 FEPrivate`Not[DynamicChart`click$327767$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327767$329452, {{{1., 0.}, {0., 
               1.}}, {-0.19807445281459285`, -0.027685937625437924`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327767$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0171274007496578`, -0.07649738978713723}],
                   Offset[{0, 
                   0}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0., 
                   0.}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0., 
                   0.}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0., 
                   0.}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}], 
                  Offset[{-5, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}], 
                  Offset[{-10, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}], 
                  Offset[{-10, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0171274007496578`, -0.07649738978713723}],
                   Offset[{0, 
                   0}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0., 
                   0.}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0., 
                   0.}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0., 
                   0.}, {-1.0171274007496578`, -0.07649738978713723}], 
                  Offset[{0, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}], 
                  Offset[{-5, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}], 
                  Offset[{-10, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}], 
                  Offset[{-10, 
                   0}, {-1.1349168674357206`, -0.21344547725443364`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000025}, {-1.1349168674357206`, \
-0.21344547725443364`}], 
                  Offset[{-10., -7.499999999999975}, {-1.1349168674357206`, \
-0.21344547725443364`}], 
                  Offset[{-236., -7.500000000000025}, {-1.1349168674357206`, \
-0.21344547725443364`}], 
                  Offset[{-236., 
                   7.499999999999975}, {-1.1349168674357206`, \
-0.21344547725443364`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 
                 RotationBox["\<\"Psychological assistance and medical social \
work\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-123., 0.}, \
{-1.1349168674357206, -0.21344547725443364}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327771$329452, 
                 FEPrivate`Not[DynamicChart`click$327771$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327771$329452, {{{1., 0.}, {0., 
               1.}}, {-0.19943674524503094`, -0.014999488193556319`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327771$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0191307540382835`, -0.04210114218592881}],
                   Offset[{0, 
                   0}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0., 
                   0.}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0., 
                   0.}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0., 
                   0.}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0, 0}, {-1.096231914048841, -0.0738821601166566}], 
                  Offset[{-5, 0}, {-1.096231914048841, -0.0738821601166566}], 
                  Offset[{-10, 0}, {-1.096231914048841, -0.0738821601166566}],
                   Offset[{-10, 
                   0}, {-1.096231914048841, -0.0738821601166566}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0191307540382835`, -0.04210114218592881}],
                   Offset[{0, 
                   0}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0., 
                   0.}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0., 
                   0.}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0., 
                   0.}, {-1.0191307540382835`, -0.04210114218592881}], 
                  Offset[{0, 0}, {-1.096231914048841, -0.0738821601166566}], 
                  Offset[{-5, 0}, {-1.096231914048841, -0.0738821601166566}], 
                  Offset[{-10, 0}, {-1.096231914048841, -0.0738821601166566}],
                   Offset[{-10, 
                   0}, {-1.096231914048841, -0.0738821601166566}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000012}, {-1.096231914048841, \
-0.0738821601166566}], 
                  Offset[{-10., -7.499999999999988}, {-1.096231914048841, \
-0.0738821601166566}], 
                  Offset[{-121., -7.500000000000012}, {-1.096231914048841, \
-0.0738821601166566}], 
                  Offset[{-121., 
                   7.499999999999988}, {-1.096231914048841, \
-0.0738821601166566}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Mass population testing\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-65.5, 0.}, \
{-1.096231914048841, -0.0738821601166566}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327775$329452, 
                 FEPrivate`Not[DynamicChart`click$327775$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327775$329452, {{{1., 0.}, {0., 
               1.}}, {-0.1998295596153497, -0.00825512591880957}}, {{1, 0}, {
              0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327775$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.019820383484236, -0.019141197195209195`}],
                   Offset[{0, 
                   0}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0., 
                   0.}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0., 
                   0.}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0., 
                   0.}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0, 0}, {-1.1076549165956224`, 0.06545691253569919}],
                   Offset[{-5, 0}, {-1.1076549165956224`, 
                   0.06545691253569919}], 
                  Offset[{-10, 0}, {-1.1076549165956224`, 
                   0.06545691253569919}], 
                  Offset[{-10, 0}, {-1.1076549165956224`, 
                   0.06545691253569919}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.019820383484236, -0.019141197195209195`}],
                   Offset[{0, 
                   0}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0., 
                   0.}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0., 
                   0.}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0., 
                   0.}, {-1.019820383484236, -0.019141197195209195`}], 
                  Offset[{0, 0}, {-1.1076549165956224`, 0.06545691253569919}],
                   Offset[{-5, 0}, {-1.1076549165956224`, 
                   0.06545691253569919}], 
                  Offset[{-10, 0}, {-1.1076549165956224`, 
                   0.06545691253569919}], 
                  Offset[{-10, 0}, {-1.1076549165956224`, 
                   0.06545691253569919}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 7.500000000000023}, {-1.1076549165956224`, 
                   0.06545691253569919}], 
                  Offset[{-10., -7.499999999999977}, {-1.1076549165956224`, 
                   0.06545691253569919}], 
                  Offset[{-217., -7.500000000000023}, {-1.1076549165956224`, 
                   0.06545691253569919}], 
                  Offset[{-217., 7.499999999999977}, {-1.1076549165956224`, 
                   0.06545691253569919}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 
                 RotationBox["\<\"Amendments to funeral and burial \
regulations\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-113.5, 0.}, \
{-1.1076549165956224, 0.06545691253569919}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327779$329452, 
                 FEPrivate`Not[DynamicChart`click$327779$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327779$329452, {{{1., 0.}, {0., 
               1.}}, {-0.1999647810753404, -0.003753175920629254}}, {{1, 0}, {
              0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327779$329452}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 
                   0}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0, 
                   0}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0., 
                   0.}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0., 
                   0.}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0., 
                   0.}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0, 0}, {-1.230038187066891, 0.20464604173293327`}], 
                  Offset[{-5, 0}, {-1.230038187066891, 0.20464604173293327`}],
                   Offset[{-10, 0}, {-1.230038187066891, 
                   0.20464604173293327`}], 
                  Offset[{-10, 0}, {-1.230038187066891, 
                   0.20464604173293327`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 
                   0}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0, 
                   0}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0., 
                   0.}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0., 
                   0.}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0., 
                   0.}, {-1.0199928151369313`, -0.003828455176448441}], 
                  Offset[{0, 0}, {-1.230038187066891, 0.20464604173293327`}], 
                  Offset[{-5, 0}, {-1.230038187066891, 0.20464604173293327`}],
                   Offset[{-10, 0}, {-1.230038187066891, 
                   0.20464604173293327`}], 
                  Offset[{-10, 0}, {-1.230038187066891, 
                   0.20464604173293327`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 7.500000000000025}, {-1.230038187066891, 
                   0.20464604173293327`}], 
                  Offset[{-10., -7.499999999999975}, {-1.230038187066891, 
                   0.20464604173293327`}], 
                  Offset[{-232., -7.500000000000025}, {-1.230038187066891, 
                   0.20464604173293327`}], 
                  Offset[{-232., 7.499999999999975}, {-1.230038187066891, 
                   0.20464604173293327`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 
                 RotationBox["\<\"Obligatory medical tests not related to \
COVID-19\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-121., 0.}, \
{-1.230038187066891, 0.20464604173293327}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$327783$329452, 
                 FEPrivate`Not[DynamicChart`click$327783$329452]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$327783$329452, {{{1., 0.}, {0., 
               1.}}, {-0.19999859120331986`, -0.0007506774855781257}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$327783$329452}]]}, {}}, {}},
        DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
      ContentSelectable->False,
      DisplayFunction->Identity,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 200},
      PlotLabel->FormBox["\"Public health measures\"", TraditionalForm],
      PlotRange->{{Full, Full}, {Full, Full}},
      PlotRangePadding->Scaled[0.05]], 
     GraphicsBox[{{}, {}, 
       DynamicModuleBox[{DynamicChart`click$328689$329464 = False, 
        DynamicChart`click$328693$329464 = False, 
        DynamicChart`click$328697$329464 = False, 
        DynamicChart`click$328701$329464 = False, 
        DynamicChart`click$328705$329464 = False, 
        DynamicChart`click$328709$329464 = False, 
        DynamicChart`click$328713$329464 = False, 
        DynamicChart`click$328717$329464 = False, 
        DynamicChart`click$328721$329464 = False, 
        DynamicChart`click$328725$329464 = False, 
        DynamicChart`click$328729$329464 = False}, {
         {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[
          0.5]}], {{{}, {
             {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.673012820835999, 
                    3.141592653589793}]},
                    
                    ImageSizeCache->{{261.6588040225857, 
                    340.56356069079266`}, {-71.90426310545227, 
                    6.603408682551432}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 176]& ,
                    TagBoxNote->"176"],
                   StyleBox["176", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[176, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328689$329464, 
                    FEPrivate`Not[DynamicChart`click$328689$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328689$329464, {{{1., 0.}, {0., 
                   1.}}, {-0.14846134785938273`, 0.13401204495035277`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328689$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.9897184, 0.66348832, 0.27576032], EdgeForm[{
              GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.4727519345513904`, 
                    1.673012820835999}]},
                    
                    ImageSizeCache->{{329.9724121357714, 
                    348.01047396380676`}, {-72.30134798565554, 
                    6.603408682551432}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 24]& ,
                    TagBoxNote->"24"],
                   StyleBox["24", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[24, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328693$329464, 
                    FEPrivate`Not[DynamicChart`click$328693$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328693$329464, {{{1., 0.}, {0., 
                   1.}}, {-0.000417209877170456, 0.19999956483932257`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328693$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.9965728, 0.58382944, 0.22525344], EdgeForm[{
              GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.10430254493989999`, 
                    1.4727519345513904`}]},
                    
                    ImageSizeCache->{{337.73513356604644`, 
                    416.63989023425336`}, {-71.93599122361825, 
                    14.523983864522464`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 189]& ,
                    TagBoxNote->"189"],
                   StyleBox["189", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[189, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328697$329464, 
                    FEPrivate`Not[DynamicChart`click$328697$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328697$329464, {{{1., 0.}, {0., 1.}}, {
                   0.15498186579279533`, 0.126414482063504}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328697$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.9568, 0.53024, 0.2], EdgeForm[{GrayLevel[0], Opacity[
              0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-0.5298569282946923, -0.10430254493989999`}]},
                    
                    ImageSizeCache->{{337.73513356604644`, 
                    416.22644727062107`}, {3.774981557805212, 
                    45.05313823810265}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 51]& ,
                    TagBoxNote->"51"],
                   StyleBox["51", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[51, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328701$329464, 
                    FEPrivate`Not[DynamicChart`click$328701$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328701$329464, {{{1., 0.}, {0., 1.}}, {
                   0.1900299972955107, -0.06235864116438233}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328701$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.8704000000000001, 0.50272, 0.2], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-0.5882663534610364, -0.5298569282946923}]},
                    
                    ImageSizeCache->{{337.73513356604644`, 
                    406.20825745991647`}, {3.774981557805212, 
                    48.81965733386565}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 7]& ,
                    TagBoxNote->"7"],
                   StyleBox["7", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[7, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328705$329464, 
                    FEPrivate`Not[DynamicChart`click$328705$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328705$329464, {{{1., 0.}, {0., 1.}}, {
                   0.16955063626860922`, -0.10607818692318315`}}, {{1, 0}, {0,
                   1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328705$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.784, 0.47519999999999996`, 0.2], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-0.9637555152446771, -0.5882663534610364}]},
                    
                    ImageSizeCache->{{337.73513356604644`, 
                    403.8517607490629}, {3.7749815578052193`, 
                    69.08791451740163}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 45]& ,
                    TagBoxNote->"45"],
                   StyleBox["45", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[45, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328709$329464, 
                    FEPrivate`Not[DynamicChart`click$328709$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328709$329464, {{{1., 0.}, {0., 1.}}, {
                   0.1427426604187357, -0.1400875900877073}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328709$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.74058432, 0.47903999999999997`, 0.4089916800000002], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.5408099947359677`, -0.9637555152446771}]},
                    
                    ImageSizeCache->{{274.9802684059891, 
                    383.96050122097074`}, {3.7749815578052193`, 
                    82.67973822601219}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 189]& ,
                    TagBoxNote->"189"],
                   StyleBox["189", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[189, {}], "Tooltip"]& ],
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328713$329464, 
                    FEPrivate`Not[DynamicChart`click$328713$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328713$329464, {{{1., 0.}, {0., 
                   1.}}, {-0.03609835762241203, -0.19671529827891998`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328713$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.6971686399999999, 0.48288, 0.6179833600000002], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.774447695401344, -2.5408099947359677`}]},
                    
                    ImageSizeCache->{{266.7288370922198, 
                    340.56356069079266`}, {3.774981557805212, 
                    49.60846438008845}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 28]& ,
                    TagBoxNote->"28"],
                   StyleBox["28", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[28, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328717$329464, 
                    FEPrivate`Not[DynamicChart`click$328717$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328717$329464, {{{1., 0.}, {0., 
                   1.}}, {-0.17703151104340123`, -0.09305828333732635}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328717$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.64020864, 0.49888000000000005`, 0.74416944], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.1082158392090244`, -2.774447695401344}]},
                    
                    ImageSizeCache->{{261.70117505093697`, 
                    340.56356069079266`}, {3.7749815578052157`, 
                    33.9111690791177}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 40]& ,
                    TagBoxNote->"40"],
                   StyleBox["40", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[40, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328721$329464, 
                    FEPrivate`Not[DynamicChart`click$328721$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328721$329464, {{{1., 0.}, {0., 
                   1.}}, {-0.1960029428771554, -0.03978500199188836}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328721$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.5697043199999999, 0.5270400000000001, 0.78754992], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.1332484499946007`, -3.1082158392090244`}]},
                    
                    ImageSizeCache->{{261.6614524423476, 
                    340.56356069079266`}, {3.774981557805214, 
                    9.142122791671923}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 3]& ,
                    TagBoxNote->"3"],
                   StyleBox["3", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[3, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328725$329464, 
                    FEPrivate`Not[DynamicChart`click$328725$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328725$329464, {{{1., 0.}, {0., 
                   1.}}, {-0.19995648549449463`, -0.004171799214962655}}, {{1,
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328725$329464}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
              Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.1332484499946007`}]},
                    
                    ImageSizeCache->{{261.6588040225857, 
                    340.56356069079266`}, {3.774981557805215, 
                    7.238197698702027}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328729$329464, 
                    FEPrivate`Not[DynamicChart`click$328729$329464]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328729$329464, {{{1., 0.}, {0., 
                   1.}}, {-0.19999825935918392`, -0.000834417938807633}}, {{1,
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328729$329464}]],
               "DelayedClickEffect"]}}}, {}}, {}}, {{{
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 176]& ,
                  TagBoxNote->"176"],
                 StyleBox["176", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[176, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328689$329464, 
                   FEPrivate`Not[DynamicChart`click$328689$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328689$329464, {{{1., 0.}, {0., 
                 1.}}, {-0.14846134785938273`, 0.13401204495035277`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328689$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 24]& ,
                  TagBoxNote->"24"],
                 StyleBox["24", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[24, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328693$329464, 
                   FEPrivate`Not[DynamicChart`click$328693$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328693$329464, {{{1., 0.}, {0., 
                 1.}}, {-0.000417209877170456, 0.19999956483932257`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328693$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 189]& ,
                  TagBoxNote->"189"],
                 StyleBox["189", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[189, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328697$329464, 
                   FEPrivate`Not[DynamicChart`click$328697$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328697$329464, {{{1., 0.}, {0., 1.}}, {
                 0.15498186579279533`, 0.126414482063504}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328697$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 51]& ,
                  TagBoxNote->"51"],
                 StyleBox["51", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[51, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328701$329464, 
                   FEPrivate`Not[DynamicChart`click$328701$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328701$329464, {{{1., 0.}, {0., 1.}}, {
                 0.1900299972955107, -0.06235864116438233}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328701$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 7]& ,
                  TagBoxNote->"7"],
                 StyleBox["7", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[7, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328705$329464, 
                   FEPrivate`Not[DynamicChart`click$328705$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328705$329464, {{{1., 0.}, {0., 1.}}, {
                 0.16955063626860922`, -0.10607818692318315`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328705$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 45]& ,
                  TagBoxNote->"45"],
                 StyleBox["45", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[45, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328709$329464, 
                   FEPrivate`Not[DynamicChart`click$328709$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328709$329464, {{{1., 0.}, {0., 1.}}, {
                 0.1427426604187357, -0.1400875900877073}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328709$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 189]& ,
                  TagBoxNote->"189"],
                 StyleBox["189", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[189, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328713$329464, 
                   FEPrivate`Not[DynamicChart`click$328713$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328713$329464, {{{1., 0.}, {0., 
                 1.}}, {-0.03609835762241203, -0.19671529827891998`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328713$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 28]& ,
                  TagBoxNote->"28"],
                 StyleBox["28", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[28, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328717$329464, 
                   FEPrivate`Not[DynamicChart`click$328717$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328717$329464, {{{1., 0.}, {0., 
                 1.}}, {-0.17703151104340123`, -0.09305828333732635}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328717$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 40]& ,
                  TagBoxNote->"40"],
                 StyleBox["40", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[40, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328721$329464, 
                   FEPrivate`Not[DynamicChart`click$328721$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328721$329464, {{{1., 0.}, {0., 
                 1.}}, {-0.1960029428771554, -0.03978500199188836}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328721$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 3]& ,
                  TagBoxNote->"3"],
                 StyleBox["3", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[3, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328725$329464, 
                   FEPrivate`Not[DynamicChart`click$328725$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328725$329464, {{{1., 0.}, {0., 
                 1.}}, {-0.19995648549449463`, -0.004171799214962655}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328725$329464}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328729$329464, 
                   FEPrivate`Not[DynamicChart`click$328729$329464]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328729$329464, {{{1., 0.}, {0., 
                 1.}}, {-0.19999825935918392`, -0.000834417938807633}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328729$329464}]],
             "DelayedClickEffect"]}, {}}, {}}, {{GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0, 0}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0., 0.}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0., 0.}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0., 0.}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0, 0}, {-0.8190296564979327, 0.7393158148386781}], 
                  Offset[{-5, 0}, {-0.8190296564979327, 0.7393158148386781}], 
                  Offset[{-10, 0}, {-0.8190296564979327, 0.7393158148386781}],
                   Offset[{-10, 0}, {-0.8190296564979327, 
                   0.7393158148386781}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0, 0}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0., 0.}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0., 0.}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0., 0.}, {-0.7571528740828519, 0.683461429246799}], 
                  Offset[{0, 0}, {-0.8190296564979327, 0.7393158148386781}], 
                  Offset[{-5, 0}, {-0.8190296564979327, 0.7393158148386781}], 
                  Offset[{-10, 0}, {-0.8190296564979327, 0.7393158148386781}],
                   Offset[{-10, 0}, {-0.8190296564979327, 
                   0.7393158148386781}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 6.500000000000008}, {-0.8190296564979327, 
                   0.7393158148386781}], 
                  Offset[{-10., -6.499999999999992}, {-0.8190296564979327, 
                   0.7393158148386781}], 
                  Offset[{-81., -6.500000000000008}, {-0.8190296564979327, 
                   0.7393158148386781}], 
                  Offset[{-81., 6.499999999999992}, {-0.8190296564979327, 
                   0.7393158148386781}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Border closure\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-45.5, 0.}, \
{-0.8190296564979327, 0.7393158148386781}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328689$329464, 
                 FEPrivate`Not[DynamicChart`click$328689$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328689$329464, {{{1., 0.}, {0., 
               1.}}, {-0.14846134785938273`, 0.13401204495035277`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328689$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0, 0}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0., 0.}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0., 0.}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0., 0.}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}], 
                  Offset[{-5, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}], 
                  Offset[{-10, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}], 
                  Offset[{-10, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0, 0}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0., 0.}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0., 0.}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0., 0.}, {-0.0021277703735693254`, 
                   1.0199977806805451`}], 
                  Offset[{0, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}], 
                  Offset[{-5, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}], 
                  Offset[{-10, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}], 
                  Offset[{-10, 0}, {-0.0023016611579113715`, 
                   1.103354954476684}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 6.500000000000008}, {-0.0023016611579113715`, 
                   1.103354954476684}], 
                  Offset[{-10., -6.499999999999992}, {-0.0023016611579113715`,
                    1.103354954476684}], 
                  Offset[{-79., -6.500000000000008}, {-0.0023016611579113715`,
                    1.103354954476684}], 
                  Offset[{-79., 6.499999999999992}, {-0.0023016611579113715`, 
                   1.103354954476684}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Border checks\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-44.5, 0.}, \
{-0.0023016611579113715, 1.103354954476684}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328693$329464, 
                 FEPrivate`Not[DynamicChart`click$328693$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328693$329464, {{{1., 0.}, {0., 
               1.}}, {-0.000417209877170456, 0.19999956483932257`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328693$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0, 0}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0., 0.}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0., 0.}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0., 0.}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0, 0}, {0.8550016155720597, 0.6974021006783323}], 
                  Offset[{5, 0}, {0.8550016155720597, 0.6974021006783323}], 
                  Offset[{10, 0}, {0.8550016155720597, 0.6974021006783323}], 
                  Offset[{10, 0}, {0.8550016155720597, 
                   0.6974021006783323}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0, 0}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0., 0.}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0., 0.}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0., 0.}, {0.7904075155432562, 0.6447138585238704}], 
                  Offset[{0, 0}, {0.8550016155720597, 0.6974021006783323}], 
                  Offset[{5, 0}, {0.8550016155720597, 0.6974021006783323}], 
                  Offset[{10, 0}, {0.8550016155720597, 0.6974021006783323}], 
                  Offset[{10, 0}, {0.8550016155720597, 
                   0.6974021006783323}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{153., 7.500000000000016}, {0.8550016155720597, 
                   0.6974021006783323}], 
                  Offset[{153., -7.499999999999984}, {0.8550016155720597, 
                   0.6974021006783323}], 
                  Offset[{10., -7.500000000000016}, {0.8550016155720597, 
                   0.6974021006783323}], 
                  Offset[{10., 7.499999999999984}, {0.8550016155720597, 
                   0.6974021006783323}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"International flights suspension\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{81.5, 0.}, {0.8550016155720597, 0.6974021006783323}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328697$329464, 
                 FEPrivate`Not[DynamicChart`click$328697$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328697$329464, {{{1., 0.}, {0., 1.}}, {
               0.15498186579279533`, 0.126414482063504}}, {{1, 0}, {0, 1}}, {{
              1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328697$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0, 0}, {0.9691529862071045, -0.31802906993834984`}],
                   Offset[{0., 0.}, {
                   0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0., 0.}, {
                   0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0., 0.}, {
                   0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0, 0}, {1.048355178115016, -0.344018709739167}], 
                  Offset[{5, 0}, {1.048355178115016, -0.344018709739167}], 
                  Offset[{10, 0}, {1.048355178115016, -0.344018709739167}], 
                  Offset[{10, 0}, {1.048355178115016, -0.344018709739167}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0, 0}, {0.9691529862071045, -0.31802906993834984`}],
                   Offset[{0., 0.}, {
                   0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0., 0.}, {
                   0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0., 0.}, {
                   0.9691529862071045, -0.31802906993834984`}], 
                  Offset[{0, 0}, {1.048355178115016, -0.344018709739167}], 
                  Offset[{5, 0}, {1.048355178115016, -0.344018709739167}], 
                  Offset[{10, 0}, {1.048355178115016, -0.344018709739167}], 
                  Offset[{10, 0}, {1.048355178115016, -0.344018709739167}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{136., 6.500000000000014}, {
                   1.048355178115016, -0.344018709739167}], 
                  Offset[{136., -6.499999999999986}, {
                   1.048355178115016, -0.344018709739167}], 
                  Offset[{10., -6.500000000000014}, {
                   1.048355178115016, -0.344018709739167}], 
                  Offset[{10., 6.499999999999986}, {
                   1.048355178115016, -0.344018709739167}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Domestic travel restrictions\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{73., 0.}, {1.048355178115016, -0.344018709739167}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328701$329464, 
                 FEPrivate`Not[DynamicChart`click$328701$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328701$329464, {{{1., 0.}, {0., 1.}}, {
               0.1900299972955107, -0.06235864116438233}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328701$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0, 0}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0., 0.}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0., 0.}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0., 0.}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0, 0}, {0.9353750596426496, -0.5852101754960526}], 
                  Offset[{5, 0}, {0.9353750596426496, -0.5852101754960526}], 
                  Offset[{10, 0}, {0.9353750596426496, -0.5852101754960526}], 
                  Offset[{10, 0}, {
                   0.9353750596426496, -0.5852101754960526}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0, 0}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0., 0.}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0., 0.}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0., 0.}, {0.864708244969907, -0.540998753308234}], 
                  Offset[{0, 0}, {0.9353750596426496, -0.5852101754960526}], 
                  Offset[{5, 0}, {0.9353750596426496, -0.5852101754960526}], 
                  Offset[{10, 0}, {0.9353750596426496, -0.5852101754960526}], 
                  Offset[{10, 0}, {
                   0.9353750596426496, -0.5852101754960526}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{151., 7.500000000000016}, {
                   0.9353750596426496, -0.5852101754960526}], 
                  Offset[{151., -7.499999999999984}, {
                   0.9353750596426496, -0.5852101754960526}], 
                  Offset[{10., -7.500000000000016}, {
                   0.9353750596426496, -0.5852101754960526}], 
                  Offset[{10., 7.499999999999984}, {
                   0.9353750596426496, -0.5852101754960526}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Checkpoints within the country\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{80.5, 0.}, {0.9353750596426496, -0.5852101754960526}],
                 ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328705$329464, 
                 FEPrivate`Not[DynamicChart`click$328705$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328705$329464, {{{1., 0.}, {0., 1.}}, {
               0.16955063626860922`, -0.10607818692318315`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328705$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0, 0}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0., 0.}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0., 0.}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0., 0.}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0, 0}, {0.7874806474887338, -0.7728335424626214}], 
                  Offset[{5, 0}, {0.7874806474887338, -0.7728335424626214}], 
                  Offset[{10, 0}, {0.7874806474887338, -0.7728335424626214}], 
                  Offset[{10, 0}, {
                   0.7874806474887338, -0.7728335424626214}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0, 0}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0., 0.}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0., 0.}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0., 0.}, {0.727987568135552, -0.7144467094473073}], 
                  Offset[{0, 0}, {0.7874806474887338, -0.7728335424626214}], 
                  Offset[{5, 0}, {0.7874806474887338, -0.7728335424626214}], 
                  Offset[{10, 0}, {0.7874806474887338, -0.7728335424626214}], 
                  Offset[{10, 0}, {
                   0.7874806474887338, -0.7728335424626214}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{52., 6.500000000000004}, {
                   0.7874806474887338, -0.7728335424626214}], 
                  Offset[{52., -6.499999999999996}, {
                   0.7874806474887338, -0.7728335424626214}], 
                  Offset[{10., -6.500000000000004}, {
                   0.7874806474887338, -0.7728335424626214}], 
                  Offset[{10., 6.499999999999996}, {
                   0.7874806474887338, -0.7728335424626214}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Curfews\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{31., 0.}, {0.7874806474887338, -0.7728335424626214}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328709$329464, 
                 FEPrivate`Not[DynamicChart`click$328709$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328709$329464, {{{1., 0.}, {0., 1.}}, {
               0.1427426604187357, -0.1400875900877073}}, {{1, 0}, {0, 1}}, {{
              1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328709$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0, 0}, {-0.18410162387430132`, -1.003248021222492}],
                   Offset[{0., 
                   0.}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0., 
                   0.}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0., 
                   0.}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}], 
                  Offset[{-5, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}], 
                  Offset[{-10, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}], 
                  Offset[{-10, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0, 0}, {-0.18410162387430132`, -1.003248021222492}],
                   Offset[{0., 
                   0.}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0., 
                   0.}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0., 
                   0.}, {-0.18410162387430132`, -1.003248021222492}], 
                  Offset[{0, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}], 
                  Offset[{-5, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}], 
                  Offset[{-10, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}], 
                  Offset[{-10, 
                   0}, {-0.19914649589301106`, -1.0852364378680552`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   6.500000000000009}, {-0.19914649589301106`, \
-1.0852364378680552`}], 
                  Offset[{-10., -6.499999999999991}, {-0.19914649589301106`, \
-1.0852364378680552`}], 
                  Offset[{-86., -6.500000000000009}, {-0.19914649589301106`, \
-1.0852364378680552`}], 
                  Offset[{-86., 
                   6.499999999999991}, {-0.19914649589301106`, \
-1.0852364378680552`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Visa restrictions\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-48., 0.}, \
{-0.19914649589301106, -1.0852364378680552}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328713$329464, 
                 FEPrivate`Not[DynamicChart`click$328713$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[
             DynamicChart`click$328713$329464, {{{1., 0.}, {0., 
               1.}}, {-0.03609835762241203, -0.19671529827891998`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328713$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.9028607063213463, -0.47459724502036443`}],
                   Offset[{0, 
                   0}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0., 
                   0.}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0., 
                   0.}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0., 
                   0.}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0, 0}, {-0.976645062094257, -0.5133827768532956}], 
                  Offset[{-5, 0}, {-0.976645062094257, -0.5133827768532956}], 
                  Offset[{-10, 0}, {-0.976645062094257, -0.5133827768532956}],
                   Offset[{-10, 
                   0}, {-0.976645062094257, -0.5133827768532956}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.9028607063213463, -0.47459724502036443`}],
                   Offset[{0, 
                   0}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0., 
                   0.}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0., 
                   0.}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0., 
                   0.}, {-0.9028607063213463, -0.47459724502036443`}], 
                  Offset[{0, 0}, {-0.976645062094257, -0.5133827768532956}], 
                  Offset[{-5, 0}, {-0.976645062094257, -0.5133827768532956}], 
                  Offset[{-10, 0}, {-0.976645062094257, -0.5133827768532956}],
                   Offset[{-10, 
                   0}, {-0.976645062094257, -0.5133827768532956}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000014}, {-0.976645062094257, \
-0.5133827768532956}], 
                  Offset[{-10., -7.499999999999986}, {-0.976645062094257, \
-0.5133827768532956}], 
                  Offset[{-139., -7.500000000000014}, {-0.976645062094257, \
-0.5133827768532956}], 
                  Offset[{-139., 
                   7.499999999999986}, {-0.976645062094257, \
-0.5133827768532956}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Surveillance and monitoring\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-74.5, 0.}, \
{-0.976645062094257, -0.5133827768532956}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328717$329464, 
                 FEPrivate`Not[DynamicChart`click$328717$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328717$329464, {{{1., 0.}, {0., 
               1.}}, {-0.17703151104340123`, -0.09305828333732635}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328717$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0, 0}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0., 
                   0.}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0., 
                   0.}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0., 
                   0.}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}], 
                  Offset[{-5, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}], 
                  Offset[{-10, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}], 
                  Offset[{-10, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0, 0}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0., 
                   0.}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0., 
                   0.}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0., 
                   0.}, {-0.9996150086734925, -0.2029035101586306}], 
                  Offset[{0, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}], 
                  Offset[{-5, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}], 
                  Offset[{-10, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}], 
                  Offset[{-10, 
                   0}, {-1.0798279520240182`, -0.22559777883293997`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.5000000000000275`}, {-1.0798279520240182`, \
-0.22559777883293997`}], 
                  Offset[{-10., -7.4999999999999725`}, {-1.0798279520240182`, \
-0.22559777883293997`}], 
                  Offset[{-257., -7.5000000000000275`}, \
{-1.0798279520240182`, -0.22559777883293997`}], 
                  Offset[{-257., 
                   7.4999999999999725`}, {-1.0798279520240182`, \
-0.22559777883293997`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 
                 RotationBox["\<\"Additional health/documents requirements \
upon arrival\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-133.5, 0.}, \
{-1.0798279520240182, -0.22559777883293997}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328721$329464, 
                 FEPrivate`Not[DynamicChart`click$328721$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328721$329464, {{{1., 0.}, {0., 
               1.}}, {-0.1960029428771554, -0.03978500199188836}}, {{1, 0}, {
              0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328721$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0197780760219226`, -0.02127617599630954}],
                   Offset[{0, 
                   0}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0., 
                   0.}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0., 
                   0.}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0., 
                   0.}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0, 0}, {-1.0791159943184685`, -0.0831427509798897}],
                   Offset[{-5, 
                   0}, {-1.0791159943184685`, -0.0831427509798897}], 
                  Offset[{-10, 
                   0}, {-1.0791159943184685`, -0.0831427509798897}], 
                  Offset[{-10, 
                   0}, {-1.0791159943184685`, -0.0831427509798897}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0197780760219226`, -0.02127617599630954}],
                   Offset[{0, 
                   0}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0., 
                   0.}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0., 
                   0.}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0., 
                   0.}, {-1.0197780760219226`, -0.02127617599630954}], 
                  Offset[{0, 0}, {-1.0791159943184685`, -0.0831427509798897}],
                   Offset[{-5, 
                   0}, {-1.0791159943184685`, -0.0831427509798897}], 
                  Offset[{-10, 
                   0}, {-1.0791159943184685`, -0.0831427509798897}], 
                  Offset[{-10, 
                   0}, {-1.0791159943184685`, -0.0831427509798897}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000026}, {-1.0791159943184685`, \
-0.0831427509798897}], 
                  Offset[{-10., -7.499999999999974}, {-1.0791159943184685`, \
-0.0831427509798897}], 
                  Offset[{-240., -7.500000000000026}, {-1.0791159943184685`, \
-0.0831427509798897}], 
                  Offset[{-240., 
                   7.499999999999974}, {-1.0791159943184685`, \
-0.0831427509798897}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 
                 RotationBox["\<\"Lockdown of refugee/idp camps or other \
minorities\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-125., 0.}, \
{-1.0791159943184685, -0.0831427509798897}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328725$329464, 
                 FEPrivate`Not[DynamicChart`click$328725$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328725$329464, {{{1., 0.}, {0., 
               1.}}, {-0.19995648549449463`, -0.004171799214962655}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328725$329464}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0, 0}, {-1.019991122731838, -0.004255531487918928}],
                   Offset[{0., 
                   0.}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0., 
                   0.}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0., 
                   0.}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0, 0}, {-1.0808322198029505`, 0.05607990803580782}],
                   Offset[{-5, 0}, {-1.0808322198029505`, 
                   0.05607990803580782}], 
                  Offset[{-10, 0}, {-1.0808322198029505`, 
                   0.05607990803580782}], 
                  Offset[{-10, 0}, {-1.0808322198029505`, 
                   0.05607990803580782}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0, 0}, {-1.019991122731838, -0.004255531487918928}],
                   Offset[{0., 
                   0.}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0., 
                   0.}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0., 
                   0.}, {-1.019991122731838, -0.004255531487918928}], 
                  Offset[{0, 0}, {-1.0808322198029505`, 0.05607990803580782}],
                   Offset[{-5, 0}, {-1.0808322198029505`, 
                   0.05607990803580782}], 
                  Offset[{-10, 0}, {-1.0808322198029505`, 
                   0.05607990803580782}], 
                  Offset[{-10, 0}, {-1.0808322198029505`, 
                   0.05607990803580782}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 7.500000000000012}, {-1.0808322198029505`, 
                   0.05607990803580782}], 
                  Offset[{-10., -7.499999999999988}, {-1.0808322198029505`, 
                   0.05607990803580782}], 
                  Offset[{-125., -7.500000000000012}, {-1.0808322198029505`, 
                   0.05607990803580782}], 
                  Offset[{-125., 7.499999999999988}, {-1.0808322198029505`, 
                   0.05607990803580782}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Complete border closure\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-67.5, 0.}, \
{-1.0808322198029505, 0.05607990803580782}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328729$329464, 
                 FEPrivate`Not[DynamicChart`click$328729$329464]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328729$329464, {{{1., 0.}, {0., 
               1.}}, {-0.19999825935918392`, -0.000834417938807633}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328729$329464}]]}, {}}, {}},
        DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
      ContentSelectable->False,
      DisplayFunction->Identity,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 200},
      PlotLabel->FormBox["\"Movement restrictions\"", TraditionalForm],
      PlotRange->{{Full, Full}, {Full, Full}},
      PlotRangePadding->Scaled[0.05]]},
    {
     GraphicsBox[{{}, {}, 
       DynamicModuleBox[{DynamicChart`click$328131$329477 = False, 
        DynamicChart`click$328135$329477 = False, 
        DynamicChart`click$328139$329477 = False, 
        DynamicChart`click$328143$329477 = False, 
        DynamicChart`click$328147$329477 = False, 
        DynamicChart`click$328151$329477 = False}, {
         {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[
          0.5]}], {{{}, {
             {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.6837293960415884`, 
                    3.141592653589793}]},
                    
                    ImageSizeCache->{{270.2183112218049, 
                    348.56166057468647`}, {-71.94809357980624, 
                    5.91421330482703}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 71]& ,
                    TagBoxNote->"71"],
                   StyleBox["71", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[71, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328131$329477, 
                    FEPrivate`Not[DynamicChart`click$328131$329477]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328131$329477, {{{1., 0.}, {0., 
                   1.}}, {-0.14917728825228865`, 0.13321462633545006`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328131$329477}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.9965728, 0.58382944, 0.22525344], EdgeForm[{
              GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.5399963988185261`, 
                    1.6837293960415884`}]},
                    
                    ImageSizeCache->{{337.2232177448935, 
                    350.88714702656654`}, {-72.42913604805454, 
                    5.91421330482703}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 7]& ,
                    TagBoxNote->"7"],
                   StyleBox["7", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[7, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328135$329477, 
                    FEPrivate`Not[DynamicChart`click$328135$329477]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328135$329477, {{{1., 0.}, {0., 
                   1.}}, {-0.008211005746320657, 0.19983137737761278`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328135$329477}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.8704000000000001, 0.50272, 0.2], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-1.5194631135009455`, 
                    1.5399963988185261`}]},
                    
                    ImageSizeCache->{{345.73323344994026`, 
                    424.0765828028218}, {-72.39332080909502, 
                    81.32966273924218}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 149]& ,
                    TagBoxNote->"149"],
                   StyleBox["149", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[149, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328139$329477, 
                    FEPrivate`Not[DynamicChart`click$328139$329477]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328139$329477, {{{1., 0.}, {0., 1.}}, {
                   0.19998945969743465`, 0.002053292460458005}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328139$329477}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.74058432, 0.47903999999999997`, 0.4089916800000002], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-1.5399963988185261`, -1.5194631135009455`}]},
                    ImageSizeCache->{{345.73323344994026`, 
                    352.43638194873427`}, {3.0857861800808166`, 
                    81.39332029400288}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328143$329477, 
                    FEPrivate`Not[DynamicChart`click$328143$329477]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328143$329477, {{{1., 0.}, {0., 1.}}, {
                   0.008211005746320681, -0.19983137737761278`}}, {{1, 0}, {0,
                   1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328143$329477}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.64020864, 0.49888000000000005`, 0.74416944], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.813060088508508, -1.5399963988185261`}]},
                    
                    ImageSizeCache->{{274.2570881294348, 350.8871470265665}, {
                    3.0857861800808166`, 81.42913553296239}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 62]& ,
                    TagBoxNote->"62"],
                   StyleBox["62", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[62, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328147$329477, 
                    FEPrivate`Not[DynamicChart`click$328147$329477]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328147$329477, {{{1., 0.}, {0., 
                   1.}}, {-0.11387278540426274`, -0.16441711816071564`}}, {{1,
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328147$329477}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
              Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -2.813060088508508}]},
                    
                    ImageSizeCache->{{270.2183112218049, 
                    348.56166057468647`}, {3.0857861800808237`, 
                    30.27943707238797}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 16]& ,
                    TagBoxNote->"16"],
                   StyleBox["16", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[16, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328151$329477, 
                    FEPrivate`Not[DynamicChart`click$328151$329477]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328151$329477, {{{1., 0.}, {0., 
                   1.}}, {-0.19730772092473192`, -0.032705706894792956`}}, {{
                  1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328151$329477}]],
               "DelayedClickEffect"]}}}, {}}, {}}, {{{
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 71]& ,
                  TagBoxNote->"71"],
                 StyleBox["71", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[71, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328131$329477, 
                   FEPrivate`Not[DynamicChart`click$328131$329477]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328131$329477, {{{1., 0.}, {0., 
                 1.}}, {-0.14917728825228865`, 0.13321462633545006`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328131$329477}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 7]& ,
                  TagBoxNote->"7"],
                 StyleBox["7", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[7, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328135$329477, 
                   FEPrivate`Not[DynamicChart`click$328135$329477]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328135$329477, {{{1., 0.}, {0., 
                 1.}}, {-0.008211005746320657, 0.19983137737761278`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328135$329477}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 149]& ,
                  TagBoxNote->"149"],
                 StyleBox["149", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[149, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328139$329477, 
                   FEPrivate`Not[DynamicChart`click$328139$329477]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328139$329477, {{{1., 0.}, {0., 1.}}, {
                 0.19998945969743465`, 0.002053292460458005}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328139$329477}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328143$329477, 
                   FEPrivate`Not[DynamicChart`click$328143$329477]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328143$329477, {{{1., 0.}, {0., 1.}}, {
                 0.008211005746320681, -0.19983137737761278`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328143$329477}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 62]& ,
                  TagBoxNote->"62"],
                 StyleBox["62", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[62, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328147$329477, 
                   FEPrivate`Not[DynamicChart`click$328147$329477]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328147$329477, {{{1., 0.}, {0., 
                 1.}}, {-0.11387278540426274`, -0.16441711816071564`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328147$329477}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 16]& ,
                  TagBoxNote->"16"],
                 StyleBox["16", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[16, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328151$329477, 
                   FEPrivate`Not[DynamicChart`click$328151$329477]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328151$329477, {{{1., 0.}, {0., 
                 1.}}, {-0.19730772092473192`, -0.032705706894792956`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328151$329477}]],
             "DelayedClickEffect"]}, {}}, {}}, {{GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.7608041700866721, 0.6793945943107953}], 
                  Offset[{0, 0}, {-0.7608041700866721, 0.6793945943107953}], 
                  Offset[{0., 0.}, {-0.7608041700866721, 0.6793945943107953}],
                   Offset[{0., 0.}, {-0.7608041700866721, 
                   0.6793945943107953}], 
                  Offset[{0., 0.}, {-0.7608041700866721, 0.6793945943107953}],
                   Offset[{0, 0}, {-0.8229823348630623, 0.7349193295426621}], 
                  Offset[{-5, 0}, {-0.8229823348630623, 0.7349193295426621}], 
                  Offset[{-10, 0}, {-0.8229823348630623, 0.7349193295426621}],
                   Offset[{-10, 0}, {-0.8229823348630623, 
                   0.7349193295426621}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.7608041700866721, 0.6793945943107953}], 
                  Offset[{0, 0}, {-0.7608041700866721, 0.6793945943107953}], 
                  Offset[{0., 0.}, {-0.7608041700866721, 0.6793945943107953}],
                   Offset[{0., 0.}, {-0.7608041700866721, 
                   0.6793945943107953}], 
                  Offset[{0., 0.}, {-0.7608041700866721, 0.6793945943107953}],
                   Offset[{0, 0}, {-0.8229823348630623, 0.7349193295426621}], 
                  Offset[{-5, 0}, {-0.8229823348630623, 0.7349193295426621}], 
                  Offset[{-10, 0}, {-0.8229823348630623, 0.7349193295426621}],
                   Offset[{-10, 0}, {-0.8229823348630623, 
                   0.7349193295426621}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 7.50000000000003}, {-0.8229823348630623, 
                   0.7349193295426621}], 
                  Offset[{-10., -7.49999999999997}, {-0.8229823348630623, 
                   0.7349193295426621}], 
                  Offset[{-285., -7.50000000000003}, {-0.8229823348630623, 
                   0.7349193295426621}], 
                  Offset[{-285., 7.49999999999997}, {-0.8229823348630623, 
                   0.7349193295426621}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 
                 RotationBox["\<\"Emergency administrative structures \
activated or established\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-147.5, 0.}, \
{-0.8229823348630623, 0.7349193295426621}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328131$329477, 
                 FEPrivate`Not[DynamicChart`click$328131$329477]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328131$329477, {{{1., 0.}, {0., 
               1.}}, {-0.14917728825228865`, 0.13321462633545006`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328131$329477}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.04187612930623535, 1.019140024625825}], 
                  Offset[{0, 0}, {-0.04187612930623535, 1.019140024625825}], 
                  Offset[{0., 0.}, {-0.04187612930623535, 1.019140024625825}],
                   Offset[{0., 0.}, {-0.04187612930623535, 
                   1.019140024625825}], 
                  Offset[{0., 0.}, {-0.04187612930623535, 1.019140024625825}],
                   Offset[{0, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-5, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-10, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-10, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.04187612930623535, 1.019140024625825}], 
                  Offset[{0, 0}, {-0.04187612930623535, 1.019140024625825}], 
                  Offset[{0., 0.}, {-0.04187612930623535, 1.019140024625825}],
                   Offset[{0., 0.}, {-0.04187612930623535, 
                   1.019140024625825}], 
                  Offset[{0., 0.}, {-0.04187612930623535, 1.019140024625825}],
                   Offset[{0, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-5, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-10, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-10, 0}, {-0.045298528674125836`, 
                   1.1024311127666984`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 7.500000000000015}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-10., -7.499999999999985}, {-0.045298528674125836`, 
                   1.1024311127666984`}], 
                  Offset[{-144., -7.500000000000015}, {-0.045298528674125836`,
                    1.1024311127666984`}], 
                  Offset[{-144., 7.499999999999985}, {-0.045298528674125836`, 
                   1.1024311127666984`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Limit product imports/exports\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-77., 0.}, \
{-0.045298528674125836, 1.1024311127666984}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328135$329477, 
                 FEPrivate`Not[DynamicChart`click$328135$329477]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328135$329477, {{{1., 0.}, {0., 
               1.}}, {-0.008211005746320657, 0.19983137737761278`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328135$329477}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {1.0199462444569165`, 0.010471791548335826`}],
                   Offset[{0, 0}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0., 0.}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0., 0.}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0., 0.}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0, 0}, {1.103303231032187, 0.011327638560158816`}], 
                  Offset[{5, 0}, {1.103303231032187, 0.011327638560158816`}], 
                  Offset[{10, 0}, {1.103303231032187, 0.011327638560158816`}],
                   Offset[{10, 0}, {1.103303231032187, 
                   0.011327638560158816`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {1.0199462444569165`, 0.010471791548335826`}],
                   Offset[{0, 0}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0., 0.}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0., 0.}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0., 0.}, {1.0199462444569165`, 
                   0.010471791548335826`}], 
                  Offset[{0, 0}, {1.103303231032187, 0.011327638560158816`}], 
                  Offset[{5, 0}, {1.103303231032187, 0.011327638560158816`}], 
                  Offset[{10, 0}, {1.103303231032187, 0.011327638560158816`}],
                   Offset[{10, 0}, {1.103303231032187, 
                   0.011327638560158816`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{106., 6.500000000000011}, {1.103303231032187, 
                   0.011327638560158816`}], 
                  Offset[{106., -6.499999999999989}, {1.103303231032187, 
                   0.011327638560158816`}], 
                  Offset[{10., -6.500000000000011}, {1.103303231032187, 
                   0.011327638560158816`}], 
                  Offset[{10., 6.499999999999989}, {1.103303231032187, 
                   0.011327638560158816`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Economic measures\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{58., 0.}, {1.103303231032187, 0.011327638560158816}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328139$329477, 
                 FEPrivate`Not[DynamicChart`click$328139$329477]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328139$329477, {{{1., 0.}, {0., 1.}}, {
               0.19998945969743465`, 0.002053292460458005}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328139$329477}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.04187612930623547, -1.019140024625825}], 
                  Offset[{0, 0}, {0.04187612930623547, -1.019140024625825}], 
                  Offset[{0., 0.}, {0.04187612930623547, -1.019140024625825}],
                   Offset[{0., 0.}, {
                   0.04187612930623547, -1.019140024625825}], 
                  Offset[{0., 0.}, {0.04187612930623547, -1.019140024625825}],
                   Offset[{0, 0}, {
                   0.04529853213822913, -1.1024311195877623`}], 
                  Offset[{5, 0}, {0.04529853213822913, -1.1024311195877623`}],
                   Offset[{10, 0}, {
                   0.04529853213822913, -1.1024311195877623`}], 
                  Offset[{10, 0}, {
                   0.04529853213822913, -1.1024311195877623`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.04187612930623547, -1.019140024625825}], 
                  Offset[{0, 0}, {0.04187612930623547, -1.019140024625825}], 
                  Offset[{0., 0.}, {0.04187612930623547, -1.019140024625825}],
                   Offset[{0., 0.}, {
                   0.04187612930623547, -1.019140024625825}], 
                  Offset[{0., 0.}, {0.04187612930623547, -1.019140024625825}],
                   Offset[{0, 0}, {
                   0.04529853213822913, -1.1024311195877623`}], 
                  Offset[{5, 0}, {0.04529853213822913, -1.1024311195877623`}],
                   Offset[{10, 0}, {
                   0.04529853213822913, -1.1024311195877623`}], 
                  Offset[{10, 0}, {
                   0.04529853213822913, -1.1024311195877623`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{86., 6.500000000000009}, {
                   0.04529853213822913, -1.1024311195877623`}], 
                  Offset[{86., -6.499999999999991}, {
                   0.04529853213822913, -1.1024311195877623`}], 
                  Offset[{10., -6.500000000000009}, {
                   0.04529853213822913, -1.1024311195877623`}], 
                  Offset[{10., 6.499999999999991}, {
                   0.04529853213822913, -1.1024311195877623`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Schools closure\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{48., 0.}, {0.04529853213822913, -1.1024311195877623}],
                 ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328143$329477, 
                 FEPrivate`Not[DynamicChart`click$328143$329477]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328143$329477, {{{1., 0.}, {0., 1.}}, {
               0.008211005746320681, -0.19983137737761278`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328143$329477}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0, 0}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0., 0.}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0., 0.}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0., 0.}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0, 0}, {-0.6282141472447214, -0.9070575030841774}], 
                  Offset[{-5, 0}, {-0.6282141472447214, -0.9070575030841774}],
                   Offset[{-10, 
                   0}, {-0.6282141472447214, -0.9070575030841774}], 
                  Offset[{-10, 
                   0}, {-0.6282141472447214, -0.9070575030841774}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0, 0}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0., 0.}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0., 0.}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0., 0.}, {-0.58075120556174, -0.8385273026196497}], 
                  Offset[{0, 0}, {-0.6282141472447214, -0.9070575030841774}], 
                  Offset[{-5, 0}, {-0.6282141472447214, -0.9070575030841774}],
                   Offset[{-10, 
                   0}, {-0.6282141472447214, -0.9070575030841774}], 
                  Offset[{-10, 
                   0}, {-0.6282141472447214, -0.9070575030841774}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000015}, {-0.6282141472447214, \
-0.9070575030841774}], 
                  Offset[{-10., -7.499999999999985}, {-0.6282141472447214, \
-0.9070575030841774}], 
                  Offset[{-143., -7.500000000000015}, {-0.6282141472447214, \
-0.9070575030841774}], 
                  Offset[{-143., 
                   7.499999999999985}, {-0.6282141472447214, \
-0.9070575030841774}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"State of emergency declared\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-76.5, 0.}, \
{-0.6282141472447214, -0.9070575030841774}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328147$329477, 
                 FEPrivate`Not[DynamicChart`click$328147$329477]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328147$329477, {{{1., 0.}, {0., 
               1.}}, {-0.11387278540426274`, -0.16441711816071564`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328147$329477}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0, 0}, {-1.0062693767161328`, -0.1667991051634441}],
                   Offset[{0., 
                   0.}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0., 
                   0.}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0., 
                   0.}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0, 0}, {-1.0885085981649212`, -0.1804310590685932}],
                   Offset[{-5, 
                   0}, {-1.0885085981649212`, -0.1804310590685932}], 
                  Offset[{-10, 
                   0}, {-1.0885085981649212`, -0.1804310590685932}], 
                  Offset[{-10, 
                   0}, {-1.0885085981649212`, -0.1804310590685932}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0, 0}, {-1.0062693767161328`, -0.1667991051634441}],
                   Offset[{0., 
                   0.}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0., 
                   0.}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0., 
                   0.}, {-1.0062693767161328`, -0.1667991051634441}], 
                  Offset[{0, 0}, {-1.0885085981649212`, -0.1804310590685932}],
                   Offset[{-5, 
                   0}, {-1.0885085981649212`, -0.1804310590685932}], 
                  Offset[{-10, 
                   0}, {-1.0885085981649212`, -0.1804310590685932}], 
                  Offset[{-10, 
                   0}, {-1.0885085981649212`, -0.1804310590685932}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000011}, {-1.0885085981649212`, \
-0.1804310590685932}], 
                  Offset[{-10., -7.499999999999989}, {-1.0885085981649212`, \
-0.1804310590685932}], 
                  Offset[{-102., -7.500000000000011}, {-1.0885085981649212`, \
-0.1804310590685932}], 
                  Offset[{-102., 
                   7.499999999999989}, {-1.0885085981649212`, \
-0.1804310590685932}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Military deployment\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-56., 0.}, \
{-1.0885085981649212, -0.1804310590685932}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328151$329477, 
                 FEPrivate`Not[DynamicChart`click$328151$329477]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328151$329477, {{{1., 0.}, {0., 
               1.}}, {-0.19730772092473192`, -0.032705706894792956`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328151$329477}]]}, {}}, {}},
        DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
      ContentSelectable->False,
      DisplayFunction->Identity,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 200},
      PlotLabel->FormBox["\"Social and economic measures\"", TraditionalForm],
      PlotRange->{{Full, Full}, {Full, Full}},
      PlotRangePadding->Scaled[0.05]], 
     GraphicsBox[{{}, {}, 
       DynamicModuleBox[{DynamicChart`click$329071$329485 = False, 
        DynamicChart`click$329075$329485 = False}, {
         {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[
          0.5]}], {{{}, {
             {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-2.5431940529060224`, 
                    3.141592653589793}]},
                    
                    ImageSizeCache->{{79.1097687399529, 
                    248.43819586469908`}, {-80.1642135623731, 
                    89.1642135623731}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 57]& ,
                    TagBoxNote->"57"],
                   StyleBox["57", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[57, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$329071$329485, 
                    FEPrivate`Not[DynamicChart`click$329071$329485]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$329071$329485, {{{1., 0.}, {0., 1.}}, {
                   0.19111456115722814`, 0.0589510348821809}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$329071$329485}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
              Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -2.5431940529060224`}]},
                    
                    ImageSizeCache->{{79.1097687399529, 
                    165.18819586469908`}, {3.0857864376268935`, 
                    52.8106083961697}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 6]& ,
                    TagBoxNote->"6"],
                   StyleBox["6", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[6, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$329075$329485, 
                    FEPrivate`Not[DynamicChart`click$329075$329485]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$329075$329485, {{{1., 0.}, {0., 
                   1.}}, {-0.19111456115722814`, -0.058951034882180925`}}, {{
                  1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$329075$329485}]],
               "DelayedClickEffect"]}}}, {}}, {}}, {{{
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 57]& ,
                  TagBoxNote->"57"],
                 StyleBox["57", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[57, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$329071$329485, 
                   FEPrivate`Not[DynamicChart`click$329071$329485]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$329071$329485, {{{1., 0.}, {0., 1.}}, {
                 0.19111456115722814`, 0.0589510348821809}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$329071$329485}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 6]& ,
                  TagBoxNote->"6"],
                 StyleBox["6", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[6, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$329075$329485, 
                   FEPrivate`Not[DynamicChart`click$329075$329485]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$329075$329485, {{{1., 0.}, {0., 
                 1.}}, {-0.19111456115722814`, -0.058951034882180925`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$329075$329485}]],
             "DelayedClickEffect"]}, {}}, {}}, {{GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0, 0}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0., 0.}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0., 0.}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0., 0.}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0, 0}, {1.0543421297576696`, 0.3252214760232911}], 
                  Offset[{5, 0}, {1.0543421297576696`, 0.3252214760232911}], 
                  Offset[{10, 0}, {1.0543421297576696`, 0.3252214760232911}], 
                  Offset[{10, 0}, {1.0543421297576696`, 
                   0.3252214760232911}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0, 0}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0., 0.}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0., 0.}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0., 0.}, {0.9746842619018635, 0.3006502778991226}], 
                  Offset[{0, 0}, {1.0543421297576696`, 0.3252214760232911}], 
                  Offset[{5, 0}, {1.0543421297576696`, 0.3252214760232911}], 
                  Offset[{10, 0}, {1.0543421297576696`, 0.3252214760232911}], 
                  Offset[{10, 0}, {1.0543421297576696`, 
                   0.3252214760232911}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{88., 6.500000000000009}, {1.0543421297576696`, 
                   0.3252214760232911}], 
                  Offset[{88., -6.499999999999991}, {1.0543421297576696`, 
                   0.3252214760232911}], 
                  Offset[{10., -6.500000000000009}, {1.0543421297576696`, 
                   0.3252214760232911}], 
                  Offset[{10., 6.499999999999991}, {1.0543421297576696`, 
                   0.3252214760232911}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Partial lockdown\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{49., 0.}, {1.0543421297576696, 0.3252214760232911}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$329071$329485, 
                 FEPrivate`Not[DynamicChart`click$329071$329485]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$329071$329485, {{{1., 0.}, {0., 1.}}, {
               0.19111456115722814`, 0.0589510348821809}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$329071$329485}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0, 0}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0., 
                   0.}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0., 
                   0.}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0., 
                   0.}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}], 
                  Offset[{-5, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}], 
                  Offset[{-10, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}], 
                  Offset[{-10, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0, 0}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0., 
                   0.}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0., 
                   0.}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0., 
                   0.}, {-0.9746842619018634, -0.3006502778991227}], 
                  Offset[{0, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}], 
                  Offset[{-5, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}], 
                  Offset[{-10, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}], 
                  Offset[{-10, 
                   0}, {-1.0543421297576694`, -0.32522147602329127`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   6.500000000000007}, {-1.0543421297576694`, \
-0.32522147602329127`}], 
                  Offset[{-10., -6.499999999999993}, {-1.0543421297576694`, \
-0.32522147602329127`}], 
                  Offset[{-76., -6.500000000000007}, {-1.0543421297576694`, \
-0.32522147602329127`}], 
                  Offset[{-76., 
                   6.499999999999993}, {-1.0543421297576694`, \
-0.32522147602329127`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Full lockdown\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-43., 0.}, \
{-1.0543421297576694, -0.32522147602329127}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$329075$329485, 
                 FEPrivate`Not[DynamicChart`click$329075$329485]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$329075$329485, {{{1., 0.}, {0., 
               1.}}, {-0.19111456115722814`, -0.058951034882180925`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$329075$329485}]]}, {}}, {}},
        DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
      ContentSelectable->False,
      DisplayFunction->Identity,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 200},
      PlotLabel->FormBox["\"Lockdown\"", TraditionalForm],
      PlotRange->{{Full, Full}, {Full, Full}},
      PlotRangePadding->Scaled[0.05]]},
    {
     GraphicsBox[{{}, {}, 
       DynamicModuleBox[{DynamicChart`click$328399$329489 = False, 
        DynamicChart`click$328403$329489 = False, 
        DynamicChart`click$328407$329489 = False, 
        DynamicChart`click$328411$329489 = False, 
        DynamicChart`click$328415$329489 = False, 
        DynamicChart`click$328419$329489 = False}, {
         {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[
          0.5]}], {{{}, {
             {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {0., 3.141592653589793}]},
                    
                    ImageSizeCache->{{171.84317198428369`, 
                    331.2782446431694}, {-70.17085909651264, 
                    10.960890795303342`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 285]& ,
                    TagBoxNote->"285"],
                   StyleBox["285", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[285, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328399$329489, 
                    FEPrivate`Not[DynamicChart`click$328399$329489]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328399$329489, {{{1., 0.}, {0., 1.}}, {
                   1.2246467991473533`*^-17, 0.2}}, {{1, 0}, {0, 1}}, {{1, 
                  0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328399$329489}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.9965728, 0.58382944, 0.22525344], EdgeForm[{
              GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {-1.64244668556098, 0.}]},
                    
                    ImageSizeCache->{{244.54083282363638`, 
                    331.2782446431694}, {8.132463670557115, 
                    89.2642135623731}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 149]& ,
                    TagBoxNote->"149"],
                   StyleBox["149", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[149, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328403$329489, 
                    FEPrivate`Not[DynamicChart`click$328403$329489]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328403$329489, {{{1., 0.}, {0., 1.}}, {
                   0.1362652510086862, -0.14639597456057235`}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328403$329489}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.8704000000000001, 0.50272, 0.2], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.96522253970405, -1.64244668556098}]},
                    
                    ImageSizeCache->{{173.0578862049922, 
                    252.97492187609964`}, {8.132463670557115, 
                    89.06330375877104}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 120]& ,
                    TagBoxNote->"120"],
                   StyleBox["120", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[120, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328407$329489, 
                    FEPrivate`Not[DynamicChart`click$328407$329489]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328407$329489, {{{1., 0.}, {0., 
                   1.}}, {-0.13382612127177165`, -0.14862896509547885`}}, {{1,
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328407$329489}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.74058432, 0.47903999999999997`, 0.4089916800000002], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.119546389354075, -2.96522253970405}]},
                    
                    ImageSizeCache->{{171.8622003996177, 
                    252.97492187609964`}, {8.132463670557122, 
                    24.699769525017217`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 14]& ,
                    TagBoxNote->"14"],
                   StyleBox["14", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[14, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328411$329489, 
                    FEPrivate`Not[DynamicChart`click$328411$329489]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328411$329489, {{{1., 0.}, {0., 
                   1.}}, {-0.19901658050900228`, -0.01980910605009262}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328411$329489}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.64020864, 0.49888000000000005`, 0.74416944], 
              EdgeForm[{GrayLevel[0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.1305695214719345`, -3.119546389354075}]},
                    
                    ImageSizeCache->{{171.84792923262836`, 
                    252.97492187609964`}, {8.132463670557122, 
                    12.687046702137867`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328415$329489, 
                    FEPrivate`Not[DynamicChart`click$328415$329489]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328415$329489, {{{1., 0.}, {0., 
                   1.}}, {-0.1999726609984938, -0.0033067889532717256`}}, {{1,
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328415$329489}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
              Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.1305695214719345`}]},
                    
                    ImageSizeCache->{{171.84317198428369`, 
                    252.97492187609964`}, {8.132463670557122, 
                    11.824021187435612`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$328419$329489, 
                    FEPrivate`Not[DynamicChart`click$328419$329489]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$328419$329489, {{{1., 0.}, {0., 
                   1.}}, {-0.19999696227164768`, -0.0011023076309000781`}}, {{
                  1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$328419$329489}]],
               "DelayedClickEffect"]}}}, {}}, {}}, {{{
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 285]& ,
                  TagBoxNote->"285"],
                 StyleBox["285", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[285, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328399$329489, 
                   FEPrivate`Not[DynamicChart`click$328399$329489]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328399$329489, {{{1., 0.}, {0., 1.}}, {
                 1.2246467991473533`*^-17, 0.2}}, {{1, 0}, {0, 1}}, {{1, 0}, {
                0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328399$329489}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 149]& ,
                  TagBoxNote->"149"],
                 StyleBox["149", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[149, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328403$329489, 
                   FEPrivate`Not[DynamicChart`click$328403$329489]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328403$329489, {{{1., 0.}, {0., 1.}}, {
                 0.1362652510086862, -0.14639597456057235`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328403$329489}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 120]& ,
                  TagBoxNote->"120"],
                 StyleBox["120", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[120, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328407$329489, 
                   FEPrivate`Not[DynamicChart`click$328407$329489]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328407$329489, {{{1., 0.}, {0., 
                 1.}}, {-0.13382612127177165`, -0.14862896509547885`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328407$329489}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 14]& ,
                  TagBoxNote->"14"],
                 StyleBox["14", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[14, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328411$329489, 
                   FEPrivate`Not[DynamicChart`click$328411$329489]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328411$329489, {{{1., 0.}, {0., 
                 1.}}, {-0.19901658050900228`, -0.01980910605009262}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328411$329489}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328415$329489, 
                   FEPrivate`Not[DynamicChart`click$328415$329489]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328415$329489, {{{1., 0.}, {0., 
                 1.}}, {-0.1999726609984938, -0.0033067889532717256`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328415$329489}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$328419$329489, 
                   FEPrivate`Not[DynamicChart`click$328419$329489]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$328419$329489, {{{1., 0.}, {0., 
                 1.}}, {-0.19999696227164768`, -0.0011023076309000781`}}, {{1,
                 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$328419$329489}]],
             "DelayedClickEffect"]}, {}}, {}}, {{GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0, 0}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0., 0.}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0., 0.}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0., 0.}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0, 0}, {6.756125442148612*^-17, 1.103359016959419}],
                   Offset[{5, 0}, {6.756125442148612*^-17, 
                   1.103359016959419}], 
                  Offset[{10, 0}, {6.756125442148612*^-17, 
                   1.103359016959419}], 
                  Offset[{10, 0}, {6.756125442148612*^-17, 
                   1.103359016959419}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0, 0}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0., 0.}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0., 0.}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0., 0.}, {6.245698675651501*^-17, 1.02}], 
                  Offset[{0, 0}, {6.756125442148612*^-17, 1.103359016959419}],
                   Offset[{5, 0}, {6.756125442148612*^-17, 
                   1.103359016959419}], 
                  Offset[{10, 0}, {6.756125442148612*^-17, 
                   1.103359016959419}], 
                  Offset[{10, 0}, {6.756125442148612*^-17, 
                   1.103359016959419}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{115., 7.5000000000000115`}, {6.756125442148612*^-17, 
                   1.103359016959419}], 
                  Offset[{115., -7.4999999999999885`}, {
                   6.756125442148612*^-17, 1.103359016959419}], 
                  Offset[{10., -7.5000000000000115`}, {6.756125442148612*^-17,
                    1.103359016959419}], 
                  Offset[{10., 7.4999999999999885`}, {6.756125442148612*^-17, 
                   1.103359016959419}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Limit public gatherings\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{62.5, 0.}, \
{6.756125442148612*^-17, 1.103359016959419}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328399$329489, 
                 FEPrivate`Not[DynamicChart`click$328399$329489]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328399$329489, {{{1., 0.}, {0., 1.}}, {
               1.2246467991473533`*^-17, 0.2}}, {{1, 0}, {0, 1}}, {{1, 0}, {0,
               1}}], TrackedSymbols :> {DynamicChart`click$328399$329489}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0, 0}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0., 0.}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0., 0.}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0., 0.}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0, 0}, {0.7517475202207263, -0.807636543331545}], 
                  Offset[{5, 0}, {0.7517475202207263, -0.807636543331545}], 
                  Offset[{10, 0}, {0.7517475202207263, -0.807636543331545}], 
                  Offset[{10, 0}, {
                   0.7517475202207263, -0.807636543331545}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0, 0}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0., 0.}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0., 0.}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0., 0.}, {0.6949527801442995, -0.746619470258919}], 
                  Offset[{0, 0}, {0.7517475202207263, -0.807636543331545}], 
                  Offset[{5, 0}, {0.7517475202207263, -0.807636543331545}], 
                  Offset[{10, 0}, {0.7517475202207263, -0.807636543331545}], 
                  Offset[{10, 0}, {
                   0.7517475202207263, -0.807636543331545}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{86., 6.500000000000009}, {
                   0.7517475202207263, -0.807636543331545}], 
                  Offset[{86., -6.499999999999991}, {
                   0.7517475202207263, -0.807636543331545}], 
                  Offset[{10., -6.500000000000009}, {
                   0.7517475202207263, -0.807636543331545}], 
                  Offset[{10., 6.499999999999991}, {
                   0.7517475202207263, -0.807636543331545}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Schools closure\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{48., 0.}, {0.7517475202207263, -0.807636543331545}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328403$329489, 
                 FEPrivate`Not[DynamicChart`click$328403$329489]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328403$329489, {{{1., 0.}, {0., 1.}}, {
               0.1362652510086862, -0.14639597456057235`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328403$329489}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0, 0}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0., 
                   0.}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0., 
                   0.}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0., 
                   0.}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0, 0}, {-0.738291287235037, -0.8199555449162546}], 
                  Offset[{-5, 0}, {-0.738291287235037, -0.8199555449162546}], 
                  Offset[{-10, 0}, {-0.738291287235037, -0.8199555449162546}],
                   Offset[{-10, 
                   0}, {-0.738291287235037, -0.8199555449162546}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0, 0}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0., 
                   0.}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0., 
                   0.}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0., 
                   0.}, {-0.6825132184860354, -0.7580077219869421}], 
                  Offset[{0, 0}, {-0.738291287235037, -0.8199555449162546}], 
                  Offset[{-5, 0}, {-0.738291287235037, -0.8199555449162546}], 
                  Offset[{-10, 0}, {-0.738291287235037, -0.8199555449162546}],
                   Offset[{-10, 
                   0}, {-0.738291287235037, -0.8199555449162546}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   6.5000000000000115`}, {-0.738291287235037, \
-0.8199555449162546}], 
                  Offset[{-10., -6.4999999999999885`}, {-0.738291287235037, \
-0.8199555449162546}], 
                  Offset[{-117., -6.5000000000000115`}, {-0.738291287235037, \
-0.8199555449162546}], 
                  Offset[{-117., 
                   6.4999999999999885`}, {-0.738291287235037, \
-0.8199555449162546}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Public services closure\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-63.5, 0.}, \
{-0.738291287235037, -0.8199555449162546}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328407$329489, 
                 FEPrivate`Not[DynamicChart`click$328407$329489]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328407$329489, {{{1., 0.}, {0., 
               1.}}, {-0.13382612127177165`, -0.14862896509547885`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328407$329489}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 
                   0}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0, 
                   0}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0., 
                   0.}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0., 
                   0.}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0., 
                   0.}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}], 
                  Offset[{-5, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}], 
                  Offset[{-10, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}], 
                  Offset[{-10, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 
                   0}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0, 
                   0}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0., 
                   0.}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0., 
                   0.}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0., 
                   0.}, {-1.0149845605959116`, -0.10102644085547237`}], 
                  Offset[{0, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}], 
                  Offset[{-5, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}], 
                  Offset[{-10, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}], 
                  Offset[{-10, 
                   0}, {-1.0926829831761478`, -0.19590200239823266`}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000018}, {-1.0926829831761478`, \
-0.19590200239823266`}], 
                  Offset[{-10., -7.499999999999982}, {-1.0926829831761478`, \
-0.19590200239823266`}], 
                  Offset[{-166., -7.500000000000018}, {-1.0926829831761478`, \
-0.19590200239823266`}], 
                  Offset[{-166., 
                   7.499999999999982}, {-1.0926829831761478`, \
-0.19590200239823266`}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Changes in prison-related policies\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-88., 0.}, \
{-1.0926829831761478, -0.19590200239823266}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328411$329489, 
                 FEPrivate`Not[DynamicChart`click$328411$329489]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328411$329489, {{{1., 0.}, {0., 
               1.}}, {-0.19901658050900228`, -0.01980910605009262}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328411$329489}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 
                   0}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0, 
                   0}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0., 
                   0.}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0., 
                   0.}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0., 
                   0.}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}], 
                  Offset[{-5, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}], 
                  Offset[{-10, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}], 
                  Offset[{-10, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 
                   0}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0, 
                   0}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0., 
                   0.}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0., 
                   0.}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0., 
                   0.}, {-1.0198605710923183`, -0.016864623661685802`}], 
                  Offset[{0, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}], 
                  Offset[{-5, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}], 
                  Offset[{-10, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}], 
                  Offset[{-10, 
                   0}, {-1.0938725361761128`, -0.05536288790023819}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.500000000000017}, {-1.0938725361761128`, \
-0.05536288790023819}], 
                  Offset[{-10., -7.499999999999983}, {-1.0938725361761128`, \
-0.05536288790023819}], 
                  Offset[{-165., -7.500000000000017}, {-1.0938725361761128`, \
-0.05536288790023819}], 
                  Offset[{-165., 
                   7.499999999999983}, {-1.0938725361761128`, \
-0.05536288790023819}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Introduction of quarantine policies\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-87.5, 0.}, \
{-1.0938725361761128, -0.05536288790023819}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328415$329489, 
                 FEPrivate`Not[DynamicChart`click$328415$329489]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328415$329489, {{{1., 0.}, {0., 
               1.}}, {-0.1999726609984938, -0.0033067889532717256`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328415$329489}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0, 0}, {-1.019984507585403, -0.005621768917590399}],
                   Offset[{0., 
                   0.}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0., 
                   0.}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0., 
                   0.}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0, 0}, {-1.104726173175041, 0.0781908851793546}], 
                  Offset[{-5, 0}, {-1.104726173175041, 0.0781908851793546}], 
                  Offset[{-10, 0}, {-1.104726173175041, 0.0781908851793546}], 
                  Offset[{-10, 0}, {-1.104726173175041, 
                   0.0781908851793546}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0, 0}, {-1.019984507585403, -0.005621768917590399}],
                   Offset[{0., 
                   0.}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0., 
                   0.}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0., 
                   0.}, {-1.019984507585403, -0.005621768917590399}], 
                  Offset[{0, 0}, {-1.104726173175041, 0.0781908851793546}], 
                  Offset[{-5, 0}, {-1.104726173175041, 0.0781908851793546}], 
                  Offset[{-10, 0}, {-1.104726173175041, 0.0781908851793546}], 
                  Offset[{-10, 0}, {-1.104726173175041, 
                   0.0781908851793546}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 6.500000000000008}, {-1.104726173175041, 
                   0.0781908851793546}], 
                  Offset[{-10., -6.499999999999992}, {-1.104726173175041, 
                   0.0781908851793546}], 
                  Offset[{-79., -6.500000000000008}, {-1.104726173175041, 
                   0.0781908851793546}], 
                  Offset[{-79., 6.499999999999992}, {-1.104726173175041, 
                   0.0781908851793546}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Border checks\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-44.5, 0.}, {-1.104726173175041, 0.0781908851793546}],
                 ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$328419$329489, 
                 FEPrivate`Not[DynamicChart`click$328419$329489]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$328419$329489, {{{1., 0.}, {0., 
               1.}}, {-0.19999696227164768`, -0.0011023076309000781`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$328419$329489}]]}, {}}, {}},
        DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
      ContentSelectable->False,
      DisplayFunction->Identity,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 200},
      PlotLabel->FormBox["\"Social distancing\"", TraditionalForm],
      PlotRange->{{Full, Full}, {Full, Full}},
      PlotRangePadding->Scaled[0.05]], 
     GraphicsBox[{{}, {}, 
       DynamicModuleBox[{DynamicChart`click$329259$329497 = False, 
        DynamicChart`click$329263$329497 = False, 
        DynamicChart`click$329267$329497 = False}, {
         {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[
          0.5]}], {{{}, {
             {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.0471975511965979`, 
                    3.141592653589793}]},
                    
                    ImageSizeCache->{{104.26358314556063`, 
                    231.96701027030684`}, {-80.1642135623731, 
                    5.9142135623731065`}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$329259$329497, 
                    FEPrivate`Not[DynamicChart`click$329259$329497]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$329259$329497, {{{1., 0.}, {0., 
                   1.}}, {-0.10000000000000003`, 0.17320508075688773`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$329259$329497}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.784, 0.47519999999999996`, 0.2], EdgeForm[{GrayLevel[
              0], Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-1.0471975511965974`, 
                    1.0471975511965979`}]},
                    
                    ImageSizeCache->{{187.51358314556063`, 
                    273.5920102703068}, {-69.01082842742761, 
                    78.01082842742761}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$329263$329497, 
                    FEPrivate`Not[DynamicChart`click$329263$329497]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$329263$329497, {{{1., 0.}, {0., 1.}}, {
                   0.2, 4.4408920985006264`*^-17}}, {{1, 0}, {0, 1}}, {{1, 
                  0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$329263$329497}]],
               "DelayedClickEffect"]}, 
             {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
              Opacity[0.5]}], 
              TagBox[GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -1.0471975511965974`}]},
                    
                    ImageSizeCache->{{104.26358314556063`, 
                    231.96701027030684`}, {3.0857864376268935`, 
                    89.1642135623731}}],
                    "DelayedMouseEffectStyle"],
                    StatusArea[#, 1]& ,
                    TagBoxNote->"1"],
                   StyleBox["1", {}, StripOnInput -> False]],
                  Annotation[#, 
                   Style[1, {}], "Tooltip"]& ],
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$329267$329497, 
                    FEPrivate`Not[DynamicChart`click$329267$329497]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], Dynamic[
                FEPrivate`If[
                 DynamicChart`click$329267$329497, {{{1., 0.}, {0., 
                   1.}}, {-0.09999999999999996, -0.17320508075688779`}}, {{1, 
                  0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$329267$329497}]],
               "DelayedClickEffect"]}}}, {}}, {}}, {{{
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$329259$329497, 
                   FEPrivate`Not[DynamicChart`click$329259$329497]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$329259$329497, {{{1., 0.}, {0., 
                 1.}}, {-0.10000000000000003`, 0.17320508075688773`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$329259$329497}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$329263$329497, 
                   FEPrivate`Not[DynamicChart`click$329263$329497]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$329263$329497, {{{1., 0.}, {0., 1.}}, {0.2, 
                 4.4408920985006264`*^-17}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
                1}}], TrackedSymbols :> {DynamicChart`click$329263$329497}]],
             "DelayedClickEffect"], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[{{}, {}},
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$329267$329497, 
                   FEPrivate`Not[DynamicChart`click$329267$329497]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$329267$329497, {{{1., 0.}, {0., 
                 1.}}, {-0.09999999999999996, -0.17320508075688779`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$329267$329497}]],
             "DelayedClickEffect"]}, {}}, {}}, {{GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.5100000000000001, 0.8833459118601273}], 
                  Offset[{0, 0}, {-0.5100000000000001, 0.8833459118601273}], 
                  Offset[{0., 0.}, {-0.5100000000000001, 0.8833459118601273}],
                   Offset[{0., 0.}, {-0.5100000000000001, 
                   0.8833459118601273}], 
                  Offset[{0., 0.}, {-0.5100000000000001, 0.8833459118601273}],
                   Offset[{0, 0}, {-0.5516852457409458, 0.9555468890403296}], 
                  Offset[{-5, 0}, {-0.5516852457409458, 0.9555468890403296}], 
                  Offset[{-10, 0}, {-0.5516852457409458, 0.9555468890403296}],
                   Offset[{-10, 0}, {-0.5516852457409458, 
                   0.9555468890403296}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.5100000000000001, 0.8833459118601273}], 
                  Offset[{0, 0}, {-0.5100000000000001, 0.8833459118601273}], 
                  Offset[{0., 0.}, {-0.5100000000000001, 0.8833459118601273}],
                   Offset[{0., 0.}, {-0.5100000000000001, 
                   0.8833459118601273}], 
                  Offset[{0., 0.}, {-0.5100000000000001, 0.8833459118601273}],
                   Offset[{0, 0}, {-0.5516852457409458, 0.9555468890403296}], 
                  Offset[{-5, 0}, {-0.5516852457409458, 0.9555468890403296}], 
                  Offset[{-10, 0}, {-0.5516852457409458, 0.9555468890403296}],
                   Offset[{-10, 0}, {-0.5516852457409458, 
                   0.9555468890403296}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 7.500000000000015}, {-0.5516852457409458, 
                   0.9555468890403296}], 
                  Offset[{-10., -7.499999999999985}, {-0.5516852457409458, 
                   0.9555468890403296}], 
                  Offset[{-143., -7.500000000000015}, {-0.5516852457409458, 
                   0.9555468890403296}], 
                  Offset[{-143., 7.499999999999985}, {-0.5516852457409458, 
                   0.9555468890403296}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"State of emergency declared\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-76.5, 0.}, \
{-0.5516852457409458, 0.9555468890403296}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$329259$329497, 
                 FEPrivate`Not[DynamicChart`click$329259$329497]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$329259$329497, {{{1., 0.}, {0., 
               1.}}, {-0.10000000000000003`, 0.17320508075688773`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$329259$329497}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0, 0}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0., 0.}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0., 0.}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0., 0.}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{5, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{10, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{10, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0, 0}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0., 0.}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0., 0.}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0., 0.}, {1.02, 2.2648549702353194`*^-16}], 
                  Offset[{0, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{5, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{10, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{10, 0}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{86., 6.500000000000009}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{86., -6.499999999999991}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{10., -6.500000000000009}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}], 
                  Offset[{10., 6.499999999999991}, {1.1033705090202917`, 
                   2.4499746876134135`*^-16}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Schools closure\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{48., 0.}, \
{1.1033705090202917, 2.4499746876134135*^-16}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$329263$329497, 
                 FEPrivate`Not[DynamicChart`click$329263$329497]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$329263$329497, {{{1., 0.}, {0., 1.}}, {0.2, 
               4.4408920985006264`*^-17}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
              1}}], TrackedSymbols :> {DynamicChart`click$329263$329497}]], 
           GeometricTransformationBox[
            TagBox[GraphicsGroupBox[{
               {GrayLevel[1], AbsoluteThickness[4], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], 
                JoinForm["Round"], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0, 0}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0., 
                   0.}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0., 
                   0.}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0., 
                   0.}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0, 0}, {-0.5516852457409942, -0.9555468890403017}], 
                  Offset[{-5, 0}, {-0.5516852457409942, -0.9555468890403017}],
                   Offset[{-10, 
                   0}, {-0.5516852457409942, -0.9555468890403017}], 
                  Offset[{-10, 
                   0}, {-0.5516852457409942, -0.9555468890403017}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], 
                BSplineCurveBox[{
                 Offset[{0, 0}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0, 0}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0., 
                   0.}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0., 
                   0.}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0., 
                   0.}, {-0.5099999999999998, -0.8833459118601276}], 
                  Offset[{0, 0}, {-0.5516852457409942, -0.9555468890403017}], 
                  Offset[{-5, 0}, {-0.5516852457409942, -0.9555468890403017}],
                   Offset[{-10, 
                   0}, {-0.5516852457409942, -0.9555468890403017}], 
                  Offset[{-10, 
                   0}, {-0.5516852457409942, -0.9555468890403017}]}]}, 
               {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
                 NCache[
                  Rational[2, 3], 0.6666666666666666]]}], 
                PolygonBox[{
                 Offset[{-10., 
                   7.5000000000000115`}, {-0.5516852457409942, \
-0.9555468890403017}], 
                  Offset[{-10., -7.4999999999999885`}, {-0.5516852457409942, \
-0.9555468890403017}], 
                  Offset[{-115., -7.5000000000000115`}, {-0.5516852457409942, \
-0.9555468890403017}], 
                  Offset[{-115., 
                   7.4999999999999885`}, {-0.5516852457409942, \
-0.9555468890403017}]}]}, 
               {RGBColor[
                0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
                AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
                StyleBox[
                 RotationBox["\<\"Limit public gatherings\"\>",
                  BoxRotation->0.],
                 StripOnInput->False,
                 LineOpacity->1,
                 FrontFaceOpacity->1,
                 BackFaceOpacity->1,
                 Opacity->1,
                 FontOpacity->1], 
                Offset[{-62.5, 0.}, \
{-0.5516852457409942, -0.9555468890403017}], 
                ImageScaled[{Rational[1, 2], Rational[1, 2]}]]}],
             
             EventHandlerTag[{
              "MouseClicked" :> 
               FEPrivate`Set[DynamicChart`click$329267$329497, 
                 FEPrivate`Not[DynamicChart`click$329267$329497]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            If[DynamicChart`click$329267$329497, {{{1., 0.}, {0., 
               1.}}, {-0.09999999999999996, -0.17320508075688779`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$329267$329497}]]}, {}}, {}},
        DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
      ContentSelectable->False,
      DisplayFunction->Identity,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->{Automatic, 200},
      PlotLabel->FormBox[
        InterpretationBox[
         TooltipBox["\[LongDash]", "(not available)"], 
         Missing["NotAvailable"]], TraditionalForm],
      PlotRange->{{Full, Full}, {Full, Full}},
      PlotRangePadding->Scaled[0.05]]}
   },
   AutoDelete->False,
   FrameStyle->GrayLevel[0.85],
   GridBoxAlignment->{"Columns" -> {{Center}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.7987349306745453`*^9, 3.798735024994769*^9}, {
   3.798735065507903*^9, 3.798735188007298*^9}, {3.798735233226424*^9, 
   3.798735259939436*^9}, {3.7987352964701977`*^9, 3.798735442987215*^9}, {
   3.798735535866006*^9, 3.798735559078182*^9}, 3.798736272517362*^9, 
   3.798737126643813*^9, 3.798737332914806*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"dcdc7023-2414-4aec-a300-d4397d4ecaf9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"proportions", " ", "of", " ", "measures"}], " ", "-", " ", 
    RowBox[{
    "applied", " ", "as", " ", "graph", " ", "edge", " ", "thickness", " ", 
     "values", " ", "below"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"measuresEdgeSizes", " ", "=", " ", 
     RowBox[{
      RowBox[{"Table", "[", "\n", 
       RowBox[{
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"cat", " ", "=", " ", 
             RowBox[{"Take", "[", 
              RowBox[{"cmTallies", ",", " ", 
               RowBox[{"{", "i", "}"}]}], "]"}]}], ",", " ", "vals", ",", " ",
             "sum"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"vals", " ", "=", " ", 
            RowBox[{"First", "@", 
             RowBox[{"Values", "@", "cat"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"sum", " ", "=", " ", 
            RowBox[{"Total", "@", 
             RowBox[{"vals", "\[LeftDoubleBracket]", 
              RowBox[{";;", ",", " ", "2"}], "\[RightDoubleBracket]"}]}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"vals", "/.", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"meas_String", ",", " ", "no_Integer"}], "}"}], " ", 
             "\[RuleDelayed]", " ", 
             RowBox[{
              RowBox[{"Rule", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Keys", "[", "cat", "]"}], "\[LeftDoubleBracket]", 
                 "1", "\[RightDoubleBracket]"}], ",", " ", "meas"}], "]"}], 
              " ", "\[Rule]", " ", "no"}]}]}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", 
          RowBox[{"Range", "@", 
           RowBox[{"Length", "@", "cmTallies"}]}]}], "}"}]}], "]"}], " ", "//",
       " ", "Flatten"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"measuresEdgeSizes", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"measuresEdgeSizes", "\[LeftDoubleBracket]", 
        RowBox[{";;", ",", " ", "1"}], "\[RightDoubleBracket]"}], " ", 
       "\[Rule]", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Directive", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Thickness", "[", 
              RowBox[{"0.01", "*", "#"}], "]"}], ",", " ", 
             RowBox[{"Opacity", "@", "#"}]}], "}"}], "]"}], " ", "&"}], "/@", 
         " ", 
         RowBox[{"(", 
          RowBox[{".2", " ", "+", " ", 
           RowBox[{"Rescale", "@", 
            RowBox[{"measuresEdgeSizes", "\[LeftDoubleBracket]", 
             RowBox[{";;", ",", " ", "2"}], "\[RightDoubleBracket]"}]}]}], 
          ")"}]}], ")"}]}], "]"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{{3.798730839900874*^9, 3.798730849038258*^9}, {
   3.79873096814356*^9, 3.7987310815957737`*^9}, {3.7987311664722643`*^9, 
   3.798731304885497*^9}, {3.798731339252892*^9, 3.798731486812604*^9}, {
   3.7987315509520893`*^9, 3.798731573542274*^9}, {3.798731620773657*^9, 
   3.79873167120711*^9}, 3.7987317233539248`*^9, {3.798731948734754*^9, 
   3.798731968939063*^9}, {3.7987320106717863`*^9, 3.798732037879095*^9}, {
   3.798732137732999*^9, 3.798732246318542*^9}, {3.798732811840209*^9, 
   3.798733212272089*^9}, {3.7987334508484707`*^9, 3.798733493342926*^9}, {
   3.798733555931632*^9, 3.798733607890943*^9}, {3.7987336632055492`*^9, 
   3.798733729679591*^9}, {3.798733816549254*^9, 3.798733823112831*^9}, {
   3.798734317904594*^9, 3.7987343221778316`*^9}, {3.798734419273552*^9, 
   3.798734448588921*^9}, 3.7987344811158237`*^9, {3.7987345122397423`*^9, 
   3.798734565267872*^9}, {3.798734762476129*^9, 3.7987347951961813`*^9}, {
   3.798735656418638*^9, 3.798735676843042*^9}, {3.79873574810758*^9, 
   3.7987357995743856`*^9}, 3.7987358876581287`*^9, {3.798736013262198*^9, 
   3.7987360236505003`*^9}, {3.798736068239039*^9, 3.798736085413681*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"523b16d0-7042-4821-9396-829f8aa505eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"proportions", " ", "of", " ", "categories"}], " ", "-", " ", 
    RowBox[{
    "applied", " ", "as", " ", "vertex", " ", "size", " ", "values", " ", 
     "below"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"categoriesVertexSizes", " ", "=", " ", 
    RowBox[{"Join", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"N", "[", 
          RowBox[{"#", "/", "1000"}], "]"}], " ", "&"}], "/@", " ", 
        RowBox[{"Total", "/@", 
         RowBox[{"MapAt", "[", 
          RowBox[{"Last", ",", " ", "cmTallies", ",", " ", 
           RowBox[{"{", 
            RowBox[{";;", ",", " ", ";;"}], "}"}]}], "]"}]}]}], " ", "//", 
       " ", "Normal"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{"measuresEdgeSizes", "\[LeftDoubleBracket]", 
         RowBox[{";;", ",", " ", "1", ",", " ", "2"}], 
         "\[RightDoubleBracket]"}], " ", "\[Rule]", " ", "0.3"}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}]}]], "Code",
 CellChangeTimes->{{3.798732700341042*^9, 3.798732797772534*^9}, {
   3.798733221074285*^9, 3.798733221196862*^9}, 3.798733367637978*^9, {
   3.7987342080518837`*^9, 3.7987342174724913`*^9}, {3.7987343291487083`*^9, 
   3.798734329324483*^9}, {3.798734802642598*^9, 3.798734848292471*^9}, {
   3.798736163238534*^9, 3.798736167425384*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"d4687d34-ffa1-44b9-bd5d-c70cb78b5bbe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"graphical", " ", "form", " ", "of", " ", "breakdown"}], " ", 
   "*)"}], "\n", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"measuresEdgeSizes", "\[LeftDoubleBracket]", 
     RowBox[{";;", ",", " ", "1"}], "\[RightDoubleBracket]"}], ",", "\n", 
    RowBox[{"EdgeStyle", "\[Rule]", "measuresEdgeSizes"}], ",", " ", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", " ", 
    RowBox[{"DirectedEdges", "\[Rule]", "False"}], ",", " ", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<BalloonEmbedding\>\""}], ",", " ", 
    RowBox[{"VertexSize", "\[Rule]", "categoriesVertexSizes"}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.798731505608005*^9, 3.798731529542006*^9}, 
   3.7987315949521112`*^9, {3.798731731956855*^9, 3.798731733950817*^9}, {
   3.7987318000301523`*^9, 3.798731802739249*^9}, {3.7987319807085667`*^9, 
   3.7987320031394176`*^9}, {3.798732043926421*^9, 3.798732098618374*^9}, {
   3.798732258334016*^9, 3.798732262071827*^9}, {3.798732346759109*^9, 
   3.7987323505553303`*^9}, {3.798732786281178*^9, 3.798732790216106*^9}, {
   3.7987330591981993`*^9, 3.798733060779784*^9}, {3.798733312270039*^9, 
   3.798733349842697*^9}, {3.798733927073888*^9, 3.798733940690545*^9}, {
   3.798734062030197*^9, 3.7987340630896072`*^9}, {3.798734193695994*^9, 
   3.798734196331006*^9}, {3.7987343340510683`*^9, 3.798734412714818*^9}, {
   3.798734460189074*^9, 3.798734461227538*^9}, {3.798734862007163*^9, 
   3.7987348730904284`*^9}, {3.7987355760381413`*^9, 
   3.7987355840560493`*^9}, {3.7987361061709013`*^9, 3.79873611114812*^9}, 
   3.798736189202487*^9, 3.798736978436263*^9},
 CellLabel->"In[91]:=",ExpressionUUID->"9f036c28-6e40-4667-9217-9996e555de10"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Public health measures", 
       "Health screenings in airports and border crossings", 
       "Introduction of quarantine policies", "Awareness campaigns", 
       "Strengthening the public health system", "General recommendations", 
       "Testing policy", "Psychological assistance and medical social work", 
       "Mass population testing", 
       "Amendments to funeral and burial regulations", 
       "Obligatory medical tests not related to COVID-19", 
       "Social and economic measures", 
       "Emergency administrative structures activated or established", 
       "Limit product imports/exports", "Economic measures", 
       "Schools closure", "State of emergency declared", 
       "Military deployment", "Social distancing", "Limit public gatherings", 
       "Public services closure", "Changes in prison-related policies", 
       "Border checks", "Movement restrictions", "Border closure", 
       "International flights suspension", "Domestic travel restrictions", 
       "Checkpoints within the country", "Curfews", "Visa restrictions", 
       "Surveillance and monitoring", 
       "Additional health/documents requirements upon arrival", 
       "Lockdown of refugee/idp camps or other minorities", 
       "Complete border closure", "Lockdown", "Partial lockdown", 
       "Full lockdown", 
       Missing["NotAvailable"]}, {
      Null, {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, {
       1, 10}, {1, 11}, {12, 13}, {12, 14}, {12, 15}, {12, 16}, {12, 17}, {12,
        18}, {19, 20}, {19, 16}, {19, 21}, {19, 22}, {19, 3}, {19, 23}, {24, 
       25}, {24, 23}, {24, 26}, {24, 27}, {24, 28}, {24, 29}, {24, 30}, {24, 
       31}, {24, 32}, {24, 33}, {24, 34}, {35, 36}, {35, 37}, {38, 17}, {38, 
       16}, {38, 20}}}, {
      EdgeStyle -> {
        UndirectedEdge["Movement restrictions", "Border closure"] -> 
         Directive[{
            Thickness[0.008013745704467355], 
            Opacity[0.8013745704467354]}], 
         UndirectedEdge[
          "Movement restrictions", "International flights suspension"] -> 
         Directive[{
            Thickness[0.008460481099656358], 
            Opacity[0.8460481099656358]}], 
         UndirectedEdge[
          "Public health measures", 
           "Psychological assistance and medical social work"] -> Directive[{
            Thickness[0.0021718213058419247`], 
            Opacity[0.21718213058419245`]}], 
         UndirectedEdge[
          "Public health measures", "Introduction of quarantine policies"] -> 
         Directive[{
            Thickness[0.012], 
            Opacity[1.2]}], 
         UndirectedEdge[
          "Social distancing", "Introduction of quarantine policies"] -> 
         Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], 
         UndirectedEdge[
          "Social and economic measures", "Military deployment"] -> Directive[{
            Thickness[0.002515463917525773], 
            Opacity[0.2515463917525773]}], 
         UndirectedEdge["Movement restrictions", "Border checks"] -> 
         Directive[{
            Thickness[0.002790378006872852], 
            Opacity[0.27903780068728523`]}], 
         UndirectedEdge[
          "Movement restrictions", 
           "Additional health/documents requirements upon arrival"] -> 
         Directive[{
            Thickness[0.0033402061855670106`], 
            Opacity[0.33402061855670107`]}], 
         UndirectedEdge["Social and economic measures", "Economic measures"] -> 
         Directive[{
            Thickness[0.007085910652920961], 
            Opacity[0.7085910652920961]}], 
         UndirectedEdge[
          "Movement restrictions", "Surveillance and monitoring"] -> 
         Directive[{
            Thickness[0.002927835051546392], 
            Opacity[0.2927835051546392]}], 
         UndirectedEdge[
          "Social distancing", "Changes in prison-related policies"] -> 
         Directive[{
            Thickness[0.0024467353951890037`], 
            Opacity[0.24467353951890036`]}], 
         UndirectedEdge["Social distancing", "Public services closure"] -> 
         Directive[{
            Thickness[0.006089347079037802], 
            Opacity[0.6089347079037801]}], 
         UndirectedEdge["Public health measures", "General recommendations"] -> 
         Directive[{
            Thickness[0.00629553264604811], 
            Opacity[0.629553264604811]}], 
         UndirectedEdge["Movement restrictions", "Curfews"] -> Directive[{
            Thickness[0.0035120274914089344`], 
            Opacity[0.35120274914089344`]}], 
         UndirectedEdge["Public health measures", "Mass population testing"] -> 
         Directive[{
            Thickness[0.00206872852233677], 
            Opacity[0.206872852233677]}], 
         UndirectedEdge["Social distancing", "Limit public gatherings"] -> 
         Directive[{
            Thickness[0.011759450171821307`], 
            Opacity[1.1759450171821306`]}], 
         UndirectedEdge[
          "Movement restrictions", "Checkpoints within the country"] -> 
         Directive[{
            Thickness[0.0022061855670103096`], 
            Opacity[0.22061855670103095`]}], 
         UndirectedEdge[
          "Public health measures", "Strengthening the public health system"] -> 
         Directive[{
            Thickness[0.006948453608247422], 
            Opacity[0.6948453608247422]}], 
         UndirectedEdge["Movement restrictions", "Visa restrictions"] -> 
         Directive[{
            Thickness[0.008460481099656358], 
            Opacity[0.8460481099656358]}], 
         UndirectedEdge[
          "Social and economic measures", 
           "Emergency administrative structures activated or established"] -> 
         Directive[{
            Thickness[0.004405498281786942], 
            Opacity[0.44054982817869415`]}], 
         UndirectedEdge[
          "Social and economic measures", "State of emergency declared"] -> 
         Directive[{
            Thickness[0.004096219931271477], 
            Opacity[0.40962199312714775`]}], UndirectedEdge[
           Missing["NotAvailable"], "State of emergency declared"] -> 
         Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], 
         UndirectedEdge["Social and economic measures", "Schools closure"] -> 
         Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], 
         UndirectedEdge[
          "Public health measures", 
           "Amendments to funeral and burial regulations"] -> Directive[{
            Thickness[0.00206872852233677], 
            Opacity[0.206872852233677]}], 
         UndirectedEdge["Movement restrictions", "Complete border closure"] -> 
         Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], 
         UndirectedEdge[
          "Movement restrictions", "Domestic travel restrictions"] -> 
         Directive[{
            Thickness[0.003718213058419244], 
            Opacity[0.3718213058419244]}], 
         UndirectedEdge[
          "Movement restrictions", 
           "Lockdown of refugee/idp camps or other minorities"] -> Directive[{
            Thickness[0.00206872852233677], 
            Opacity[0.206872852233677]}], 
         UndirectedEdge["Public health measures", "Testing policy"] -> 
         Directive[{
            Thickness[0.002343642611683849], 
            Opacity[0.23436426116838488`]}], 
         UndirectedEdge["Social distancing", "Schools closure"] -> Directive[{
            Thickness[0.007085910652920961], 
            Opacity[0.7085910652920961]}], 
         UndirectedEdge["Lockdown", "Full lockdown"] -> Directive[{
            Thickness[0.0021718213058419247`], 
            Opacity[0.21718213058419245`]}], UndirectedEdge[
           Missing["NotAvailable"], "Schools closure"] -> Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], 
         UndirectedEdge[
          "Social and economic measures", "Limit product imports/exports"] -> 
         Directive[{
            Thickness[0.0022061855670103096`], 
            Opacity[0.22061855670103095`]}], UndirectedEdge[
           Missing["NotAvailable"], "Limit public gatherings"] -> Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], 
         UndirectedEdge["Social distancing", "Border checks"] -> Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], UndirectedEdge["Lockdown", "Partial lockdown"] -> 
         Directive[{
            Thickness[0.003924398625429554], 
            Opacity[0.3924398625429554]}], 
         UndirectedEdge["Public health measures", "Awareness campaigns"] -> 
         Directive[{
            Thickness[0.005470790378006874], 
            Opacity[0.5470790378006873]}], 
         UndirectedEdge[
          "Public health measures", 
           "Obligatory medical tests not related to COVID-19"] -> Directive[{
            Thickness[0.002], 
            Opacity[0.2]}], 
         UndirectedEdge[
          "Public health measures", 
           "Health screenings in airports and border crossings"] -> Directive[{
            Thickness[0.007051546391752577], 
            Opacity[0.7051546391752577]}]}, GraphLayout -> "BalloonEmbedding",
        VertexLabels -> {"Name"}, 
       VertexSize -> {
        "Public services closure" -> 0.3, "Awareness campaigns" -> 0.3, 
         "Psychological assistance and medical social work" -> 0.3, 
         "International flights suspension" -> 0.3, "Movement restrictions" -> 
         0.753, "Partial lockdown" -> 0.3, 
         "Strengthening the public health system" -> 0.3, "Full lockdown" -> 
         0.3, "Checkpoints within the country" -> 0.3, 
         "Lockdown of refugee/idp camps or other minorities" -> 0.3, 
         "Introduction of quarantine policies" -> 0.3, "Visa restrictions" -> 
         0.3, "Surveillance and monitoring" -> 0.3, 
         "Emergency administrative structures activated or established" -> 
         0.3, "General recommendations" -> 0.3, "Complete border closure" -> 
         0.3, "Mass population testing" -> 0.3, "Economic measures" -> 0.3, 
         "Curfews" -> 0.3, "Social and economic measures" -> 0.306, 
         "Amendments to funeral and burial regulations" -> 0.3, 
         "Health screenings in airports and border crossings" -> 0.3, 
         "State of emergency declared" -> 0.3, "Social distancing" -> 0.57, 
         "Domestic travel restrictions" -> 0.3, 
         "Limit product imports/exports" -> 0.3, "Public health measures" -> 
         0.837, "Obligatory medical tests not related to COVID-19" -> 0.3, 
         "Military deployment" -> 0.3, "Testing policy" -> 0.3, 
         "Border checks" -> 0.3, Missing["NotAvailable"] -> 0.003, "Lockdown" -> 
         0.063, "Limit public gatherings" -> 0.3, "Schools closure" -> 0.3, 
         "Changes in prison-related policies" -> 0.3, 
         "Additional health/documents requirements upon arrival" -> 0.3, 
         "Border closure" -> 0.3}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], 
        {Thickness[0.007051546391752577], Opacity[0.7051546391752577], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          2.0888148201080483`, -1.8424721470287722`}}]}, 
        {Thickness[0.012], Opacity[1.2], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          2.3826492675928628`, -2.1733152367288455`}}]}, 
        {Thickness[0.005470790378006874], Opacity[0.5470790378006873], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          2.6439118225575275`, -1.4252204796211778`}}]}, 
        {Thickness[0.006948453608247422], Opacity[0.6948453608247422], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          1.5815105601840502`, -1.3682633070165053`}}]}, 
        {Thickness[0.00629553264604811], Opacity[0.629553264604811], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          2.3293907284409845`, -0.8061016562612764}}]}, 
        {Thickness[0.002343642611683849], Opacity[0.23436426116838488`], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          1.960422642116583, -0.7863206378055523}}]}, 
        {Thickness[0.0021718213058419247`], Opacity[0.21718213058419245`], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          2.442296914899941, -1.7348657063359765`}}]}, 
        {Thickness[0.00206872852233677], Opacity[0.206872852233677], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          1.7488637388508652`, -1.697689552187029}}]}, 
        {Thickness[0.00206872852233677], Opacity[0.206872852233677], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          2.5993216870877154`, -1.0584229097875966`}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{2.1177327345083254`, -1.303076889871253}, {
          1.6650616963292117`, -1.0083356127973904`}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{2.3826492675928628`, -2.1733152367288455`}, {
          2.9506186239016348`, -4.039067849240164}}]}, 
        {Thickness[0.004405498281786942], Opacity[0.44054982817869415`], 
         LineBox[{{1.0845799679410602`, -4.794438832892564}, {
          1.086728108608411, -5.108745224769762}}]}, 
        {Thickness[0.0022061855670103096`], Opacity[0.22061855670103095`], 
         LineBox[{{1.0845799679410602`, -4.794438832892564}, {
          1.2675867474815412`, -4.538896975019121}}]}, 
        {Thickness[0.007085910652920961], Opacity[0.7085910652920961], 
         LineBox[{{1.0845799679410602`, -4.794438832892564}, {
          0.8980974237881898, -4.541422265827357}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{1.0845799679410602`, -4.794438832892564}, {
          1.3806742013569684`, -5.196174806664368}}]}, 
        {Thickness[0.004096219931271477], Opacity[0.40962199312714775`], 
         LineBox[{{1.0845799679410602`, -4.794438832892564}, {
          1.384166922021607, -4.889521846243687}}]}, 
        {Thickness[0.002515463917525773], Opacity[0.2515463917525773], 
         LineBox[{{1.0845799679410602`, -4.794438832892564}, {
          0.7863206378055523, -4.8936078526028925`}}]}, 
        {Thickness[0.007085910652920961], Opacity[0.7085910652920961], 
         LineBox[{{1.3806742013569684`, -5.196174806664368}, {
          2.9506186239016348`, -4.039067849240164}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{1.3806742013569684`, -5.196174806664368}, {
          1.6767684347728762`, -5.597910780436173}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{1.384166922021607, -4.889521846243687}, {
          1.6767684347728762`, -5.597910780436173}}]}, 
        {Thickness[0.011759450171821307`], Opacity[1.1759450171821306`], 
         LineBox[{{2.9506186239016348`, -4.039067849240164}, {
          1.013793242107786, -3.810311557003818}}]}, 
        {Thickness[0.006089347079037802], Opacity[0.6089347079037801], 
         LineBox[{{2.9506186239016348`, -4.039067849240164}, {
          2.595846329913652, -5.956816169593257}}]}, 
        {Thickness[0.0024467353951890037`], Opacity[0.24467353951890036`], 
         LineBox[{{2.9506186239016348`, -4.039067849240164}, {
          4.431452449936768, -2.7699133352156657`}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{2.9506186239016348`, -4.039067849240164}, {
          4.640615979648109, -5.012479857779473}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{1.013793242107786, -3.810311557003818}, {
          1.6767684347728762`, -5.597910780436173}}]}, 
        {Thickness[0.002790378006872852], Opacity[0.27903780068728523`], 
         LineBox[{{4.640615979648109, -5.012479857779473}, {
          5.478868112672291, -5.495299957878989}}]}, 
        {Thickness[0.008013745704467355], Opacity[0.8013745704467354], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          5.078366305071163, -5.051413511693548}}]}, 
        {Thickness[0.008460481099656358], Opacity[0.8460481099656358], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          4.932945150705896, -5.739031356342028}}]}, 
        {Thickness[0.003718213058419244], Opacity[0.3718213058419244], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          5.777267344985418, -4.977231648527946}}]}, 
        {Thickness[0.0022061855670103096`], Opacity[0.22061855670103095`], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          5.54197097453917, -6.0898206924401315`}}]}, 
        {Thickness[0.0035120274914089344`], Opacity[0.35120274914089344`], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          6.063790788059808, -5.61900258039129}}]}, 
        {Thickness[0.008460481099656358], Opacity[0.8460481099656358], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          4.893945437284774, -5.371597335366688}}]}, 
        {Thickness[0.002927835051546392], Opacity[0.2927835051546392], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          5.4157652508054115`, -4.900779223317846}}]}, 
        {Thickness[0.0033402061855670106`], Opacity[0.33402061855670107`], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          5.180468880359164, -6.013368267230032}}]}, 
        {Thickness[0.00206872852233677], Opacity[0.206872852233677], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          6.024791074638687, -5.25156855941595}}]}, 
        {Thickness[0.002], Opacity[0.2], 
         LineBox[{{5.478868112672291, -5.495299957878989}, {
          5.879369920273419, -5.939186404064429}}]}, 
        {Thickness[0.003924398625429554], Opacity[0.3924398625429554], 
         LineBox[{{7.636432063670912, -1.7863206378055523`}, {
          7.636432063670912, -2.7863206378055523`}}]}, 
        {Thickness[0.0021718213058419247`], Opacity[0.21718213058419245`], 
         LineBox[{{7.636432063670912, -1.7863206378055523`}, {
          7.636432063670912, -0.7863206378055523}}]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {
         DiskBox[{2.1177327345083254, -1.303076889871253}, 
          0.12834258793330416], 
         InsetBox["\<\"Public health measures\"\>", {2.2960992140349985, -1.2813935796765417},
           ImageScaled[{-0.2445188126069241, 0.40949178117775303}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.0888148201080483, -1.8424721470287722}, 
          0.04600092757466099], 
         InsetBox["\<\"Health screenings in airports and border \
crossings\"\>", {2.085367106080825, -1.9067810929844922}, ImageScaled[{0.5401511394404647, 1.2489244861811053}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3826492675928628, -2.1733152367288455}, 
          0.04600092757466099], 
         InsetBox["\<\"Introduction of quarantine policies\"\>", {2.3210394379820163, -2.192070400211782},
           ImageScaled[{1.217491311656379, 0.718417530655414}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.6439118225575275, -1.4252204796211778}, 
          0.04600092757466099], 
         InsetBox["\<\"Awareness campaigns\"\>", {2.70664508186482, -1.4397829463982479},
           ImageScaled[{-0.2305744682167491, 0.6695905256487349}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5815105601840502, -1.3682633070165053}, 
          0.04600092757466099], 
         InsetBox["\<\"Strengthening the public health system\"\>", {1.5175799223608701, -1.3760351027852191},
           ImageScaled[{1.2445188126069242, 0.590508218822247}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.3293907284409845, -0.8061016562612764}, 
          0.04600092757466099], 
         InsetBox["\<\"General recommendations\"\>", {2.354625474783844, -0.7468502019419031},
           ImageScaled[{0.20612301044788583, -0.19002631472414633}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.960422642116583, -0.7863206378055523}, 
          0.04600092757466099], 
         InsetBox["\<\"Testing policy\"\>", {1.9416674786336463, -0.7247108081947056},
           ImageScaled[{0.7184175306554148, -0.2174913116563788}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.442296914899941, -1.7348657063359765}, 
          0.04600092757466099], 
         InsetBox["\<\"Psychological assistance and medical social work\"\>", \
{2.4809928063802613, -1.7863453648866359}, ImageScaled[{0.04935817694519046, 1.0995180959018982}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.7488637388508652, -1.697689552187029}, 
          0.04600092757466099], 
         InsetBox["\<\"Mass population testing\"\>", {1.7048856430265096, -1.7447369150208056},
           ImageScaled[{1.012156937561335, 1.0479007860076446}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.5993216870877154, -1.0584229097875966}, 
          0.04600092757466099], 
         InsetBox["\<\"Amendments to funeral and burial regulations\"\>", {2.656738724989581, -1.0292542447422957},
           ImageScaled[{-0.16866320026927673, 0.16030966365578025}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6650616963292117, -1.0083356127973904}, 
          0.04600092757466099], 
         InsetBox["\<\"Obligatory medical tests not related to COVID-19\"\>", \
{1.6110923724545692, -0.9731953318869713}, ImageScaled[{1.1285120608288135, 0.09076585016311522}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.0845799679410602, -4.794438832892564}, 
          0.04692094612615421], 
         InsetBox["\<\"Social and economic measures\"\>", {1.0463328584603715, -4.847845255537264},
           ImageScaled[{0.9366817941180039, 1.109761437519528}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.086728108608411, -5.108745224769762}, 
          0.04600092757466099], 
         InsetBox["\<\"Emergency administrative structures activated or \
established\"\>", {1.08716825179729, -5.173145019302994}, ImageScaled[{0.4948742121849695, 1.2499824839949767}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.2675867474815412, -4.538896975019121}, 
          0.04600092757466099], 
         InsetBox["\<\"Limit product imports/exports\"\>", {1.305083913639079, -4.486537737132161},
           ImageScaled[{0.06331820588199621, -0.10976143751952816}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.8980974237881898, -4.541422265827357}, 
          0.04600092757466099], 
         InsetBox["\<\"Economic measures\"\>", {0.8598880909911291, -4.489580447291038},
           ImageScaled[{0.9449754930218421, -0.103735712551418}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.3806742013569684, -5.196174806664368}, 
          0.04600092757466099], 
         InsetBox["\<\"Schools closure\"\>", {1.3288323828206487, -5.2343841394614286},
           ImageScaled[{1.1037357125514178, 0.9449754930218427}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.384166922021607, -4.889521846243687}, 
          0.04600092757466099], 
         InsetBox["\<\"State of emergency declared\"\>", {1.4277442323176877, -4.84210301781754},
           ImageScaled[{-0.00748949835250623, -0.05222677322085856}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7863206378055523, -4.8936078526028925}, 
          0.04600092757466099], 
         InsetBox["\<\"Military deployment\"\>", {0.7252088052919747, -4.9139270845958025},
           ImageScaled[{1.2116917729662442, 0.7366322469406146}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.9506186239016348, -4.039067849240164}, 
          0.08740176239185588], 
         InsetBox["\<\"Social distancing\"\>", {3.0019223294129334, -4.150155666828082},
           ImageScaled[{0.18554263437779056, 1.1808939456376009}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.013793242107786, -3.810311557003818}, 
          0.04600092757466099], 
         InsetBox["\<\"Limit public gatherings\"\>", {0.9631786573886448, -3.7704908202494822},
           ImageScaled[{1.0894436814460196, 0.03625853495361947}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.595846329913652, -5.956816169593257}, 
          0.04600092757466099], 
         InsetBox["\<\"Public services closure\"\>", {2.584131239479541, -6.02014297211849},
           ImageScaled[{0.6364307555277438, 1.2374867110301913}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.431452449936768, -2.7699133352156657}, 
          0.04600092757466099], 
         InsetBox["\<\"Changes in prison-related policies\"\>", {4.480351708655318, -2.728004031251922},
           ImageScaled[{-0.06946746158214834, 0.011935649530531223}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.640615979648109, -5.012479857779473}, 
          0.04600092757466099], 
         InsetBox["\<\"Border checks\"\>", {4.608472517763022, -5.068285996509824},
           ImageScaled[{0.8743340109002276, 1.1499031068423573}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.478868112672291, -5.495299957878989}, 
          0.11546232821239909], 
         InsetBox["\<\"Movement restrictions\"\>", {5.598884500964247, -5.387013748949315},
           ImageScaled[{-0.056843905048928, -0.0024190137821822333}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.078366305071163, -5.051413511693548}, 
          0.04600092757466099], 
         InsetBox["\<\"Border closure\"\>", {5.035224389162926, -5.003598217553327},
           ImageScaled[{1.0024190137821822, -0.056843905048928}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.932945150705896, -5.739031356342028}, 
          0.04600092757466099], 
         InsetBox["\<\"International flights suspension\"\>", {4.874138518449729, -5.765286018111649},
           ImageScaled[{1.1848460380118182, 0.8057546470938999}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.777267344985418, -4.977231648527946}, 
          0.04600092757466099], 
         InsetBox["\<\"Domestic travel restrictions\"\>", {5.809410806870505, -4.9214255097975945},
           ImageScaled[{0.1256659890997731, -0.14990310684235753}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.54197097453917, -6.0898206924401315}, 
          0.04600092757466099], 
         InsetBox["\<\"Checkpoints within the country\"\>", {5.54876839294918, -6.153862259917111},
           ImageScaled[{0.42083911476982516, 1.2458106691711879}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{6.063790788059808, -5.61900258039129}, 0.04600092757466099],
          InsetBox["\<\"Curfews\"\>", {6.126798455929115, -5.632327784015262},
           ImageScaled[{-0.23377015566359616, 0.6551816956261975}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.893945437284774, -5.371597335366688}, 
          0.04600092757466099], 
         InsetBox["\<\"Visa restrictions\"\>", {4.830937769415467, -5.358272131742716},
           ImageScaled[{1.2337701556635965, 0.3448183043738038}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.4157652508054115, -4.900779223317846}, 
          0.04600092757466099], 
         InsetBox["\<\"Surveillance and monitoring\"\>", {5.408967832395402, -4.836737655840866},
           ImageScaled[{0.5791608852301762, -0.24581066917118777}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.180468880359164, -6.013368267230032}, 
          0.04600092757466099], 
         InsetBox["\<\"Additional health/documents requirements upon \
arrival\"\>", {5.1483254184740765, -6.069174405960383}, ImageScaled[{0.8743340109002281, 1.1499031068423569}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{6.024791074638687, -5.25156855941595}, 0.04600092757466099],
          
         InsetBox["\<\"Lockdown of refugee/idp camps or other \
minorities\"\>", {6.083597706894854, -5.225313897646329}, ImageScaled[{-0.1848460380118182, 0.1942453529061}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.879369920273419, -5.939186404064429}, 
          0.04600092757466099], 
         InsetBox["\<\"Complete border closure\"\>", {5.9225118361816556, -5.987001698204651},
           ImageScaled[{-0.002419013782181567, 1.0568439050489284}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{7.636432063670912, -1.7863206378055523}, 
          0.00966019479067881], 
         InsetBox["\<\"Lockdown\"\>", {7.6229077909639615, -1.7863206378055523},
           ImageScaled[{1.25, 0.49999999999999983}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{7.636432063670912, -2.7863206378055523}, 
          0.04600092757466099], 
         InsetBox["\<\"Partial lockdown\"\>", {7.636432063670912, -2.8507219364100775},
           ImageScaled[{0.5000000000000002, 1.25}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{7.636432063670912, -0.7863206378055523}, 
          0.04600092757466099], 
         InsetBox["\<\"Full lockdown\"\>", {7.636432063670912, -0.7219193392010269},
           ImageScaled[{0.4999999999999999, -0.25}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.6767684347728762, -5.597910780436173}, 
          0.00046000927574660995], InsetBox[
          InterpretationBox[
           TooltipBox["\[LongDash]",
            "(not available)"],
           Missing["NotAvailable"]], {1.6770744468879435, -5.598477445515058},
           ImageScaled[{0.14362661736075577, 1.1599227319514482}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->{828.78125, Automatic}]], "Output",
 CellChangeTimes->{
  3.798731525046208*^9, 3.798731595277732*^9, {3.79873165992761*^9, 
   3.7987316788175*^9}, 3.798731734231024*^9, 3.798731803021161*^9, {
   3.7987319563967943`*^9, 3.798732098883482*^9}, {3.798732144774761*^9, 
   3.798732263066145*^9}, 3.79873235080234*^9, {3.798732393942268*^9, 
   3.79873239815615*^9}, 3.798732532544581*^9, {3.7987326133763037`*^9, 
   3.798732623490944*^9}, 3.798732666222273*^9, {3.7987327528780537`*^9, 
   3.798732975965659*^9}, {3.798733008670464*^9, 3.798733067447297*^9}, 
   3.798733115610119*^9, {3.798733165527873*^9, 3.798733213810849*^9}, 
   3.7987333692422113`*^9, {3.798733452761837*^9, 3.7987334767421827`*^9}, 
   3.798733559186771*^9, {3.798733589785985*^9, 3.798733609393939*^9}, {
   3.798733665116807*^9, 3.798733721055299*^9}, {3.7987339355817003`*^9, 
   3.798733941373991*^9}, {3.798734034262246*^9, 3.798734063340187*^9}, 
   3.798734134718717*^9, {3.79873417283222*^9, 3.798734290353797*^9}, {
   3.7987343303307133`*^9, 3.798734381469277*^9}, {3.7987344293271627`*^9, 
   3.7987344615360622`*^9}, 3.798734614955675*^9, 3.798734857474247*^9, 
   3.7987355848442*^9, {3.79873608712269*^9, 3.798736113092012*^9}, 
   3.79873698017776*^9, 3.798737126889288*^9, 3.798737333105824*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"07dc1681-0184-41d5-9d51-dad01a84a901"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wolfram Data Framework / Entities", "Section",
 CellChangeTimes->{{3.793105989651456*^9, 3.7931060209190106`*^9}, {
   3.793109627904931*^9, 3.793109628263386*^9}, {3.7931132125852256`*^9, 
   3.7931132141230664`*^9}, {3.798390707945075*^9, 3.798390726688531*^9}, {
   3.7983920389290953`*^9, 3.798392064478063*^9}, {3.798399261520561*^9, 
   3.7983992647485857`*^9}, {3.798559712336108*^9, 3.798559733423954*^9}, {
   3.798559768643023*^9, 3.798559791317137*^9}, 3.79855989678503*^9, {
   3.798727595695175*^9, 
   3.798727595788925*^9}},ExpressionUUID->"2c6db4e6-6699-4015-b87c-\
9e964cfb7ffa"],

Cell["\<\
Natural language input \
\[OpenCurlyDoubleQuote]Covid-19\[CloseCurlyDoubleQuote] is automatically \
interpreted as a disease and converted to an explorable real-world entity. \
\>", "Text",
 CellChangeTimes->{{3.79855979987608*^9, 
  3.798559862210081*^9}},ExpressionUUID->"ba0c7ef3-ec27-4f12-81a1-\
03510e8a3179"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Covid-19", Typeset`newq$$ = "Covid-19", 
   Typeset`chosen$$ = "Entity[\"Disease\", \"NovelCoronavirusDisease\"]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["Covid-19", 
                  Defer[
                   Entity["Disease", "NovelCoronavirusDisease"]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 TemplateBox[{"\"COVID-19\"", 
                   RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], 
                    "]"}], "\"Entity[\\\"Disease\\\", \
\\\"NovelCoronavirusDisease\\\"]\"", "\"disease\""},
                  "Entity"],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 TemplateBox[{"\"COVID-19\"", 
                   RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], 
                    "]"}], "\"Entity[\\\"Disease\\\", \
\\\"NovelCoronavirusDisease\\\"]\"", "\"disease\""},
                  "Entity"],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    TemplateBox[{"\"COVID-19\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], 
                    "]"}], "\"Entity[\\\"Disease\\\", \
\\\"NovelCoronavirusDisease\\\"]\"", "\"disease\""}, "Entity"]], "Input"], 
                  All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Covid-19", 
                    Defer[
                    Entity["Disease", "NovelCoronavirusDisease"]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    TemplateBox[{"\"COVID-19\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], 
                    "]"}], "\"Entity[\\\"Disease\\\", \
\\\"NovelCoronavirusDisease\\\"]\"", "\"disease\""},
                    "Entity"],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    TemplateBox[{"\"COVID-19\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], 
                    "]"}], "\"Entity[\\\"Disease\\\", \
\\\"NovelCoronavirusDisease\\\"]\"", "\"disease\""},
                    "Entity"],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    TemplateBox[{"\"COVID-19\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{"\"Disease\"", ",", 
                    "\"NovelCoronavirusDisease\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \
\\\"NovelCoronavirusDisease\\\"]\"", "\"disease\""}, "Entity"]], "Input"], 
                    All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[92]:=",ExpressionUUID->"966944e4-3e43-410a-870a-7983e7d14330"],

Cell[BoxData[
 TemplateBox[{"\"COVID-19\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], "]"}], 
   "\"Entity[\\\"Disease\\\", \\\"NovelCoronavirusDisease\\\"]\"", 
   "\"disease\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.798561691704556*^9, 3.798737333169632*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"c7a1f518-5ea2-41ee-b6b5-7e94fa9f88cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Covid", "-", 
    RowBox[{"19", " ", "as", " ", "a", " ", "disease", " ", "entity"}]}], " ",
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"covid19", " ", "=", " ", 
    TemplateBox[{"\"COVID-19\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"NovelCoronavirusDisease\\\"]\"", 
      "\"disease\""},
     "Entity"]}], ";", " ", 
   RowBox[{"covid19", "[", "\"\<Properties\>\"", "]"}]}]}]], "Code", "Input",
 CellChangeTimes->{{3.7983907412462187`*^9, 3.798390761548345*^9}, 
   3.798391932669519*^9, {3.798391964986648*^9, 3.798391965218649*^9}, 
   3.7983923296042547`*^9, 3.7985000903187523`*^9, {3.798543776859013*^9, 
   3.798543777128162*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"98c38f7a-6fd5-4aed-9815-08c826e491ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"average patient age\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"AgeMean\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"AgeMean\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"age of onset\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"AgeOfOnset\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"AgeOfOnset\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"associated genes\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"AssociatedGenes\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"AssociatedGenes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"basic reproduction number\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"BasicReproductionNumber\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"BasicReproductionNumber\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average patient BMI\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"BodyMassIndexMean\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"BodyMassIndexMean\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average temperature\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"BodyTemperatureMean\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"BodyTemperatureMean\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"causes\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Causes\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Causes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"common symptoms\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"CommonSymptoms\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"CommonSymptoms\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"definition\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Definition\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Definition\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average diastolic blood pressure\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"DiastolicMean\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"DiastolicMean\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"duration\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Duration\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Duration\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"entity classes\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"EntityClasses\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"EntityClasses\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"exposure to disease onset\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"ExposureToDiseaseOnset\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"ExposureToDiseaseOnset\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average patient height\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"HeightMean\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"HeightMean\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"ICD\[Hyphen]9 code\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNineCode\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"ICDNineCode\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"ICD\[Hyphen]10 code\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDTenCode\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"ICDTenCode\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"image\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Image\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Image\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"name\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Name\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Name\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"prevalence\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Prevalence\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Prevalence\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"prevalence rate\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"PrevalenceRate\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"PrevalenceRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"prevention\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Prevention\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Prevention\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"risks\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Risks\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Risks\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"medical specialty\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Specialty\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Specialty\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average systolic blood pressure\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"SystolicMean\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"SystolicMean\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"transmission\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Transmission\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Transmission\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"treatment\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"Treatment\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"Treatment\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average patient weight\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Disease\"", ",", "\"WeightMean\""}], "]"}], 
     "\"EntityProperty[\\\"Disease\\\", \\\"WeightMean\\\"]\""},
    "EntityProperty"]}], "}"}]], "Output",
 CellChangeTimes->{3.798391965422412*^9, 3.7983923300369873`*^9, 
  3.798559867322969*^9, 3.798561535151395*^9, 3.798561691823285*^9, 
  3.7987371275844297`*^9, 3.7987373333167677`*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"28517850-dadd-4f47-9374-19678ccf914f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"properties", " ", "of", " ", "Covid"}], "-", "19"}], " ", "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{"covid19", "[", "\"\<Dataset\>\"", "]"}]}]], "Code",
 CellChangeTimes->{{3.798391934939458*^9, 3.7983920153830976`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"5a544558-2d60-4cb4-9101-197ac662ce88"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      EntityProperty["Disease", "AgeMean"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "AgeOfOnset"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "AssociatedGenes"] -> 
       Missing["NotAvailable"], 
       EntityProperty["Disease", "BasicReproductionNumber"] -> 
       Interval[{1.3999999999999992`, 2.5000000000000013`}], 
       EntityProperty["Disease", "BodyMassIndexMean"] -> 
       Missing["NotAvailable"], 
       EntityProperty["Disease", "BodyTemperatureMean"] -> 
       Missing["NotAvailable"], 
       EntityProperty["Disease", "Causes"] -> {"SARS-CoV-2 virus"}, 
       EntityProperty["Disease", "CommonSymptoms"] -> {
        "fever", "cough", "shortness of breath"}, 
       EntityProperty["Disease", "Definition"] -> 
       TextCell[
        "a viral respiratory disease caused by a novel coronavirus \
(SARS-CoV-2) first identified in Wuhan, Hubei Province, China"], 
       EntityProperty["Disease", "DiastolicMean"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "Duration"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "EntityClasses"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "ExposureToDiseaseOnset"] -> Quantity[
         Interval[{2, 14}], "Days"], EntityProperty["Disease", "HeightMean"] -> 
       Missing["NotAvailable"], EntityProperty["Disease", "ICDNineCode"] -> 
       Missing["NotAvailable"], EntityProperty["Disease", "ICDTenCode"] -> 
       Missing["NotAvailable"], EntityProperty["Disease", "Image"] -> 
       Image[CompressedData["
1:eJzcvQVYm9neL5rRTh0qFNri7u7uDi1O0eLBJQQNBAlJSAgJwR2Cu0MFSqm7
u07dWzzE3ps3QEtn733Pt+9zzznTWc8KJSGFlfVbf5clHBDjFPIzBAJJ+IP9
xelgknF8/MEUZy72E9foBGhodHCQdTQsODQ4XivgF/aLLuxHKfsBfg/87xwM
AFgCgEXOVzrnKQvgPNbO1Xdy3sycB2gz4ASmOZP9DZXzI/AXsKjA0hzApAJM
GsBiLlGZS+B7mB8A+jwA0FicP8OeC+w/SQMWPwC0V8DCE4D6FHhxE3h8G5ie
Bt5+AmYWwF9HX5r/9AZgLrDm2a98Buh0cJXU1YUyAc4vY/9+OoP9hD2ZTIDB
BH9EX3nD1zXTv34oxtdP+M8Zy5tK/V8hyFrdCjrAZAA0Brih4P9a3tTVLaID
NDZ8C+C2L81SF2dZIFasOYD+ija9jDII/DwHwXkaMP0eeHX/z0HK+QrMUAas
KSz0VXMn8HEBmKUxXr19feXKw6njwIc3wMIMsLjAevMOWGSurJK1cvCo4FlZ
RZC1BsFVmFbXzDlg/1wE6auU8T9BENwrGh3cTDYkNM6rzK+TNvvuOcCaBQD2
nGOyFthAz7EWlti4subBzWP/jTkO6p9obw9PnSsovEMk9PoeaLC0aDS1xIgp
Ddj6Ar3Hz+NK8e5+GabWOeZWneHRFwpJwK17wOwCsLjE/nPLv2OV/OmL4Fli
rqyZuQawVRr8DsHldf7jEFz7MVlfX/33BMh5woZvngnS0VrSZZ9/2iIw9wFY
+gjMv/386MbLmxfnXv8JUNkU9AmkPSadNbvI+LDw4vytxuRspJlDopRCg7lN
s5Z+h7r+lI1bj6p5haBGi66j7zYBI8jPPlw8cGGJCgNzioPrHWIx8OAxMM+m
ORabgr9wJod7s+EDafAbgozVyfzucP6DEQS+5y7/awSBVcG5TIP01X1j7+X0
B2DxM+P2pffHRvqRKY2R4Z2JicxLl4D5z8DiNEBdAJaoAJVGTEyVgfxuv4Un
Q1KpWcfsqJHtEU3zo5pWvQomNSKalcomSC29EHHRDAVFnKLSiKNzp5V98z73
Y9lokAwZjEUOdovLS6MzOez8f4Tgt/f84xAE/vUzfQ/fWgTB1xirwLHW7Ayd
BlCngWf3e5KjO8P8cfq6GDW1NBGpOygccOUqcO8O69YN4NUzNo6TLc37pWU8
9wrnKWs1aBoft3Qa0TAt3i2Zyy3UZmg/Xdn4oLI8XlUhlGc7UkSkzdC0WF65
0tT6blkVMMuWqIzl4wPSFHsNC0yQITCYKwtlfMdF/yIgvkmHf+pg/ctc8/LX
vaGvfk/lqCTznG/AQacCX96cLScECe3KkpMkKypWy6tiufdMOXieOgg9DUtu
iwgvjwp9fvYYQP3SQ8RY8e44sG1nrrRCs75ZhbJWqoCw18ZNaEtz4OGdL6N9
rjxbXdf9kiMtVWtg2GFnfx9HAB4+BmmQxljGBTw/yxKRzc/pXxVRJsgWaF8l
34rC8w1B4B+K4L9i9y8IfuW09DXwzX1jaOwNXHh/6QTJz8VpPSRLQrhKWblK
TKqMV3jS2K5YUCpPWDJSSMhHSmigBA3QPlwb7VDf+rseBJIkJVugppUiKgaT
kbTmWuesIPDu1DDr5GSIIH/Qju3Q7dsyJSWeEAqAd++BL9PALBU0SDiEv6K0
LGvDNA4vXeJMKmcucdBkMVn/VsT/88Z/wO7rYDAYNBqNzmQs/4RBA4mA/Xg/
v8jev1k6Rz+gzT2cHA7XUwwU3YXXUy5QkMoXEircK9yurNMqq16joB62jTvP
zvjJRDdAfwN8fOCqKikPgThv5QrfIwDl53favslHUchFR5Rx7zRw72Gxjhl8
r3jsHqHIvfyTqakgH2az0EVQB2Zx6OzjHLiIRTqLQV0ClmgL9x7M3b776fK1
uZv3QDtlgQ7MzAEMkNczWPRFBvUrgktLS/9H9/b/zPh/he8v72HSGQsz0wCL
Y0iyQAY1T182E+eA909fjHVeK8VcyU5OEuCN3bKxTFFpyNx2zNAqfSN36Lat
92vJwJdHV0cbbh1tO1KJM9m83pV7m+cGLqKRaZPfgZa4wNascODmyZnmTqSU
BpRXOEJUMlBUNNnEqDAkaKS0jP7yDQgex7Bkg8NewOwi2/akL927XxYRGWdq
Hm1k2paKuN83BLz9CCxSAfb5YoAslQ0i++3/OENwzfgPbJM9mEz2BtFAomNy
MGNTIR3cE84/rKVVc55tvAOz74HpV8Dsq0cNpecy4SQ9zdS9e9P59jbqGHcZ
WCL5+HNUFD4ONAH3TiKDHNJ9rBuTI135eAN27jn427ZexwPHg8OanexOpkU+
riy8ii3MNrD1EpJwFRUJ1tPw01ezU5SG+3guPv6TzTOfn7v56fZz4AsN+DDD
ePMWWFj4ePhQpqFhiIQkexbud6kMCH4xOALMsWl2HpTOLDpnwUwah7H+Y0Hk
jH9PiyyOrcdgrUhBUPGjzS58nluaZYO4wKCBQhB0bs0BH5496GpEGGumqMoi
5KRB6bZHMEtMDiUhF8PD67Vzc6mv44Ph2rb8eMQBSx9lqWgl5Spbl3JNq0pl
I5KEAlt0nvJ1JWorlXn7dyLRjWnpSR7OiZ4OgbaGfpb67UQcGyzqrQfB+hbJ
Nq7XatrvN3YeQuZ1hEe0+/iE8/HCxcUIegZkM0ukjt5kbh7w4QOwMAf6c2jU
ZQQZIEdl/lMRXKurfLUN2bKPxWB+83WwsVpksLcRYFGp8x+WdT4qdYFFWwJP
O3UOuH8z3lgHaa5f4mSXpqxEMrfs8AkM2sXvx7XTbetmsw0QL7ndQ8TkiXpM
Rx68NCIAv88pXkIpmlsUK6BQLaXapaw2aapPMdHN8XbvodQd6mxsIOX2VuBq
0UmkROiFjobbfd2P+gfc+EXt13GniSul7RYniyt06pnUqGskbN4YCIEgBQSR
wuJ5ymqtfgHA9WvA7DQw9wX0qdIWVkH8ZzLSv+iZ9NWnNAadzT9ZbBa6xPhm
WbE1vfnpL3euA0sLwKfPKxrgIg14+xp4dLcuNvxmY8WVctIxTM7t+tqnXT1o
Z1cbrq1227ZY8Gww5PkVE7a/pyh1tDzvRE1xV2paoIiMy89ceWKqHVomnYrK
FMHdk177WzDI0lI8MS+9hYy6P977cKxtqgp/rqHkbnfLo67WSEWFML69BVIK
dRLyUxqGFw3Nb7l7DBvqw3/+OXf7ToKYRLWeQYGu/uPqGuDDO2BhFoSPscRi
Li0jyPi/vdv/v4+/2Hr0f3WQrhAg6Eyjv/gwf/3eFI5ICQ6/XdN0nFA2PXUR
eD0NTNNA5YEN4t1rn85NTjWWXT/cc/XY8NGB9rK8TMNdO1V+gaiuh+jx/daK
S3h7bfTCcH0rLvNYdeVRAinPen+MoFSumNSIhVm9xJ5GE7X+wryqImwTFtmL
RhxCpZ7GI29WEq5U4o+Tcq7UkQtcrNF6GvliQo3iolc0tK9raN+0sTpvZVG8
Y3urrOyTiMgrwaHpIiL1Hp5XKsq+XLrAQZDGZFBpjKV/JIKcwQR1zDWxhuWP
yaQymIsc24ptcM0uvjt3dQRXXOwRkCggCd3E0+cXlq5qUO0aOJGOYU1eAC7d
eDYyCjy89+bcydvjI2dGeooLUIER/jr6anJ82+S2rvMxVMsJ8Xh5chh4e//W
4d7ecmJ3dUk9Js9OTNxbQLhATWPE3qZdTfZSQthIOaG1tmywjNycDi844NYa
Hz5ekEUK9sh2s853sw4T3ZsitBfFu7NfTemKucmovMyUuelhCwuiqNCwvQ1w
copVWZm0kyeCe3u0mOjRzAzgDtu+WGBzDLbIXmPaM/91sjjeub/qAH9/tgsG
Zdi6Nn0JtAeA5eAPa61D6ssC6FK+fb8vMS1ZQiV6Aw+JTxzHI9hobFWoY4iQ
VMqQVW9x8SfauBzDk1h37v85fvx8R3c7luBsaPzbul+FZETklcTlZQWSwgOu
DQ9cqm26Temaqmjor6qpqa8gluLTwgNNt3OnS0iP2e5rUFY8kRDZXUnu7u0Y
pFCa8PjWwoKKPGRtOT7qoCsqyAdtYx25bmscBHJM33LCwoqgJDEO9e13dyeb
miGMdF8PdAAfX55OhuXzi9RIyDUqq3YaGD+AJgBX7rD1mXf0eTCmyVoNhK2d
HO2aEzJj62TM74Idf38/Kovj0GDS6asIsskQXDYNYH6kgQiyCZBKfTY8RnJ0
TuQVQWzmy16/rVxUGicpDePZhZFWRMupwgQkvXfy18XB/jxx4uLQ0FhjU35c
YhWOkJ6eCo0Ns7Ez9PWwGair6MkndMRmTGQWXacMHmnpLKorr+1rqizF6e/m
sYRAitV1K3X02oMDGooJbd3t3bUNxzp6e+vqDw31N/Y0FZCxuOT4bBt7vIRa
4TaxakH50X3OV4tQh3Bpr3q7BjKQD0cGgen3k4X5USKCpeKyR3QMr7m6jxua
nDO2B+o62HopeBjpqy5xYBk72spXDoJ0gH2M6d8h+GPEE5nLh5ABHr/VQAzz
m0LDYrOgLx+vdHZmWlrFCoojhCWQIiIlmuo4aSm0uESBjDxSXMaLe5vznt3Z
Qd43To9X1RDxxWgULnN4rLehoWJiuKsWk1oQ6TOYm5FjZUOwcp7KJp6rbaWQ
izPzs/3igqHQg3Yqyp4ikpk6hlBR8UBlJU9bq4SYyFp0wZHqph5y5dGenrqW
uobOxhICxkpCPEJEFimmTNYynoAnvT4xfG2i+3Rn483hAeDPp9SzZ2vcDgT+
sTVv++6T1g4kQQGiAH+HssbjjGzgzRuARp/7OL/si2CtUBcdPMCs5egGaG7Q
V+ePRIOcj7MsApaffF02+9u5hXnQWKBTT7c2+Ssp2K/f4L5xo81PkDhRvlJN
9Wp1jdDffg/cvMl+/e+yEAhb0g21luVgYKnohPJm8pFjfb31Fc+njiyeHhtL
jmxwdizUNyy3dHhcQxnAEQqzMuo7Gqxc7YSE9/Jv3mwlLu2pqKq3bYeDory5
nmZCRNj57oHjFY1nm7umunqHRvpHpw4fmzoCCw6ohMbgbVz6YhJPlxYfaq14
cPfMuVOHO6vLbvb1TaILkqVUo7fwofeK1Smr4QT3FooKdRnoT/oHzA8Og8kb
C6BBxBERzBUcwY/NXN4EzoFlLs+/Rtn+xoO1km3CCdAwv/GNZa/+9OIsx5mx
MH/7xjA2j+Dh5icmEKEsXuJoXq6tmbBxkxkEErJzmwcfFxtBzY0QVKB7OTqp
CJfc0Vx0fqzj6WDfHXLRUIA7W2ARRISIElIkTe2T2TkN2YgKIhpfhEHkIhwd
7fm2b5cXFtWQlNmzcZOukkJERGBtCeHhofEhNGGquPZCR//oQG/ncHdlc01/
X9fZnn4iNBrrG5wTGJSPTDp0tP/l9MtTp8aHS8rz7N1CeES9ftoYyc1z2Nv7
Q27WkK15m7Fenb7eifBo4No9YI7Ktn1Yq64k+vf4fO/QYLK+KTl/68EABR+Y
mQSs8eN/VWTAf6nzwIvn70+dBO7eAl4+uUKpHC/MHk6JjuXns4dAoLt5IqWF
dddBNH6H2O/aXOLv0YdKHyShbo51DeFzu0LDe1w94ds3o3m4epXVaiRk2mxs
+mExI7VFTfXFKFRafUNVSiJMRkJyrwA/7949wqIiUdHQkrL8I72UrtzcQg/f
Cn/otabOocbGuvrKquaaU+dPHu3rG6ujZPoHexgYk3Kym5rrOsd6Fmmz9yZO
JJnvCxJXCheVzTMy+lBTcS8hhiwhnCvCR1KQpmgZvMgnA8+fs/kJazW54Du7
aXl8i4qu8FXWj4Dg/LL28tUyZC3LAvoidRaYn2HcvX8kn5BqanUInQcsfAQW
P8xemrrdUl0b6FMX4HOvtbonF+6jJeUgsivLzPBcTtYJBOIakUA9eqQdGh65
RwSnqJa0dVOJiGC3pEK1sESNqUmBmyMBERUW4h4Z7JWdEo/PykyDJ3j6eQnJ
Su4WFQoODxwbpVwe7ywJ8U/X0y/f73mrtPZSe/uhjtbevg5Kc30RBj1QXZcb
HBFuvS/GyT05DFpWTp44dnj68bMTTR1R1vYVcXFPhrqPpiU2aGpmb9oQt+lX
vIRwrbTice8A6pkpTq7VisSn/tsI/orgWxaL9G8c9e86GKs2IDiYnIwvjlbG
YiujdOrDw0d641NTlHT3reduCAkD3r8A5t/SHt58c2byWm9LPynv2mjHzcOd
XcTsMBPNfFfHM2jUBRT6cXnlo6q645k5ODMbuKRc0Po/cMKiqHXbmpW0S4yN
if5umLTwuFhfLCKOrV7W5aMr8VhvPw9e0T2CEoJ+fq7DLaQT9XiCg/lBrq0l
OqZdXgFnieTB4qKGUmJhfm4VqbACja5IzTzb3Blv74KPgZ07NtHe3HR56uTn
P/8cbW093Npwc6wbZWNyNzr6uK1t0h4uGO/mKkmpk15+jBNHgZk3bOuJtSb4
+10Ef43qsowgZyv+1mTIWkl7WT5pzAXq7NzSDKh0M9nM81lXXFKhmnnyTskc
KU2S3X767asAbRpYmrs6cbi+jFBXUdBYWUBAJiCCPfPC/dJ8nLvQmdSL547g
sDAT8+ro2CEicZxcjDK3wGnoZu4UJctoka3skK4OqBRoXk5seV7q3SPDlNys
0ozU9MQIU3Md7i2/ZcWG9GLhJS4mVUa6lUoqiT9tSt+2l+Li2ZOWSkHn9DRU
tNWUXTh6KD82bqyk4jCpbJBYPNXTi0pLvX7p/J+P7t+8cfnoYBcmKghlZ34z
MqpDXydRijdLXXzAxvILNn+6qxmY/QDMzrIxW5iZXQ6QTS/RF79q4My1ihyT
Y1z8AAiyF09lLOtmdE4uKBVM6GR/0pt3yBb7yFJ6CT/zhPy6PYhPqCw6fLyl
/vG5s+yjXllSWIBFFqbD03wPhBkZpHk45cOgaHhkdxUpPy4y1MoiNywUg0ir
xGF60BiSi1eeijFZ3yZFUzd9n31bKaatjtBRlHe6uTbbxz3dx6MkN7W6GOvn
apcT6t0d7VduoFoiLjZlbovfwFMjrjzs4d8aHDqAx453UEa7m6qKsOWorC5y
YayDIyUntwmfX0csOD917OK5k+/fPL974RQlG9EWEXYtLn7Cz7M30a83yf9G
WlyntcXQQZ+5oQHgwycwBDw9t5o2DHKh6QXaNxfiCoL0H4IGge8UMPoSYxaE
j/314+vO8GjfX7fUK5tkbhQK+Yk7dLeIt4IC1MYSFxFbnoZsxOJL4SmU8Lg6
9wCyjfPhzJzz/R1tzaVdPQ1kMhaZGJcYAfXy945OiKklEkNMrSMU9BHaFh57
RBNMTScaKo511U5QytvQGfhQvwttjX+ePX5muDM9IjA/0JviYDliblzJJ3DG
0Lbgt+2V/LIkeU2Chc3l5obyXEQBOi0mNiApNqSxnNBSQrh8ePDByYm7JyZu
HB+/cfwY8Okj7e6986XlFa5uF1KTWCMdwPtrwOfrwKnhIm3VtF18nftcv/QO
AzfvAQtUMPGVyaCvCsQVw+KbcrPspfmREGQwqcyFLwB9FliYBl497/QPiuDi
azV2wIoqB2/mO7CdT/O33+V+/U1z665EW9fahPRSnxCKnU+luiVGVL3DM2Cs
ENfbUNrX01hcisvLQqTCE0JiwnMI+QmJMHMNbR9V/Uxz5ygFbdw+tzNVlefb
60eriIdryYcriCcp1Q25yBpUFi4lsTQ2Cq+hPmphVSYgXi0kU7pXulvfFimu
ULTPpSk9tSA1wcfLMSYhGJEZj8yII+dn1eJyL/a03Broejpx9NnExJXG1mMY
wrOG1v6IqKsFaODGySdHGu4Olh/Pg+G0VOJ/21goLNfvFXSntBqkwWm2qjZL
ZS5Rv3qDv/phQNBWXG1/cwSXl7xIZzHZagxbdFPZ/PMLcO3Gp7aOXr+AFEnZ
DEWVMCFR6/UbtCAQnd//0P5jk9IvGzBufqMpucPB8SN2/tXi2mgusWIF3UPx
8It1leONVbmJ0TBocDosPiUZji3A27k76+vpeBuaZdi6EKyca1x8umPiB7Iz
jlHKx5rLjjRVd5EJyd5eGWHhxfnYbnJxgJAwXEi4SFMvW1Khw9n7fj75EBwx
lofNCwuJD/aDQv3whbnGZtr29sblJGwrGX+lsfpeXdWNivJrxRUt/hHpKoan
UnKGYuIp0SEd6ZH+yvz+snwJ6lKZSrJoPpFSIYV6LdPJiHjg9n3g/XswiM95
fKJRl4A1sRgG8NVf+jc3CZcFwdwSA0yloNGAj1/okyfPJGcQNPUnIqM/t7W8
H+k7XIhB+3okWFpkWNp5SckH6Op15aKGkzM7vYKqdSwzuQWwfOI4YdmQjdvQ
hiYpFqb7lWQ9LEzAep6wMC+fA1LqCspayvv09MO1DQuNHarNnAgGlsUeHlcG
2xpLMfXk/OEWSkdxWVV+UXFRWX1ZpaWwkOUO7pqIcJSzS3lo+BiOcKur71x7
12BN3Uhne15ORkZmChqdiUiON1RWiHa0w1hZlFtZJopLYTUMaq1cUyXUTyRk
vGxuSbDWd5bi9dixPoSPO0lVJnAnN15EjiKvO2hocxkaB5y/DHz5DNbpAFS2
OfyZBVLid4yU+TWJ/2+N4LI1sWIPzsxPH5qajE0jKuqErdtSYm5BPTYCfHnC
/PIImH/Floz0k+cOY3AVqIxrx4eGcKi2uMg8c2O/nduwOhqZkhLIPcLFqjrZ
GjrRujrxB9xgUcGu++xExARFVCTVDFR9bC2j9Y3IutY95m51hrY1bgeGKoiU
OjIBl52eBCPnFHTUd5bVdSShMH7+B0IC3LMz4b6+bgmxEf5eHk2VVZNDI5WE
otbq+i5KEwmDjfT397GxC7XfVxMeQ9TR7zazqtUwbDPbRzHdDxeQu44mAM+f
dWMR/gqiWEmpKjmVBEF+OwgkmU+4TlnvpI3rncBIoL0L+PQBoE7TqZ8XwRwR
4JtG+jWfhPVjIDgL6swcpvHy3QV8WamuDV5YmSipHi0gDDfUinIy7q3BAtS3
wPTbh9U1LZHhAbb6TSQkMcirKTQIZWbksmVTnp528A7uUg0tspoWUkkZZW2F
j4HmJsUF+xzQVlPWVVNw0NPK8HBHmdmUqhmPWLoPWLu3efo1pMOLUOkoZGoW
Ir04n4zJI6dhS9GV9Y1dTb2jbfZeDhJacqnYbDNH24zMnKnJU0RcYUVxeXER
ua2J0lJdk+AbmA+N9xaVw8urZnPvwu4VoWiZ4AQV4rfx3ykkA5fOAS/vFh5w
qlPUPWPtjuQXSRIWid7JB+fedXG/20lrh3OhYcCt68Dn1wBjhm0yfAEYi2sr
LBg/DIKc2C5tnv4ZzFp6/DjL0DZmh0SRhD5sg4D3xh37tnA57OCKUpE5k5H8
trwYrSJPtND1ktrpK7u7yc2lzsSmSs08bYd4FPdehKxylIhglp56gOjuTHuz
ulRYdnhYQig0ysMPqmFIsnbp8w3vdfRJ3rQni1sQxS/FthDbIiMJYcEZ0LCC
nFxsXkFlQ3vX4VOJyNz+jvpKAtLBwQSOSKxtbXJ0cScXVY4OHOrs6O0fHuka
7e8Y7u4f6UMjMpK8A/fvlUgRlAqB/Bz08y+p3DuLeUWO2jgNhYc+6WsBPvwJ
XL24iK9ulzGkKBnW6RjhtTRypcUmrMyOGOhc9vcD+rqBmfcAYw5gMb6mMS+X
Q65UgrCWU8D/5gjSacwZKu0jKAyfPMbYuYVsF0/jUzr46y7rnzZFK6lGy8l7
btlYZ2h0LvBgvb5mpuQeP97f46T3NJhbtRnaVytapPPIYdXNsGbWMH0NXwUh
RwEu5H7L9mzESHklLDg8xtW3MSQ2WUy5x8GbomUVC9nSrmFerqRLUNcNFZfI
2O8A83JPigxHZWVnpGWXFNWcP3bq6mBnKw5RikXicDlZqLzwmARoSExjdUtP
90B9Swuuktw03FnTWpeWBE/yD8vc72Xz2wb39evjJMUieLa3aui0G5p2BPs+
H+0C3jwCHj/6gi5vE9M7a+o2pGuWyrszXWBHu5ZSq4rslIvzIqUBePMnQJ9n
UWl0TirQcmEUm6OuIkj9+yPIWR6VxWKveoH25lWBf6jpL9yOv/H48UqYcu10
EhMLVVZMU1etNzFF8vCSxMWLleXwWgoodbl0YQmEsFyKuFqyij4lHl4YGRZh
bxK336QmIXQgD9GPyXt49FhuQkpWLDzN0yPJ2LjQzDZm6564n7iHjZwqlQyq
ze19REUS9tmgYOEpMSGI6IiS1MzWzPzjheWdybAxQnY9NgseDyUWk63s99lY
Ox4ZO3bl0tX2zo5UFKJ9uHP85Pj506cm2vuOVDehw0I683POtlSn25mE8e/O
VlOqDfQaJ+QCLx89qK056Rrcya96Rsn0qoH1gLpqpbRo/PrfErm31hkbPy4t
A54+AOgLy9mwDA71rcS4lxEEfgAaXNa9WJycGLY8HCSXe0irxmhb9GSiK9NT
D9dWnqfUtkdFFqhpZPLsqZBRQgsKpQjtjRPaG7VHMFxQ4qC4fKSpJSo2Curt
nBzhFeNp25yV2J+X2Y1CnevszoanZiWnlGGy2nE5hZ6eGH2TYk0TnIQaUkwR
o2scoqTARrAsC16eldKLx1ysqh1PyT0cA09TVmqLDMqH+of7u7MVoSh4YlJy
OqmwuJhArK+uKiohkMtJ5ZUlR8dGLx2dujR2jIDMDPZy6qgofHb6CM7TKd/e
Cudk2xgVWhzsl2loWKqgXbxVqGWrwG1Dq9tO9u06yumighkqKmxr90VXN/D+
FYjRV4/G11oeOqe0DVgmzb83guDKmSzacsk7c+bJ8yO1lDujR4HZObCAnTkH
LE3fam7AaOpXqutXKmpm7RXSg0DcN29AaOt4iUpI/fSzloSIk5NVLCwEjYIn
h/t04bIHcHldWHRRaiq5kDA00j95uAefGo2LCj5SSGiKjAmXU45T1YrX1EXY
2lVGhdcmRFVHhR5H5VY5u/hv5KoyNBn38a2wsThRTDBWkPT280jKTo+Fw/H5
Bd5OzkUY9NHRwYb6qsqKkrqqytbKhjJMYX4G0kxDHZMYAzx7eKa6tD81KVVH
J1pBwXYHd7qhHlpdM+Lndbk/reuWlOjSlT0S4PS4rvJOc9unQ8eAp88BBg30
YC/R6Au0ZWfacuhw2Yz4Ggv+Ww82/6CCEUE2s1hiLguDJTAFFIyjUT/PvgQ9
bHPTN/BF7Y6emSJy2bLK0fKyLoJ81jw7NTdvsZSXS4uNPBjk5RviGRTkwRZe
l3raezCohmxkZlREXVNtz1gviYRKjQ/uqCa3lxKJSQmxTk4hJmZpLq4h2npo
d/c8B/s0Xe0yW1uijnbirp1FsnJ3QsJvJcIHUxKTfN1r6sv2+bhoGun39fSW
4/GtZWXH+nuKsLm4vGxMbk5daVVbDaW3pZVSXjrZ3Xp9tO98c01venKYiJjL
+s3+QkJ2XFsdt2xIEhYiCwpVCu6u1RR7WIgAZjhlUF+WwDoaMDYKsFisFSOC
uVq4xkGQ8dXb9ncerBVHLicrbYGT48RkIzj39uUc7QudzVTYInJx9m3/0FF4
RoWzV4CktKemQvpBj5wAn9zgwLzICFImIi48KAkW5eVki0qIqUpPRfr61ORk
1xTh8aUFkalRhaS89ubK82cmSksJSfB4Hw9Xd1vbGC+fZFfPhgR4jX8wQl0L
ISfbaG1OMTOI/fXnVjnlMx6+w7B4MjzaydVG2VijpK4sLjYy1N29ODPj0qGx
w51t+dmZoYEBHs7uEaFhWenJJfic8c6GJ2eOvDo7PkXKT5KVz1fXQ6hrs9mF
JgSSqaXRqKbZp6U95mT2uqEE9IiuOkMXQL1lJZj0NboNPucUIdLX5F7+fQfH
9mFxukSwFRqQa7z5COZgL1EZS6Be9urRzeNdrYNYXGNc4mRpeYKbU2zIAba6
j4XF1CKRnTgCJQ+TFReXEhOFSktBxsegY2LK0lInmiiHOpprasgjR/v6Bzpw
+FxyaSGluTEyOkpFRS0sBOpq42CupF6ejEC5HwhXUEDr65WZGBapKqZt3Vwv
IDFp71Lh7DxQjN/Bu4FQS+o/MgBLiC7PzekkEUfrapqKiIkR0NjICEtzK3tL
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
9noMxt/PB12E7z/Uc/vc5OXy0nYXz1ol3eI9MpXCKkccfX1+275vw05KBOze
oaNXLp65+uTu66WlabbWz9Y3X79G6mlHcW1sVZI7oqk+pac7pqWN27H7qE8g
cO8h2wxcoC/Or2QPrvbEWyPpWGuEIGvt1vw4g7XGqOXUT3BaPdFWm2wvAu+u
3IXpWZbIahN3S6Tzi3vz8DpLCI+VET7fOHOlp6405EBL5MFcY+0YWan9O3fa
8vJnePpjY+LLczJq8KiK/ILMxIyUxJxwaFI8DBkYEBrl5xvuYGMtsEtv468u
ooKl4aEXuzv762qaW+rrOxpOnB5/d+/6rZr6Ag3DQkH5Kkm1Rh1z+B6Rg1w8
5fvdj+fiqJevAotzHz+/e/7xE3Xl6q7pUjeXbCnJYVOTq/vsz5uZjxsalcnI
n4yHAY+esg2m5S64f//8z/96rJ65vyBI5XgLGcv5sRxLg/7nu4YERIqoHBs+
6F4Rmy1cPsoKwINbwNyHxVMTt4ryj8ZA8bqaqTLS+zZt1v11na+Onr+Febib
IwkBx8Qnxh+EYrPwsdEp0QkpyfAkUnpKhIGu7S+/Ru7eGyUgXGDvcLevb7Ch
prqmpLW36drlU2e72io9fQ5A/kDtES9V1iSZm5Pc9p0g5X85dvj92CjYMvTD
h5dXr6xIKzYN/vm4GhqMNTNstLcYc9/XbWk64rL/aFjI5+4e8NIfGngH6cIP
RlX/g/G9NfRXjRoMvVA5sfvlygrg2bFTZQf8CNZ2oYpKqr/8YrhrF5Wt4Tx9
NDvQdysrs9XaGictVaKjnSIv7y8mGm5s6KGraakoHulsF+vkkh0aPUjprimv
bWhsam9qONve0hIGjVrPXcgv2WPmQNQ1aoiNPNPTfu/y2avnTjy5dfFUW+Nk
bl6do9OxIGiVjeXzjjrg1ing1R3g8wvg3Wva1PGzpSXA50/gjVpsDQWsSPr8
59GhWy21Zwg5x7Lg46nx10k46tEjnKb3C2DGL+uHiPf9l+N7X8S/IshcviV1
folTnwZGD4HXL+cunj/d1IiBhiY4Oj4dGh5OSk2RlmthW3wCwsXCYp3GpmRd
7RwD7arw4EZEooemQpilUcp+pwZE1lR7b09d49mTx0+O9r8/djRfRz9r3bYh
Ge0+ed06TYMpdA7jzpUXk5MXe3quT4xeGu58MtQzlpV6uQDdnxj+5yAFmH8O
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
5cnxYDKDSikAyLI6eL0fBttmXQ==
         "], "Byte", ColorSpace -> "RGB", ImageResolution -> {96, 96}, 
         Interleaving -> True, MetaInformation -> 
         Association[
          "Source" -> "https://phil.cdc.gov/Details.aspx?pid=23312", "URL" -> 
           "http://www.wolframcdn.com/waimage/hset110/fae/\
fae44ac1e065f39a7dd061617b7daa7e_v001s.jpg"]], 
       EntityProperty["Disease", "Name"] -> "COVID-19", 
       EntityProperty["Disease", "Prevalence"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "PrevalenceRate"] -> Missing["NotAvailable"],
        EntityProperty["Disease", "Prevention"] -> {
        "handwashing", "avoiding infected people"}, 
       EntityProperty["Disease", "Risks"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "Specialty"] -> {"infectious disease"}, 
       EntityProperty["Disease", "SystolicMean"] -> Missing["NotAvailable"], 
       EntityProperty["Disease", "Transmission"] -> {"airborne droplet"}, 
       EntityProperty["Disease", "Treatment"] -> {"supportive care"}, 
       EntityProperty["Disease", "WeightMean"] -> Missing["NotAvailable"]], 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 27], "Meta" -> 
     Association["ID" -> 172760965732037], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 27], 
     "Path" -> {}, "BaseIndices" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 27, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"average patient age\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "AgeMean"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "AgeMean"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"age of onset\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "AgeOfOnset"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "AgeOfOnset"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"associated genes\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "AssociatedGenes"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "AssociatedGenes"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "\"basic reproduction number\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "BasicReproductionNumber"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"Interval", "[", 
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1.3999999999999992`", ",", "2.5000000000000013`"}], 
                    "}"}], "]"}], FontFamily -> "Source Code Pro", 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "BasicReproductionNumber"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"average patient BMI\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "BodyMassIndexMean"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "BodyMassIndexMean"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"average temperature\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "BodyTemperatureMean"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "BodyTemperatureMean"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"causes\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Causes"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"SARS-CoV-2 virus"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"SARS-CoV-2 virus"}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    EntityProperty["Disease", "Causes"]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Causes"]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"common symptoms\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "CommonSymptoms"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"fever", "cough", "shortness of breath"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"fever", "cough", "shortness of breath"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[
                    EntityProperty["Disease", "CommonSymptoms"]]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "CommonSymptoms"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"definition\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Definition"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 InterpretationBox[
                  Cell[
                  "a viral respiratory disease caused by a novel coronavirus \
(SARS-CoV-2) first identified in Wuhan, Hubei Province, China"], 
                  TextCell[
                  "a viral respiratory disease caused by a novel coronavirus \
(SARS-CoV-2) first identified in Wuhan, Hubei Province, China"]], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Definition"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "\"average diastolic blood pressure\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "DiastolicMean"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "DiastolicMean"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"duration\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Duration"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Duration"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"entity classes\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "EntityClasses"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "EntityClasses"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                "\"exposure to disease onset\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "ExposureToDiseaseOnset"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   InterpretationBox[
                    RowBox[{"(", "\[InvisibleSpace]", "2", 
                    StyleBox["\"to\"", FontSize -> Inherited - 2], "14", 
                    "\[InvisibleSpace]", ")"}], 
                    Interval[{2, 14}], Selectable -> False], "\"days\""}], 
                 FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "ExposureToDiseaseOnset"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"average patient height\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "HeightMean"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "HeightMean"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"ICD\[Hyphen]9 code\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "ICDNineCode"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "ICDNineCode"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"ICD\[Hyphen]10 code\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "ICDTenCode"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "ICDTenCode"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"image\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Image"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              RawBoxes[
               TemplateBox[{"\"  \"", 
                 GraphicsBox[
                  TagBox[
                   RasterBox[CompressedData["
1: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
                    "], {{0, 25.5}, {45., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> {96, 96}], 
                   BoxForm`ImageTag[
                   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    MetaInformation -> 
                    Association[
                    "Source" -> "https://phil.cdc.gov/Details.aspx?pid=23312",
                     "URL" -> 
                    "http://www.wolframcdn.com/waimage/hset110/fae/\
fae44ac1e065f39a7dd061617b7daa7e_v001s.jpg"]], Selectable -> False], 
                  DefaultBaseStyle -> "ImageGraphics", 
                  ImageSizeRaw -> {45., 25.5}, 
                  PlotRange -> {{0, 45.}, {0, 25.5}}]}, "RowDefault"]], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"name\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Name"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["COVID-19", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Name"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{76.80000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"prevalence\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Prevalence"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "Prevalence"]]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox["\"prevalence rate\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "PrevalenceRate"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["-", 
                GrayLevel[0.85]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["Disease", "PrevalenceRate"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 27, 1], {1, 27 - -20 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 27, 1], {1, 27 - -20 + 1}], Appearance -> None],
                     " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    27, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    27, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 27, 1], {1, 27 - 20 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 27, 1], {1, 27 - 20 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{1105., {280.634033203125, 286.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1105., {280.634033203125, 286.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.798391942213921*^9, 3.7983920093744707`*^9, 
  3.798559875430748*^9, 3.7985615363927727`*^9, 3.7985616920828133`*^9, 
  3.798737128524529*^9, 3.798737333431057*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"5077b6a2-6dc1-4555-85c3-1f7859f90161"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"see", " ", "how", " ", "Covid"}], "-", 
    RowBox[{
    "19", " ", "compares", " ", "to", " ", "other", " ", "infectious", " ", 
     "diseases"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"infectDis", " ", "=", " ", 
   RowBox[{"EntityList", "@", 
    RowBox[{"FilteredEntityClass", "[", 
     RowBox[{"\"\<Disease\>\"", ",", " ", 
      RowBox[{"EntityFunction", "[", 
       RowBox[{"dis", ",", " ", 
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"dis", "@", "\"\<Specialty\>\""}], ",", " ", 
          "\"\<infectious disease\>\""}], "]"}]}], "]"}]}], 
     "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.798392906682186*^9, 3.7983929503340607`*^9}, {
  3.79839300482648*^9, 3.798393100927649*^9}, {3.798393729488386*^9, 
  3.798393733128315*^9}, {3.798393774876445*^9, 3.798393778857009*^9}, {
  3.7985001178195066`*^9, 3.798500128422638*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"ac29d305-d79e-49d7-8cd8-6f69fc24b259"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"Ebola virus disease\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"EbolaVirusDisease\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"EbolaVirusDisease\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"cholera\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine001\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine001\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"salmonella infections\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine003\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine003\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"shigellosis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine004\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine004\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"botulism\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine005.1\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine005.1\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"intestinal infection due to Clostridium difficile\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine008.45\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine008.45\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"infectious colitis, enteritis, and gastroenteritis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine009.0\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine009.0\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"infectious diarrhea\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine009.2\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine009.2\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"tuberculosis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine010018.99\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine010018.99\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"leprosy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine030\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine030\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"diphtheria\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine032\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine032\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"whooping cough\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine033\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine033\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"streptococcal sore throat and scarlet fever\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine034\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine034\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"streptococcal sore throat\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine034.0\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine034.0\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"tetanus\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine037\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine037\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"toxic shock syndrome\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine040.82\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine040.82\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"Helicobacter pylori infection of an unspecified site\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine041.86\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine041.86\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"smallpox\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine050\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine050\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"chicken pox\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine052\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine052\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"herpes simplex\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine054\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine054\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"genital herpes\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine054.1\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine054.1\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"herpes simplex without complications\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine054.9\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine054.9\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"measles\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine055\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine055\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"rubella\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine056\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine056\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"yellow fever\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine060\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine060\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"Dengue fever\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine061\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine061\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"eastern equine encephalitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine062.2\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine062.2\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"viral hepatitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine070\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine070\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"viral hepatitis B without hepatic coma\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine070.3\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine070.3\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"unspecified viral hepatitis C\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine070.7\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine070.7\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"rabies\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine071\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine071\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"mumps\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine072\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine072\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"hand, foot, and mouth disease\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine074.3\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine074.3\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"infectious mononucleosis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine075\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine075\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"Condyloma acuminatum\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine078.11\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine078.11\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"unclassified diseases due to viruses and Chlamydiae\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine078.8\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine078.8\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"severe acute respiratory syndrome\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine079.82\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine079.82\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{
    "\"unspecified type of chlamydial infection co-occurring with other \
medical conditions\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine079.98\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine079.98\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"rickettsioses\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine083\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine083\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"malaria\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine084\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine084\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"lyme disease\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine088.81\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine088.81\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"syphilis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine097\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine097\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"gonococcal infections\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine098\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine098\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"unspecified type of venereal disease\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine099.9\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine099.9\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"pinta\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine103\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine103\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"dermatophytosis of the foot\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine110.4\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine110.4\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"schistosomiasis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine120\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine120\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"cysticercosis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine123.1\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine123.1\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"trichinosis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine124\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine124\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"enterobiasis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine127.4\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine127.4\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"lice infestation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine132\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine132\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"scabies\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine133.0\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine133.0\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"neutropenia\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine288.0\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine288.0\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"meningitis due to an unspecified cause\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine322\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine322\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"acute and subacute endocarditis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine421\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine421\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"common cold\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine460\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine460\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"acute pharyngitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine462\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine462\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"acute bronchitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine466.0\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine466.0\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"chronic tonsillitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine474.00\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine474.00\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"Legionnaires' disease\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine482.84\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine482.84\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"bronchopneumonia\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine485\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine485\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"influenza\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine487\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine487\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"urinary tract infection of an unspecified site\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine599.0\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine599.0\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"orchitis and epididymitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine604\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine604\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"vascular disorders of the male genital organs\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine608.83\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine608.83\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"vaginitis and vulvovaginitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine616.1\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine616.1\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"cellulitis and abscess of an unspecified digit\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine681.9\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine681.9\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"impetigo\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine684\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine684\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"pityriasis rosea\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine696.3\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine696.3\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"necrotizing fasciitis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine728.86\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine728.86\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{
    "\"osteomyelitis, periostitis, and other infections involving bone\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine730\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine730\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"neonatal candida infection\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine771.7\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine771.7\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"sepsis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ICDNine995.91\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ICDNine995.91\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"Middle East respiratory syndrome\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"MiddleEastRespiratorySyndrome\""}], 
       "]"}], "\"Entity[\\\"Disease\\\", \
\\\"MiddleEastRespiratorySyndrome\\\"]\"", "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"COVID-19\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"NovelCoronavirusDisease\\\"]\"", 
     "\"disease\""},
    "Entity"], ",", 
   TemplateBox[{"\"Zika virus disease\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Disease\"", ",", "\"ZikaVirusDisease\""}], "]"}], 
     "\"Entity[\\\"Disease\\\", \\\"ZikaVirusDisease\\\"]\"", "\"disease\""},
    "Entity"]}], "}"}]], "Output",
 CellChangeTimes->{{3.7983929442920637`*^9, 3.798392950654187*^9}, 
   3.798393021490424*^9, 3.7983931217888803`*^9, 3.798393780142104*^9, 
   3.798399051582868*^9, 3.7985599684959593`*^9, 3.798561567770526*^9, 
   3.798561693879524*^9, 3.7987372247482033`*^9, 3.7987373341735888`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"c11a8791-d423-409d-b234-86e40893ad8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"prevention", " ", "measures"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"infectDisPrevention", " ", "=", " ", 
     RowBox[{"DeleteMissing", "@", 
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#", " ", "\[Rule]", " ", 
           RowBox[{"#", "[", 
            TemplateBox[{"\"prevention\"", 
              RowBox[{"EntityProperty", "[", 
                RowBox[{"\"Disease\"", ",", "\"Prevention\""}], "]"}], 
              "\"EntityProperty[\\\"Disease\\\", \\\"Prevention\\\"]\""},
             "EntityProperty"], "]"}]}], ")"}], "&"}], ",", " ", 
        "infectDis"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"Short", "[", "%", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.798398871413587*^9, 3.798398915912097*^9}, {
  3.798500140137876*^9, 3.7985001524298773`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"959e9392-df77-4d4c-a7b8-8b73dcf10ade"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     TemplateBox[{"\"Ebola virus disease\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"Disease\"", ",", "\"EbolaVirusDisease\""}], "]"}], 
       "\"Entity[\\\"Disease\\\", \\\"EbolaVirusDisease\\\"]\"", 
       "\"disease\""},
      "Entity"], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\<\"coordinated medical services\"\>", 
       ",", "\<\"careful handling of bushmeat\"\>"}], "}"}]}], ",", 
    RowBox[{"\[LeftSkeleton]", "50", "\[RightSkeleton]"}], ",", 
    RowBox[{
     TemplateBox[{"\"Zika virus disease\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"Disease\"", ",", "\"ZikaVirusDisease\""}], "]"}], 
       "\"Entity[\\\"Disease\\\", \\\"ZikaVirusDisease\\\"]\"", "\"disease\""},
      "Entity"], "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\<\"decreasing mosquito bites\"\>", ",", "\<\"condoms\"\>"}], 
      "}"}]}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{{3.798398898521337*^9, 3.798398917926785*^9}, 
   3.798399053188776*^9, 3.798560372521241*^9, 3.7985615756296387`*^9, 
   3.798561695827338*^9, 3.798737234702076*^9, 3.798737335749907*^9},
 CellLabel->
  "Out[97]//Short=",ExpressionUUID->"ca929de6-9219-472c-aa05-95e770d704a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "groupings", " ", "of", " ", "infectious", " ", "diseases", " ", "by", " ",
     "prevention", " ", "measures"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Keys", "/@", 
     RowBox[{"GroupBy", "[", 
      RowBox[{"infectDisPrevention", ",", " ", "Last"}], "]"}]}], " ", "//", 
    " ", "KeySort"}], " ", "//", " ", "Dataset"}]}]], "Code",
 CellChangeTimes->{{3.7983963029637823`*^9, 3.798396356476549*^9}, {
   3.79839798355823*^9, 3.798398035218609*^9}, {3.798398987472026*^9, 
   3.798398995102655*^9}, {3.798399030892376*^9, 3.798399057498342*^9}, 
   3.798500176899787*^9, {3.798560375316806*^9, 3.798560380557214*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"81d04324-e8f2-4f24-b768-fd3aff770766"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> Association[{"access to clean water"} -> {
         Entity["Disease", "ICDNine120"]}, {"diphtheria vaccines"} -> {
         Entity["Disease", "ICDNine032"]}, {"fully cook meat"} -> {
         Entity["Disease", "ICDNine124"]}, {
        "good maintenance of water systems"} -> {
         Entity["Disease", "ICDNine482.84"]}, {"handwashing"} -> {
         Entity["Disease", "ICDNine004"], 
         Entity["Disease", "ICDNine034.0"], 
         Entity["Disease", "ICDNine074.3"]}, {"hepatitis B vaccines"} -> {
         Entity["Disease", "ICDNine070.3"]}, {"measles vaccines"} -> {
         Entity["Disease", "ICDNine055"]}, {"mumps vaccines"} -> {
         Entity["Disease", "ICDNine072"]}, {"pertussis vaccines"} -> {
         Entity["Disease", "ICDNine033"]}, {"probiotics"} -> {
         Entity["Disease", "ICDNine616.1"]}, {
        "proper preparation and cooking of food"} -> {
         Entity["Disease", "ICDNine003"]}, {"rubella vaccines"} -> {
         Entity["Disease", "ICDNine056"]}, {"smallpox vaccines"} -> {
         Entity["Disease", "ICDNine050"]}, {"tetanus vaccines"} -> {
         Entity["Disease", "ICDNine037"]}, {"vaccination"} -> {
         Entity["Disease", "ICDNine070"], 
         Entity["Disease", "ICDNine322"]}, {"varicella vaccines"} -> {
         Entity["Disease", "ICDNine052"]}, {"yellow fever vaccines"} -> {
         Entity["Disease", "ICDNine060"]}, {
        "avoiding exposure", "antiviral medication"} -> {
         Entity["Disease", "ICDNine054.9"]}, {"condoms", "sexual abstinence"} -> {
         Entity["Disease", "ICDNine097"], 
         Entity["Disease", "ICDNine098"]}, {
        "coordinated medical services", "careful handling of bushmeat"} -> {
         Entity["Disease", "EbolaVirusDisease"]}, {
        "decreasing mosquito bites", "condoms"} -> {
         Entity["Disease", "ZikaVirusDisease"]}, {
        "dengue fever vaccines", "decreasing mosquito bites"} -> {
         Entity["Disease", "ICDNine061"]}, {
        "handwashing", "avoiding infected people"} -> {
         Entity["Disease", "ICDNine079.82"], 
         Entity["Disease", "MiddleEastRespiratorySyndrome"], 
         Entity["Disease", "NovelCoronavirusDisease"]}, {
        "handwashing", "terminal room cleaning in hospital"} -> {
         Entity["Disease", "ICDNine008.45"]}, {
        "handwashing", "wearing a face mask"} -> {
         Entity["Disease", "ICDNine460"]}, {"HPV vaccines", "condoms"} -> {
         Entity["Disease", "ICDNine078.11"]}, {
        "prevention of tick bites", "doxycycline"} -> {
         Entity["Disease", "ICDNine088.81"]}, {
        "proper food preparation", "no honey for children less than one"} -> {
         Entity["Disease", "ICDNine005.1"]}, {"sexual abstinence", "condoms"} -> {
         Entity["Disease", "ICDNine054.1"], 
         Entity["Disease", "ICDNine079.98"]}, {
        "using clean needles", "testing donated blood"} -> {
         Entity["Disease", "ICDNine070.7"]}, {"wound care", "handwashing"} -> {
         Entity["Disease", "ICDNine728.86"]}, {
        "decreasing mosquito bites", "insect repellent", "mosquito control"} -> {
         Entity["Disease", "ICDNine062.2"]}, {
        "handwashing", "avoiding infected people", "cleaning injuries"} -> {
         Entity["Disease", "ICDNine684"]}, {
        "handwashing", "daily bathing in the morning", 
         "daily changing of underwear"} -> {
         Entity["Disease", "ICDNine127.4"]}, {
        "handwashing", "not sharing personal items", 
         "staying away from sick people"} -> {
         Entity["Disease", "ICDNine034"]}, {
        "handwashing", "rotavirus vaccination", "breastfeeding"} -> {
         Entity["Disease", "ICDNine009.2"]}, {
        "handwashing", "wearing a surgical mask", "influenza vaccines"} -> {
         Entity["Disease", "ICDNine487"]}, {
        "improved sanitation", "access to clean water", "cholera vaccines"} -> {
         Entity["Disease", "ICDNine001"]}, {
        "improved sanitation", "treating those with taeniasis", 
         "cooking pork well"} -> {
         Entity["Disease", "ICDNine123.1"]}, {
        "rabies vaccines", "animal control", "rabies immunoglobulin"} -> {
         Entity["Disease", "ICDNine071"]}, {
        "sexual abstinence", "vaccination", "condoms"} -> {
         Entity["Disease", "ICDNine099.9"]}, {
        "vaccination", "handwashing", "not smoking"} -> {
         Entity["Disease", "ICDNine485"]}, {
        "avoiding walking barefoot in public showers", 
         "keeping toenails short", "wearing big enough shoes", 
         "changing socks daily"} -> {
         Entity["Disease", "ICDNine110.4"]}, {
        "handwashing", "drinking clean water", 
         "proper disposal of human waste", "breastfeeding"} -> {
         Entity["Disease", "ICDNine009.0"]}, {
        "mosquito nets", "insect repellent", "mosquito control", 
         "medications"} -> {
         Entity["Disease", "ICDNine084"]}], "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[False], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Vector[
        TypeSystem`Atom[String], TypeSystem`AnyLength], 
       TypeSystem`Vector[
        TypeSystem`Atom[
         Entity["Disease"]], TypeSystem`AnyLength], 45], "Meta" -> 
     Association["ID" -> 172765260699336], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[False], 
         TypeSystem`PackageScope`UnknownShape[False]]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Vector[
        TypeSystem`Atom[String], TypeSystem`AnyLength], 
       TypeSystem`Vector[
        TypeSystem`Atom[
         Entity["Disease"]], TypeSystem`AnyLength], 45], "Path" -> {}, 
     "BaseIndices" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 
     1, "DataRowCount" -> 45, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"access to clean water"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"access to clean water"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"access to clean water"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"access to clean water"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine120"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine120"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"access to clean water"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"access to clean water"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"diphtheria vaccines"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"diphtheria vaccines"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"diphtheria vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"diphtheria vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine032"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine032"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"diphtheria vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"diphtheria vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"fully cook meat"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"fully cook meat"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"fully cook meat"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"fully cook meat"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine124"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine124"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"fully cook meat"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"fully cook meat"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"good maintenance of water systems"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"good maintenance of water systems"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"good maintenance of water systems"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"good maintenance of water systems"}]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine482.84"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine482.84"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"good maintenance of water systems"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"good maintenance of water systems"}]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"handwashing"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"handwashing"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"handwashing"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"handwashing"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine004"], 
                    Entity["Disease", "ICDNine034.0"], 
                    Entity["Disease", "ICDNine074.3"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine004"], 
                    Entity["Disease", "ICDNine034.0"], 
                    Entity["Disease", "ICDNine074.3"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"handwashing"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"handwashing"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"hepatitis B vaccines"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"hepatitis B vaccines"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"hepatitis B vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"hepatitis B vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine070.3"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine070.3"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"hepatitis B vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"hepatitis B vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"measles vaccines"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"measles vaccines"}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"measles vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"measles vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine055"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine055"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"measles vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"measles vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"mumps vaccines"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"mumps vaccines"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"mumps vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"mumps vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine072"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine072"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"mumps vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"mumps vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"pertussis vaccines"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"pertussis vaccines"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"pertussis vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"pertussis vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine033"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine033"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"pertussis vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"pertussis vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"probiotics"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"probiotics"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"probiotics"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"probiotics"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine616.1"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine616.1"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"probiotics"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"probiotics"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"proper preparation and cooking of food"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"proper preparation and cooking of food"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"proper preparation and cooking of food"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"proper preparation and cooking of food"}]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine003"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine003"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"proper preparation and cooking of food"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"proper preparation and cooking of food"}]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"rubella vaccines"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"rubella vaccines"}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"rubella vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"rubella vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine056"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine056"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"rubella vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"rubella vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"smallpox vaccines"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"smallpox vaccines"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"smallpox vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"smallpox vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine050"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine050"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"smallpox vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"smallpox vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"tetanus vaccines"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"tetanus vaccines"}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"tetanus vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"tetanus vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine037"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine037"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"tetanus vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"tetanus vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"vaccination"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"vaccination"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"vaccination"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"vaccination"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine070"], 
                    Entity["Disease", "ICDNine322"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine070"], 
                    Entity["Disease", "ICDNine322"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"vaccination"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"vaccination"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"varicella vaccines"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"varicella vaccines"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"varicella vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"varicella vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine052"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine052"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"varicella vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"varicella vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"yellow fever vaccines"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"yellow fever vaccines"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"yellow fever vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"yellow fever vaccines"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine060"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine060"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"yellow fever vaccines"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"yellow fever vaccines"}]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"avoiding exposure", "antiviral medication"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"avoiding exposure", "antiviral medication"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"avoiding exposure", "antiviral medication"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"avoiding exposure", "antiviral medication"}]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine054.9"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine054.9"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"avoiding exposure", "antiviral medication"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"avoiding exposure", "antiviral medication"}]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"condoms", "sexual abstinence"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"condoms", "sexual abstinence"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"condoms", "sexual abstinence"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"condoms", "sexual abstinence"}]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "ICDNine097"], 
                    Entity["Disease", "ICDNine098"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    Entity["Disease", "ICDNine097"], 
                    Entity["Disease", "ICDNine098"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   Key[{"condoms", "sexual abstinence"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"condoms", "sexual abstinence"}]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"coordinated medical services", 
                    "careful handling of bushmeat"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"coordinated medical services", 
                    "careful handling of bushmeat"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   
                   Key[{"coordinated medical services", 
                    "careful handling of bushmeat"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 
                 Key[{"coordinated medical services", 
                   "careful handling of bushmeat"}]}, "Item", False], 
               "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    Entity["Disease", "EbolaVirusDisease"]}, 
                   ShowStringCharacters -> False], 
                  Style[
                   Style[{
                    Entity["Disease", "EbolaVirusDisease"]}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   
                   Key[{"coordinated medical services", 
                    "careful handling of bushmeat"}]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 
                 Key[{"coordinated medical services", 
                   "careful handling of bushmeat"}]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 45, 1], {1, 45 - -20 + 1}], Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 45, 1], {1, 45 - -20 + 1}], Appearance -> None],
                     " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    45, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    45, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 45, 1], {1, 45 - 20 + 1}], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 45, 1], {1, 45 - 20 + 1}], Appearance -> 
                    None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{838., {345.634033203125, 351.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{838., {345.634033203125, 351.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.798396305058441*^9, {3.798396346684471*^9, 3.798396357767138*^9}, {
   3.798397983953809*^9, 3.7983979989427843`*^9}, 3.798398035533699*^9, 
   3.798398976084126*^9, {3.798399036012288*^9, 3.798399058198819*^9}, 
   3.798560381933013*^9, 3.7985615766888857`*^9, 3.7985616960063*^9, 
   3.7987372349886627`*^9, 3.798737335905211*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"56671f07-0f3f-43c2-9388-d7022d059562"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"similarity", " ", "between", " ", "prevention", " ", "measures"}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Magnify", "[", 
   RowBox[{
    RowBox[{"ClusteringTree", "[", "\n", 
     RowBox[{
      RowBox[{"Values", "@", "infectDisPrevention"}], ",", " ", 
      RowBox[{"VertexShapeFunction", "\[Rule]", "\"\<Name\>\""}], ",", " ", 
      RowBox[{"GraphLayout", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<LayeredEmbedding\>\"", ",", " ", 
         RowBox[{"\"\<Orientation\>\"", "\[Rule]", "Left"}], ",", " ", 
         RowBox[{"\"\<LeafDistance\>\"", "\[Rule]", "1"}], ",", " ", 
         RowBox[{"LayerSizeFunction", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{"1", "&"}], ")"}]}]}], "}"}]}], ",", " ", "\n", 
      RowBox[{"ImageSize", "\[Rule]", "1500"}], ",", " ", 
      RowBox[{"AspectRatio", "\[Rule]", 
       RowBox[{"1", "/", "GoldenRatio"}]}]}], "]"}], ",", " ", ".8"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.798398528004325*^9, 3.7983987380260277`*^9}, {
  3.7983989213580236`*^9, 3.7983989595497513`*^9}, {3.7983989977679777`*^9, 
  3.798399024149785*^9}, {3.7983990636037283`*^9, 3.7983990637794943`*^9}, {
  3.798500192175329*^9, 3.798500219268301*^9}, {3.798560405954101*^9, 
  3.798560407578126*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"a8baeccc-8c10-44a2-a084-55e988af868e"],

Cell[BoxData[
 StyleBox[
  GraphicsBox[
   NamespaceBox["NetworkGraphics",
    DynamicModuleBox[{Typeset`graph = HoldComplete[
      Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 
       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
        72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 
       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103}, {
       Null, {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {6, 8}, {8, 
        9}, {9, 10}, {10, 11}, {11, 12}, {12, 13}, {13, 14}, {14, 15}, {15, 
        16}, {15, 17}, {17, 18}, {18, 19}, {19, 20}, {19, 21}, {21, 22}, {22, 
        23}, {23, 24}, {24, 25}, {25, 26}, {26, 27}, {27, 28}, {28, 29}, {29, 
        30}, {30, 31}, {31, 32}, {32, 33}, {33, 34}, {34, 35}, {35, 36}, {36, 
        37}, {37, 38}, {38, 39}, {39, 40}, {40, 41}, {41, 42}, {42, 43}, {43, 
        44}, {44, 45}, {45, 46}, {45, 47}, {47, 48}, {47, 49}, {44, 50}, {50, 
        51}, {50, 52}, {52, 53}, {52, 54}, {43, 55}, {55, 56}, {56, 57}, {57, 
        58}, {57, 59}, {59, 60}, {59, 61}, {61, 62}, {61, 63}, {56, 64}, {55, 
        65}, {65, 66}, {65, 67}, {42, 68}, {41, 69}, {40, 70}, {39, 71}, {38, 
        72}, {37, 73}, {36, 74}, {35, 75}, {34, 76}, {33, 77}, {32, 78}, {31, 
        79}, {30, 80}, {29, 81}, {28, 82}, {27, 83}, {26, 84}, {25, 85}, {24, 
        86}, {23, 87}, {22, 88}, {21, 89}, {18, 90}, {17, 91}, {14, 92}, {13, 
        93}, {12, 94}, {11, 95}, {10, 96}, {9, 97}, {8, 98}, {5, 99}, {4, 
        100}, {3, 101}, {2, 102}, {1, 103}}}, {
       AlignmentPoint -> Center, 
        AnnotationRules -> {
         "GraphProperties" -> {
           "LeafLabels" -> 
            Association[
             7 -> {"coordinated medical services", 
                "careful handling of bushmeat"}, 
              16 -> {"improved sanitation", "access to clean water", 
                "cholera vaccines"}, 
              20 -> {"proper preparation and cooking of food"}, 
              46 -> {"handwashing"}, 48 -> {"handwashing"}, 
              49 -> {"handwashing"}, 
              51 -> {"handwashing", "avoiding infected people"}, 
              53 -> {"handwashing", "avoiding infected people"}, 
              54 -> {"handwashing", "avoiding infected people"}, 
              58 -> {"sexual abstinence", "condoms"}, 
              60 -> {"sexual abstinence", "condoms"}, 
              62 -> {"condoms", "sexual abstinence"}, 
              63 -> {"condoms", "sexual abstinence"}, 
              64 -> {"sexual abstinence", "vaccination", "condoms"}, 
              66 -> {"vaccination"}, 67 -> {"vaccination"}, 
              68 -> {"decreasing mosquito bites", "condoms"}, 
              69 -> {"handwashing", "avoiding infected people", 
                "cleaning injuries"}, 70 -> {"wound care", "handwashing"}, 
              71 -> {"handwashing", "wearing a face mask"}, 
              72 -> {"handwashing", "terminal room cleaning in hospital"}, 
              73 -> {"access to clean water"}, 
              74 -> {"vaccination", "handwashing", "not smoking"}, 
              75 -> {"dengue fever vaccines", "decreasing mosquito bites"}, 
              76 -> {"HPV vaccines", "condoms"}, 77 -> {"probiotics"}, 
              78 -> {"fully cook meat"}, 79 -> {"mumps vaccines"}, 
              80 -> {"hepatitis B vaccines"}, 81 -> {"yellow fever vaccines"},
               82 -> {"rubella vaccines"}, 83 -> {"measles vaccines"}, 
              84 -> {"varicella vaccines"}, 85 -> {"smallpox vaccines"}, 
              86 -> {"tetanus vaccines"}, 87 -> {"pertussis vaccines"}, 
              88 -> {"diphtheria vaccines"}, 
              89 -> {"good maintenance of water systems"}, 
              90 -> {"decreasing mosquito bites", "insect repellent", 
                "mosquito control"}, 
              91 -> {"handwashing", "rotavirus vaccination", "breastfeeding"},
               92 -> {"handwashing", "not sharing personal items", 
                "staying away from sick people"}, 
              93 -> {"handwashing", "daily bathing in the morning", 
                "daily changing of underwear"}, 
              94 -> {"handwashing", "wearing a surgical mask", 
                "influenza vaccines"}, 
              95 -> {"prevention of tick bites", "doxycycline"}, 
              96 -> {"avoiding exposure", "antiviral medication"}, 
              97 -> {"proper food preparation", 
                "no honey for children less than one"}, 
              98 -> {"using clean needles", "testing donated blood"}, 
              99 -> {
               "mosquito nets", "insect repellent", "mosquito control", 
                "medications"}, 
              100 -> {"handwashing", "drinking clean water", 
                "proper disposal of human waste", "breastfeeding"}, 
              101 -> {"improved sanitation", "treating those with taeniasis", 
                "cooking pork well"}, 
              102 -> {"rabies vaccines", "animal control", 
                "rabies immunoglobulin"}, 
              103 -> {"avoiding walking barefoot in public showers", 
                "keeping toenails short", "wearing big enough shoes", 
                "changing socks daily"}]}}, AspectRatio -> GoldenRatio^(-1), 
        Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, 
        AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, 
        BaseStyle -> {}, ContentSelectable -> Automatic, EdgeLabels -> {None},
         EdgeStyle -> {
          GrayLevel[0.65]}, Editable -> False, Epilog -> {}, FormatType -> 
        TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {},
         FrameTicks -> None, FrameTicksStyle -> {}, 
        GraphLayout -> {
         "LayeredEmbedding", "Orientation" -> Left, "LeafDistance" -> 1, 
          LayerSizeFunction -> (1& )}, GraphStyle -> Automatic, GridLines -> 
        None, GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, 
        ImageSize -> 1500, LabelStyle -> {}, PerformanceGoal -> "Speed", 
        PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> False, 
        PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotTheme -> 
        Automatic, Prolog -> {}, RotateLabel -> True, Ticks -> Automatic, 
        TicksStyle -> {}, VertexLabels -> {68 -> Placed[
            Framed[
             Short[{"decreasing mosquito bites", "condoms"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          83 -> Placed[
            Framed[
             Short[{"measles vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 99 -> Placed[
            Framed[
             
             Short[{"mosquito nets", "insect repellent", "mosquito control", 
               "medications"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 100 -> Placed[
            Framed[
             
             Short[{"handwashing", "drinking clean water", 
               "proper disposal of human waste", "breastfeeding"}], 
             Background -> GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          85 -> Placed[
            Framed[
             Short[{"smallpox vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 92 -> Placed[
            Framed[
             
             Short[{"handwashing", "not sharing personal items", 
               "staying away from sick people"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 72 -> Placed[
            Framed[
             Short[{"handwashing", "terminal room cleaning in hospital"}], 
             Background -> GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          66 -> Placed[
            Framed[
             Short[{"vaccination"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 62 -> Placed[
            Framed[
             Short[{"condoms", "sexual abstinence"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          48 -> Placed[
            Framed[
             Short[{"handwashing"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 87 -> Placed[
            Framed[
             Short[{"pertussis vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 73 -> Placed[
            Framed[
             Short[{"access to clean water"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 69 -> Placed[
            Framed[
             
             Short[{"handwashing", "avoiding infected people", 
               "cleaning injuries"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 78 -> Placed[
            Framed[
             Short[{"fully cook meat"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 82 -> Placed[
            Framed[
             Short[{"rubella vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 101 -> Placed[
            Framed[
             
             Short[{"improved sanitation", "treating those with taeniasis", 
               "cooking pork well"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 96 -> Placed[
            Framed[
             Short[{"avoiding exposure", "antiviral medication"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          95 -> Placed[
            Framed[
             Short[{"prevention of tick bites", "doxycycline"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          49 -> Placed[
            Framed[
             Short[{"handwashing"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 20 -> Placed[
            Framed[
             Short[{"proper preparation and cooking of food"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          60 -> Placed[
            Framed[
             Short[{"sexual abstinence", "condoms"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          89 -> Placed[
            Framed[
             Short[{"good maintenance of water systems"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          46 -> Placed[
            Framed[
             Short[{"handwashing"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 74 -> Placed[
            Framed[
             Short[{"vaccination", "handwashing", "not smoking"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          98 -> Placed[
            Framed[
             Short[{"using clean needles", "testing donated blood"}], 
             Background -> GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          16 -> Placed[
            Framed[
             
             Short[{"improved sanitation", "access to clean water", 
               "cholera vaccines"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 76 -> Placed[
            Framed[
             Short[{"HPV vaccines", "condoms"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 103 -> Placed[
            Framed[
             
             Short[{"avoiding walking barefoot in public showers", 
               "keeping toenails short", "wearing big enough shoes", 
               "changing socks daily"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 63 -> Placed[
            Framed[
             Short[{"condoms", "sexual abstinence"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          86 -> Placed[
            Framed[
             Short[{"tetanus vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 90 -> Placed[
            Framed[
             
             Short[{"decreasing mosquito bites", "insect repellent", 
               "mosquito control"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 75 -> Placed[
            Framed[
             Short[{"dengue fever vaccines", "decreasing mosquito bites"}], 
             Background -> GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          91 -> Placed[
            Framed[
             Short[{"handwashing", "rotavirus vaccination", "breastfeeding"}],
              Background -> GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          94 -> Placed[
            Framed[
             
             Short[{"handwashing", "wearing a surgical mask", 
               "influenza vaccines"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 77 -> Placed[
            Framed[
             Short[{"probiotics"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 88 -> Placed[
            Framed[
             Short[{"diphtheria vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 97 -> Placed[
            Framed[
             
             Short[{"proper food preparation", 
               "no honey for children less than one"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          80 -> Placed[
            Framed[
             Short[{"hepatitis B vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 102 -> Placed[
            Framed[
             
             Short[{"rabies vaccines", "animal control", 
               "rabies immunoglobulin"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 70 -> Placed[
            Framed[
             Short[{"wound care", "handwashing"}], Background -> GrayLevel[1],
              FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 67 -> Placed[
            Framed[
             Short[{"vaccination"}], Background -> GrayLevel[1], FrameStyle -> 
             GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 
             2], Center], 81 -> Placed[
            Framed[
             Short[{"yellow fever vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 7 -> Placed[
            Framed[
             
             Short[{"coordinated medical services", 
               "careful handling of bushmeat"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 79 -> Placed[
            Framed[
             Short[{"mumps vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 64 -> Placed[
            Framed[
             Short[{"sexual abstinence", "vaccination", "condoms"}], 
             Background -> GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          51 -> Placed[
            Framed[
             Short[{"handwashing", "avoiding infected people"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          54 -> Placed[
            Framed[
             Short[{"handwashing", "avoiding infected people"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          53 -> Placed[
            Framed[
             Short[{"handwashing", "avoiding infected people"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          71 -> Placed[
            Framed[
             Short[{"handwashing", "wearing a face mask"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          93 -> Placed[
            Framed[
             
             Short[{"handwashing", "daily bathing in the morning", 
               "daily changing of underwear"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center], 58 -> Placed[
            Framed[
             Short[{"sexual abstinence", "condoms"}], Background -> 
             GrayLevel[1], FrameStyle -> GrayLevel[1], 
             FrameMargins -> {{0, 0}, {0, 0}}, RoundingRadius -> 2], Center], 
          84 -> Placed[
            Framed[
             Short[{"varicella vaccines"}], Background -> GrayLevel[1], 
             FrameStyle -> GrayLevel[1], FrameMargins -> {{0, 0}, {0, 0}}, 
             RoundingRadius -> 2], Center]}, 
        VertexShape -> {
         79 -> Null, 12 -> Null, 16 -> Null, 52 -> Null, 60 -> Null, 45 -> 
          Null, 8 -> Null, 2 -> Null, 103 -> Null, 89 -> Null, 15 -> Null, 33 -> 
          Null, 97 -> Null, 93 -> Null, 10 -> Null, 61 -> Null, 57 -> Null, 
          71 -> Null, 44 -> Null, 53 -> Null, 94 -> Null, 68 -> Null, 4 -> 
          Null, 90 -> Null, 14 -> Null, 7 -> Null, 29 -> Null, 6 -> Null, 5 -> 
          Null, 20 -> Null, 9 -> Null, 43 -> Null, 74 -> Null, 77 -> Null, 
          101 -> Null, 55 -> Null, 11 -> Null, 34 -> Null, 41 -> Null, 75 -> 
          Null, 72 -> Null, 18 -> Null, 58 -> Null, 66 -> Null, 67 -> Null, 
          24 -> Null, 78 -> Null, 100 -> Null, 32 -> Null, 40 -> Null, 64 -> 
          Null, 48 -> Null, 28 -> Null, 30 -> Null, 3 -> Null, 50 -> Null, 42 -> 
          Null, 102 -> Null, 96 -> Null, 22 -> Null, 39 -> Null, 26 -> Null, 
          65 -> Null, 91 -> Null, 85 -> Null, 19 -> Null, 17 -> Null, 54 -> 
          Null, 88 -> Null, 82 -> Null, 36 -> Null, 59 -> Null, 92 -> Null, 
          81 -> Null, 62 -> Null, 23 -> Null, 21 -> Null, 84 -> Null, 35 -> 
          Null, 13 -> Null, 98 -> Null, 63 -> Null, 56 -> Null, 37 -> Null, 
          25 -> Null, 51 -> Null, 76 -> Null, 73 -> Null, 1 -> Null, 46 -> 
          Null, 27 -> Null, 70 -> Null, 86 -> Null, 69 -> Null, 38 -> Null, 
          49 -> Null, 80 -> Null, 31 -> Null, 47 -> Null, 83 -> Null, 99 -> 
          Null, 87 -> Null, 95 -> Null}, VertexShapeFunction -> {"Name"}, 
        VertexSize -> {0}, 
        VertexWeight -> {
         14.99504433164001, 13.108460880847606`, 12.076925884577363`, 
          11.512338591357787`, 10.973194680498326`, 10.900098110639862`, 0, 
          10.900098110639862`, 10.900098110639862`, 10.900098110639862`, 
          10.900098110639862`, 10.552522397891016`, 10.552522397891016`, 
          10.552522397891016`, 9.941624974078758, 0, 9.629073478892154, 
          8.96551716762432, 8.11125951862209, 0, 8.11125951862209, 
          8.11125951862209, 8.11125951862209, 8.11125951862209, 
          8.11125951862209, 8.11125951862209, 8.11125951862209, 
          8.11125951862209, 8.11125951862209, 8.11125951862209, 
          8.11125951862209, 8.11125951862209, 8.11125951862209, 
          7.937064507881698, 7.893221160169167, 7.838253285104804, 
          7.775128909369833, 7.477697660081361, 7.477697660081361, 
          7.477697660081361, 7.421310801091638, 5.690442628106799, 
          5.10337084670781, 4.376333076210596, 0., 0, 0., 0, 0, 0., 0, 0., 0, 
          0, 4.519317623940267, 2.3255267619028697`, 0., 0, 0., 0, 0., 0, 0, 
          0, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}]]}, 
     TagBox[GraphicsGroupBox[{
        {GrayLevel[0.65], Opacity[0.7], LineBox[CompressedData["
1:eJx1l1tIVFEUhicHoknFypJMQ8cZp8nrqNBNxd1LUDAPWWaY5q0kMjIpC1Qs
L1FG2EOoYFCIQVkRFD0UKIglXgrM7hmYFhmVg1mhWBLFnn8RrcMS5mHzffzn
nL3XXntrLShJ32s2mUxFf38++J0u2FfqakxQJvyNtL2faepzqTL7s84bd1+k
cZ5o9Xzuz08U/eKBzrmfM/GqVo/H06S8MnDuB7vvWPp2x6nckNyG6oVTYt5O
cO73Dl4LauyJgT8t5lWCc/9wequtICZatcZu9rwsmhPzWsAl3/u8eYpz6/Nm
V/z51aoQnI8HMxtS52ZXqe+Xgh3NY2YDp7xJcO4fH67b0p/nUDX6fecbuA15
xLkfm1OR2dRrV4vaGzK6z1kMfAh5xLn/+m3pnsI4m2rT3+sn5rWCc/+Urg+r
SrptPulJDRDzEsC5v1+vbxjma7GYlw/O/QG9fqHqek5Klt/RJQZej7x2cO4f
hD+l5zvQwB16/oPVN3A+rtLzE6Q2vJuesrqXGTjlrQfn/rD+vkDUa5CYVwMu
+QNFt+rX2pcb+AH9fQHqITgf23W+RQXq9Q42cMojzv1XmptV9pdiq/vXCjEv
C5z74dqfTfPWS6iYR5z73vGnNE+J417Bk5Vi3sR//J9PfTH5ZpL/5OMIA3ci
z1uPYQbfBd+7vpEGrsBP6PVwGHwX8pduXHA2u9ku8l21HzI/+jgM/ii+76uu
N5vI1yGP+07M76PfUV1D0TaRByKP+7S+V/V+iTDwI+CTyOM+1Vddh/vHpi6r
gY+AUx73qf7z9H63ivwK8rhP+yul/JCzY3u4yCmP+7S/41EfEs9FHvep/4yj
3iSejDzuU3+7iHqXeBzyuP8G/XUH9pvEKY/71N8DsN8lTnncr8b50oN+I/EM
5HH/Kc63KvQ7ifsjj/uROF/XoN9K/AHyuH8M57sH/V7ilcjjPt0/fHHect4P
vg3fz32630zgviDxKJyn3Kf7Fd1/JF6J+wQf0/1O8olL70P+BdwXJJ6N85yP
Kd8p+KPgl3Ge8/kMwfPuY30lPob6534JnleB9ZW4L+qP+/R+iagXiXcjj4/P
4H5eLvjELXg+H9P/B5JPfKswH/S+LdjfEnei//wBiWakLQ==
          "]]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], InsetBox[
          PaneBox["1",
           Alignment->Center,
           ImageMargins->2], {17.58277043150386, 0.}, Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["2",
           Alignment->Center,
           ImageMargins->2], {16.783553593708227, 0.35502165353734166}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["3",
           Alignment->Center,
           ImageMargins->2], {15.984336755912599, 0.7100433070746849}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["4",
           Alignment->Center,
           ImageMargins->2], {15.18511991811697, 1.0650649606120266}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["5",
           Alignment->Center,
           ImageMargins->2], {14.38590308032134, 1.4200866141493698}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["6",
           Alignment->Center,
           ImageMargins->2], {13.586686242525706, 1.7751082676867116}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["7",
            Alignment->Center,
            ImageMargins->2], {14.38590308032134, 2.130129921224053}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"coordinated medical services\"\>", 
              ",", "\<\"careful handling of bushmeat\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {14.38590308032134, 2.130129921224053},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["8",
           Alignment->Center,
           ImageMargins->2], {12.787469404730077, 2.130129921224055}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["9",
           Alignment->Center,
           ImageMargins->2], {11.988252566934447, 2.4851515747613973}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["10",
           Alignment->Center,
           ImageMargins->2], {11.189035729138821, 2.840173228298739}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["11",
           Alignment->Center,
           ImageMargins->2], {10.389818891343191, 3.1951948818360805}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["12",
           Alignment->Center,
           ImageMargins->2], {9.590602053547558, 3.550216535373424}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["13",
           Alignment->Center,
           ImageMargins->2], {8.791385215751928, 3.9052381889107664}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["14",
           Alignment->Center,
           ImageMargins->2], {7.992168377956299, 4.26025984244811}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["15",
           Alignment->Center,
           ImageMargins->2], {7.1929515401606725, 4.615281495985452}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["16",
            Alignment->Center,
            ImageMargins->2], {7.992168377956302, 4.970303149522793}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"improved sanitation\"\>", 
              ",", "\<\"access to clean water\"\>", 
              ",", "\<\"cholera vaccines\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {7.992168377956302, 4.970303149522793},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["17",
           Alignment->Center,
           ImageMargins->2], {6.393734702365043, 4.970303149522794}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["18",
           Alignment->Center,
           ImageMargins->2], {5.59451786456941, 5.325324803060136}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["19",
           Alignment->Center,
           ImageMargins->2], {4.79530102677378, 5.680346456597479}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["20",
            Alignment->Center,
            ImageMargins->2], {5.59451786456941, 6.03536811013482}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{
            "{", "\<\"proper preparation and cooking of food\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {5.59451786456941, 6.03536811013482},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["21",
           Alignment->Center,
           ImageMargins->2], {3.99608418897815, 6.035368110134821}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["22",
           Alignment->Center,
           ImageMargins->2], {3.1968673511825205, 6.390389763672164}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["23",
           Alignment->Center,
           ImageMargins->2], {2.397650513386889, 6.745411417209507}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["24",
           Alignment->Center,
           ImageMargins->2], {1.5984336755912594, 7.100433070746848}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["25",
           Alignment->Center,
           ImageMargins->2], {0.7992168377956297, 7.455454724284192}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["26",
           Alignment->Center,
           ImageMargins->2], {0., 9.408073818739572}, Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["27",
           Alignment->Center,
           ImageMargins->2], {0.7992168377956315, 10.65064960612027}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["28",
           Alignment->Center,
           ImageMargins->2], {1.598433675591263, 10.295627952582926}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["29",
           Alignment->Center,
           ImageMargins->2], {2.3976505133868926, 9.940606299045584}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["30",
           Alignment->Center,
           ImageMargins->2], {3.1968673511825223, 9.585584645508241}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["31",
           Alignment->Center,
           ImageMargins->2], {3.99608418897815, 9.2305629919709}, Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["32",
           Alignment->Center,
           ImageMargins->2], {4.79530102677378, 8.875541338433557}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["33",
           Alignment->Center,
           ImageMargins->2], {5.59451786456941, 8.520519684896215}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["34",
           Alignment->Center,
           ImageMargins->2], {6.393734702365043, 8.165498031358872}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["35",
           Alignment->Center,
           ImageMargins->2], {7.1929515401606725, 7.810476377821529}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["36",
           Alignment->Center,
           ImageMargins->2], {7.992168377956302, 7.455454724284186}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["37",
           Alignment->Center,
           ImageMargins->2], {8.791385215751932, 7.100433070746844}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["38",
           Alignment->Center,
           ImageMargins->2], {9.590602053547562, 6.745411417209501}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["39",
           Alignment->Center,
           ImageMargins->2], {10.389818891343191, 6.39038976367216}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["40",
           Alignment->Center,
           ImageMargins->2], {11.189035729138824, 6.035368110134816}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["41",
           Alignment->Center,
           ImageMargins->2], {11.988252566934454, 5.680346456597475}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["42",
           Alignment->Center,
           ImageMargins->2], {12.787469404730084, 5.325324803060132}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["43",
           Alignment->Center,
           ImageMargins->2], {13.586686242525714, 4.970303149522789}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["44",
           Alignment->Center,
           ImageMargins->2], {14.38590308032134, 3.1951948818360782}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["45",
           Alignment->Center,
           ImageMargins->2], {15.18511991811697, 2.485151574761394}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["46",
            Alignment->Center,
            ImageMargins->2], {15.984336755912599, 2.130129921224053}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"handwashing\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {15.984336755912599, 2.130129921224053},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["47",
           Alignment->Center,
           ImageMargins->2], {15.984336755912599, 2.8401732282987364}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["48",
            Alignment->Center,
            ImageMargins->2], {16.783553593708227, 2.485151574761394}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"handwashing\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {16.783553593708227, 2.485151574761394},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["49",
            Alignment->Center,
            ImageMargins->2], {16.783553593708227, 3.1951948818360782}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"handwashing\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {16.783553593708227, 3.1951948818360782},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["50",
           Alignment->Center,
           ImageMargins->2], {15.18511991811697, 3.9052381889107624}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["51",
            Alignment->Center,
            ImageMargins->2], {15.984336755912599, 3.5502165353734205}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"avoiding infected people\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {15.984336755912599, 3.5502165353734205},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["52",
           Alignment->Center,
           ImageMargins->2], {15.984336755912599, 4.260259842448104}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["53",
            Alignment->Center,
            ImageMargins->2], {16.783553593708227, 3.9052381889107615}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"avoiding infected people\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {16.783553593708227, 3.9052381889107615},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["54",
            Alignment->Center,
            ImageMargins->2], {16.783553593708234, 4.615281495985446}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"avoiding infected people\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {16.783553593708234, 4.615281495985446},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["55",
           Alignment->Center,
           ImageMargins->2], {14.385903080321343, 6.745411417209499}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["56",
           Alignment->Center,
           ImageMargins->2], {15.185119918116973, 6.035368110134814}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], InsetBox[
          PaneBox["57",
           Alignment->Center,
           ImageMargins->2], {15.984336755912606, 5.680346456597472}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["58",
            Alignment->Center,
            ImageMargins->2], {16.783553593708234, 5.325324803060129}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             RowBox[{"\<\"sexual abstinence\"\>", ",", "\<\"condoms\"\>"}], 
             "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {16.783553593708234, 5.325324803060129},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["59",
           Alignment->Center,
           ImageMargins->2], {16.783553593708234, 6.035368110134813}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["60",
            Alignment->Center,
            ImageMargins->2], {17.582770431503867, 5.680346456597471}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             RowBox[{"\<\"sexual abstinence\"\>", ",", "\<\"condoms\"\>"}], 
             "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {17.582770431503867, 5.680346456597471},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["61",
           Alignment->Center,
           ImageMargins->2], {17.582770431503867, 6.390389763672155}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["62",
            Alignment->Center,
            ImageMargins->2], {18.381987269299493, 6.035368110134813}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             RowBox[{"\<\"condoms\"\>", ",", "\<\"sexual abstinence\"\>"}], 
             "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {18.381987269299493, 6.035368110134813},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["63",
            Alignment->Center,
            ImageMargins->2], {18.381987269299493, 6.745411417209497}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             RowBox[{"\<\"condoms\"\>", ",", "\<\"sexual abstinence\"\>"}], 
             "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {18.381987269299493, 6.745411417209497},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["64",
            Alignment->Center,
            ImageMargins->2], {15.984336755912606, 6.3903897636721565}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"sexual abstinence\"\>", ",", "\<\"vaccination\"\>", 
              ",", "\<\"condoms\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {15.984336755912606, 6.3903897636721565},
           BaseStyle->"Graphics"]}, InsetBox[
          PaneBox["65",
           Alignment->Center,
           ImageMargins->2], {15.185119918116973, 7.4554547242841815}, 
          Automatic, {0., 0.},
          BaseStyle->"Graphics"], {InsetBox[
           PaneBox["66",
            Alignment->Center,
            ImageMargins->2], {15.984336755912606, 7.10043307074684}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"vaccination\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {15.984336755912606, 7.10043307074684},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["67",
            Alignment->Center,
            ImageMargins->2], {15.984336755912606, 7.810476377821523}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"vaccination\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {15.984336755912606, 7.810476377821523},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["68",
            Alignment->Center,
            ImageMargins->2], {13.586686242525714, 5.680346456597473}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"decreasing mosquito bites\"\>", 
              ",", "\<\"condoms\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {13.586686242525714, 5.680346456597473},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["69",
            Alignment->Center,
            ImageMargins->2], {12.787469404730084, 6.035368110134815}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"avoiding infected people\"\>", 
              ",", "\<\"cleaning injuries\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {12.787469404730084, 6.035368110134815},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["70",
            Alignment->Center,
            ImageMargins->2], {11.988252566934454, 6.390389763672158}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             RowBox[{"\<\"wound care\"\>", ",", "\<\"handwashing\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {11.988252566934454, 6.390389763672158},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["71",
            Alignment->Center,
            ImageMargins->2], {11.189035729138824, 6.7454114172095005}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"wearing a face mask\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {11.189035729138824, 6.7454114172095005},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["72",
            Alignment->Center,
            ImageMargins->2], {10.389818891343191, 7.100433070746844}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"terminal room cleaning in hospital\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {10.389818891343191, 7.100433070746844},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["73",
            Alignment->Center,
            ImageMargins->2], {9.590602053547562, 7.455454724284186}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"access to clean water\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {9.590602053547562, 7.455454724284186},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["74",
            Alignment->Center,
            ImageMargins->2], {8.791385215751932, 7.810476377821528}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"vaccination\"\>", ",", "\<\"handwashing\"\>", 
              ",", "\<\"not smoking\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {8.791385215751932, 7.810476377821528},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["75",
            Alignment->Center,
            ImageMargins->2], {7.992168377956302, 8.16549803135887}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"dengue fever vaccines\"\>", 
              ",", "\<\"decreasing mosquito bites\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {7.992168377956302, 8.16549803135887},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["76",
            Alignment->Center,
            ImageMargins->2], {7.1929515401606725, 8.520519684896213}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             RowBox[{"\<\"HPV vaccines\"\>", ",", "\<\"condoms\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {7.1929515401606725, 8.520519684896213},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["77",
            Alignment->Center,
            ImageMargins->2], {6.393734702365043, 8.875541338433557}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"probiotics\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {6.393734702365043, 8.875541338433557},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["78",
            Alignment->Center,
            ImageMargins->2], {5.59451786456941, 9.230562991970897}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"fully cook meat\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {5.59451786456941, 9.230562991970897},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["79",
            Alignment->Center,
            ImageMargins->2], {4.7953010267737834, 9.585584645508241}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"mumps vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {4.7953010267737834, 9.585584645508241},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["80",
            Alignment->Center,
            ImageMargins->2], {3.9960841889781538, 9.940606299045582}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"hepatitis B vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {3.9960841889781538, 9.940606299045582},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["81",
            Alignment->Center,
            ImageMargins->2], {3.1968673511825223, 10.295627952582924}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"yellow fever vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {3.1968673511825223, 10.295627952582924},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["82",
            Alignment->Center,
            ImageMargins->2], {2.3976505133868926, 10.650649606120268}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"rubella vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {2.3976505133868926, 10.650649606120268},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["83",
            Alignment->Center,
            ImageMargins->2], {1.598433675591263, 11.005671259657609}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"measles vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {1.598433675591263, 11.005671259657609},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["84",
            Alignment->Center,
            ImageMargins->2], {0.7992168377956332, 11.360692913194953}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"varicella vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {0.7992168377956332, 11.360692913194953},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["85",
            Alignment->Center,
            ImageMargins->2], {1.5984336755912611, 7.810476377821533}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"smallpox vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {1.5984336755912611, 7.810476377821533},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["86",
            Alignment->Center,
            ImageMargins->2], {2.397650513386889, 7.455454724284191}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"tetanus vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {2.397650513386889, 7.455454724284191},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["87",
            Alignment->Center,
            ImageMargins->2], {3.1968673511825205, 7.100433070746848}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"pertussis vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {3.1968673511825205, 7.100433070746848},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["88",
            Alignment->Center,
            ImageMargins->2], {3.99608418897815, 6.745411417209505}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"diphtheria vaccines\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {3.99608418897815, 6.745411417209505},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["89",
            Alignment->Center,
            ImageMargins->2], {4.79530102677378, 6.390389763672164}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", "\<\"good maintenance of water systems\"\>", "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {4.79530102677378, 6.390389763672164},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["90",
            Alignment->Center,
            ImageMargins->2], {6.393734702365043, 5.680346456597478}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"decreasing mosquito bites\"\>", 
              ",", "\<\"insect repellent\"\>", 
              ",", "\<\"mosquito control\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {6.393734702365043, 5.680346456597478},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["91",
            Alignment->Center,
            ImageMargins->2], {7.1929515401606725, 5.325324803060135}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"rotavirus vaccination\"\>", 
              ",", "\<\"breastfeeding\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {7.1929515401606725, 5.325324803060135},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["92",
            Alignment->Center,
            ImageMargins->2], {8.791385215751932, 4.6152814959854505}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"not sharing personal items\"\>", 
              ",", "\<\"staying away from sick people\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {8.791385215751932, 4.6152814959854505},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["93",
            Alignment->Center,
            ImageMargins->2], {9.590602053547558, 4.260259842448108}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"daily bathing in the morning\"\>", 
              ",", "\<\"daily changing of underwear\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {9.590602053547558, 4.260259842448108},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["94",
            Alignment->Center,
            ImageMargins->2], {10.389818891343191, 3.9052381889107655}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"wearing a surgical mask\"\>", 
              ",", "\<\"influenza vaccines\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {10.389818891343191, 3.9052381889107655},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["95",
            Alignment->Center,
            ImageMargins->2], {11.189035729138821, 3.550216535373423}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             RowBox[{"\<\"prevention of tick bites\"\>", 
              ",", "\<\"doxycycline\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {11.189035729138821, 3.550216535373423},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["96",
            Alignment->Center,
            ImageMargins->2], {11.98825256693445, 3.1951948818360805}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"avoiding exposure\"\>", 
              ",", "\<\"antiviral medication\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {11.98825256693445, 3.1951948818360805},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["97",
            Alignment->Center,
            ImageMargins->2], {12.78746940473008, 2.840173228298739}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"proper food preparation\"\>", 
              ",", "\<\"no honey for children less than one\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {12.78746940473008, 2.840173228298739},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["98",
            Alignment->Center,
            ImageMargins->2], {13.586686242525706, 2.4851515747613955}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"using clean needles\"\>", 
              ",", "\<\"testing donated blood\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {13.586686242525706, 2.4851515747613955},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["99",
            Alignment->Center,
            ImageMargins->2], {15.18511991811697, 1.77510826768671}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"mosquito nets\"\>", ",", "\<\"insect repellent\"\>",
               ",", "\<\"mosquito control\"\>", ",", "\<\"medications\"\>"}], 
             "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {15.18511991811697, 1.77510826768671},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["100",
            Alignment->Center,
            ImageMargins->2], {15.984336755912599, 1.4200866141493682}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"handwashing\"\>", 
              ",", "\<\"drinking clean water\"\>", 
              ",", "\<\"proper disposal of human waste\"\>", 
              ",", "\<\"breastfeeding\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {15.984336755912599, 1.4200866141493682},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["101",
            Alignment->Center,
            ImageMargins->2], {16.783553593708227, 1.065064960612025}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"improved sanitation\"\>", 
              ",", "\<\"treating those with taeniasis\"\>", 
              ",", "\<\"cooking pork well\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {16.783553593708227, 1.065064960612025},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["102",
            Alignment->Center,
            ImageMargins->2], {17.58277043150386, 0.7100433070746833}, 
           Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"rabies vaccines\"\>", ",", "\<\"animal control\"\>",
               ",", "\<\"rabies immunoglobulin\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {17.58277043150386, 0.7100433070746833},
           BaseStyle->"Graphics"]}, {InsetBox[
           PaneBox["103",
            Alignment->Center,
            ImageMargins->2], {18.381987269299493, 0.}, Automatic, {0., 0.},
           BaseStyle->"Graphics"], InsetBox[
           FrameBox[
            RowBox[{"{", 
             
             RowBox[{"\<\"avoiding walking barefoot in public showers\"\>", 
              ",", "\<\"keeping toenails short\"\>", 
              ",", "\<\"wearing big enough shoes\"\>", 
              ",", "\<\"changing socks daily\"\>"}], "}"}],
            Background->GrayLevel[1],
            FrameMargins->{{0, 0}, {0, 0}},
            FrameStyle->GrayLevel[1],
            RoundingRadius->2,
            StripOnInput->False], {18.381987269299493, 0.},
           BaseStyle->"Graphics"]}}}],
      MouseAppearanceTag["NetworkGraphics"]],
     AllowKernelInitialization->False]],
   AlignmentPoint->Center,
   Axes->False,
   AxesLabel->None,
   AxesOrigin->Automatic,
   AxesStyle->{},
   Background->None,
   BaseStyle->{},
   BaselinePosition->Automatic,
   ContentSelectable->Automatic,
   DefaultBaseStyle->{
    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
   Epilog->{},
   FormatType->TraditionalForm,
   Frame->False,
   FrameLabel->None,
   FrameStyle->{},
   FrameTicks->None,
   FrameTicksStyle->{},
   GridLines->None,
   GridLinesStyle->{},
   ImageMargins->0.,
   ImagePadding->All,
   ImageSize->1500,
   LabelStyle->{},
   PlotLabel->None,
   PlotRange->All,
   PlotRangeClipping->False,
   PlotRangePadding->Automatic,
   PlotRegion->Automatic,
   Prolog->{},
   RotateLabel->True,
   Ticks->Automatic,
   TicksStyle->{}],
  StripOnInput->False,
  Magnification->0.8 Inherited]], "Output",
 CellChangeTimes->{{3.79839852847288*^9, 3.79839873868921*^9}, {
   3.798398937729662*^9, 3.798398960152152*^9}, 3.7983990646897717`*^9, 
   3.798560429675497*^9, 3.798561579837082*^9, 3.798561697442895*^9, 
   3.79873723760522*^9, 3.798737336544919*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"b64fc1ce-92ac-4fc0-890e-6d14867bb9d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"exposure", " ", "to", " ", 
    RowBox[{"onset", ".", " ", "note"}], " ", "that", " ", "data", " ", "is", 
    " ", "not", " ", "available", " ", "for", " ", "some", " ", "entities"}], 
   "  ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"infectDisExp", " ", "=", " ", 
   RowBox[{"DeleteMissing", "@", 
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", " ", "\[Rule]", " ", 
         RowBox[{"#", "[", 
          TemplateBox[{"\"exposure to disease onset\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Disease\"", ",", "\"ExposureToDiseaseOnset\""}], 
              "]"}], "\"EntityProperty[\\\"Disease\\\", \
\\\"ExposureToDiseaseOnset\\\"]\""},
           "EntityProperty"], "]"}]}], ")"}], "&"}], ",", " ", "infectDis"}], 
     "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.798393961114768*^9, 3.7983940074619503`*^9}, {
  3.798394104594261*^9, 3.7983941051797247`*^9}, {3.798500230352463*^9, 
  3.798500237638579*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"1b604b5c-29ec-40a0-b06f-7415c4d4b84c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"Ebola virus disease\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"EbolaVirusDisease\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"EbolaVirusDisease\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "21", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 21}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"cholera\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine001\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine001\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", 
         FractionBox["1", "12"], 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "5", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{
         Rational[1, 12], 5}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"salmonella infections\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine003\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine003\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", 
         FractionBox["1", "2"], 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "3", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{
         Rational[1, 2], 3}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"shigellosis\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine004\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine004\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "1", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "2", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{1, 2}], Selectable -> False], "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"botulism\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine005.1\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine005.1\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", 
         FractionBox["1", "2"], 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "3", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{
         Rational[1, 2], 3}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"diphtheria\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine032\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine032\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "5", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 5}], Selectable -> False], "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"streptococcal sore throat\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine034.0\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine034.0\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "1", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "3", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{1, 3}], Selectable -> False], "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"tetanus\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine037\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine037\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "3", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "21", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{3, 21}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"smallpox\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine050\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine050\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "7", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "21", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{7, 21}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"chicken pox\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine052\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine052\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "10", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "21", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{10, 21}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"genital herpes\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine054.1\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine054.1\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "12", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 12}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"measles\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine055\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine055\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "8", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "12", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{8, 12}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"rubella\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine056\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine056\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"14.`3.", "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"yellow fever\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine060\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine060\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "3", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "6", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{3, 6}], Selectable -> False], "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Dengue fever\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine061\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine061\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "3", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "14", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{3, 14}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"eastern equine encephalitis\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine062.2\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine062.2\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "4", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "10", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{4, 10}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"viral hepatitis B without hepatic coma\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine070.3\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine070.3\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", 
         FractionBox["72", "73"], 
         StyleBox["\"to\"", FontSize -> Inherited - 2], 
         FractionBox["432", "73"], "\[InvisibleSpace]", ")"}], 
       Interval[{
         Rational[72, 73], 
         Rational[432, 73]}], Selectable -> False], "\"mo\"", "months", 
      "\"Months\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"mumps\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine072\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine072\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "14", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "21", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{14, 21}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"hand, foot, and mouth disease\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine074.3\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine074.3\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "3", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "6", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{3, 6}], Selectable -> False], "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Condyloma acuminatum\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine078.11\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine078.11\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "1", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "8", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{1, 8}], Selectable -> False], "\"mo\"", "months", 
      "\"Months\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"unclassified diseases due to viruses and Chlamydiae\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine078.8\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine078.8\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "7", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "21", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{7, 21}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"severe acute respiratory syndrome\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine079.82\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine079.82\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "7", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 7}], Selectable -> False], "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"unspecified type of chlamydial infection co-occurring with other \
medical conditions\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine079.98\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine079.98\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "14", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "21", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{14, 21}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"rickettsioses\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine083\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine083\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "7", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "14", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{7, 14}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"malaria\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine084\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine084\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "10", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "15", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{10, 15}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"lyme disease\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine088.81\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine088.81\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"7.`3.", "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"enterobiasis\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine127.4\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine127.4\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "4", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "8", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{4, 8}], Selectable -> False], "\"wk\"", "weeks", "\"Weeks\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"scabies\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine133.0\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine133.0\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "6", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 6}], Selectable -> False], "\"wk\"", "weeks", "\"Weeks\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Legionnaires' disease\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine482.84\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine482.84\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "10", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 10}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"influenza\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine487\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine487\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"3.`2.", "\"days\"", "days", "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Middle East respiratory syndrome\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"MiddleEastRespiratorySyndrome\""}], 
        "]"}], "\"Entity[\\\"Disease\\\", \\\"MiddleEastRespiratorySyndrome\\\
\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "14", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 14}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"COVID-19\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"NovelCoronavirusDisease\\\"]\"", 
      "\"disease\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
      InterpretationBox[
       RowBox[{"(", "\[InvisibleSpace]", "2", 
         StyleBox["\"to\"", FontSize -> Inherited - 2], "14", 
         "\[InvisibleSpace]", ")"}], 
       Interval[{2, 14}], Selectable -> False], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.798394019611462*^9, 3.798394116769541*^9, 
  3.7985604523707943`*^9, 3.798561583034821*^9, 3.798561698375503*^9, 
  3.798737239736315*^9, 3.798737337424391*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"3e92cf16-a47a-47f6-9e42-d8db1e1c59eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "plot", " ", "can", " ", "be", " ", "inproved", " ", "with", " ", 
    "markers", " ", "but", " ", "NumberLinePlot", " ", 
    RowBox[{"doesn", "'"}], "t", " ", "support", " ", "this", " ", "option"}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Quiet", "@", 
   RowBox[{"NumberLinePlot", "[", 
    RowBox[{
     RowBox[{"List", "/@", 
      RowBox[{"Values", "[", "infectDisExp", "]"}]}], ",", " ", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Placed", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "infectDisExp"}], ",", " ", "Below"}], "]"}]}], 
     ",", " ", 
     RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", " ", 
     RowBox[{"PlotStyle", "\[Rule]", "110"}], ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1000", ",", "Automatic"}], "}"}]}], ",", " ", 
     RowBox[{"AspectRatio", "\[Rule]", 
      RowBox[{"1", "/", "3"}]}], ",", " ", 
     RowBox[{
     "PlotLabel", "\[Rule]", 
      "\"\<Basic reproduction rates of some infectious diseases\>\""}], ",", 
     " ", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", "\"\<Days\>\"", "}"}]}]}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.798395075195911*^9, 3.798395078845539*^9}, {
  3.798395136949851*^9, 3.7983951644534187`*^9}, {3.79839535839013*^9, 
  3.798395460092111*^9}, {3.798395617589529*^9, 3.798395621724492*^9}, {
  3.798399171887657*^9, 3.798399188883911*^9}, {3.7985002564912663`*^9, 
  3.798500283328348*^9}, {3.798560478451207*^9, 3.798560536543915*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"f85a093f-2e4b-43be-9428-193b4be0858c"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      RGBColor[0.24720000000000014`, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.3, 0.68, 0.88]], {{{{{
           PointBox[{2., 1}]}, {
           PointBox[{21., 1}]}, 
          LineBox[{{2, 1}, {21, 1}}]}}}}}, {
      RGBColor[0.6, 0.24, 0.4428931686004542], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.962492, 0.612461, 0.301114]], {{{{{
           PointBox[{0.08333333333333333, 2}]}, {
           PointBox[{5., 2}]}, 
          LineBox[
           NCache[{{
              Rational[1, 12], 2}, {5, 2}}, {{0.08333333333333333, 2}, {5, 
             2}}]]}}}}}, {
      RGBColor[0.6, 0.5470136627990908, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.659963, 0.445022, 0.850093]], {{{{{
           PointBox[{0.5, 3}]}, {
           PointBox[{3., 3}]}, 
          LineBox[
           NCache[{{
              Rational[1, 2], 3}, {3, 3}}, {{0.5, 3}, {3, 3}}]]}}}}}, {
      RGBColor[0.24, 0.6, 0.33692049419863584`], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.557756, 0.76, 0.304674]], {{{{{
           PointBox[{1., 4}]}, {
           PointBox[{2., 4}]}, 
          LineBox[{{1, 4}, {2, 4}}]}}}}}, {
      RGBColor[0.24, 0.3531726744018182, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.889907, 0.406019, 0.450155]], {{{{{
           PointBox[{0.5, 5}]}, {
           PointBox[{3., 5}]}, 
          LineBox[
           NCache[{{
              Rational[1, 2], 5}, {3, 5}}, {{0.5, 5}, {3, 5}}]]}}}}}, {
      RGBColor[0.6, 0.24, 0.5632658430022722], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.462306, 0.562616, 1.]], {{{{{
           PointBox[{2., 6}]}, {
           PointBox[{5., 6}]}, 
          LineBox[{{2, 6}, {5, 6}}]}}}}}, {
      RGBColor[0.6, 0.42664098839727194`, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.994953, 0.774767, 0.213626]], {{{{{
           PointBox[{1., 7}]}, {
           PointBox[{3., 7}]}, 
          LineBox[{{1, 7}, {3, 7}}]}}}}}, {
      RGBColor[0.2634521802031821, 0.6, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.741359, 0.424, 0.690217]], {{{{{
           PointBox[{3., 8}]}, {
           PointBox[{21., 8}]}, 
          LineBox[{{3, 8}, {21, 8}}]}}}}}, {
      RGBColor[0.24, 0.47354534880363613`, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363]], {{{{{
           PointBox[{7., 9}]}, {
           PointBox[{21., 9}]}, 
          LineBox[{{7, 9}, {21, 9}}]}}}}}, {
      RGBColor[0.5163614825959097, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[
       0.9323990673495075, 0.4619953367475375, 0.37148214509613275`]], {{{{{
           PointBox[{10., 10}]}, {
           PointBox[{21., 10}]}, 
          LineBox[{{10, 10}, {21, 10}}]}}}}}, {
      RGBColor[0.6, 0.3062683139954558, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.5744565164973487, 0.49532609010159073`, 1.]], {{{{{
           PointBox[{2., 11}]}, {
           PointBox[{12., 11}]}, 
          LineBox[{{2, 11}, {12, 11}}]}}}}}, {
      RGBColor[0.3838248546049982, 0.6, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.8435481467551109, 0.7826164607505679, 0.2]], {{{{{
           PointBox[{8., 12}]}, {
           PointBox[{12., 12}]}, 
          LineBox[{{8, 12}, {12, 12}}]}}}}}, {
      RGBColor[0.24, 0.5939180232054561, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.7996770155184237, 0.424, 0.6004968992024251]], {{
        PointBox[{14., 13}]}}}, {
      RGBColor[0.39598880819409377`, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[
       0.3118400557467805, 0.6705279554025756, 0.8942080668961365]], {{{{{
           PointBox[{3., 14}]}, {
           PointBox[{6., 14}]}, 
          LineBox[{{3, 14}, {6, 14}}]}}}}}, {
      RGBColor[0.6, 0.24, 0.2941043604063603], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[
       0.9648602470993184, 0.6243012354965923, 0.29487733283184014`]], {{{{{
           PointBox[{3., 15}]}, {
           PointBox[{14., 15}]}, 
          LineBox[{{3, 15}, {14, 15}}]}}}}}, {
      RGBColor[0.5041975290068142, 0.6, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.3, 0.68, 0.88]], {{{{{
           PointBox[{4., 16}]}, {
           PointBox[{10., 16}]}, 
          LineBox[{{4, 16}, {10, 16}}]}}}}}, {
      RGBColor[0.24, 0.6, 0.48570930239273163`], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.962492, 0.612461, 0.301114]], {{{{{
           PointBox[{30., 17}]}, {
           PointBox[{180., 17}]}, 
          LineBox[{{30, 17}, {180, 17}}]}}}}}, {
      RGBColor[0.2756161337922776, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.659963, 0.445022, 0.850093]], {{{{{
           PointBox[{14., 18}]}, {
           PointBox[{21., 18}]}, 
          LineBox[{{14, 18}, {21, 18}}]}}}}}, {
      RGBColor[0.6, 0.24, 0.4144770348081764], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.557756, 0.76, 0.304674]], {{{{{
           PointBox[{3., 19}]}, {
           PointBox[{6., 19}]}, 
          LineBox[{{3, 19}, {6, 19}}]}}}}}, {
      RGBColor[0.6, 0.5754297965913696, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.889907, 0.406019, 0.450155]], {{{{{
           PointBox[{30.416666666666668`, 20}]}, {
           PointBox[{243.33333333333334`, 20}]}, 
          LineBox[
           NCache[{{
              Rational[365, 12], 20}, {
              Rational[730, 3], 20}}, {{30.416666666666668`, 20}, {
             243.33333333333334`, 20}}]]}}}}}, {
      RGBColor[0.24, 0.6, 0.36533662799091565`], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.462306, 0.562616, 1.]], {{{{{
           PointBox[{7., 21}]}, {
           PointBox[{21., 21}]}, 
          LineBox[{{7, 21}, {21, 21}}]}}}}}, {
      RGBColor[0.24, 0.32475654060953846`, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.994953, 0.774767, 0.213626]], {{{{{
           PointBox[{2., 22}]}, {
           PointBox[{7., 22}]}, 
          LineBox[{{2, 22}, {7, 22}}]}}}}}, {
      RGBColor[0.6, 0.24, 0.5348497092099924], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.741359, 0.424, 0.690217]], {{{{{
           PointBox[{14., 23}]}, {
           PointBox[{21., 23}]}, 
          LineBox[{{14, 23}, {21, 23}}]}}}}}, {
      RGBColor[0.6, 0.45505712218955346`, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363]], {{{{{
           PointBox[{7., 24}]}, {
           PointBox[{14., 24}]}, 
          LineBox[{{7, 24}, {14, 24}}]}}}}}, {
      RGBColor[0.24, 0.6, 0.24496395358909184`], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[
       0.9323990673495075, 0.4619953367475375, 0.37148214509613275`]], {{{{{
           PointBox[{10., 25}]}, {
           PointBox[{15., 25}]}, 
          LineBox[{{10, 25}, {15, 25}}]}}}}}, {
      RGBColor[0.24, 0.4451292150113622, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.5744565164973487, 0.49532609010159073`, 1.]], {{
        PointBox[{7., 26}]}}}, {
      RGBColor[0.5447776163881838, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.8435481467551109, 0.7826164607505679, 0.2]], {{{{{
           PointBox[{28., 27}]}, {
           PointBox[{56., 27}]}, 
          LineBox[{{28, 27}, {56, 27}}]}}}}}, {
      RGBColor[0.6, 0.3346844477877375, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.7996770155184237, 0.424, 0.6004968992024251]], {{{{{
           PointBox[{14., 28}]}, {
           PointBox[{42., 28}]}, 
          LineBox[{{14, 28}, {42, 28}}]}}}}}, {
      RGBColor[0.35540872081272423`, 0.6, 0.24], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[
       0.3118400557467805, 0.6705279554025756, 0.8942080668961365]], {{{{{
           PointBox[{2., 29}]}, {
           PointBox[{10., 29}]}, 
          LineBox[{{2, 29}, {10, 29}}]}}}}}, {
      RGBColor[0.24, 0.5655018894131706, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[
       0.9648602470993184, 0.6243012354965923, 0.29487733283184014`]], {{
        PointBox[{3., 30}]}}}, {
      RGBColor[0.42440494198636775`, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.3, 0.68, 0.88]], {{{{{
           PointBox[{2., 31}]}, {
           PointBox[{14., 31}]}, 
          LineBox[{{2, 31}, {14, 31}}]}}}}}, {
      RGBColor[0.6, 0.24, 0.26568822661407865`], 
      PointSize[Medium], 
      Directive[
       AbsoluteThickness[1.6], 
       RGBColor[0.962492, 0.612461, 0.301114]], {{{{{
           PointBox[{2., 32}]}, {
           PointBox[{14., 32}]}, 
          LineBox[{{2, 32}, {14, 32}}]}}}}}}, AxesLabel -> {
      FormBox["\"Days\"", TraditionalForm]}, Ticks -> {Automatic, Automatic}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    PlotRange -> {{0.08333333333333331, 243.33333333333337`}, {0, 32}}, 
    PlotRangePadding -> {{
       Scaled[0.1], 
       Scaled[0.1]}, {0, 1}}, AspectRatio -> NCache[
      Rational[1, 3], 0.3333333333333333], 
    AxesOrigin -> {Automatic, Automatic}, Axes -> {True, False}, ImagePadding -> 
    All, {AspectRatio -> NCache[
       Rational[1, 3], 0.3333333333333333], AxesLabel -> {
       FormBox["\"Days\"", TraditionalForm]}, ImageSize -> {1000, Automatic}, 
     PlotLabel -> 
     FormBox["\"Basic reproduction rates of some infectious diseases\"", 
       TraditionalForm]}], 
   FormBox[
    FormBox[
     TemplateBox[{
       TemplateBox[{"\"Ebola virus disease\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"EbolaVirusDisease\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"EbolaVirusDisease\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"cholera\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine001\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine001\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"salmonella infections\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine003\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine003\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"shigellosis\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine004\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine004\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"botulism\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine005.1\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine005.1\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"diphtheria\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine032\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine032\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"streptococcal sore throat\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine034.0\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine034.0\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"tetanus\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine037\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine037\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"smallpox\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine050\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine050\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"chicken pox\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine052\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine052\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"genital herpes\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine054.1\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine054.1\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"measles\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine055\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine055\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"rubella\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine056\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine056\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"yellow fever\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine060\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine060\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"Dengue fever\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine061\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine061\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"eastern equine encephalitis\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine062.2\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine062.2\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"viral hepatitis B without hepatic coma\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine070.3\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine070.3\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"mumps\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine072\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine072\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"hand, foot, and mouth disease\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine074.3\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine074.3\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"Condyloma acuminatum\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine078.11\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine078.11\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"unclassified diseases due to viruses and Chlamydiae\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine078.8\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine078.8\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"severe acute respiratory syndrome\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine079.82\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine079.82\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{
        "\"unspecified type of chlamydial infection co-occurring with other \
medical conditions\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine079.98\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine079.98\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"rickettsioses\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine083\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine083\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"malaria\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine084\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine084\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"lyme disease\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine088.81\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine088.81\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"enterobiasis\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine127.4\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine127.4\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"scabies\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine133.0\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine133.0\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"Legionnaires' disease\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine482.84\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine482.84\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"influenza\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine487\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine487\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"Middle East respiratory syndrome\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"MiddleEastRespiratorySyndrome\""}], 
           "]"}], "\"Entity[\\\"Disease\\\", \
\\\"MiddleEastRespiratorySyndrome\\\"]\""}, "EntityTraditionalFramed"], 
       TemplateBox[{"\"COVID-19\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], "]"}],
          "\"Entity[\\\"Disease\\\", \\\"NovelCoronavirusDisease\\\"]\""}, 
        "EntityTraditionalFramed"]}, "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.3, 0.68, 0.88]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.3, 0.68, 0.88]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.962492, 0.612461, 0.301114]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.962492, 0.612461, 0.301114]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.659963, 0.445022, 0.850093]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.659963, 0.445022, 0.850093]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.557756, 0.76, 0.304674]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.557756, 0.76, 0.304674]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.889907, 0.406019, 0.450155]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.889907, 0.406019, 0.450155]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.462306, 0.562616, 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.462306, 0.562616, 1.]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.994953, 0.774767, 0.213626]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.994953, 0.774767, 0.213626]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.741359, 0.424, 0.690217]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.741359, 0.424, 0.690217]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.31102485460500007`, 0.76, 0.6186956395936363]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.31102485460500007`, 0.76, 0.6186956395936363]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.5744565164973487, 0.49532609010159073`, 1.]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #11}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.8435481467551109, 0.7826164607505679, 0.2]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #12, 
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #13, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #14}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #15, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.3, 0.68, 0.88]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.3, 0.68, 0.88]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #16, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.962492, 0.612461, 0.301114]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.962492, 0.612461, 0.301114]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #17}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.659963, 0.445022, 0.850093]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.659963, 0.445022, 0.850093]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #18, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.557756, 0.76, 0.304674]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.557756, 0.76, 0.304674]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #19, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.889907, 0.406019, 0.450155]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.889907, 0.406019, 0.450155]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #20}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.462306, 0.562616, 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.462306, 0.562616, 1.]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #21, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.994953, 0.774767, 0.213626]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.994953, 0.774767, 0.213626]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #22}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.741359, 0.424, 0.690217]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.741359, 0.424, 0.690217]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #23, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.31102485460500007`, 0.76, 0.6186956395936363]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.31102485460500007`, 0.76, 0.6186956395936363]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #24, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #25}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #26, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.8435481467551109, 0.7826164607505679, 0.2]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #27, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.7996770155184237, 0.424, 0.6004968992024251]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #28}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #29, 
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #30}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.3, 0.68, 0.88]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.3, 0.68, 0.88]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #31, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.962492, 0.612461, 0.301114]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.962492, 0.612461, 0.301114]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #32}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{None}}}, 
             GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
             GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{1}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.3, 0.68, 0.88], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.2, 0.45333333333333337`, 0.5866666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.3`", ",", "0.68`", ",", "0.88`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.3, 0.68, 0.88]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.3, 0.68, 0.88], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.962492, 0.612461, 0.301114], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6416613333333334, 0.40830733333333336`, 
                    0.20074266666666668`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.962492`", ",", "0.612461`", ",", "0.301114`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.962492, 0.612461, 0.301114]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.962492, 0.612461, 0.301114], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.659963, 0.445022, 0.850093], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.43997533333333333`, 0.29668133333333335`, 
                    0.5667286666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.659963`", ",", "0.445022`", ",", "0.850093`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.659963, 0.445022, 0.850093]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.659963, 0.445022, 0.850093], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.557756, 0.76, 0.304674], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37183733333333335`, 0.5066666666666667, 
                    0.20311600000000002`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.557756`", ",", "0.76`", ",", "0.304674`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.557756, 0.76, 0.304674]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.557756, 0.76, 0.304674], Editable -> False, 
                    Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.889907, 0.406019, 0.450155], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5932713333333334, 0.2706793333333334, 
                    0.3001033333333334], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.889907`", ",", "0.406019`", ",", "0.450155`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.889907, 0.406019, 0.450155]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.889907, 0.406019, 0.450155], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.462306, 0.562616, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.30820400000000003`, 0.3750773333333334, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.462306`", ",", "0.562616`", ",", "1.`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.462306, 0.562616, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.462306, 0.562616, 1.], Editable -> False, 
                    Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.994953, 0.774767, 0.213626], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6633020000000001, 0.5165113333333333, 
                    0.14241733333333334`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.994953`", ",", "0.774767`", ",", "0.213626`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.994953, 0.774767, 0.213626]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.994953, 0.774767, 0.213626], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.741359, 0.424, 0.690217], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.49423933333333336`, 0.2826666666666667, 
                    0.46014466666666665`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.741359`", ",", "0.424`", ",", "0.690217`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.741359, 0.424, 0.690217]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.741359, 0.424, 0.690217], Editable -> False, 
                    Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.20734990307000006`, 0.5066666666666667, 
                    0.4124637597290909], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.31102485460500007`", ",", "0.76`", ",", 
                    "0.6186956395936363`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.621599378233005, 0.30799689116502504`, 
                    0.24765476339742185`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.9323990673495075`", ",", "0.4619953367475375`", ",", 
                    "0.37148214509613275`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.3829710109982325, 0.3302173934010605, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.5744565164973487`", ",", "0.49532609010159073`", ",", 
                    "1.`"}], "]"}], NumberMarks -> False]], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.562365431170074, 0.5217443071670453, 
                    0.13333333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.8435481467551109`", ",", "0.7826164607505679`", ",", 
                    "0.2`"}], "]"}], NumberMarks -> False]], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5331180103456159, 0.2826666666666667, 
                    0.40033126613495007`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.7996770155184237`", ",", "0.424`", ",", 
                    "0.6004968992024251`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.20789337049785367`, 0.4470186369350504, 
                    0.596138711264091], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.3118400557467805`", ",", "0.6705279554025756`", ",", 
                    "0.8942080668961365`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6432401647328789, 0.4162008236643949, 
                    0.1965848885545601], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.9648602470993184`", ",", "0.6243012354965923`", ",", 
                    "0.29487733283184014`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.3, 0.68, 0.88], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.2, 0.45333333333333337`, 0.5866666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.3`", ",", "0.68`", ",", "0.88`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.3, 0.68, 0.88]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.3, 0.68, 0.88], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.962492, 0.612461, 0.301114], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6416613333333334, 0.40830733333333336`, 
                    0.20074266666666668`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.962492`", ",", "0.612461`", ",", "0.301114`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.962492, 0.612461, 0.301114]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.962492, 0.612461, 0.301114], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.659963, 0.445022, 0.850093], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.43997533333333333`, 0.29668133333333335`, 
                    0.5667286666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.659963`", ",", "0.445022`", ",", "0.850093`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.659963, 0.445022, 0.850093]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.659963, 0.445022, 0.850093], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.557756, 0.76, 0.304674], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37183733333333335`, 0.5066666666666667, 
                    0.20311600000000002`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.557756`", ",", "0.76`", ",", "0.304674`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.557756, 0.76, 0.304674]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.557756, 0.76, 0.304674], Editable -> False, 
                    Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.889907, 0.406019, 0.450155], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5932713333333334, 0.2706793333333334, 
                    0.3001033333333334], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.889907`", ",", "0.406019`", ",", "0.450155`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.889907, 0.406019, 0.450155]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.889907, 0.406019, 0.450155], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.462306, 0.562616, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.30820400000000003`, 0.3750773333333334, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.462306`", ",", "0.562616`", ",", "1.`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.462306, 0.562616, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.462306, 0.562616, 1.], Editable -> False, 
                    Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.994953, 0.774767, 0.213626], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6633020000000001, 0.5165113333333333, 
                    0.14241733333333334`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.994953`", ",", "0.774767`", ",", "0.213626`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.994953, 0.774767, 0.213626]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.994953, 0.774767, 0.213626], Editable -> False,
                     Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.741359, 0.424, 0.690217], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.49423933333333336`, 0.2826666666666667, 
                    0.46014466666666665`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.741359`", ",", "0.424`", ",", "0.690217`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.741359, 0.424, 0.690217]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.741359, 0.424, 0.690217], Editable -> False, 
                    Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.20734990307000006`, 0.5066666666666667, 
                    0.4124637597290909], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.31102485460500007`", ",", "0.76`", ",", 
                    "0.6186956395936363`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.31102485460500007`, 0.76, 0.6186956395936363], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.621599378233005, 0.30799689116502504`, 
                    0.24765476339742185`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.9323990673495075`", ",", "0.4619953367475375`", ",", 
                    "0.37148214509613275`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9323990673495075, 0.4619953367475375, 
                    0.37148214509613275`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.3829710109982325, 0.3302173934010605, 
                    0.6666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.5744565164973487`", ",", "0.49532609010159073`", ",", 
                    "1.`"}], "]"}], NumberMarks -> False]], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.5744565164973487, 0.49532609010159073`, 1.], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.562365431170074, 0.5217443071670453, 
                    0.13333333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.8435481467551109`", ",", "0.7826164607505679`", ",", 
                    "0.2`"}], "]"}], NumberMarks -> False]], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.8435481467551109, 0.7826164607505679, 0.2], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5331180103456159, 0.2826666666666667, 
                    0.40033126613495007`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.7996770155184237`", ",", "0.424`", ",", 
                    "0.6004968992024251`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.7996770155184237, 0.424, 0.6004968992024251], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.20789337049785367`, 0.4470186369350504, 
                    0.596138711264091], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.3118400557467805`", ",", "0.6705279554025756`", ",", 
                    "0.8942080668961365`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.3118400557467805, 0.6705279554025756, 
                    0.8942080668961365], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6432401647328789, 0.4162008236643949, 
                    0.1965848885545601], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.9648602470993184`", ",", "0.6243012354965923`", ",", 
                    "0.29487733283184014`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9648602470993184, 0.6243012354965923, 
                    0.29487733283184014`], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.3, 0.68, 0.88], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.2, 0.45333333333333337`, 0.5866666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.3`", ",", "0.68`", ",", "0.88`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.3, 0.68, 0.88]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.3, 0.68, 0.88], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.962492, 0.612461, 0.301114], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6416613333333334, 0.40830733333333336`, 
                    0.20074266666666668`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.962492`", ",", "0.612461`", ",", "0.301114`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.962492, 0.612461, 0.301114]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.962492, 0.612461, 0.301114], Editable -> False,
                     Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, ",", #13, 
               ",", #14, ",", #15, ",", #16, ",", #17, ",", #18, ",", #19, 
               ",", #20, ",", #21, ",", #22, ",", #23, ",", #24, ",", #25, 
               ",", #26, ",", #27, ",", #28, ",", #29, ",", #30, ",", #31, 
               ",", #32}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True", ",", "True", ",", "False", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "False", ",", "True", ",", 
                 "True", ",", "True", ",", "False", ",", "True", ",", 
                 "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.798395076064299*^9, 3.798395079376553*^9}, {
   3.798395128190136*^9, 3.798395164876583*^9}, {3.7983953625736*^9, 
   3.79839545156245*^9}, 3.798395622144245*^9, 3.7983991937451973`*^9, 
   3.798560457882296*^9, {3.7985605195123787`*^9, 3.798560537320117*^9}, 
   3.798561583701529*^9, 3.798561699007666*^9, 3.798737240237474*^9, 
   3.798737337923527*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"699d256f-6f43-4aa6-b76f-d4a01996c1e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"TimelinePlot", " ", 
    RowBox[{"can", "'"}], "t", " ", "interpret", " ", "time", " ", 
    "interval"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"TimelinePlot", "[", 
   RowBox[{
    RowBox[{"Association", "@", "infectDisExp"}], ",", " ", 
    RowBox[{"ImageSize", "\[Rule]", "1000"}], ",", " ", 
    RowBox[{"AspectRatio", "\[Rule]", 
     RowBox[{"1", "/", "GoldenRatio"}]}], ",", " ", 
    RowBox[{"PlotLayout", "\[Rule]", "\"\<Stacked\>\""}], ",", " ", 
    RowBox[{
    "PlotLabel", "\[Rule]", 
     "\"\<Exposure to disease onset time of some infectious diseases\>\""}], 
    ",", " ", 
    RowBox[{"PlotTheme", "\[Rule]", "\"\<Business\>\""}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.798394845159384*^9, 3.798394895248917*^9}, {
  3.7983949410470943`*^9, 3.798394946355319*^9}, {3.798395020181863*^9, 
  3.79839502692104*^9}, {3.79839550099052*^9, 3.798395541866459*^9}, {
  3.798399197992979*^9, 3.798399211067357*^9}, {3.798500306859037*^9, 
  3.7985003099941387`*^9}, {3.798500376993495*^9, 3.798500381598816*^9}, {
  3.798560541793898*^9, 3.798560547501525*^9}, {3.798560824361112*^9, 
  3.798560844793458*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"81e31c0f-096e-4f0b-83fc-a4405b47ee43"],

Cell[BoxData[
 GraphicsBox[{
   {AbsolutePointSize[0], Opacity[0], 
    PointBox[NCache[{{Rational[1, 12], 1}, {21, Rational[1801, 20]}}, {{
       0.08333333333333333, 1}, {21, 90.05}}]], 
    PointBox[NCache[{{Rational[1, 12], Rational[-1, 2]}, {21, 0}}, {{
       0.08333333333333333, -0.5}, {21, 0}}]]}, {}, {
    {PointSize[0], Opacity[0], 
     PointBox[NCache[{{-1.3495046301369866`, 1}, {
        21, Rational[1791, 20]}}, {{-1.3495046301369866`, 1}, {
        21, 89.55}}]]}, {
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 8}, {14, 8}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 8}], 
                    Offset[{0, -1}, {14, 8}]}, {
                    Offset[{0, 1}, {2, 8}], 
                    Offset[{0, 1}, {14, 8}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 8}, {14, 8}}]}, 
                   PointBox[{{2, 8}, {14, 8}}], 
                   LineBox[{{2, 8}, {14, 8}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 8}, {14, 8}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[1743, 20]}, 
                 Offset[{0, 3}, {2, 8}]}, {{2, 87.15}, 
                 Offset[{0, 3}, {2, 8}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[1743, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[1743, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[1743, 20]}]}, {
                 Offset[{0, -3.2}, {2, 87.15}], 
                 Offset[{3.2, 1.5}, {2, 87.15}], 
                 Offset[{-3.2, 1.5}, {2, 87.15}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"COVID-19\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], 
                    "]"}], "\"Entity[\\\"Disease\\\", \
\\\"NovelCoronavirusDisease\\\"]\""}, "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[1743, 20]}], 
                Offset[{0, 0}, {2, 87.15}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{1.068037, 
                 Rational[1743, 20]}, {1.068037, 87.15}], 
               NCache[{2.931963, 
                 Rational[1781, 20]}, {2.931963, 89.05}]]}}}},
          
          ImageSizeCache->{{129.49098500488958`, 
           677.989461628233}, {-295.77917945160175`, 259.989461628233}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:14\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "14.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 14.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 9}, {14, 9}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 9}], 
                    Offset[{0, -1}, {14, 9}]}, {
                    Offset[{0, 1}, {2, 9}], 
                    Offset[{0, 1}, {14, 9}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 9}, {14, 9}}]}, 
                   PointBox[{{2, 9}, {14, 9}}], 
                   LineBox[{{2, 9}, {14, 9}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 9}, {14, 9}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[337, 4]}, 
                 Offset[{0, 3}, {2, 9}]}, {{2, 84.25}, 
                 Offset[{0, 3}, {2, 9}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[337, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[337, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[337, 4]}]}, {
                 Offset[{0, -3.2}, {2, 84.25}], 
                 Offset[{3.2, 1.5}, {2, 84.25}], 
                 Offset[{-3.2, 1.5}, {2, 84.25}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"Middle East respiratory syndrome\"", 
                    RowBox[{"Entity", "[", 
                    
                    RowBox[{
                    "\"Disease\"", ",", "\"MiddleEastRespiratorySyndrome\""}],
                     "]"}], 
                    "\"Entity[\\\"Disease\\\", \
\\\"MiddleEastRespiratorySyndrome\\\"]\""}, "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[337, 4]}], 
                Offset[{0, 0}, {2, 84.25}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-0.14705400000000024`, 
                 Rational[337, 4]}, {-0.14705400000000024`, 84.25}], 
               NCache[{4.147054000000001, 
                 Rational[1723, 20]}, {4.147054000000001, 86.15}]]}}}},
          
          ImageSizeCache->{{78.70460094707688, 
           677.989461628233}, {-276.9087933135901, 252.98946162823302`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:14\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "14.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 14.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               LineBox[{{3., 16}, {3., 16}}]}}, {{}, {{{{}, {{{
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{3., 16}]}, 
                   PointBox[{3., 16}]}}, {}, {}}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{3.`2., 
                  Rational[1627, 20]}, 
                 Offset[{0, 0}, {3.`2., 16}]}, {{3., 81.35}, 
                 Offset[{0, 0}, {3., 16}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {3.`2., 
                   Rational[1627, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {3.`2., 
                   Rational[1627, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {3.`2., 
                   Rational[1627, 20]}]}, {
                 Offset[{0, -3.2}, {3., 81.35}], 
                 Offset[{3.2, 1.5}, {3., 81.35}], 
                 Offset[{-3.2, 1.5}, {3., 81.35}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"influenza\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine487\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine487\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {3.`2., 
                  Rational[1627, 20]}], 
                Offset[{0, 0}, {3., 81.35}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{2.138819, 
                 Rational[1627, 20]}, {2.138819, 81.35}], 
               NCache[{3.861181, 
                 Rational[333, 4]}, {3.861181, 83.25}]]}}}},
          
          ImageSizeCache->{{174.23523939695082`, 
           254.22370611967565`}, {-258.0489455473454, 207.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`2."}], "}"}], ",", "\"Instant\"", ",", 
                   "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{1900, 1, 1, 0, 0, 3.`2.}, "Instant", "Gregorian", 
             1., {"DateTimeShort"}]}}, Alignment -> Right], {}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 10}, {10, 10}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 10}], 
                    Offset[{0, -1}, {10, 10}]}, {
                    Offset[{0, 1}, {2, 10}], 
                    Offset[{0, 1}, {10, 10}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 10}, {10, 10}}]}, 
                   PointBox[{{2, 10}, {10, 10}}], 
                   LineBox[{{2, 10}, {10, 10}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 10}, {10, 10}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[1569, 20]}, 
                 Offset[{0, 3}, {2, 10}]}, {{2, 78.45}, 
                 Offset[{0, 3}, {2, 10}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[1569, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[1569, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[1569, 20]}]}, {
                 Offset[{0, -3.2}, {2, 78.45}], 
                 Offset[{3.2, 1.5}, {2, 78.45}], 
                 Offset[{-3.2, 1.5}, {2, 78.45}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"Legionnaires' disease\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine482.84\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine482.84\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[1569, 20]}], 
                Offset[{0, 0}, {2, 78.45}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{0.4781869999999997, 
                 Rational[1569, 20]}, {0.4781869999999997, 78.45}], 
               NCache[{3.5218130000000003`, 
                 Rational[1607, 20]}, {3.5218130000000003`, 80.35}]]}}}},
          
          ImageSizeCache->{{105.02285100895834`, 
           510.8040111300804}, {-238.98257053941427`, 246.80401113008043`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:10\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "10.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 10.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 11}, {6, 11}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 11}], 
                    Offset[{0, -1}, {6, 11}]}, {
                    Offset[{0, 1}, {2, 11}], 
                    Offset[{0, 1}, {6, 11}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 11}, {6, 11}}]}, 
                   PointBox[{{2, 11}, {6, 11}}], 
                   LineBox[{{2, 11}, {6, 11}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 11}, {6, 11}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[1511, 20]}, 
                 Offset[{0, 3}, {2, 11}]}, {{2, 75.55}, 
                 Offset[{0, 3}, {2, 11}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[1511, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[1511, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[1511, 20]}]}, {
                 Offset[{0, -3.2}, {2, 75.55}], 
                 Offset[{3.2, 1.5}, {2, 75.55}], 
                 Offset[{-3.2, 1.5}, {2, 75.55}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"scabies\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine133.0\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine133.0\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[1511, 20]}], 
                Offset[{0, 0}, {2, 75.55}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{1.209601, 
                 Rational[1511, 20]}, {1.209601, 75.55}], 
               NCache[{2.790399, 
                 Rational[1549, 20]}, {2.790399, 77.45}]]}}}},
          
          ImageSizeCache->{{135.77874627977502`, 
           343.6185606319277}, {-219.9267339032499, 239.61856063192772`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:06\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "6.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 6.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 12}, {7, 12}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 12}], 
                    Offset[{0, -1}, {7, 12}]}, {
                    Offset[{0, 1}, {2, 12}], 
                    Offset[{0, 1}, {7, 12}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 12}, {7, 12}}]}, 
                   PointBox[{{2, 12}, {7, 12}}], 
                   LineBox[{{2, 12}, {7, 12}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 12}, {7, 12}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[1453, 20]}, 
                 Offset[{0, 3}, {2, 12}]}, {{2, 72.65}, 
                 Offset[{0, 3}, {2, 12}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[1453, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[1453, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[1453, 20]}]}, {
                 Offset[{0, -3.2}, {2, 72.65}], 
                 Offset[{3.2, 1.5}, {2, 72.65}], 
                 Offset[{-3.2, 1.5}, {2, 72.65}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"severe acute respiratory syndrome\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine079.82\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine079.82\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[1453, 20]}], 
                Offset[{0, 0}, {2, 72.65}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-0.20603900000000053`, 
                 Rational[1453, 20]}, {-0.20603900000000053`, 72.65}], 
               NCache[{4.2060390000000005`, 
                 Rational[1491, 20]}, {4.2060390000000005`, 74.55}]]}}}},
          
          ImageSizeCache->{{76.22870412590152, 
           385.41492325646584`}, {-201.43778713331056`, 234.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:07\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "7.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 7.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{4, 21}, {8, 21}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {4, 21}], 
                    Offset[{0, -1}, {8, 21}]}, {
                    Offset[{0, 1}, {4, 21}], 
                    Offset[{0, 1}, {8, 21}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{4, 21}, {8, 21}}]}, 
                   PointBox[{{4, 21}, {8, 21}}], 
                   LineBox[{{4, 21}, {8, 21}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{4, 21}, {8, 21}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{4, 
                  Rational[279, 4]}, 
                 Offset[{0, 3}, {4, 21}]}, {{4, 69.75}, 
                 Offset[{0, 3}, {4, 21}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {4, 
                   Rational[279, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {4, 
                   Rational[279, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {4, 
                   Rational[279, 4]}]}, {
                 Offset[{0, -3.2}, {4, 69.75}], 
                 Offset[{3.2, 1.5}, {4, 69.75}], 
                 Offset[{-3.2, 1.5}, {4, 69.75}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"enterobiasis\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine127.4\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine127.4\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {4, 
                  Rational[279, 4]}], 
                Offset[{0, 0}, {4, 69.75}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{2.973661, 
                 Rational[279, 4]}, {2.973661, 69.75}], 
               NCache[{5.026339, 
                 Rational[1433, 20]}, {5.026339, 71.65}]]}}}},
          
          ImageSizeCache->{{209.15443374599687`, 
           427.97416461714863`}, {-182.54156561244753`, 174.97416461714863`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:04\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "4.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:08\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "8.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 4.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 8.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{1, 5}, {8, 5}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {1, 5}], 
                    Offset[{0, -1}, {8, 5}]}, {
                    Offset[{0, 1}, {1, 5}], 
                    Offset[{0, 1}, {8, 5}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{1, 5}, {8, 5}}]}, 
                   PointBox[{{1, 5}, {8, 5}}], 
                   LineBox[{{1, 5}, {8, 5}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{1, 5}, {8, 5}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{1, 
                  Rational[279, 4]}, 
                 Offset[{0, 3}, {1, 5}]}, {{1, 69.75}, 
                 Offset[{0, 3}, {1, 5}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {1, 
                   Rational[279, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {1, 
                   Rational[279, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {1, 
                   Rational[279, 4]}]}, {
                 Offset[{0, -3.2}, {1, 69.75}], 
                 Offset[{3.2, 1.5}, {1, 69.75}], 
                 Offset[{-3.2, 1.5}, {1, 69.75}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"Condyloma acuminatum\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine078.11\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine078.11\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {1, 
                  Rational[279, 4]}], 
                Offset[{0, 0}, {1, 69.75}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-0.6633770000000003, 
                 Rational[279, 4]}, {-0.6633770000000003, 69.75}], 
               NCache[{2.6633770000000005`, 
                 Rational[1433, 20]}, {2.6633770000000005`, 71.65}]]}}}},
          
          ImageSizeCache->{{57.11363923592049, 
           427.2112858810041}, {-182.5674009952989, 279.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:01\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "1.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:08\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "8.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 1.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 8.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{3, 17}, {6, 17}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {3, 17}], 
                    Offset[{0, -1}, {6, 17}]}, {
                    Offset[{0, 1}, {3, 17}], 
                    Offset[{0, 1}, {6, 17}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{3, 17}, {6, 17}}]}, 
                   PointBox[{{3, 17}, {6, 17}}], 
                   LineBox[{{3, 17}, {6, 17}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{3, 17}, {6, 17}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{3, 
                  Rational[1337, 20]}, 
                 Offset[{0, 3}, {3, 17}]}, {{3, 66.85}, 
                 Offset[{0, 3}, {3, 17}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {3, 
                   Rational[1337, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {3, 
                   Rational[1337, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {3, 
                   Rational[1337, 20]}]}, {
                 Offset[{0, -3.2}, {3, 66.85}], 
                 Offset[{3.2, 1.5}, {3, 66.85}], 
                 Offset[{-3.2, 1.5}, {3, 66.85}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"hand, foot, and mouth disease\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine074.3\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine074.3\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {3, 
                  Rational[1337, 20]}], 
                Offset[{0, 0}, {3, 66.85}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{1.0063069999999996`, 
                 Rational[1337, 20]}, {1.0063069999999996`, 66.85}], 
               NCache[{4.993693, 
                 Rational[275, 4]}, {4.993693, 68.75}]]}}}},
          
          ImageSizeCache->{{127.1298299266231, 
           343.77052724168675`}, {-163.46754209897398`, 200.77052724168675`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:06\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "6.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 3.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 6.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[
                NCache[{
                  Rational[72, 73], 4}, {0.9863013698630136, 4}], 
                NCache[{
                  Rational[432, 73], 4}, {
                 5.917808219178082, 4}]]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[
                    NCache[{{
                    Offset[{0, -1}, {
                    Rational[72, 73], 4}], 
                    Offset[{0, -1}, {
                    Rational[432, 73], 4}]}, {
                    Offset[{0, 1}, {
                    Rational[72, 73], 4}], 
                    Offset[{0, 1}, {
                    Rational[432, 73], 4}]}}, {{
                    Offset[{0, -1}, {0.9863013698630136, 4}], 
                    Offset[{0, -1}, {5.917808219178082, 4}]}, {
                    Offset[{0, 1}, {0.9863013698630136, 4}], 
                    Offset[{0, 1}, {5.917808219178082, 4}]}}]]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[
                    NCache[{{
                    Rational[72, 73], 4}, {
                    Rational[432, 73], 4}}, {{0.9863013698630136, 4}, {
                    5.917808219178082, 4}}]]}, 
                   PointBox[
                    NCache[{{
                    Rational[72, 73], 4}, {
                    Rational[432, 73], 4}}, {{0.9863013698630136, 4}, {
                    5.917808219178082, 4}}]], 
                   LineBox[
                    NCache[{{
                    Rational[72, 73], 4}, {
                    Rational[432, 73], 4}}, {{0.9863013698630136, 4}, {
                    5.917808219178082, 4}}]]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[
                    NCache[{{
                    Rational[72, 73], 4}, {
                    Rational[432, 73], 4}}, {{0.9863013698630136, 4}, {
                    5.917808219178082, 4}}]]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[72, 73], 
                  Rational[1279, 20]}, 
                 Offset[{0, 3}, {
                   Rational[72, 73], 4}]}, {{0.9863013698630136, 63.95}, 
                 Offset[{0, 3}, {0.9863013698630136, 4}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {
                   Rational[72, 73], 
                   Rational[1279, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {
                   Rational[72, 73], 
                   Rational[1279, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {
                   Rational[72, 73], 
                   Rational[1279, 20]}]}, {
                 Offset[{0, -3.2}, {0.9863013698630136, 63.95}], 
                 Offset[{3.2, 1.5}, {0.9863013698630136, 63.95}], 
                 Offset[{-3.2, 1.5}, {0.9863013698630136, 63.95}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"viral hepatitis B without hepatic coma\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine070.3\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine070.3\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[72, 73], 
                  Rational[1279, 20]}], 
                Offset[{0, 0}, {0.9863013698630136, 63.95}]], {
               Center, Bottom}, {Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-1.3495046301369866`, 
                 Rational[1279, 20]}, {-1.3495046301369866`, 63.95}], 
               NCache[{3.322107369863014, 
                 Rational[1317, 20]}, {3.322107369863014, 65.85}]]}}}},
          
          ImageSizeCache->{{28.500194596572015`, 
           340.93580540342793`}, {-144.7624341227036, 285.935805403428}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:00\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["72", "73"]}], "}"}], ",", "\"Instant\"", ",",
                    "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:05\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["432", "73"]}], "}"}], ",", "\"Instant\"", 
                   ",", "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            DateObject[{1900, 1, 1, 0, 0, 
              Rational[72, 73]}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            DateObject[{1900, 1, 1, 0, 0, 
              Rational[432, 73]}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{3, 18}, {14, 18}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {3, 18}], 
                    Offset[{0, -1}, {14, 18}]}, {
                    Offset[{0, 1}, {3, 18}], 
                    Offset[{0, 1}, {14, 18}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{3, 18}, {14, 18}}]}, 
                   PointBox[{{3, 18}, {14, 18}}], 
                   LineBox[{{3, 18}, {14, 18}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{3, 18}, {14, 18}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{3, 
                  Rational[1221, 20]}, 
                 Offset[{0, 3}, {3, 18}]}, {{3, 61.05}, 
                 Offset[{0, 3}, {3, 18}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {3, 
                   Rational[1221, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {3, 
                   Rational[1221, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {3, 
                   Rational[1221, 20]}]}, {
                 Offset[{0, -3.2}, {3, 61.05}], 
                 Offset[{3.2, 1.5}, {3, 61.05}], 
                 Offset[{-3.2, 1.5}, {3, 61.05}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"Dengue fever\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine061\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine061\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {3, 
                  Rational[1221, 20]}], 
                Offset[{0, 0}, {3, 61.05}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{1.9028789999999998`, 
                 Rational[1221, 20]}, {1.9028789999999998`, 61.05}], 
               NCache[{4.0971210000000005`, 
                 Rational[1259, 20]}, {4.0971210000000005`, 62.95}]]}}}},
          
          ImageSizeCache->{{164.38434397108426`, 
           677.989461628233}, {-125.94570420949697`, 194.98946162823302`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:14\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "14.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 3.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 14.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 13}, {12, 13}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 13}], 
                    Offset[{0, -1}, {12, 13}]}, {
                    Offset[{0, 1}, {2, 13}], 
                    Offset[{0, 1}, {12, 13}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 13}, {12, 13}}]}, 
                   PointBox[{{2, 13}, {12, 13}}], 
                   LineBox[{{2, 13}, {12, 13}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 13}, {12, 13}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[1163, 20]}, 
                 Offset[{0, 3}, {2, 13}]}, {{2, 58.15}, 
                 Offset[{0, 3}, {2, 13}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[1163, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[1163, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[1163, 20]}]}, {
                 Offset[{0, -3.2}, {2, 58.15}], 
                 Offset[{3.2, 1.5}, {2, 58.15}], 
                 Offset[{-3.2, 1.5}, {2, 58.15}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"genital herpes\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine054.1\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine054.1\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[1163, 20]}], 
                Offset[{0, 0}, {2, 58.15}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{0.8674879999999998, 
                 Rational[1163, 20]}, {0.8674879999999998, 58.15}], 
               NCache[{3.132512, 
                 Rational[1201, 20]}, {3.132512, 60.05}]]}}}},
          
          ImageSizeCache->{{121.09822790513411`, 
           594.3967363791567}, {-107.08585644325234`, 227.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:12\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "12.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 12.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{7, 25}, {21, 25}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {7, 25}], 
                    Offset[{0, -1}, {21, 25}]}, {
                    Offset[{0, 1}, {7, 25}], 
                    Offset[{0, 1}, {21, 25}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{7, 25}, {21, 25}}]}, 
                   PointBox[{{7, 25}, {21, 25}}], 
                   LineBox[{{7, 25}, {21, 25}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{7, 25}, {21, 25}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{7, 
                  Rational[221, 4]}, 
                 Offset[{0, 3}, {7, 25}]}, {{7, 55.25}, 
                 Offset[{0, 3}, {7, 25}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {7, 
                   Rational[221, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {7, 
                   Rational[221, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {7, 
                   Rational[221, 4]}]}, {
                 Offset[{0, -3.2}, {7, 55.25}], 
                 Offset[{3.2, 1.5}, {7, 55.25}], 
                 Offset[{-3.2, 1.5}, {7, 55.25}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   
                   TemplateBox[{
                    "\"unclassified diseases due to viruses and Chlamydiae\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine078.8\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine078.8\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {7, 
                  Rational[221, 4]}], 
                Offset[{0, 0}, {7, 55.25}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{3.8266069999999996`, 
                 Rational[221, 4]}, {3.8266069999999996`, 55.25}], 
               NCache[{10.173393, 
                 Rational[1143, 20]}, {10.173393, 57.15}]]}}}},
          
          ImageSizeCache->{{245.19356193476068`, 
           970.5850767435343}, {-87.80054704877483, 148.58507674353416`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:07\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "7.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:21\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "21.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 7.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 21.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{1, 6}, {3, 6}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {1, 6}], 
                    Offset[{0, -1}, {3, 6}]}, {
                    Offset[{0, 1}, {1, 6}], 
                    Offset[{0, 1}, {3, 6}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{1, 6}, {3, 6}}]}, 
                   PointBox[{{1, 6}, {3, 6}}], 
                   LineBox[{{1, 6}, {3, 6}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{1, 6}, {3, 6}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{1, 
                  Rational[221, 4]}, 
                 Offset[{0, 3}, {1, 6}]}, {{1, 55.25}, 
                 Offset[{0, 3}, {1, 6}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {1, 
                   Rational[221, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {1, 
                   Rational[221, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {1, 
                   Rational[221, 4]}]}, {
                 Offset[{0, -3.2}, {1, 55.25}], 
                 Offset[{3.2, 1.5}, {1, 55.25}], 
                 Offset[{-3.2, 1.5}, {1, 55.25}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"streptococcal sore throat\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine034.0\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine034.0\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {1, 
                  Rational[221, 4]}], 
                Offset[{0, 0}, {1, 55.25}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-0.6869710000000002, 
                 Rational[221, 4]}, {-0.6869710000000002, 55.25}], 
               NCache[{2.686971, 
                 Rational[1143, 20]}, {2.686971, 57.15}]]}}}},
          
          ImageSizeCache->{{56.12749585615714, 
           218.22947275831325`}, {-88.21547030524067, 273.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:01\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "1.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 1.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            DateObject[{1900, 1, 1, 0, 0, 3.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               LineBox[{{7., 23}, {7., 23}}]}}, {{}, {{{{}, {{{
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{7., 23}]}, 
                   PointBox[{7., 23}]}}, {}, {}}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{7.`3., 
                  Rational[1047, 20]}, 
                 Offset[{0, 0}, {7.`3., 23}]}, {{7., 52.35}, 
                 Offset[{0, 0}, {7., 23}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {7.`3., 
                   Rational[1047, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {7.`3., 
                   Rational[1047, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {7.`3., 
                   Rational[1047, 20]}]}, {
                 Offset[{0, -3.2}, {7., 52.35}], 
                 Offset[{3.2, 1.5}, {7., 52.35}], 
                 Offset[{-3.2, 1.5}, {7., 52.35}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"lyme disease\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine088.81\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine088.81\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {7.`3., 
                  Rational[1047, 20]}], 
                Offset[{0, 0}, {7., 52.35}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{5.926473, 
                 Rational[1047, 20]}, {5.926473, 52.35}], 
               NCache[{8.073527, 
                 Rational[217, 4]}, {8.073527, 54.25}]]}}}},
          
          ImageSizeCache->{{332.54539947723333`, 
           430.28444703569846`}, {-69.34508416722906, 161.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:07\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "7.`3."}], "}"}], ",", "\"Instant\"", ",", 
                   "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{1900, 1, 1, 0, 0, 7.`3.}, "Instant", "Gregorian", 
             1., {"DateTimeShort"}]}}, Alignment -> Right], {}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{3, 19}, {6, 19}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {3, 19}], 
                    Offset[{0, -1}, {6, 19}]}, {
                    Offset[{0, 1}, {3, 19}], 
                    Offset[{0, 1}, {6, 19}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{3, 19}, {6, 19}}]}, 
                   PointBox[{{3, 19}, {6, 19}}], 
                   LineBox[{{3, 19}, {6, 19}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{3, 19}, {6, 19}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{3, 
                  Rational[1047, 20]}, 
                 Offset[{0, 3}, {3, 19}]}, {{3, 52.35}, 
                 Offset[{0, 3}, {3, 19}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {3, 
                   Rational[1047, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {3, 
                   Rational[1047, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {3, 
                   Rational[1047, 20]}]}, {
                 Offset[{0, -3.2}, {3, 52.35}], 
                 Offset[{3.2, 1.5}, {3, 52.35}], 
                 Offset[{-3.2, 1.5}, {3, 52.35}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"yellow fever\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine060\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine060\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {3, 
                  Rational[1047, 20]}], 
                Offset[{0, 0}, {3, 52.35}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{1.985458, 
                 Rational[1047, 20]}, {1.985458, 52.35}], 
               NCache[{4.0145420000000005`, 
                 Rational[217, 4]}, {4.0145420000000005`, 54.25}]]}}}},
          
          ImageSizeCache->{{168.0547801868023, 
           343.77052724168675`}, {-69.11561140891581, 187.77052724168675`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:06\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "6.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 3.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 6.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[
                NCache[{
                  Rational[1, 2], 2}, {0.5, 2}], {3, 2}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[
                    NCache[{{
                    Offset[{0, -1}, {
                    Rational[1, 2], 2}], 
                    Offset[{0, -1}, {3, 2}]}, {
                    Offset[{0, 1}, {
                    Rational[1, 2], 2}], 
                    Offset[{0, 1}, {3, 2}]}}, {{
                    Offset[{0, -1}, {0.5, 2}], 
                    Offset[{0, -1}, {3, 2}]}, {
                    Offset[{0, 1}, {0.5, 2}], 
                    Offset[{0, 1}, {3, 2}]}}]]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[
                    NCache[{{
                    Rational[1, 2], 2}, {3, 2}}, {{0.5, 2}, {3, 2}}]]}, 
                   PointBox[
                    NCache[{{
                    Rational[1, 2], 2}, {3, 2}}, {{0.5, 2}, {3, 2}}]], 
                   LineBox[
                    NCache[{{
                    Rational[1, 2], 2}, {3, 2}}, {{0.5, 2}, {3, 2}}]]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[
                    NCache[{{
                    Rational[1, 2], 2}, {3, 2}}, {{0.5, 2}, {3, 
                    2}}]]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1, 2], 
                  Rational[1047, 20]}, 
                 Offset[{0, 3}, {
                   Rational[1, 2], 2}]}, {{0.5, 52.35}, 
                 Offset[{0, 3}, {0.5, 2}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {
                   Rational[1, 2], 
                   Rational[1047, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {
                   Rational[1, 2], 
                   Rational[1047, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {
                   Rational[1, 2], 
                   Rational[1047, 20]}]}, {
                 Offset[{0, -3.2}, {0.5, 52.35}], 
                 Offset[{3.2, 1.5}, {0.5, 52.35}], 
                 Offset[{-3.2, 1.5}, {0.5, 52.35}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"botulism\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine005.1\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine005.1\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1, 2], 
                  Rational[1047, 20]}], 
                Offset[{0, 0}, {0.5, 52.35}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-0.32579000000000014`, 
                 Rational[1047, 20]}, {-0.32579000000000014`, 52.35}], 
               NCache[{1.32579, 
                 Rational[217, 4]}, {1.32579, 54.25}]]}}}},
          
          ImageSizeCache->{{71.22354790525046, 
           218.22947275831325`}, {-69.34508416722906, 299.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:00\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["1", "2"]}], "}"}], ",", "\"Instant\"", ",", 
                   "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            DateObject[{1900, 1, 1, 0, 0, 
              Rational[1, 2]}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 3.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{4, 22}, {10, 22}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {4, 22}], 
                    Offset[{0, -1}, {10, 22}]}, {
                    Offset[{0, 1}, {4, 22}], 
                    Offset[{0, 1}, {10, 22}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{4, 22}, {10, 22}}]}, 
                   PointBox[{{4, 22}, {10, 22}}], 
                   LineBox[{{4, 22}, {10, 22}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{4, 22}, {10, 22}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{4, 
                  Rational[989, 20]}, 
                 Offset[{0, 3}, {4, 22}]}, {{4, 49.45}, 
                 Offset[{0, 3}, {4, 22}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {4, 
                   Rational[989, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {4, 
                   Rational[989, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {4, 
                   Rational[989, 20]}]}, {
                 Offset[{0, -3.2}, {4, 49.45}], 
                 Offset[{3.2, 1.5}, {4, 49.45}], 
                 Offset[{-3.2, 1.5}, {4, 49.45}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"eastern equine encephalitis\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine062.2\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine062.2\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {4, 
                  Rational[989, 20]}], 
                Offset[{0, 0}, {4, 49.45}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{2.1714649999999995`, 
                 Rational[989, 20]}, {2.1714649999999995`, 49.45}], 
               NCache[{5.8285350000000005`, 
                 Rational[1027, 20]}, {5.8285350000000005`, 51.35}]]}}}},
          
          ImageSizeCache->{{175.62555883404286`, 
           510.97416461714863`}, {-50.44886264636608, 168.97416461714863`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:04\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "4.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:10\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "10.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 4.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 10.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{1, 7}, {2, 7}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {1, 7}], 
                    Offset[{0, -1}, {2, 7}]}, {
                    Offset[{0, 1}, {1, 7}], 
                    Offset[{0, 1}, {2, 7}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{1, 7}, {2, 7}}]}, 
                   PointBox[{{1, 7}, {2, 7}}], 
                   LineBox[{{1, 7}, {2, 7}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{1, 7}, {2, 7}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{1, 
                  Rational[989, 20]}, 
                 Offset[{0, 3}, {1, 7}]}, {{1, 49.45}, 
                 Offset[{0, 3}, {1, 7}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {1, 
                   Rational[989, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {1, 
                   Rational[989, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {1, 
                   Rational[989, 20]}]}, {
                 Offset[{0, -3.2}, {1, 49.45}], 
                 Offset[{3.2, 1.5}, {1, 49.45}], 
                 Offset[{-3.2, 1.5}, {1, 49.45}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"shigellosis\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine004\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine004\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {1, 
                  Rational[989, 20]}], 
                Offset[{0, 0}, {1, 49.45}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{0.0680369999999999, 
                 Rational[989, 20]}, {0.0680369999999999, 49.45}], 
               NCache[{1.931963, 
                 Rational[1027, 20]}, {1.931963, 51.35}]]}}}},
          
          ImageSizeCache->{{87.68408400858445, 
           176.43311013377507`}, {-50.47469802921745, 266.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:01\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "1.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 1.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{7, 24}, {14, 24}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {7, 24}], 
                    Offset[{0, -1}, {14, 24}]}, {
                    Offset[{0, 1}, {7, 24}], 
                    Offset[{0, 1}, {14, 24}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{7, 24}, {14, 24}}]}, 
                   PointBox[{{7, 24}, {14, 24}}], 
                   LineBox[{{7, 24}, {14, 24}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{7, 24}, {14, 24}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{7, 
                  Rational[931, 20]}, 
                 Offset[{0, 3}, {7, 24}]}, {{7, 46.55}, 
                 Offset[{0, 3}, {7, 24}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {7, 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {7, 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {7, 
                   Rational[931, 20]}]}, {
                 Offset[{0, -3.2}, {7, 46.55}], 
                 Offset[{3.2, 1.5}, {7, 46.55}], 
                 Offset[{-3.2, 1.5}, {7, 46.55}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"rickettsioses\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine083\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine083\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {7, 
                  Rational[931, 20]}], 
                Offset[{0, 0}, {7, 46.55}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{5.961864, 
                 Rational[931, 20]}, {5.961864, 46.55}], 
               NCache[{8.038136, 
                 Rational[969, 20]}, {8.038136, 48.45}]]}}}},
          
          ImageSizeCache->{{334.03515291864534`, 
           677.989461628233}, {-31.59377351943874, 155.98946162823302`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:07\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "7.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:14\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "14.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 7.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 14.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{14, 30}, {21, 30}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {14, 30}], 
                    Offset[{0, -1}, {21, 30}]}, {
                    Offset[{0, 1}, {14, 30}], 
                    Offset[{0, 1}, {21, 30}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{14, 30}, {21, 30}}]}, 
                   PointBox[{{14, 30}, {21, 30}}], 
                   LineBox[{{14, 30}, {21, 30}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{14, 30}, {21, 30}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{14, 
                  Rational[931, 20]}, 
                 Offset[{0, 3}, {14, 30}]}, {{14, 46.55}, 
                 Offset[{0, 3}, {14, 30}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {14, 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {14, 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {14, 
                   Rational[931, 20]}]}, {
                 Offset[{0, -3.2}, {14, 46.55}], 
                 Offset[{3.2, 1.5}, {14, 46.55}], 
                 Offset[{-3.2, 1.5}, {14, 46.55}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   
                   TemplateBox[{
                    "\"unspecified type of chlamydial infection co-occurring \
with other medical conditions\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine079.98\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine079.98\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {14, 
                  Rational[931, 20]}], 
                Offset[{0, 0}, {14, 46.55}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{9.304794, 
                 Rational[931, 20]}, {9.304794, 46.55}], 
               NCache[{18.695206, 
                 Rational[969, 20]}, {18.695206, 48.45}]]}}}},
          
          ImageSizeCache->{{473.7469290553256, 
           970.5640000000002}, {-31.604311891205725`, 117.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:14\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "14.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:21\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "21.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 14.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            DateObject[{1900, 1, 1, 0, 0, 21.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{3, 20}, {21, 20}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {3, 20}], 
                    Offset[{0, -1}, {21, 20}]}, {
                    Offset[{0, 1}, {3, 20}], 
                    Offset[{0, 1}, {21, 20}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{3, 20}, {21, 20}}]}, 
                   PointBox[{{3, 20}, {21, 20}}], 
                   LineBox[{{3, 20}, {21, 20}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{3, 20}, {21, 20}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{3, 
                  Rational[931, 20]}, 
                 Offset[{0, 3}, {3, 20}]}, {{3, 46.55}, 
                 Offset[{0, 3}, {3, 20}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {3, 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {3, 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {3, 
                   Rational[931, 20]}]}, {
                 Offset[{0, -3.2}, {3, 46.55}], 
                 Offset[{3.2, 1.5}, {3, 46.55}], 
                 Offset[{-3.2, 1.5}, {3, 46.55}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"tetanus\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine037\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine037\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {3, 
                  Rational[931, 20]}], 
                Offset[{0, 0}, {3, 46.55}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{2.2213979999999998`, 
                 Rational[931, 20]}, {2.2213979999999998`, 46.55}], 
               NCache[{3.7786020000000002`, 
                 Rational[969, 20]}, {3.7786020000000002`, 48.45}]]}}}},
          ImageSizeCache->{{177.84406794326472`, 
           970.8426732828578}, {-31.44698517406357, 181.84267328285785`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:21\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "21.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 3.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 21.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[
                NCache[{
                  Rational[1, 2], 3}, {0.5, 3}], {3, 3}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[
                    NCache[{{
                    Offset[{0, -1}, {
                    Rational[1, 2], 3}], 
                    Offset[{0, -1}, {3, 3}]}, {
                    Offset[{0, 1}, {
                    Rational[1, 2], 3}], 
                    Offset[{0, 1}, {3, 3}]}}, {{
                    Offset[{0, -1}, {0.5, 3}], 
                    Offset[{0, -1}, {3, 3}]}, {
                    Offset[{0, 1}, {0.5, 3}], 
                    Offset[{0, 1}, {3, 3}]}}]]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[
                    NCache[{{
                    Rational[1, 2], 3}, {3, 3}}, {{0.5, 3}, {3, 3}}]]}, 
                   PointBox[
                    NCache[{{
                    Rational[1, 2], 3}, {3, 3}}, {{0.5, 3}, {3, 3}}]], 
                   LineBox[
                    NCache[{{
                    Rational[1, 2], 3}, {3, 3}}, {{0.5, 3}, {3, 3}}]]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[
                    NCache[{{
                    Rational[1, 2], 3}, {3, 3}}, {{0.5, 3}, {3, 
                    3}}]]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1, 2], 
                  Rational[931, 20]}, 
                 Offset[{0, 3}, {
                   Rational[1, 2], 3}]}, {{0.5, 46.55}, 
                 Offset[{0, 3}, {0.5, 3}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {
                   Rational[1, 2], 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {
                   Rational[1, 2], 
                   Rational[931, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {
                   Rational[1, 2], 
                   Rational[931, 20]}]}, {
                 Offset[{0, -3.2}, {0.5, 46.55}], 
                 Offset[{3.2, 1.5}, {0.5, 46.55}], 
                 Offset[{-3.2, 1.5}, {0.5, 46.55}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"salmonella infections\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine003\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine003\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1, 2], 
                  Rational[931, 20]}], 
                Offset[{0, 0}, {0.5, 46.55}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-0.9864220000000001, 
                 Rational[931, 20]}, {-0.9864220000000001, 46.55}], 
               NCache[{1.9864220000000001`, 
                 Rational[969, 20]}, {1.9864220000000001`, 48.45}]]}}}},
          
          ImageSizeCache->{{43.61153327187656, 
           218.22947275831325`}, {-31.604311891205725`, 292.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:00\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["1", "2"]}], "}"}], ",", "\"Instant\"", ",", 
                   "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:03\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "3.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            DateObject[{1900, 1, 1, 0, 0, 
              Rational[1, 2]}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 3.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{10, 28}, {15, 28}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {10, 28}], 
                    Offset[{0, -1}, {15, 28}]}, {
                    Offset[{0, 1}, {10, 28}], 
                    Offset[{0, 1}, {15, 28}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{10, 28}, {15, 28}}]}, 
                   PointBox[{{10, 28}, {15, 28}}], 
                   LineBox[{{10, 28}, {15, 28}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{10, 28}, {15, 28}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{10, 
                  Rational[873, 20]}, 
                 Offset[{0, 3}, {10, 28}]}, {{10, 43.65}, 
                 Offset[{0, 3}, {10, 28}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {10, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {10, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {10, 
                   Rational[873, 20]}]}, {
                 Offset[{0, -3.2}, {10, 43.65}], 
                 Offset[{3.2, 1.5}, {10, 43.65}], 
                 Offset[{-3.2, 1.5}, {10, 43.65}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"malaria\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine084\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine084\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {10, 
                  Rational[873, 20]}], 
                Offset[{0, 0}, {10, 43.65}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{9.221398, 
                 Rational[873, 20]}, {9.221398, 43.65}], 
               NCache[{10.778602, 
                 Rational[911, 20]}, {10.778602, 45.55}]]}}}},
          
          ImageSizeCache->{{470.2612795978897, 
           719.7858242527712}, {-12.733925753194114`, 130.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:10\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "10.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:15\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "15.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 10.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 15.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{14, 31}, {21, 31}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {14, 31}], 
                    Offset[{0, -1}, {21, 31}]}, {
                    Offset[{0, 1}, {14, 31}], 
                    Offset[{0, 1}, {21, 31}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{14, 31}, {21, 31}}]}, 
                   PointBox[{{14, 31}, {21, 31}}], 
                   LineBox[{{14, 31}, {21, 31}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{14, 31}, {21, 31}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{14, 
                  Rational[873, 20]}, 
                 Offset[{0, 3}, {14, 31}]}, {{14, 43.65}, 
                 Offset[{0, 3}, {14, 31}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {14, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {14, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {14, 
                   Rational[873, 20]}]}, {
                 Offset[{0, -3.2}, {14, 43.65}], 
                 Offset[{3.2, 1.5}, {14, 43.65}], 
                 Offset[{-3.2, 1.5}, {14, 43.65}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"mumps\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine072\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine072\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {14, 
                  Rational[873, 20]}], 
                Offset[{0, 0}, {14, 43.65}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{13.221398, 
                 Rational[873, 20]}, {13.221398, 43.65}], 
               NCache[{14.778602, 
                 Rational[911, 20]}, {14.778602, 45.55}]]}}}},
          
          ImageSizeCache->{{637.4467300960424, 
           970.5640000000002}, {-12.733925753194114`, 110.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:14\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "14.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:21\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "21.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 14.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 21.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{8, 27}, {12, 27}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {8, 27}], 
                    Offset[{0, -1}, {12, 27}]}, {
                    Offset[{0, 1}, {8, 27}], 
                    Offset[{0, 1}, {12, 27}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{8, 27}, {12, 27}}]}, 
                   PointBox[{{8, 27}, {12, 27}}], 
                   LineBox[{{8, 27}, {12, 27}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{8, 27}, {12, 27}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{8, 
                  Rational[873, 20]}, 
                 Offset[{0, 3}, {8, 27}]}, {{8, 43.65}, 
                 Offset[{0, 3}, {8, 27}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {8, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {8, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {8, 
                   Rational[873, 20]}]}, {
                 Offset[{0, -3.2}, {8, 43.65}], 
                 Offset[{3.2, 1.5}, {8, 43.65}], 
                 Offset[{-3.2, 1.5}, {8, 43.65}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"measles\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine055\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine055\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {8, 
                  Rational[873, 20]}], 
                Offset[{0, 0}, {8, 43.65}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{7.1742099999999995`, 
                 Rational[873, 20]}, {7.1742099999999995`, 43.65}], 
               NCache[{8.82579, 
                 Rational[911, 20]}, {8.82579, 45.55}]]}}}},
          
          ImageSizeCache->{{384.90755347029074`, 
           594.7887141189959}, {-12.522639872190041`, 135.78871411899593`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:08\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "8.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:12\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "12.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 8.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 12.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 14}, {5, 14}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 14}], 
                    Offset[{0, -1}, {5, 14}]}, {
                    Offset[{0, 1}, {2, 14}], 
                    Offset[{0, 1}, {5, 14}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 14}, {5, 14}}]}, 
                   PointBox[{{2, 14}, {5, 14}}], 
                   LineBox[{{2, 14}, {5, 14}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 14}, {5, 14}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[873, 20]}, 
                 Offset[{0, 3}, {2, 14}]}, {{2, 43.65}, 
                 Offset[{0, 3}, {2, 14}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[873, 20]}]}, {
                 Offset[{0, -3.2}, {2, 43.65}], 
                 Offset[{3.2, 1.5}, {2, 43.65}], 
                 Offset[{-3.2, 1.5}, {2, 43.65}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"diphtheria\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine032\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine032\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[873, 20]}], 
                Offset[{0, 0}, {2, 43.65}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{1.0916309999999998`, 
                 Rational[873, 20]}, {1.0916309999999998`, 43.65}], 
               NCache[{2.9083690000000004`, 
                 Rational[911, 20]}, {2.9083690000000004`, 45.55}]]}}}},
          
          ImageSizeCache->{{130.64439200549634`, 
           301.8221980073896}, {-12.556123760583716`, 220.8221980073896}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:05\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "5.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 5.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[
                NCache[{
                  Rational[1, 12], 1}, {0.08333333333333333, 1}], {5, 
                1}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[
                    NCache[{{
                    Offset[{0, -1}, {
                    Rational[1, 12], 1}], 
                    Offset[{0, -1}, {5, 1}]}, {
                    Offset[{0, 1}, {
                    Rational[1, 12], 1}], 
                    Offset[{0, 1}, {5, 1}]}}, {{
                    Offset[{0, -1}, {0.08333333333333333, 1}], 
                    Offset[{0, -1}, {5, 1}]}, {
                    Offset[{0, 1}, {0.08333333333333333, 1}], 
                    Offset[{0, 1}, {5, 1}]}}]]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[
                    NCache[{{
                    Rational[1, 12], 1}, {5, 1}}, {{0.08333333333333333, 1}, {
                    5, 1}}]]}, 
                   PointBox[
                    NCache[{{
                    Rational[1, 12], 1}, {5, 1}}, {{0.08333333333333333, 1}, {
                    5, 1}}]], 
                   LineBox[
                    NCache[{{
                    Rational[1, 12], 1}, {5, 1}}, {{0.08333333333333333, 1}, {
                    5, 1}}]]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[
                    NCache[{{
                    Rational[1, 12], 1}, {5, 1}}, {{0.08333333333333333, 1}, {
                    5, 1}}]]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{
                  Rational[1, 12], 
                  Rational[873, 20]}, 
                 Offset[{0, 3}, {
                   Rational[1, 12], 1}]}, {{0.08333333333333333, 43.65}, 
                 Offset[{0, 3}, {0.08333333333333333, 1}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {
                   Rational[1, 12], 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {
                   Rational[1, 12], 
                   Rational[873, 20]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {
                   Rational[1, 12], 
                   Rational[873, 20]}]}, {
                 Offset[{0, -3.2}, {0.08333333333333333, 43.65}], 
                 Offset[{3.2, 1.5}, {0.08333333333333333, 43.65}], 
                 Offset[{-3.2, 1.5}, {0.08333333333333333, 43.65}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"cholera\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine001\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine001\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {
                  Rational[1, 12], 
                  Rational[873, 20]}], 
                Offset[{0, 0}, {0.08333333333333333, 43.65}]], {
               Center, Bottom}, {Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{-0.6952686666666668, 
                 Rational[873, 20]}, {-0.6952686666666668, 43.65}], 
               NCache[{0.8619353333333335, 
                 Rational[911, 20]}, {0.8619353333333335, 45.55}]]}}}},
          
          ImageSizeCache->{{55.958485563829996`, 
           301.8221980073896}, {-12.556123760583716`, 304.8221980073896}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:00\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["1", "12"]}], "}"}], ",", "\"Instant\"", ",", 
                   "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:05\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "5.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            DateObject[{1900, 1, 1, 0, 0, 
              Rational[1, 12]}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 5.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               CapForm["Round"], 
               LineBox[{{14., 32}, {14., 32}}]}}, {{}, {{{{}, {{{
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{14., 32}]}, 
                   PointBox[{14., 32}]}}, {}, {}}, {}}, {{}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{14.`3., 
                  Rational[163, 4]}, 
                 Offset[{0, 0}, {14.`3., 32}]}, {{14., 40.75}, 
                 Offset[{0, 0}, {14., 32}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {14.`3., 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {14.`3., 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {14.`3., 
                   Rational[163, 4]}]}, {
                 Offset[{0, -3.2}, {14., 40.75}], 
                 Offset[{3.2, 1.5}, {14., 40.75}], 
                 Offset[{-3.2, 1.5}, {14., 40.75}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"rubella\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine056\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine056\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {14.`3., 
                  Rational[163, 4]}], 
                Offset[{0, 0}, {14., 40.75}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{13.256789, 
                 Rational[163, 4]}, {13.256789, 40.75}], 
               NCache[{14.743211, 
                 Rational[853, 20]}, {14.743211, 42.65}]]}}}},
          
          ImageSizeCache->{{638.9259451656874, 709.0529780907787}, {
           6.136460384817497, 103.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:14\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "14.`3."}], "}"}], ",", "\"Instant\"", ",", 
                   "\"Gregorian\"", ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, 
           GridBoxAlignment -> {"Columns" -> {{Right}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            
            DateObject[{1900, 1, 1, 0, 0, 14.`3.}, "Instant", "Gregorian", 
             1., {"DateTimeShort"}]}}, Alignment -> Right], {}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{10, 29}, {21, 29}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {10, 29}], 
                    Offset[{0, -1}, {21, 29}]}, {
                    Offset[{0, 1}, {10, 29}], 
                    Offset[{0, 1}, {21, 29}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{10, 29}, {21, 29}}]}, 
                   PointBox[{{10, 29}, {21, 29}}], 
                   LineBox[{{10, 29}, {21, 29}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{10, 29}, {21, 29}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{10, 
                  Rational[163, 4]}, 
                 Offset[{0, 3}, {10, 29}]}, {{10, 40.75}, 
                 Offset[{0, 3}, {10, 29}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {10, 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {10, 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {10, 
                   Rational[163, 4]}]}, {
                 Offset[{0, -3.2}, {10, 40.75}], 
                 Offset[{3.2, 1.5}, {10, 40.75}], 
                 Offset[{-3.2, 1.5}, {10, 40.75}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"chicken pox\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine052\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine052\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {10, 
                  Rational[163, 4]}], 
                Offset[{0, 0}, {10, 40.75}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{8.985458, 
                 Rational[163, 4]}, {8.985458, 40.75}], 
               NCache[{11.014542, 
                 Rational[853, 20]}, {11.014542, 42.65}]]}}}},
          
          ImageSizeCache->{{460.3998458002561, 970.5640000000002}, {
           6.136460384817497, 123.}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:10\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "10.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:21\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "21.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 10.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 21.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{7, 26}, {21, 26}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {7, 26}], 
                    Offset[{0, -1}, {21, 26}]}, {
                    Offset[{0, 1}, {7, 26}], 
                    Offset[{0, 1}, {21, 26}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{7, 26}, {21, 26}}]}, 
                   PointBox[{{7, 26}, {21, 26}}], 
                   LineBox[{{7, 26}, {21, 26}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{7, 26}, {21, 26}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{7, 
                  Rational[163, 4]}, 
                 Offset[{0, 3}, {7, 26}]}, {{7, 40.75}, 
                 Offset[{0, 3}, {7, 26}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {7, 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {7, 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {7, 
                   Rational[163, 4]}]}, {
                 Offset[{0, -3.2}, {7, 40.75}], 
                 Offset[{3.2, 1.5}, {7, 40.75}], 
                 Offset[{-3.2, 1.5}, {7, 40.75}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"smallpox\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"ICDNine050\""}], "]"}], 
                    "\"Entity[\\\"Disease\\\", \\\"ICDNine050\\\"]\""}, 
                    "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {7, 
                  Rational[163, 4]}], 
                Offset[{0, 0}, {7, 40.75}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{6.150615999999999, 
                 Rational[163, 4]}, {6.150615999999999, 40.75}], 
               NCache[{7.849384000000001, 
                 Rational[853, 20]}, {7.849384000000001, 42.65}]]}}}},
          
          ImageSizeCache->{{342.02891008555144`, 970.8848514994336}, {
           6.25160888538386, 142.88485149943364`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:07\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "7.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:21\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "21.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 7.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 21.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], "Tooltip"]& ]}, 
     {RGBColor[0.34398, 0.49112, 0.89936], AbsolutePointSize[6], 
      AbsoluteThickness[3], Opacity[1], CapForm["Butt"], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            Directive[
             EdgeForm[
              Directive[
               RGBColor[0.34398, 0.49112, 0.89936], 
               Thickness[Large], 
               Opacity[0.2]]], 
             FaceForm[{
               RGBColor[
               0.22932000000000002`, 0.32741333333333333`, 
                0.5995733333333334], 
               Opacity[1]}], 
             CapForm["Round"], 
             AbsoluteThickness[2.5], 
             AbsolutePointSize[9], 
             FrameBoxOptions -> {BoxFrame -> 2.5}], {}, {}], {{{
              Directive[
               Opacity[0.2]], {
               Directive[
                Opacity[0.2]], 
               EdgeForm[], 
               RectangleBox[{2, 15}, {21, 15}]}}, {{}, {{{{}, {{{
                    GrayLevel[1], 
                    AbsoluteThickness[2], 
                    LineBox[{{
                    Offset[{0, -1}, {2, 15}], 
                    Offset[{0, -1}, {21, 15}]}, {
                    Offset[{0, 1}, {2, 15}], 
                    Offset[{0, 1}, {21, 15}]}}]}, {
                    AbsolutePointSize[8], 
                    GrayLevel[1], 
                    PointBox[{{2, 15}, {21, 15}}]}, 
                   PointBox[{{2, 15}, {21, 15}}], 
                   LineBox[{{2, 15}, {21, 15}}]}}, {}, {{
                   AbsolutePointSize[4], 
                   GrayLevel[1], 
                   PointBox[{{2, 15}, {21, 15}}]}}}, {}}, {{}, {}}}}}, {{
              CapForm["Butt"], 
              LineBox[
               NCache[{{2, 
                  Rational[163, 4]}, 
                 Offset[{0, 3}, {2, 15}]}, {{2, 40.75}, 
                 Offset[{0, 3}, {2, 15}]}]], 
              PolygonBox[
               NCache[{
                 Offset[{0, 
                   Rational[-16, 5]}, {2, 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[16, 5], 1.5}, {2, 
                   Rational[163, 4]}], 
                 Offset[{
                   Rational[-16, 5], 1.5}, {2, 
                   Rational[163, 4]}]}, {
                 Offset[{0, -3.2}, {2, 40.75}], 
                 Offset[{3.2, 1.5}, {2, 40.75}], 
                 Offset[{-3.2, 1.5}, {2, 40.75}]}]], 
              InsetBox[
               BoxData[
                FormBox[
                 FrameBox[
                  StyleBox[
                   TemplateBox[{"\"Ebola virus disease\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Disease\"", ",", "\"EbolaVirusDisease\""}], 
                    "]"}], "\"Entity[\\\"Disease\\\", \\\"EbolaVirusDisease\\\
\"]\""}, "EntityTraditionalFramed"], {
                    GrayLevel[0.3]}, StripOnInput -> False], RoundingRadius -> 
                  5, FrameMargins -> 5, Background -> GrayLevel[1], 
                  StripOnInput -> False], TraditionalForm]], 
               NCache[
                Offset[{0, 0}, {2, 
                  Rational[163, 4]}], 
                Offset[{0, 0}, {2, 40.75}]], {Center, Bottom}, {
               Automatic, Automatic}]}, {
              EdgeForm[], 
              FaceForm[], 
              RectangleBox[
               NCache[{0.5843599999999998, 
                 Rational[163, 4]}, {0.5843599999999998, 40.75}], 
               NCache[{3.4156400000000002`, 
                 Rational[853, 20]}, {3.4156400000000002`, 42.65}]]}}}},
          
          ImageSizeCache->{{109.69761748174888`, 970.566889866225}, {
           6.5695705185925135`, 213.56688986622498`}}],
         "DelayedMouseEffectStyle"],
        StyleBox[
         TagBox[
          GridBox[{{"\"start: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:02\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "2.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", 
                   ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}, {"\"end: \"", 
             TemplateBox[{
               RowBox[{"\"Mon 1 Jan 1900 00:00:21\"", 
                 StyleBox[
                  RowBox[{"\"GMT+\"", "\[InvisibleSpace]", 
                    StyleBox[
                    "1.`", NumberMarks -> False, StripOnInput -> False]}], 
                  FontColor -> GrayLevel[0.5]]}], 
               RowBox[{"DateObject", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    
                    RowBox[{
                    "1900", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
                    "21.`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
                    ",", "1.`", ",", 
                   RowBox[{"{", "\"DateTimeShort\"", "}"}]}], "]"}]}, 
              "DateObject", Editable -> False]}}, RowSpacings -> 1, 
           ColumnSpacings -> 0, RowAlignments -> Baseline, ColumnAlignments -> 
           Right], 
          Function[BoxForm`e$, 
           TableForm[
           BoxForm`e$, TableAlignments -> Right, 
            TableSpacing -> {1, 0}]]], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         TableForm[{{"start: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 2.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}, {"end: ", 
            
            DateObject[{1900, 1, 1, 0, 0, 21.}, "Instant", "Gregorian", 1., {
             "DateTimeShort"}]}}, TableAlignments -> Right, 
          TableSpacing -> {1, 0}], {}], 
        "Tooltip"]& ]}}, {{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesOrigin->{0, 0},
  Frame->{{None, None}, {True, None}},
  FrameTicks->
   FrontEndValueCache[{{None, None}, {
     Charting`getDateTicks[Automatic, {Automatic}, 
       (Map[DateList, {
         SlotSequence[1]}]& )[
        SlotSequence[1]], None, 11, {{0.006, 0}, {0.003, 0}}, Automatic]& , 
      Automatic}}, {{None, None}, {{{-5., 
        FormBox["\"23:59:55\"", TraditionalForm], {0.004, 0.}}, {0., 
        FormBox["\"00:00:00\"", TraditionalForm], {0.004, 0.}}, {5., 
        FormBox["\"00:00:05\"", TraditionalForm], {0.004, 0.}}, {10., 
        FormBox["\"00:00:10\"", TraditionalForm], {0.004, 0.}}, {15., 
        FormBox["\"00:00:15\"", TraditionalForm], {0.004, 0.}}, {20., 
        FormBox["\"00:00:20\"", TraditionalForm], {0.004, 0.}}, {25., 
        FormBox["\"00:00:25\"", TraditionalForm], {0.004, 0.}}, {-5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 
        0.}}, {-4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 
        0.}}, {-3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 
        0.}}, {-2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 
        0.}}, {-1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       0., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       1., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       2., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       3., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       4., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       5., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       6., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       7., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       8., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       9., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       10., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       11., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       12., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       13., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       14., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       15., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       16., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       17., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       18., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       19., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       20., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}, {
       21., 
        FormBox[
         TemplateBox[{0., 0.}, "Spacer2"], TraditionalForm], {0.004, 0.}}}, 
      Automatic}}],
  GridLines->FrontEndValueCache[{(Transpose[{#, 
       Table[
        Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], {
         Length[#]}]}]& )[
      Part[
       Select[
        (Charting`getDateTicks[Automatic, {Automatic}, 
         (Map[DateList, {
           SlotSequence[1]}]& )[
          SlotSequence[1]], {{
           Scaled[0.032], 
           Scaled[0.032]}, {None, 
           Scaled[0.05]}}, 11, {{0.006, 0}, {0.003, 0}}, Automatic]& )[
         SlotSequence[1]], And[
         FreeQ[#, 
          Alternatives["", 
           Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 
       1]]& , {}}, {{{-5., 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {0., 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {5., 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {10., 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {15., 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {20., 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}, {25., 
       Directive[
        GrayLevel[0.4, 0.5], 
        AbsoluteThickness[1.], 
        AbsoluteDashing[{1., 2.}]]}}, {}}],
  GridLinesStyle->Directive[
    GrayLevel[0.4, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  ImageSize->{1000, Automatic},
  PlotLabel->FormBox[
   "\"Exposure to disease onset time of some infectious diseases\"", 
    TraditionalForm],
  PlotRange->{{All, All}, {0, All}},
  PlotRangePadding->{{
     Scaled[0.032], 
     Scaled[0.032]}, {None, 
     Scaled[0.05]}},
  Ticks->{{{-5., 
      FormBox["\"23:59:55\"", TraditionalForm], {0.004, 0}}, {0., 
      FormBox["\"00:00:00\"", TraditionalForm], {0.004, 0}}, {5., 
      FormBox["\"00:00:05\"", TraditionalForm], {0.004, 0}}, {10., 
      FormBox["\"00:00:10\"", TraditionalForm], {0.004, 0}}, {15., 
      FormBox["\"00:00:15\"", TraditionalForm], {0.004, 0}}, {20., 
      FormBox["\"00:00:20\"", TraditionalForm], {0.004, 0}}, {25., 
      FormBox["\"00:00:25\"", TraditionalForm], {0.004, 0}}, {-5., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {-4., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {-3., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {-2., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {-1., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {0., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {1., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {2., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {3., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {4., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {5., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {6., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {7., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {8., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {9., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {10., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {11., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {12., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {13., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {14., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {15., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {16., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {17., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {18., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {19., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {20., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}, {21., 
      FormBox[
       TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.004, 0}}}, 
    None}]], "Output",
 CellChangeTimes->{{3.798394847375361*^9, 3.798394896048098*^9}, {
   3.798394942044018*^9, 3.798394948143055*^9}, {3.798395021251953*^9, 
   3.798395027914307*^9}, {3.798395504190093*^9, 3.798395513607574*^9}, 
   3.798399212666069*^9, 3.798560549452964*^9, {3.798560826811322*^9, 
   3.7985608523332853`*^9}, 3.798561585659891*^9, 3.7985617000810547`*^9, 
   3.798737241438106*^9, 3.798737338930646*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"492cee49-474a-488d-8fe8-c626bda1afe5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"reproduction", " ", 
    RowBox[{"no", ".", " ", 
     RowBox[{"(", 
      SubscriptBox["R", "0"], ")"}]}], " ", "of", " ", "such", " ", 
    RowBox[{"diseases", ".", " ", "note"}], " ", "that", " ", "data", " ", 
    "is", " ", "not", " ", "available", " ", "for", " ", "some", " ", 
    "entities"}], "  ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"infectDisR0", " ", "=", " ", 
   RowBox[{"DeleteMissing", "@", 
    RowBox[{"ParallelMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", " ", "\[Rule]", " ", 
         RowBox[{"#", "[", 
          TemplateBox[{"\"basic reproduction number\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Disease\"", ",", "\"BasicReproductionNumber\""}], 
              "]"}], "\"EntityProperty[\\\"Disease\\\", \
\\\"BasicReproductionNumber\\\"]\""},
           "EntityProperty"], "]"}]}], ")"}], "&"}], ",", " ", "infectDis"}], 
     "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.7983932129341793`*^9, 3.79839327308953*^9}, {
  3.798393315468268*^9, 3.7983933354461718`*^9}, {3.798393783558907*^9, 
  3.79839385218224*^9}, {3.798500392487782*^9, 3.798500399535199*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"b84e0270-92f3-490b-b2bd-2ecbd8d1ca64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"Ebola virus disease\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"EbolaVirusDisease\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"EbolaVirusDisease\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"1.4999999999999991`", ",", "2.5000000000000018`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"diphtheria\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine032\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine032\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"5.9999999999999964`", ",", "7.0000000000000036`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"whooping cough\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine033\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine033\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", "5.5`"}], ",", 
   RowBox[{
    TemplateBox[{"\"smallpox\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine050\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine050\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"4.9999999999999964`", ",", "7.0000000000000036`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"measles\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine055\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine055\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"11.999999999999993`", ",", "18.000000000000014`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"rubella\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine056\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine056\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"4.9999999999999964`", ",", "7.0000000000000036`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"mumps\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine072\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine072\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"3.9999999999999982`", ",", "7.0000000000000036`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"severe acute respiratory syndrome\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine079.82\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine079.82\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"1.9999999999999991`", ",", "5.0000000000000036`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"influenza\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"ICDNine487\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"ICDNine487\\\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"1.9999999999999991`", ",", "3.0000000000000018`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"Middle East respiratory syndrome\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"MiddleEastRespiratorySyndrome\""}], 
        "]"}], "\"Entity[\\\"Disease\\\", \\\"MiddleEastRespiratorySyndrome\\\
\"]\"", "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"0.5999999999999995`", ",", "1.0000000000000009`"}], "}"}], 
     "]"}]}], ",", 
   RowBox[{
    TemplateBox[{"\"COVID-19\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], "]"}], 
      "\"Entity[\\\"Disease\\\", \\\"NovelCoronavirusDisease\\\"]\"", 
      "\"disease\""},
     "Entity"], "\[Rule]", 
    RowBox[{"Interval", "[", 
     RowBox[{"{", 
      RowBox[{"1.399999999999999`", ",", "2.5000000000000018`"}], "}"}], 
     "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.798393245359182*^9, 3.798393273364565*^9}, {
   3.798393319082739*^9, 3.798393346754534*^9}, 3.798393858654312*^9, 
   3.798399226629938*^9, 3.798560564456781*^9, 3.798561596900691*^9, 
   3.7985617040788937`*^9, 3.798737252586491*^9, 3.798737339280264*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"7d2deed9-b50c-4505-b11b-93e7feeecdb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberLinePlot", "[", 
  RowBox[{
   RowBox[{"Values", "@", "infectDisR0"}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"Keys", "@", "infectDisR0"}], ",", " ", "Below"}], "]"}]}], ",",
    " ", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Business\>\""}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1000", ",", "Automatic"}], "}"}]}], ",", " ", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"1", "/", "5"}]}], ",", " ", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Basic reproduction rates of some infectious diseases\>\""}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.798393275482441*^9, 3.7983933085544147`*^9}, {
  3.798393368734645*^9, 3.798393429634234*^9}, {3.798393460955277*^9, 
  3.7983935844081087`*^9}, {3.798393856487447*^9, 3.798393896483047*^9}, {
  3.7983949608240337`*^9, 3.7983949765111217`*^9}, {3.798560579430192*^9, 
  3.798560589995035*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"29dab3f7-ae15-4e15-b2f8-89507366aecc"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      RGBColor[0.24720000000000014`, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.34398, 0.49112, 0.89936], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{1.4999999999999991`, 1}]}, {
          PointBox[{2.5000000000000018`, 1}]}, 
         LineBox[{{1.4999999999999991`, 1}, {2.5000000000000018`, 1}}]}}}}, {
      RGBColor[0.6, 0.24, 0.4428931686004542], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.97, 0.606, 0.081], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{5.9999999999999964`, 2}]}, {
          PointBox[{7.0000000000000036`, 2}]}, 
         LineBox[{{5.9999999999999964`, 2}, {7.0000000000000036`, 2}}]}}}}, {
      RGBColor[0.6, 0.5470136627990908, 0.24], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.91, 0.318, 0.243], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {
       PointBox[{5.5, 3}]}}, {
      RGBColor[0.24, 0.6, 0.33692049419863584`], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.448, 0.69232, 0.1538], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{4.9999999999999964`, 4}]}, {
          PointBox[{7.0000000000000036`, 4}]}, 
         LineBox[{{4.9999999999999964`, 4}, {7.0000000000000036`, 4}}]}}}}, {
      RGBColor[0.24, 0.3531726744018182, 0.6], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.62168, 0.2798, 0.6914], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{11.999999999999993`, 5}]}, {
          PointBox[{18.000000000000014`, 5}]}, 
         LineBox[{{11.999999999999993`, 5}, {18.000000000000014`, 5}}]}}}}, {
      RGBColor[0.6, 0.24, 0.5632658430022722], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.09096, 0.6296, 0.85532], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{4.9999999999999964`, 6}]}, {
          PointBox[{7.0000000000000036`, 6}]}, 
         LineBox[{{4.9999999999999964`, 6}, {7.0000000000000036`, 6}}]}}}}, {
      RGBColor[0.6, 0.42664098839727194`, 0.24], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.46056, 0.40064, 0.81392], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{3.9999999999999982`, 7}]}, {
          PointBox[{7.0000000000000036`, 7}]}, 
         LineBox[{{3.9999999999999982`, 7}, {7.0000000000000036`, 7}}]}}}}, {
      RGBColor[0.2634521802031821, 0.6, 0.24], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.94, 0.462, 0.162], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{1.9999999999999991`, 8}]}, {
          PointBox[{5.0000000000000036`, 8}]}, 
         LineBox[{{1.9999999999999991`, 8}, {5.0000000000000036`, 8}}]}}}}, {
      RGBColor[0.24, 0.47354534880363613`, 0.6], 
      PointSize[Medium], 
      Directive[
       RGBColor[0., 0.7, 0.7], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{1.9999999999999991`, 9}]}, {
          PointBox[{3.0000000000000018`, 9}]}, 
         LineBox[{{1.9999999999999991`, 9}, {3.0000000000000018`, 9}}]}}}}, {
      RGBColor[0.5163614825959097, 0.24, 0.6], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.827051, 0.418034, 0.0243459], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{0.5999999999999995, 10}]}, {
          PointBox[{1.0000000000000009`, 10}]}, 
         LineBox[{{0.5999999999999995, 10}, {1.0000000000000009`, 10}}]}}}}, {
      RGBColor[0.6, 0.3062683139954558, 0.24], 
      PointSize[Medium], 
      Directive[
       RGBColor[0.5511749434976025, 0.32014794962639853`, 0.8720626412559938], 
       CapForm["Butt"], 
       AbsoluteThickness[3]], {{{{
          PointBox[{1.399999999999999, 11}]}, {
          PointBox[{2.5000000000000018`, 11}]}, 
         LineBox[{{1.399999999999999, 11}, {2.5000000000000018`, 11}}]}}}}}, 
    AxesLabel -> {None}, Ticks -> {Charting`FindScaledTicks[
       (Charting`SimpleTicks[#, #2, 6]& )[
        SlotSequence[1]], {Identity, Identity}]& , Charting`FindScaledTicks[
       (Charting`SimpleTicks[#, #2, 6]& )[
        SlotSequence[1]], {Identity, Identity}]& }, 
    FrameTicks -> {{Charting`FindScaledTicks[
        (Charting`SimpleTicks[#, #2, 6]& )[
         SlotSequence[1]], {Identity, Identity}]& , None}, {
      Charting`FindScaledTicks[
        (Charting`SimpleTicks[#, #2, 6]& )[
         SlotSequence[1]], {Identity, Identity}]& , None}}, 
    PlotRange -> {{0.5999999999999995, 18.000000000000014`}, {0, 11}}, 
    PlotRangePadding -> {{
       Scaled[0.1], 
       Scaled[0.1]}, {0, 1}}, AspectRatio -> NCache[
      Rational[1, 5], 0.2], AxesOrigin -> {Automatic, Automatic}, 
    Axes -> {True, False}, ImagePadding -> All, {AspectRatio -> NCache[
       Rational[1, 5], 0.2], 
     FrameTicks -> {{Charting`SimpleTicks[#, #2, 6]& , None}, {
       Charting`SimpleTicks[#, #2, 6]& , None}}, 
     ImageSize -> {1000, Automatic}, PlotLabel -> 
     FormBox["\"Basic reproduction rates of some infectious diseases\"", 
       TraditionalForm], Ticks -> (Charting`SimpleTicks[#, #2, 6]& )}], 
   FormBox[
    FormBox[
     TemplateBox[{
       TemplateBox[{"\"Ebola virus disease\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"EbolaVirusDisease\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"EbolaVirusDisease\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"diphtheria\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine032\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine032\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"whooping cough\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine033\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine033\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"smallpox\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine050\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine050\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"measles\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine055\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine055\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"rubella\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine056\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine056\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"mumps\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine072\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine072\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"severe acute respiratory syndrome\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine079.82\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine079.82\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"influenza\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"ICDNine487\""}], "]"}], 
         "\"Entity[\\\"Disease\\\", \\\"ICDNine487\\\"]\""}, 
        "EntityTraditionalFramed"], 
       TemplateBox[{"\"Middle East respiratory syndrome\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"MiddleEastRespiratorySyndrome\""}], 
           "]"}], "\"Entity[\\\"Disease\\\", \
\\\"MiddleEastRespiratorySyndrome\\\"]\""}, "EntityTraditionalFramed"], 
       TemplateBox[{"\"COVID-19\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Disease\"", ",", "\"NovelCoronavirusDisease\""}], "]"}],
          "\"Entity[\\\"Disease\\\", \\\"NovelCoronavirusDisease\\\"]\""}, 
        "EntityTraditionalFramed"]}, "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.97, 0.606, 0.081], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.97, 0.606, 0.081], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.91, 0.318, 0.243], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.91, 0.318, 0.243], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.448, 0.69232, 0.1538], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.448, 0.69232, 0.1538], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.62168, 0.2798, 0.6914], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.62168, 0.2798, 0.6914], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.09096, 0.6296, 0.85532], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.09096, 0.6296, 0.85532], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.46056, 0.40064, 0.81392], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.46056, 0.40064, 0.81392], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.94, 0.462, 0.162], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.94, 0.462, 0.162], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0., 0.7, 0.7], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0., 0.7, 0.7], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9, 
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.827051, 0.418034, 0.0243459], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.827051, 0.418034, 0.0243459], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}, {
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[
                    0.5511749434976025, 0.32014794962639853`, 
                    0.8720626412559938], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[
                    0.5511749434976025, 0.32014794962639853`, 
                    0.8720626412559938], 
                    CapForm["Butt"], 
                    AbsoluteThickness[3]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #11}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{None}}}, 
             GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
             GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{1}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.34398, 0.49112, 0.89936], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.22932000000000002`, 0.32741333333333333`, 
                    0.5995733333333334], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.34398`", ",", "0.49112`", ",", "0.89936`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.34398, 0.49112, 0.89936]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.34398, 0.49112, 0.89936], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.97, 0.606, 0.081], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6466666666666667, 0.404, 0.054000000000000006`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.97`", ",", "0.606`", ",", "0.081`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.97, 0.606, 0.081]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.97, 0.606, 0.081], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.91, 0.318, 0.243], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6066666666666667, 0.21200000000000002`, 0.162],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.91`", ",", "0.318`", ",", "0.243`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.91, 0.318, 0.243]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.91, 0.318, 0.243], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.448, 0.69232, 0.1538], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.2986666666666667, 0.4615466666666667, 
                    0.10253333333333334`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.448`", ",", "0.69232`", ",", "0.1538`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.448, 0.69232, 0.1538]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.448, 0.69232, 0.1538], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.62168, 0.2798, 0.6914], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.41445333333333334`, 0.18653333333333333`, 
                    0.46093333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.62168`", ",", "0.2798`", ",", "0.6914`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.62168, 0.2798, 0.6914]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.62168, 0.2798, 0.6914], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.09096, 0.6296, 0.85532], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.06064, 0.4197333333333334, 0.5702133333333333],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.09096`", ",", "0.6296`", ",", "0.85532`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.09096, 0.6296, 0.85532]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.09096, 0.6296, 0.85532], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.46056, 0.40064, 0.81392], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.30704000000000004`, 0.26709333333333335`, 
                    0.5426133333333334], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.46056`", ",", "0.40064`", ",", "0.81392`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.46056, 0.40064, 0.81392]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.46056, 0.40064, 0.81392], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.94, 0.462, 0.162], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6266666666666667, 0.30800000000000005`, 
                    0.10800000000000001`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.94`", ",", "0.462`", ",", "0.162`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.94, 0.462, 0.162]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.94, 0.462, 0.162], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0., 0.7, 0.7], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0., 0.4666666666666667, 0.4666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.`", ",", "0.7`", ",", "0.7`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0., 0.7, 0.7]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0., 0.7, 0.7], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.827051, 0.418034, 0.0243459], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5513673333333333, 0.27868933333333334`, 0.0162306], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.827051`", ",", "0.418034`", ",", "0.0243459`"}], "]"}],
                     NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.827051, 0.418034, 0.0243459]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.827051, 0.418034, 0.0243459], Editable -> 
                    False, Selectable -> False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.5511749434976025, 0.32014794962639853`, 
                    0.8720626412559938], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.36744996233173505`, 0.21343196641759904`, 
                    0.5813750941706626], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.5511749434976025`", ",", "0.32014794962639853`", ",", 
                    "0.8720626412559938`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.5511749434976025, 0.32014794962639853`, 
                    0.8720626412559938]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.5511749434976025, 0.32014794962639853`, 
                    0.8720626412559938], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"CapForm", "[", "\"Butt\"", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8, ",", #9, ",", #10, ",", #11}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "False", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.798393276486966*^9, 3.798393308788093*^9}, {
   3.798393356570764*^9, 3.7983934352577477`*^9}, {3.7983934757605658`*^9, 
   3.798393584814741*^9}, {3.7983938609251337`*^9, 3.798393896724244*^9}, {
   3.798394968553145*^9, 3.798394977354699*^9}, 3.798399226930621*^9, 
   3.798560592933666*^9, 3.798561597226967*^9, 3.798561704316897*^9, 
   3.7987372528770733`*^9, 3.798737339546433*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"dd1c12fc-7100-4af6-a1c8-5785c0aa7caa"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1432, 855},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.1 for Mac OS X x86 (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c2fc1d40-278a-4dd3-b25b-7abfb7939142"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 292, 5, 98, "Title",ExpressionUUID->"e77c1826-4845-4332-9bff-c4605939e3cf"],
Cell[875, 29, 538, 10, 58, "Text",ExpressionUUID->"82919fd9-3291-4fad-bd47-cf518a2b23c5"],
Cell[CellGroupData[{
Cell[1438, 43, 462, 10, 72, "Code",ExpressionUUID->"954fa826-3c06-4b80-b9d0-3f31cda83509"],
Cell[1903, 55, 61844, 1127, 777, "Output",ExpressionUUID->"a865407a-f1ba-41e4-9ea9-9b863e54382e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63784, 1187, 452, 7, 67, "Section",ExpressionUUID->"da6eb7c6-4d31-433d-910e-7cc828c78f77"],
Cell[CellGroupData[{
Cell[64261, 1198, 632, 12, 72, "Code",ExpressionUUID->"f782353e-c4b9-4634-9909-d5d4d6308b35"],
Cell[64896, 1212, 3248, 59, 284, "Output",ExpressionUUID->"2603b776-69c9-4668-a3c6-36cb0b4018b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68181, 1276, 1211, 26, 72, "Code",ExpressionUUID->"b47ca147-5005-48ef-b6e8-77c0f0c20459"],
Cell[69395, 1304, 3711, 51, 521, "Output",ExpressionUUID->"e2a7bbaf-a401-4140-a5c2-6f29a7ccd968"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73143, 1360, 780, 17, 72, "Code",ExpressionUUID->"3c318e20-25c3-4adc-8d9e-29a835085865"],
Cell[73926, 1379, 24542, 574, 376, "Output",ExpressionUUID->"2e4e386e-83d3-4b5b-a01c-25c7a9817851"]
}, Open  ]],
Cell[CellGroupData[{
Cell[98505, 1958, 694, 15, 72, "Code",ExpressionUUID->"1a1ac13a-c086-4cc7-a035-862b9eaa635d"],
Cell[99202, 1975, 6257, 155, 236, "Output",ExpressionUUID->"45834ba5-f30f-4de4-8706-8a17975443f0"]
}, Open  ]],
Cell[105474, 2133, 733, 12, 81, "Text",ExpressionUUID->"f2e0cbbb-208b-4c50-a165-e92c1dc7ff1f"],
Cell[CellGroupData[{
Cell[106232, 2149, 1616, 36, 110, "Code",ExpressionUUID->"ae1e3e82-1ef3-47d9-9fc9-b0678b11ffc5"],
Cell[107851, 2187, 21147, 444, 238, "Output",ExpressionUUID->"364edba6-246d-40b8-a77f-1f3f30159a3f"]
}, Open  ]],
Cell[129013, 2634, 285, 7, 35, "Text",ExpressionUUID->"58e48f20-a5c0-4737-aacf-b3f7f0b1309a"],
Cell[CellGroupData[{
Cell[129323, 2645, 1787, 41, 110, "Code",ExpressionUUID->"b83475a6-19d2-42c8-a772-114f90573450"],
Cell[131113, 2688, 15797, 337, 238, "Output",ExpressionUUID->"94d4e4a3-9182-4a8a-9606-901ab778d067"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146947, 3030, 2396, 52, 129, "Code",ExpressionUUID->"8f91bdcf-1625-4817-9d0e-f7b42fd20392"],
Cell[149346, 3084, 48682, 1008, 221, "Output",ExpressionUUID->"d1a72cf7-becd-4b84-b171-e0245c791c17"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[198077, 4098, 451, 7, 67, "Section",ExpressionUUID->"ea3713b8-fd6f-440e-a8c5-5b34b84550de"],
Cell[CellGroupData[{
Cell[198553, 4109, 547, 11, 72, "Code",ExpressionUUID->"f200a038-9f72-46d6-a566-ef171bc6a8fa"],
Cell[199103, 4122, 6206, 137, 75, "Output",ExpressionUUID->"e9d49599-99ed-435e-92d6-cd4033b51108"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205346, 4264, 970, 22, 82, "Code",ExpressionUUID->"598e3424-247f-4bcf-a15d-924b7e351c5a"],
Cell[206319, 4288, 10461, 225, 106, "Output",ExpressionUUID->"80bf9de6-3f58-4cdf-a25a-4867adc5f008"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216817, 4518, 2371, 51, 108, "Code",ExpressionUUID->"a1147914-39a4-481b-8411-dd8c2a536862"],
Cell[219191, 4571, 24871, 579, 333, "Output",ExpressionUUID->"8515b3a0-7ace-4035-86be-02a80bef717f"]
}, Open  ]],
Cell[244077, 5153, 3659, 78, 162, "Code",ExpressionUUID->"1a78227a-723d-4ba4-9429-b21981a88c42"],
Cell[CellGroupData[{
Cell[247761, 5235, 944, 22, 91, "Code",ExpressionUUID->"854785be-67f3-4c59-89b4-a260423f6032"],
Cell[248708, 5259, 16221, 350, 262, "Output",ExpressionUUID->"0dab1b74-09d2-405f-92f6-4c7cc612e2db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264966, 5614, 1484, 29, 82, "Code",ExpressionUUID->"03c7d746-71a6-4588-98c9-be9a693ad382"],
Cell[266453, 5645, 4716, 105, 75, "Output",ExpressionUUID->"604cbce5-b1f1-42bf-bf43-d674b544b414"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271206, 5755, 1592, 34, 82, "Code",ExpressionUUID->"b567dd33-007a-4e1f-becf-333ecca10e3b"],
Cell[272801, 5791, 4538, 99, 44, "Output",ExpressionUUID->"026e330c-b77b-413f-8f29-0261dc3d4665"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277376, 5895, 1629, 36, 82, "Code",ExpressionUUID->"40679cf5-30d1-436d-95a2-5d8faef8cd8b"],
Cell[279008, 5933, 141196, 2704, 719, "Output",ExpressionUUID->"40535930-2473-4ef7-9df6-ce0995cd3f5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[420241, 8642, 2489, 55, 102, "Code",ExpressionUUID->"11581f65-329d-410a-ac24-6833c354a1d7"],
Cell[422733, 8699, 13341, 320, 169, "Output",ExpressionUUID->"94f1f52b-99d9-478a-a4c7-8430aac7603c"]
}, Open  ]],
Cell[436089, 9022, 321, 7, 35, "Text",ExpressionUUID->"c02d98e3-3590-4475-8233-c6490dcb6164"],
Cell[CellGroupData[{
Cell[436435, 9033, 1592, 35, 61, "Code",ExpressionUUID->"2a30e187-8c35-49e8-a6be-35f312df79d2"],
Cell[438030, 9070, 2984, 69, 75, "Output",ExpressionUUID->"99f98cb5-7b84-4194-be65-887f2e46d642"]
}, Open  ]],
Cell[CellGroupData[{
Cell[441051, 9144, 1271, 27, 82, "Code",ExpressionUUID->"55ad6394-6835-486d-8e35-f5db3e73af49"],
Cell[442325, 9173, 42189, 770, 223, "Output",ExpressionUUID->"05676bcd-628a-4e76-bf1d-f110ed9c7e78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[484551, 9948, 899, 20, 40, "Input",ExpressionUUID->"c9651b25-be6b-43ad-9e0e-be2e49c01c75"],
Cell[485453, 9970, 3237, 69, 44, "Output",ExpressionUUID->"b6763619-1fe2-47d2-b9fc-d07c884ae398"]
}, Open  ]],
Cell[488705, 10042, 1804, 41, 133, "Code",ExpressionUUID->"c4908c34-6d39-4e02-b972-bae473fda647"],
Cell[CellGroupData[{
Cell[490534, 10087, 1246, 28, 110, "Code",ExpressionUUID->"f7ebb62e-9dc1-41ec-9b86-31c33dee4919"],
Cell[491783, 10117, 159274, 3075, 237, "Output",ExpressionUUID->"50ceaa47-f7e9-471a-9fec-1ef96f369fb9"],
Cell[651060, 13194, 40868, 779, 441, "Output",ExpressionUUID->"2aa66354-8ad9-4685-a5b9-11ecac372d7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[691965, 13978, 2732, 59, 121, "Code",ExpressionUUID->"fae9b2f3-b506-4326-8c47-21b82aef6300"],
Cell[694700, 14039, 215897, 4070, 571, "Output",ExpressionUUID->"c16f6f25-dd6b-4d52-9d91-476589f6b216"]
}, Open  ]],
Cell[CellGroupData[{
Cell[910634, 18114, 860, 21, 72, "Code",ExpressionUUID->"b972dd55-394e-4021-96a4-91956cc9ddfe"],
Cell[911497, 18137, 14513, 343, 653, "Output",ExpressionUUID->"fc3ab930-fdea-4ebf-bacf-984ff8ec4e16"]
}, Open  ]],
Cell[926025, 18483, 2499, 58, 148, "Code",ExpressionUUID->"53fe083b-a8c5-4980-a7ba-3539c38b6757"],
Cell[CellGroupData[{
Cell[928549, 18545, 1110, 25, 82, "Code",ExpressionUUID->"f5b0aeba-b69a-4a77-aca1-0e6857c028d0"],
Cell[929662, 18572, 235508, 5742, 517, "Output",ExpressionUUID->"f760969f-f17f-4ff5-baf2-e7a6a4862581"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1165207, 24319, 1126, 23, 82, "Code",ExpressionUUID->"c290ef10-0b0a-4abb-a73d-4f65abefdde9"],
Cell[1166336, 24344, 235347, 5729, 517, "Output",ExpressionUUID->"3cc95904-e4ab-45d2-a1c8-f05ae687cfd7"]
}, Open  ]],
Cell[1401698, 30076, 471, 9, 35, "Text",ExpressionUUID->"32745416-f2c1-479d-85f4-1121d80603ac"],
Cell[CellGroupData[{
Cell[1402194, 30089, 671, 9, 54, "Subsection",ExpressionUUID->"cd5e145e-ec28-4179-a7ec-51353bb8d6bc"],
Cell[1402868, 30100, 780, 18, 35, "Text",ExpressionUUID->"bc552372-f35a-40f5-9d34-1a5943ec1968"],
Cell[1403651, 30120, 277780, 4559, 300, 127597, 2096, "CachedBoxData", "BoxData", "Text",ExpressionUUID->"1af6d8a6-9e37-472c-acf6-9ebdfc012c82"],
Cell[CellGroupData[{
Cell[1681456, 34683, 432, 10, 72, "Code",ExpressionUUID->"55b94054-18b9-43c6-96b9-516a50b84042"],
Cell[1681891, 34695, 20173, 399, 82, "Output",ExpressionUUID->"8c25fa16-54b9-402d-99c0-ae49b415315b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1702101, 35099, 481, 10, 72, "Code",ExpressionUUID->"3bb6b93a-6332-45d5-8593-0954f4b7f01a"],
Cell[1702585, 35111, 192222, 3682, 625, "Output",ExpressionUUID->"2dcd9516-0be0-4c4d-861f-933ecf411eb9"]
}, Open  ]],
Cell[1894822, 38796, 442, 8, 35, "Text",ExpressionUUID->"256cdcdd-7726-4d63-bfc5-94fa15a5c787"],
Cell[CellGroupData[{
Cell[1895289, 38808, 485, 11, 30, "Input",ExpressionUUID->"28fe6a11-8b37-4fc5-a63a-039cb982db90"],
Cell[1895777, 38821, 82835, 1527, 607, "Output",ExpressionUUID->"966dd986-d94b-42d3-b8af-57ac22cc4dc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1978649, 40353, 1386, 30, 110, "Code",ExpressionUUID->"1502f7a9-807c-4ef4-ab61-f3d1be624930"],
Cell[1980038, 40385, 11868, 187, 393, "Output",ExpressionUUID->"1be0abf6-fcd3-47f3-9510-863a15b86a09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1991943, 40577, 651, 16, 72, "Code",ExpressionUUID->"d4240925-4ebb-4554-8dc3-3e6ebad5cc14"],
Cell[1992597, 40595, 82702, 1525, 598, "Echo",ExpressionUUID->"833befe6-a0fc-4bd2-8a97-49ef20529e6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2075336, 42125, 2013, 48, 167, "Code",ExpressionUUID->"5b61a357-80ea-4ed7-b5d0-6a9f36ea40af"],
Cell[2077352, 42175, 267737, 5461, 641, "Output",ExpressionUUID->"dcdc7023-2414-4aec-a300-d4397d4ecaf9"]
}, Open  ]],
Cell[2345104, 47639, 4126, 89, 205, "Code",ExpressionUUID->"523b16d0-7042-4821-9396-829f8aa505eb"],
Cell[2349233, 47730, 1521, 34, 129, "Code",ExpressionUUID->"d4687d34-ffa1-44b9-bd5d-c70cb78b5bbe"],
Cell[CellGroupData[{
Cell[2350779, 47768, 1742, 29, 91, "Code",ExpressionUUID->"9f036c28-6e40-4667-9217-9996e555de10"],
Cell[2352524, 47799, 31035, 561, 428, "Output",ExpressionUUID->"07dc1681-0184-41d5-9d51-dad01a84a901"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2383620, 48367, 602, 9, 67, "Section",ExpressionUUID->"2c6db4e6-6699-4015-b87c-9e964cfb7ffa"],
Cell[2384225, 48378, 324, 7, 35, "Text",ExpressionUUID->"ba0c7ef3-ec27-4f12-81a1-03510e8a3179"],
Cell[CellGroupData[{
Cell[2384574, 48389, 14746, 359, 72, "WolframAlphaShortInput",ExpressionUUID->"966944e4-3e43-410a-870a-7983e7d14330"],
Cell[2399323, 48750, 399, 8, 43, "Output",ExpressionUUID->"c7a1f518-5ea2-41ee-b6b5-7e94fa9f88cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2399759, 48763, 897, 19, 77, "Code",ExpressionUUID->"98c38f7a-6fd5-4aed-9815-08c826e491ba"],
Cell[2400659, 48784, 6726, 141, 106, "Output",ExpressionUUID->"28517850-dadd-4f47-9374-19678ccf914f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2407422, 48930, 373, 8, 72, "Code",ExpressionUUID->"5a544558-2d60-4cb4-9101-197ac662ce88"],
Cell[2407798, 48940, 96074, 1782, 587, "Output",ExpressionUUID->"5077b6a2-6dc1-4555-85c3-1f7859f90161"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2503909, 50727, 1027, 23, 72, "Code",ExpressionUUID->"ac29d305-d79e-49d7-8cd8-6f69fc24b259"],
Cell[2504939, 50752, 18301, 392, 346, "Output",ExpressionUUID->"c11a8791-d423-409d-b234-86e40893ad8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2523277, 51149, 1018, 24, 102, "Code",ExpressionUUID->"959e9392-df77-4d4c-a7b8-8b73dcf10ade"],
Cell[2524298, 51175, 1246, 29, 44, "Output",ExpressionUUID->"ca929de6-9219-472c-aa05-95e770d704a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2525581, 51209, 795, 16, 72, "Code",ExpressionUUID->"81d04324-e8f2-4f24-b768-fd3aff770766"],
Cell[2526379, 51227, 105087, 1965, 717, "Output",ExpressionUUID->"56671f07-0f3f-43c2-9388-d7022d059562"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2631503, 53197, 1395, 28, 110, "Code",ExpressionUUID->"a8baeccc-8c10-44a2-a084-55e988af868e"],
Cell[2632901, 53227, 68005, 1492, 657, "Output",ExpressionUUID->"b64fc1ce-92ac-4fc0-890e-6d14867bb9d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2700943, 54724, 1142, 26, 82, "Code",ExpressionUUID->"1b604b5c-29ec-40a0-b06f-7415c4d4b84c"],
Cell[2702088, 54752, 17811, 442, 256, "Output",ExpressionUUID->"3e92cf16-a47a-47f6-9e42-d8db1e1c59eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2719936, 55199, 1658, 37, 72, "Code",ExpressionUUID->"f85a093f-2e4b-43be-9428-193b4be0858c"],
Cell[2721597, 55238, 141620, 2906, 773, "Output",ExpressionUUID->"699d256f-6f43-4aa6-b76f-d4a01996c1e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2863254, 58149, 1274, 26, 72, "Code",ExpressionUUID->"81e31c0f-096e-4f0b-83fc-a4405b47ee43"],
Cell[2864531, 58177, 206806, 4930, 667, "Output",ExpressionUUID->"492cee49-474a-488d-8fe8-c626bda1afe5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3071374, 63112, 1301, 29, 82, "Code",ExpressionUUID->"b84e0270-92f3-490b-b2bd-2ecbd8d1ca64"],
Cell[3072678, 63143, 4680, 116, 106, "Output",ExpressionUUID->"7d2deed9-b50c-4505-b11b-93e7feeecdb8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3077395, 63264, 1073, 25, 52, "Code",ExpressionUUID->"29dab3f7-ae15-4e15-b2f8-89507366aecc"],
Cell[3078471, 63291, 52567, 1078, 420, "Output",ExpressionUUID->"dd1c12fc-7100-4af6-a1c8-5785c0aa7caa"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

